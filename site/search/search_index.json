{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlusterFS Documentation","text":"<p>GlusterFS is a scalable network filesystem suitable for data-intensive tasks such as cloud storage and media streaming. GlusterFS is free and open source software and can utilize common off-the-shelf hardware. To learn more, please see the Gluster project home page.</p> <p>Get Started: Quick Start/Installation Guide</p> <p>Since Gluster can be used in different ways and for different tasks, it would be difficult to explain everything at once. We recommend that you follow the Quick Start Guide first. By utilizing a number of virtual machines, you will create a functional test setup to learn the basic concepts. You will then be much better equipped to read the more detailed Install Guide.</p> <ul> <li> <p>Quick Start Guide - Start here if you are new to Gluster!</p> </li> <li> <p>Installation Guides describes the prerequisites and provides step-by-instructions to install GlusterFS on various operating systems.</p> </li> <li> <p>Presentations related to Gluster from Conferences and summits.</p> </li> </ul> <p>More Documentation</p> <ul> <li> <p>Administration Guide - describes the configuration and management of GlusterFS.</p> </li> <li> <p>GlusterFS Developer Guide - describes how you can contribute to this open source project; built through the efforts of its dedicated, passionate community.</p> </li> <li> <p>Upgrade Guide - if you need to upgrade from an older version of GlusterFS.</p> </li> <li> <p>Release Notes - Glusterfs Release Notes provides high-level insight into the improvements and additions that have been implemented in various Glusterfs releases.</p> </li> <li> <p>GlusterFS Tools - Guides for GlusterFS tools.</p> </li> <li> <p>Troubleshooting Guide - Guide for troubleshooting.</p> </li> </ul> <p>How to Contribute?</p> <p>The Gluster documentation has its home on GitHub, and the easiest way to contribute is to use the \"Edit on GitHub\" link on the top right corner of each page. If you already have a GitHub account, you can simply edit the document in your browser, use the preview tab, and submit your changes for review in a pull request.</p> <p>If you want to help more with Gluster documentation, please subscribe to the Gluster Users and Gluster Developers mailing lists, and share your ideas with the Gluster developer community.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>Access Control Lists : Access Control Lists (ACLs) allow you to assign different permissions for different users or groups even though they do not correspond to the original owner or the owning group.</p> <p>Block Storage : Block special files, or block devices, correspond to devices through which the system moves data in the form of blocks. These device nodes often represent addressable devices such as hard disks, CD-ROM drives, or memory regions. GlusterFS requires a filesystem (like XFS) that supports extended attributes.</p> <p>Brick : A Brick is the basic unit of storage in GlusterFS, represented by an export directory on a server in the trusted storage pool. A brick is expressed by combining a server with an export directory in the following format:</p> <pre><code>SERVER:EXPORT\nFor example:\nmyhostname:/exports/myexportdir/\n</code></pre> <p>Client : Any machine that mounts a GlusterFS volume. Any applications that use libgfapi access mechanism can also be treated as clients in GlusterFS context.</p> <p>Cluster : A trusted pool of linked computers working together, resembling a single computing resource. In GlusterFS, a cluster is also referred to as a trusted storage pool.</p> <p>Distributed File System : A file system that allows multiple clients to concurrently access data which is spread across servers/bricks in a trusted storage pool. Data sharing among multiple locations is fundamental to all distributed file systems.</p> <p>Extended Attributes : Extended file attributes (abbreviated xattr) is a filesystem feature that enables users/programs to associate files/dirs with metadata. Gluster stores metadata in xattrs.</p> <p>Filesystem : A method of storing and organizing computer files and their data. Essentially, it organizes these files into a database for the storage, organization, manipulation, and retrieval by the computer's operating system.</p> <p>Source Wikipedia</p> <p>FUSE : Filesystem in Userspace (FUSE) is a loadable kernel module for Unix-like computer operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces. Source: Wikipedia</p> <p>GFID : Each file/directory on a GlusterFS volume has a unique 128-bit number associated with it called the GFID. This is analogous to inode in a regular filesystem.</p> <p>glusterd : The Gluster daemon/service that manages volumes and cluster membership. It is required to run on all the servers in the trusted storage pool.</p> <p>Geo-Replication : Geo-replication provides a continuous, asynchronous, and incremental replication service from site to another over Local Area Networks (LANs), Wide Area Network (WANs), and across the Internet.</p> <p>Infiniband InfiniBand is a switched fabric computer network communications link used in high-performance computing and enterprise data centers.</p> <p>Metadata : Metadata is defined as data providing information about one or more other pieces of data. There is no special metadata storage concept in GlusterFS. The metadata is stored with the file data itself usually in the form of extended attributes</p> <p>Namespace : A namespace is an abstract container or environment created to hold a logical grouping of unique identifiers or symbols. Each Gluster volume exposes a single namespace as a POSIX mount point that contains every file in the cluster.</p> <p>Node : A server or computer that hosts one or more bricks.</p> <p>N-way Replication : Local synchronous data replication which is typically deployed across campus or Amazon Web Services Availability Zones.</p> <p>Petabyte : A petabyte (derived from the SI prefix peta- ) is a unit of information equal to one quadrillion (short scale) bytes, or 1000 terabytes. The unit symbol for the petabyte is PB. The prefix peta- (P) indicates a power of 1000:</p> <pre><code>1 PB = 1,000,000,000,000,000 B = 10005 B = 1015 B.\n\nThe term \"pebibyte\" (PiB), using a binary prefix, is used for the\ncorresponding power of 1024.\n</code></pre> <p>Source: Wikipedia</p> <p>POSIX : Portable Operating System Interface (for Unix) is the name of a family of related standards specified by the IEEE to define the application programming interface (API), along with shell and utilities interfaces for software compatible with variants of the Unix operating system Gluster exports a POSIX compatible file system.</p> <p>Quorum : The configuration of quorum in a trusted storage pool determines the number of server failures that the trusted storage pool can sustain. If an additional failure occurs, the trusted storage pool becomes unavailable.</p> <p>Quota : Quota allows you to set limits on usage of disk space by directories or by volumes.</p> <p>RAID : Redundant Array of Inexpensive Disks (RAID) is a technology that provides increased storage reliability through redundancy, combining multiple low-cost, less-reliable disk drives components into a logical unit where all drives in the array are interdependent.</p> <p>RDMA : Remote direct memory access (RDMA) is a direct memory access from the memory of one computer into that of another without involving either one's operating system. This permits high-throughput, low-latency networking, which is especially useful in massively parallel computer clusters</p> <p>Rebalance : The process of redistributing data in a distributed volume when a brick is added or removed.</p> <p>RRDNS : Round Robin Domain Name Service (RRDNS) is a method to distribute load across application servers. It is implemented by creating multiple A records with the same name and different IP addresses in the zone file of a DNS server.</p> <p>Samba : Samba allows file and print sharing between computers running Windows and computers running Linux. It is an implementation of several services and protocols including SMB and CIFS.</p> <p>Scale-Up Storage : Increases the capacity of the storage device in a single dimension. For example, adding additional disk capacity to an existing trusted storage pool.</p> <p>Scale-Out Storage : Scale out systems are designed to scale on both capacity and performance. It increases the capability of a storage device in single dimension. For example, adding more systems of the same size, or adding servers to a trusted storage pool that increases CPU, disk capacity, and throughput for the trusted storage pool.</p> <p>Self-Heal : The self-heal daemon that runs in the background, identifies inconsistencies in files/dirs in a replicated or erasure coded volume and then resolves or heals them. This healing process is usually required when one or more bricks of a volume goes down and then comes up later.</p> <p>Server : The machine (virtual or bare metal) that hosts the bricks in which data is stored.</p> <p>Split-brain : A situation where data on two or more bricks in a replicated volume start to diverge in terms of content or metadata. In this state, one cannot determine programmatically which set of data is \"right\" and which is \"wrong\".</p> <p>Subvolume : A brick after being processed by at least one translator.</p> <p>Translator : Translators (also called xlators) are stackable modules where each module has a very specific purpose. Translators are stacked in a hierarchical structure called as graph. A translator receives data from its parent translator, performs necessary operations and then passes the data down to its child translator in hierarchy.</p> <p>Trusted Storage Pool : A storage pool is a trusted network of storage servers. When you start the first server, the storage pool consists of that server alone.</p> <p>Userspace : Applications running in user space don\u2019t directly interact with hardware, instead using the kernel to moderate access. Userspace applications are generally more portable than applications in kernel space. Gluster is a user space application.</p> <p>Virtual File System (VFS) : VFS is a kernel software layer which handles all system calls related to the standard Linux file system. It provides a common interface to several kinds of file systems.</p> <p>Volume : A volume is a logical collection of bricks.</p> <p>Vol file : Vol files or volume (.vol) files are configuration files that determine the behavior of the Gluster trusted storage pool. It is a textual representation of a collection of modules (also known as translators) that together implement the various functions required.</p>"},{"location":"security/","title":"Security","text":"<p>This document is to be considered a \"work in progress\" until this message is removed.</p> <p>Reporting security issues</p> <p>Please report any security issues you find in Gluster projects to: security at gluster.org</p> <p>Anyone can post to this list. The subscribers are only trusted individuals who will handle the resolution of any reported security issues in confidence. In your report, please note how you would like to be credited for discovering the issue and the details of any embargo you would like to impose. </p> <p>[need to check if this holds]</p> <p>Currently, the security response teams for the following distributions are subscribed to this list and will respond to your report:</p> <p>Fedora Red Hat</p> <p>Handling security issues</p> <p>If you represent a Gluster project or a distribution which packages Gluster projects, you are welcome to subscribe to the security at gluster.org mailing list. Your subscription will only be approved if you can demonstrate that you will handle issues in confidence and properly credit reporters for discovering issues. A second mailing list exists for discussion of embargoed security issues:</p> <p>security-private at gluster.org</p> <p>You will be invited to subscribe to this list if you are subscribed to security at gluster.org.</p> <p>Security advisories</p> <p>The security advisories page lists all security vulnerabilities fixed in Gluster.</p> <p>[need to check if this holds]</p>"},{"location":"Administrator-Guide/","title":"Administration Guide","text":"<ol> <li> <p>Managing a Cluster</p> <ul> <li>Managing the Gluster Service</li> <li>Managing Trusted Storage Pools</li> </ul> </li> <li> <p>Setting Up Storage</p> <ul> <li>Brick Naming Conventions</li> <li>Formatting and Mounting Bricks</li> <li>POSIX Access Control Lists</li> </ul> </li> <li> <p>Setting Up Clients</p> <ul> <li>Handling of users that belong to many groups</li> </ul> </li> <li> <p>Volumes</p> <ul> <li>Setting Up Volumes</li> <li>Managing Volumes</li> <li>Modifying .vol files with a filter</li> </ul> </li> <li> <p>Configuring NFS-Ganesha</p> </li> <li> <p>Features</p> <ul> <li>Replication</li> <li>Geo Replication</li> <li>Quotas</li> <li>Snapshots</li> <li>Trash</li> <li>io_uring</li> </ul> </li> <li> <p>Data Access With Other Interfaces</p> <ul> <li>Managing Object Store</li> <li>Accessing GlusterFS using Cinder Hosts</li> <li>GlusterFS with Keystone</li> <li>Install Gluster on Top of ZFS</li> <li>Configuring Bareos to store backups on Gluster</li> </ul> </li> <li> <p>GlusterFS Service Logs and Locations</p> </li> <li> <p>Monitoring Workload</p> </li> <li> <p>Securing GlusterFS Communication using SSL</p> </li> <li> <p>Puppet Gluster</p> </li> <li> <p>RDMA Transport</p> </li> <li> <p>GlusterFS iSCSI</p> </li> <li> <p>Linux Kernel Tuning</p> </li> <li> <p>Export and Netgroup Authentication</p> </li> <li> <p>Thin Arbiter volumes</p> </li> <li> <p>Trash for GlusterFS</p> </li> <li> <p>Split brain and ways to deal with it</p> </li> <li> <p>Arbiter volumes and quorum options</p> </li> <li> <p>Mandatory Locks</p> </li> <li> <p>GlusterFS coreutilities</p> </li> <li> <p>Events APIs</p> </li> <li> <p>Building QEMU With gfapi For Debian Based Systems</p> </li> <li> <p>Appendices</p> <ul> <li>Network Configuration Techniques</li> <li>Performance Testing</li> </ul> </li> <li>Tuning Volume Options</li> </ol>"},{"location":"Administrator-Guide/Access-Control-Lists/","title":"POSIX Access Control Lists","text":"<p>POSIX Access Control Lists (ACLs) allows you to assign different permissions for different users or groups even though they do not correspond to the original owner or the owning group.</p> <p>For example: User john creates a file but does not want to allow anyone to do anything with this file, except another user, antony (even though there are other users that belong to the group john).</p> <p>This means, in addition to the file owner, the file group, and others, additional users and groups can be granted or denied access by using POSIX ACLs.</p>"},{"location":"Administrator-Guide/Access-Control-Lists/#activating-posix-acls-support","title":"Activating POSIX ACLs Support","text":"<p>To use POSIX ACLs for a file or directory, the partition of the file or directory must be mounted with POSIX ACLs support.</p>"},{"location":"Administrator-Guide/Access-Control-Lists/#activating-posix-acls-support-on-server","title":"Activating POSIX ACLs Support on Server","text":"<p>To mount the backend export directories for POSIX ACLs support, use the following command:</p> <pre><code>mount -o acl\n</code></pre> <p>For example:</p> <pre><code>mount -o acl /dev/sda1 /export1\n</code></pre> <p>Alternatively, if the partition is listed in the /etc/fstab file, add the following entry for the partition to include the POSIX ACLs option:</p> <pre><code>LABEL=/work /export1 ext3 rw, acl 14\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#activating-posix-acls-support-on-client","title":"Activating POSIX ACLs Support on Client","text":"<p>To mount the glusterfs volumes for POSIX ACLs support, use the following command:</p> <pre><code>mount \u2013t glusterfs -o acl\n</code></pre> <p>For example:</p> <pre><code>mount -t glusterfs -o acl 198.192.198.234:glustervolume /mnt/gluster\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#setting-posix-acls","title":"Setting POSIX ACLs","text":"<p>You can set two types of POSIX ACLs, that is, access ACLs and default ACLs. You can use access ACLs to grant permission for a specific file or directory. You can use default ACLs only on a directory but if a file inside that directory does not have an ACLs, it inherits the permissions of the default ACLs of the directory.</p> <p>You can set ACLs for per user, per group, for users not in the user group for the file, and via the effective right mask.</p>"},{"location":"Administrator-Guide/Access-Control-Lists/#setting-access-acls","title":"Setting Access ACLs","text":"<p>You can apply access ACLs to grant permission for both files and directories.</p> <p>To set or modify Access ACLs</p> <p>You can set or modify access ACLs use the following command:</p> <pre><code>setfacl \u2013m  file\n</code></pre> <p>The ACL entry types are the POSIX ACLs representations of owner, group, and other.</p> <p>Permissions must be a combination of the characters <code>r</code> (read), <code>w</code> (write), and <code>x</code> (execute). You must specify the ACL entry in the following format and can specify multiple entry types separated by commas.</p> ACL Entry Description u:uid:\\&lt;permission&gt; Sets the access ACLs for a user. You can specify user name or UID g:gid:\\&lt;permission&gt; Sets the access ACLs for a group. You can specify group name or GID. m:\\&lt;permission&gt; Sets the effective rights mask. The mask is the combination of all access permissions of the owning group and all of the user and group entries. o:\\&lt;permission&gt; Sets the access ACLs for users other than the ones in the group for the file. <p>If a file or directory already has a POSIX ACLs, and the setfacl command is used, the additional permissions are added to the existing POSIX ACLs or the existing rule is modified.</p> <p>For example, to give read and write permissions to user antony:</p> <pre><code>setfacl -m u:antony:rw /mnt/gluster/data/testfile\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#setting-default-acls","title":"Setting Default ACLs","text":"<p>You can apply default ACLs only to directories. They determine the permissions of a file system objects that inherits from its parent directory when it is created.</p> <p>To set default ACLs</p> <p>You can set default ACLs for files and directories using the following command:</p> <pre><code>setfacl \u2013m \u2013-set\n</code></pre> <p>Permissions must be a combination of the characters r (read), w (write), and x (execute). Specify the ACL entry_type as described below, separating multiple entry types with commas.</p> <p>u:user_name:permissions Sets the access ACLs for a user. Specify the user name, or the UID.</p> <p>g:group_name:permissions Sets the access ACLs for a group. Specify the group name, or the GID.</p> <p>m:permission Sets the effective rights mask. The mask is the combination of all access permissions of the owning group, and all user and group entries.</p> <p>o:permissions Sets the access ACLs for users other than the ones in the group for the file.</p> <p>For example, to set the default ACLs for the /data directory to read for users not in the user group:</p> <pre><code>setfacl \u2013m --set o::r /mnt/gluster/data\n</code></pre> <p>Note</p> <p>An access ACLs set for an individual file can override the default ACLs permissions.</p> <p>Effects of a Default ACLs</p> <p>The following are the ways in which the permissions of a directory's default ACLs are passed to the files and subdirectories in it:</p> <ul> <li>A subdirectory inherits the default ACLs of the parent directory   both as its default ACLs and as an access ACLs.</li> <li>A file inherits the default ACLs as its access ACLs.</li> </ul>"},{"location":"Administrator-Guide/Access-Control-Lists/#retrieving-posix-acls","title":"Retrieving POSIX ACLs","text":"<p>You can view the existing POSIX ACLs for a file or directory.</p> <p>To view existing POSIX ACLs</p> <ul> <li>View the existing access ACLs of a file using the following command:</li> </ul> <pre><code>getfacl\n</code></pre> <p>For example, to view the existing POSIX ACLs for sample.jpg</p> <pre><code>getfacl /mnt/gluster/data/test/sample.jpg\n</code></pre> <pre><code>owner: antony\ngroup: antony\nuser::rw-\ngroup::rw-\nother::r--\n</code></pre> <ul> <li>View the default ACLs of a directory using the following command:</li> </ul> <pre><code>getfacl\n</code></pre> <p>For example, to view the existing ACLs for /data/doc</p> <pre><code>getfacl /mnt/gluster/data/doc\n</code></pre> <pre><code>owner: antony\ngroup: antony\nuser::rw-\nuser:john:r--\ngroup::r--\nmask::r--\nother::r--\ndefault:user::rwx\ndefault:user:antony:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#removing-posix-acls","title":"Removing POSIX ACLs","text":"<p>To remove all the permissions for a user, groups, or others, use the following command:</p> <pre><code>setfacl -x\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#setfaclentry_type-options","title":"setfaclentry_type Options","text":"<p>The ACL entry_type translates to the POSIX ACL representations of owner, group, and other.</p> <p>Permissions must be a combination of the characters r (read), w (write), and x (execute). Specify the ACL entry_type as described below, separating multiple entry types with commas.</p> <p>u:user_name Sets the access ACLs for a user. Specify the user name, or the UID.</p> <p>g:group_name Sets the access ACLs for a group. Specify the group name, or the GID.</p> <p>m:permission Sets the effective rights mask. The mask is the combination of all access permissions of the owning group, and all user and group entries.</p> <p>o:permissions Sets the access ACLs for users other than the ones in the group for the file.</p> <p>For example, to remove all permissions from the user antony:</p> <pre><code>setfacl -x u:antony /mnt/gluster/data/test-file\n</code></pre>"},{"location":"Administrator-Guide/Access-Control-Lists/#samba-and-acls","title":"Samba and ACLs","text":"<p>If you are using Samba to access GlusterFS FUSE mount, then POSIX ACLs are enabled by default. Samba has been compiled with the <code>--with-acl-support</code> option, so no special flags are required when accessing or mounting a Samba share.</p>"},{"location":"Administrator-Guide/Access-Control-Lists/#nfs-and-acls","title":"NFS and ACLs","text":"<p>Currently GlusterFS supports POSIX ACL configuration through NFS mount, i.e. setfacl and getfacl commands work through NFS mount.</p>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/","title":"Accessing Gluster volume via SMB Protocol","text":"<p>Layered product Samba is used to export the Gluster volume and ctdb for providing the high availability Samba. Here are the steps to configure Highly Available Samba cluster to export Gluster volume.</p> <p>Note: These configuration steps are applicable to Samba version = 4.1. and Gluster Version &gt;= 3.7. ctdb &gt;= 2.5</p>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/#step-1-choose-the-servers-that-will-export-the-gluster-volume","title":"Step 1: Choose the servers that will export the Gluster volume.","text":"<p>The servers may/may not be part of the trusted storage pool. Preferable number of servers is &lt;=4. Install Samba and ctdb packages on these servers.</p>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/#step-2-enabledisable-the-auto-export-of-gluster-volume-via-smb","title":"Step 2: Enable/Disable the auto export of Gluster volume via SMB","text":"<pre><code># gluster volume set VOLNAME user.smb disable/enable\n</code></pre>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/#step-3-setup-the-ctdb-cluster","title":"Step 3: Setup the CTDB Cluster:","text":"<ol> <li> <p>Create a ctdb meta volume with replica N, N being the number of the     servers that are used as Samba servers. This volume will host only     a zero byte lock file, hence choose the minimal sized bricks. To     create the n replica volume run the following command:</p> <pre><code> # gluster volume create &lt;volname&gt; replica n &lt;ipaddr/host name&gt;:/&lt;brick_patch&gt;.... N times\n</code></pre> </li> <li> <p>In the following files, replace \"all\" in the statement \"META=all\"     to the newly created volume name.</p> <pre><code> /var/lib/glusterd/hooks/1/start/post/S29CTDBsetup.sh\n /var/lib/glusterd/hooks/1/stop/pre/S29CTDB-teardown.sh\n</code></pre> </li> <li> <p>Start the ctdb volume</p> <pre><code># gluster vol start &lt;volname&gt;\n</code></pre> </li> <li> <p>Verify the following:</p> <ul> <li> <p>If the following lines are added in smb.conf file in all the   nodes running samba/ctdb:</p> <pre><code>clustering = yes\nidmap backend = tdb2\n</code></pre> </li> <li> <p>If the ctdb volume is mounted at <code>/gluster/lock</code> on all the   nodes that runs ctdb/samba</p> </li> <li>If the mount entry for ctdb volume is added in <code>/etc/fstab</code></li> <li>If file <code>/etc/sysconfig/ctdb</code> exists on all the nodes that runs   ctdb/samba</li> </ul> </li> <li> <p>Create <code>/etc/ctdb/nodes</code> files on all the nodes that runs ctdb/samba,     and add the IPs of all these nodes in the file. For example,</p> <pre><code> # cat /etc/ctdb/nodes\n 10.16.157.0\n 10.16.157.3\n 10.16.157.6\n 10.16.157.8\n</code></pre> <p>The IPs listed here are the private IPs of Samba/ctdb servers, which should be a private non-routable subnet and are only used for internal cluster traffic. For more details refer to the ctdb man page.</p> </li> <li> <p>Create <code>/etc/ctdb/public_addresses</code> files on all the nodes that runs     ctdb/samba, and add the virtual IPs in the following format:</p> <pre><code> &lt;virtual IP&gt;&lt;routing prefix&gt; &lt;node interface&gt;\n</code></pre> <p>Eg:</p> <pre><code> # cat /etc/ctdb/public_addresses\n 192.168.1.20/24 eth0\n 192.168.1.21/24 eth0\n</code></pre> </li> <li> <p>Either uncomment <code>CTDB_SAMBA_SKIP_SHARE_CHECK=yes</code> or add     <code>CTDB_SAMBA_SKIP_SHARE_CHECK=yes</code> in its absence inside     <code>/etc/ctdb/script.options</code> to disable checking of the shares by     ctdb.</p> </li> <li> <p>If SELinux is enabled and enforcing, try the following command if     ctdb fails.</p> <pre><code> # setsebool -P use_fusefs_home_dirs 1\n # setsebool -P samba_load_libgfapi 1\n</code></pre> </li> </ol>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/#step-4-performance-tunings-before-exporting-the-volume","title":"Step 4: Performance tunings before exporting the volume","text":"<ol> <li> <p>To ensure lock and IO coherency:</p> <pre><code># gluster volume set VOLNAME storage.batch-fsync-delay-usec 0\n</code></pre> </li> <li> <p>If using Samba 4.X version add the following line in smb.conf in     the global section</p> <pre><code> kernel share modes = no\n kernel oplocks = no\n map archive = no\n map hidden = no\n map read only = no\n map system = no\n store dos attributes = yes\n</code></pre> <p>Note: Setting 'store dos attributes = no' is recommended if archive/hidden/read-only dos attributes are not used. This can give better performance.</p> </li> <li> <p>If you are using gluster5 or higher execute the following to     improve performance:</p> <pre><code> # gluster volume set VOLNAME group samba\n</code></pre> <p>On older version, please execute the following:</p> <pre><code> # gluster volume set VOLNAME features.cache-invalidation on\n # gluster volume set VOLNAME features.cache-invalidation-timeout 600\n # gluster volume set VOLNAME performance.cache-samba-metadata on\n # gluster volume set VOLNAME performance.stat-prefetch on\n # gluster volume set VOLNAME performance.cache-invalidation on\n # gluster volume set VOLNAME performance.md-cache-timeout 600\n # gluster volume set VOLNAME network.inode-lru-limit 200000\n # gluster volume set VOLNAME performance.nl-cache on\n # gluster volume set VOLNAME performance.nl-cache-timeout 600\n # gluster volume set VOLNAME performance.readdir-ahead on\n # gluster volume set VOLNAME performance.parallel-readdir on\n</code></pre> </li> <li> <p>Tune the number of threads in gluster for better performance:</p> <pre><code># gluster volume set VOLNAME client.event-threads 4\n# gluster volume set VOLNAME server.event-threads 4 # Increasing to a very high value will reduce the performance\n</code></pre> </li> </ol>"},{"location":"Administrator-Guide/Accessing-Gluster-from-Windows/#step-5-mount-the-volume-using-smb","title":"Step 5: Mount the volume using SMB","text":"<ol> <li> <p>If no Active directory setup add the user on all the samba server     and set the password</p> <pre><code> # adduser USERNAME\n # smbpasswd -a USERNAME\n</code></pre> </li> <li> <p>Start the ctdb, smb and other related services:</p> <pre><code># systemctl re/start ctdb\n# ctdb status\n# ctdb ip\n# ctdb ping -n all\n</code></pre> </li> <li> <p>To verify if the volume exported by samba can be accessed by a     user:</p> <pre><code> # smbclient //&lt;hostname&gt;/gluster-&lt;volname&gt; -U &lt;username&gt;%&lt;password&gt;\n</code></pre> </li> <li> <p>To mount on a linux system:</p> <pre><code> # mount -t cifs -o user=&lt;username&gt;,pass=&lt;password&gt; //&lt;Virtual IP&gt;/gluster-&lt;volname&gt; /&lt;mountpoint&gt;\n</code></pre> <p>To mount on Windows system:</p> <pre><code> &gt;net use &lt;device:&gt; \\\\&lt;Virtual IP&gt;\\gluster-&lt;volname&gt;\n</code></pre> <p>OR</p> <pre><code> \\\\&lt;Virtual IP&gt;\\gluster-&lt;volname&gt;\n</code></pre> <p>from windows explorer.</p> </li> </ol>"},{"location":"Administrator-Guide/Automatic-File-Replication/","title":"Replication","text":"<p>This doc contains information about the synchronous replication module in gluster and has two sections</p> <ul> <li>Replication logic</li> <li>Self-heal logic.</li> </ul>"},{"location":"Administrator-Guide/Automatic-File-Replication/#1-replication-logic","title":"1. Replication logic","text":"<p>AFR is the module (translator) in glusterfs that provides all the features that you would expect of any synchronous replication system:</p> <ol> <li>Simultaneous updating of all copies of data on the replica bricks when a client modifies it.</li> <li>Providing continued data availability to clients when say one brick of the replica set goes down.</li> <li>Automatic self-healing of any data that was modified when the brick that was down, once it comes back up, ensuring consistency of data on all the bricks of the replica.</li> </ol> <p>1 and 2 are in the I/O path while 3 is done either in the I/O path (in the background) or via the self-heal daemon.</p> <p>Each gluster translator implements what are known as File Operations (FOPs) which are mapped to the I/O syscalls which the application makes. For example, AFR has afr_writev that gets invoked when application does a write(2). As is obvious, all FOPs fall into one of 2 types:</p> <p>i) Read based FOPs which only get informtion from and don\u2019t modify the file in any way.</p> <p>viz: afr_readdir, afr_access, afr_stat, afr_fstat, afr_readlink, afr_getxattr, afr_fgetxattr, afr_readv,afr_seek</p> <p>ii) Write based FOPs which change the file or its attributes.</p> <p>viz: afr_create, afr_mknod,afr_mkdir,afr_link, afr_symlink, afr_rename, afr_unlink, afr_rmdir, afr_do_writev, afr_truncate, afr_ftruncate, afr_setattr, afr_fsetattr, afr_setxattr, afr_fsetxattr, afr_removexattr, afr_fremovexattr, afr_fallocate, afr_discard, afr_zerofill, afr_xattrop, afr_fxattrop, afr_fsync.</p> <p>AFR follows a transaction model for both types of FOPs.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#read-transactions","title":"Read transactions:","text":"<p>For every file in the replica, AFR has an in-memory notion/array called \u2018readables\u2019 which indicate whether each brick of the replica is a good copy or a bad one (i.e. in need of a heal). In a healthy state, all bricks are readable and a read FOP will be served from any one of the readable bricks. The read-hash-mode volume option decides which brick is the chosen one.</p> <pre><code>gluster volume set help | grep read-hash-mode -A7\n</code></pre> <pre><code>Option: cluster.read-hash-mode\nDefault Value: 1\nDescription: inode-read fops happen only on one of the bricks in replicate. AFR will prefer the one computed using the method specified using this option.\n0 = first readable child of AFR, starting from 1st child.\n1 = hash by GFID of file (all clients use same subvolume).\n2 = hash by GFID of file and client PID.\n3 = brick having the least outstanding read requests.\n</code></pre> <p>If the brick is bad for a given file (i.e. it is pending heal), then it won\u2019t be marked readable to begin with. The readables array is populated based on the on-disk AFR xattrs for the file during lookup. These xattrs indicate which bricks are good and which ones are bad. We will see more about these xattrs in the write transactions section below. If the FOP fails on the chosen readable brick, AFR attempts it on the next readable one, until all are exhausted. If the FOP doesn\u2019t succeed on any of the readables, then the application receives an error.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#write-transactions","title":"Write transactions:","text":"<p>Every write based FOP employs a write transaction model which consists of 5 phases:</p> <p>1) The lock phase Take locks on the file being modified on all bricks so that AFRs of other clients are blocked if they try to modify the same file simultaneously.</p> <p>2) The pre-op phase Increment the \u2018dirty\u2019 xattr (trusted.afr.dirty) by 1 on all participating bricks as an indication of an impending FOP (in the next phase)</p> <p>3) The FOP phase Perform the actual FOP (say a setfattr) on all bricks.</p> <p>4) The post-op phase Decrement the dirty xattr by 1 on bricks where the FOP was successful. In addition, also increment the \u2018pending\u2019 xattr (trusted.afr.$VOLNAME-client-x) xattr on the success bricks to \u2018blame\u2019 the bricks where the FOP failed.</p> <p>5) The unlock phase Release the locks that were taken in phase 1. Any competing client can now go ahead with its own write transaction.</p> <p>Note: There are certain optimizations done at the code level which reduce the no. of lock/unlock phases done for a transaction by piggybacking on the previous transaction\u2019s locks. These optimizations (eager-locking, piggybacking and delayed post-op) beyond the scope of this post.</p> <p>AFR returns sucess for these FOPs only if they meet quorum. For replica 2, this means it needs to suceed on any one brick. For replica 3, it is two out of theree and so on.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#more-on-the-afr-xattrs","title":"More on the AFR xattrs:","text":"<p>We saw that AFR modifies the dirty and pending xattrs in the pre-op and post-op phases. To be more precise, only parts of the xattr are modified in a given transaction. Which bytes are modified depends on the type of write transaction which the FOP belongs to.</p> Transaction Type FOPs that belong to it AFR_DATA_TRANSACTION afr_writev, afr_truncate, afr_ftruncate, afr_fsync, afr_fallocate, afr_discard, afr_zerofill AFR_METADATA_TRANSACTION afr_setattr, afr_fsetattr, afr_setxattr, afr_fsetxattr, afr_removexattr, afr_fremovexattr, afr_xattrop, afr_fxattrop AFR_ENTRY_TRANSACTION afr_create, afr_mknod, afr_mkdir, afr_link, afr_symlink, afr_rename, afr_unlink, afr_rmdir <p>Stop here and convince yourself that given a write based FOP, you can say which one of the 3 transaction types it belongs to.</p> <p>Note: In the code, there is also a AFR_ENTRY_RENAME_TRANSACTION (used by afr_rename) but it is safe to assume that it is identical to AFR_ENTRY_TRANSACTION as far as interpreting the xattrs are concerned.</p> <p>Consider the xttr: <code>trusted.afr.dirty=0x000000000000000000000000</code> The first 4 bytes of the xattr are used for data transactions, the next 4 bytes for metadata transactions and the last 4 for entry transactions. Let us see some examples of how the xattr would look like for various types of FOPs during a transaction:</p> FOP Value after pre-op phase Value after post-op phase afr_writev trusted.afr.dirty=0x00000001 00000000 00000000 trusted.afr.dirty=0x00000000 00000000 00000000 afr_setattr trusted.afr.dirty=0x00000000 00000001 00000000 trusted.afr.dirty=0x00000000 00000000 00000000 afr_create trusted.afr.dirty=0x00000000 00000000 00000001 trusted.afr.dirty=0x00000000 00000000 00000000 <p>Thus depending on the type of FOP (i.e. data/ metadata/ entry transaction), different set of bytes of the dirty xattr get incremented/ decremented. Modification of the pending xattr also follows the same pattern, execept it is incremented only in the post-op phase if the FOP fails on some bricks.</p> <p>Example: Let us say a write was performed on a file, say FILE1, on replica 3 volume called \u2018testvol\u2019. Suppose the lock and pre-op phase succeeded on all bricks. After that the 3rd brick went down, and the transaction completed successfully on the first 2 bricks. What will be the state of the afr xattrs on all bricks?</p> <pre><code># getfattr -d -m . -e hex /bricks/brick1/FILE1 | grep afr\ngetfattr: Removing leading '/' from absolute path names\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.afr.testvol-client-2=0x000000010000000000000000\n</code></pre> <pre><code># getfattr -d -m . -e hex /bricks/brick2/FILE1 | grep afr\ngetfattr: Removing leading '/' from absolute path names\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.afr.testvol-client-2=0x000000010000000000000000\n</code></pre> <pre><code># getfattr -d -m . -e hex /bricks/brick3/FILE1 | grep afr\ngetfattr: Removing leading '/' from absolute path names\ntrusted.afr.dirty=0x000000010000000000000000\n</code></pre> <p>So Brick3 will still have the dirty xattr set because it went down before the post-op had a chance to decrement it. Bricks 1 and 2 will have a zero dirty xattr and in addition, a non-zero pending xattr set. The client-2 in trusted.afr.testvol-client-2 indicates that the 3rd brick is bad and has some pending data operations.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#2-self-heal-logic","title":"2. Self-heal logic.","text":"<p>We already know that AFR increments and/or decrements the dirty (i.e. <code>trusted.afr.dirty</code>) and pending (i.e. <code>trusted.afr.$VOLNAME-client-x</code>) xattrs during the different phases of the transaction. For a given file (or directory), an all zero value of these xattrs or the total absence of these xattrs on all bricks of the replica mean the file is healthy and does not need heal. If any of these xattrs are non-zero even on one of the bricks, then the file is a candidate for heal- it as simple as that.</p> <p>When we say these xattrs are non-zero, it is in the context of no on-going I/O going from client(s) on the file. Otherwise the non-zero values that one observes might be transient as the write transaction is progressing through its five phases. Of course, as an admin, you wouldn\u2019t need to figure out all of this. Just running the <code>heal info</code> set of commands should give you the list of files that need heal.</p> <p>So if self-heal observes a file with non-zero xattrs, it does the following steps:</p> <ol> <li>Fetch the afr xattrs, examine which set of 8 bytes are non-zero and determine the corresponding heals that are needed on the file \u2013 i.e. data heal/ metadata heal/ entry heal.</li> <li>Determine which bricks are good (a.k.a. \u2018sources\u2019) and which ones are bad (a.k.a. \u2018sinks\u2019) for each of those heals by interpretting the xattr values.</li> <li>Pick one source brick and heal the file on to all the sink bricks.</li> <li>If the heal is successful, reset the afr xattrs to zero.</li> </ol> <p>This is a rather simplified description and I have omitted details about various locks that each of these steps need to take because self-heal and client I/O can happen in parallel on the file. Or even multiple self-heal daemons (described later) can attempt to heal the same file.</p> <p>Data heal: Happens only for files. The contents of the file are copied from the source to the sink bricks.</p> <p>Entry heal: Happens only for directories. Entries (i.e. files and subdirs) under a given directory are deleted from the sinks if they are not present in the source. Likewise, entries are created on the sinks if they are present in the source.</p> <p>Metadata heal: Happens for both files and directories. File ownership, file permissions and extended attributes are copied from the source to the sink bricks.</p> <p>It can be possible that for a given file, one set of bricks can be the source for data heal while another set could be the source for metadata heals. It all depends on which FOPs failed on what bricks and therefore what set of bytes are non-zero for the afr xattrs.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#when-do-self-heals-happen","title":"When do self-heals happen?","text":"<p>There are two places from which the steps described above for healing can be carried out:</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#i-from-the-client-side","title":"i) From the client side.","text":"<p>Client-side heals are triggered when the file is accessed from the client (mount). AFR uses a monotonically increasing generation number to keep track of disconnect/connect of its children (i.e. the client translators) to the bricks. When this \u2018event generation\u2019 number changes, the file\u2019s inode is marked as a candidate for refresh. When the next FOP comes on such an inode, a refresh is triggered to update the readables during which a heal is launched (if the AFR xattrs indicate that a heal is needed, that is). This heal happens in the background, meaning it does not block the actual FOP which will continue as usual post the refresh. Specific client-side heals can be turned off by disabling the 3 corresponding volume options:</p> <pre><code>cluster.metadata-self-heal\ncluster.data-self-heal\ncluster.entry-self-heal\n</code></pre> <p>The number of client-side heals that happen in the background can be tuned via the following volume options:</p> <pre><code>background-self-heal-count\nheal-wait-queue-length\n</code></pre> <p>See the <code>gluster volume set help</code> for more information on all the above options.</p> <p>Name heal: Name heal is just healing of the file/directory name when it is accessed. For example, say a file is created and written to when a brick is down and all the 3 client side heals are disabled. When the brick comes up and the next I/O comes on it, the file name is created on it as a part of lookup. Its contents/metadata are not healed though. Name heal cannot be disabled. It is there to ensure that the namespace is consistent on all bricks as soon as the file is accessed.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#ii-by-the-self-heal-daemon","title":"ii) By the self-heal daemon.","text":"<p>There is a self-heal daemon process (glutershd) that runs on every node of the trusted storage pool. It is a light weight client process consisting mainly of AFR ant the protocol/client translators. It can talk to all bricks of all the replicate volume(s) of the pool. It periodically crawls (every 10 minutes by default; tunable via the <code>heal-timeout</code> volume option) the list of files that need heal and does their healing. As you can see, client side heal is done upon file access but glustershd processes the heal backlog pro-actively.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#index-heal","title":"Index heal:","text":"<p>But how does glustershd know which files it needs to heal? Where does it get the list from? So in part-1, while we saw the five phases of the AFR write transaction, we left out one detail:</p> <ul> <li>In the pre-op phase, in addition to marking the dirty xattr, each brick also stores the gfid string of the file inside its <code>.glusterfs/indices/dirty</code> directory.</li> <li>Likewise, in the post-op phase, it removes the gfid string from its <code>.glusterfs/indices/dirty</code> If addition, if the write failed on some brick, the good bricks will stores the gfid string inside the <code>.glusterfs/indices/xattrop</code> directory.</li> </ul> <p>Thus when no I/O is happening on a file and you still find its gfid inside <code>.glusterfs/indices/dirty</code> of a particular brick, it means the brick went down before the post-op phase. If you find the gfid inside <code>.glusterfs/indices/xattrop</code>, it means the write failed on some other brick and this brick has captured it.</p> <p>The glustershd simply reads the list of entries inside <code>.glusterfs/indices/*</code> and triggers heal on them. This is referred to as index heal. While this happens automcatically every heal-timeout seconds, we can also manaully trigger it via the CLI using <code>gluster volume heal $VOLNAME</code> .</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#full-heal","title":"Full heal:","text":"<p>A full heal, triggered from the CLI with <code>gluster volume heal $VOLNAME full</code>, does just what the name implies. It does not process a particular list of entries like index heal, but crawls the whole gluster filesystem beginning with root, examines if files have non zero afr xattrs and triggers heal on them.</p>"},{"location":"Administrator-Guide/Automatic-File-Replication/#of-missing-xattrs-and-split-brains","title":"Of missing xattrs and split-brains:","text":"<p>You might now realise how AFR pretty much relies on its xattr values of a given file- from using it to find the good copies to serve a read to finding out the source and sink bricks to heal the file. But what if there is inconsistency in data/metadata of a file and</p> <p>(a) there are zero/ no AFR xattrs (or)</p> <p>(b) if the xattrs all blame each other (i.e. no good copy=&gt;split-brain)?</p> <p>For (a), AFR uses heuristics like picking a local (to that specfic glustershd process) brick, picking the bigger file, picking the file with latest ctime etc. and then does the heal.</p> <p>For (b) you need to resort to using the gluster split-brain resolution CLI or setting the favorite-child-policy volume option to choose a good copy and trigger the heal.</p>"},{"location":"Administrator-Guide/Bareos/","title":"Configuring Bareos to store backups on Gluster","text":"<p>This description assumes that you already have a Gluster environment ready and configured. The examples use <code>storage.example.org</code> as a Round Robin DNS name that can be used to contact any of the available GlusterD processes. The Gluster Volume that is used, is called <code>backups</code>. Client systems would be able to access the volume by mounting it with FUSE like this:</p> <pre><code>mount -t glusterfs storage.example.org:/backups /mnt\n</code></pre> <p>Bareos contains a plugin for the Storage Daemon that uses <code>libgfapi</code>. This makes it possible for Bareos to access the Gluster Volumes without the need to have a FUSE mount available.</p> <p>Here we will use one server that is dedicated for doing backups. This system is called <code>backup.example.org</code>. The Bareos Director is running on this host, together with the Bareos Storage Daemon. In the example, there is a File Daemon running on the same server. This makes it possible to backup the Bareos Director, which is useful as a backup of the Bareos database and configuration is kept that way.</p>"},{"location":"Administrator-Guide/Bareos/#bareos-installation","title":"Bareos Installation","text":"<p>An absolute minimal Bareos installation needs a Bareos Director and a Storage Daemon. In order to backup a filesystem, a File Daemon needs to be available too. For the description in this document, CentOS-7 was used, with the following packages and versions:</p> <ul> <li>glusterfs-3.7.4</li> <li>bareos-14.2 with bareos-storage-glusterfs</li> </ul> <p>The Gluster Storage Servers do not need to have any Bareos packages installed. It is often better to keep applications (Bareos) and storage servers on different systems. So, when the Bareos repository has been configured, install the packages on the <code>backup.example.org</code> server:</p> <pre><code>yum install bareos-director bareos-database-sqlite3 \\\n                bareos-storage-glusterfs bareos-filedaemon \\\n                bareos-bconsole\n</code></pre> <p>To keep things as simple as possible, SQlite it used. For production deployments either MySQL or PostgrSQL is advised. It is needed to create the initial database:</p> <pre><code>sqlite3 /var/lib/bareos/bareos.db &lt; /usr/lib/bareos/scripts/ddl/creates/sqlite3.sql\nchown bareos:bareos /var/lib/bareos/bareos.db\n</code></pre> <p>The <code>bareos-bconsole</code> package is optional. <code>bconsole</code> is a terminal application that can be used to initiate backups, check the status of different Bareos components and the like. Testing the configuration with <code>bconsole</code> is relatively simple.</p> <p>Once the packages are installed, you will need to start and enable the daemons:</p> <pre><code>systemctl start bareos\u00adsd\nsystemctl start bareos\u00adfd\nsystemctl start bareos\u00addir\nsystemctl enable bareos\u00adsd\nsystemctl enable bareos\u00adfd\nsystemctl enable bareos\u00addir\n</code></pre>"},{"location":"Administrator-Guide/Bareos/#gluster-volume-preparation","title":"Gluster Volume preparation","text":"<p>There are a few steps needed to allow Bareos to access the Gluster Volume. By default Gluster does not allow clients to connect from an unprivileged port. Because the Bareos Storage Daemon does not run as root, permissions to connect need to be opened up.</p> <p>There are two processes involved when a client accesses a Gluster Volume. For the initial phase, GlusterD is contacted, when the client received the layout of the volume, the client will connect to the bricks directly. The changes to allow unprivileged processes to connect, are therefore twofold:</p> <ol> <li>In <code>/etc/glusterfs/glusterd.vol</code> the option <code>rpc-auth-allow-insecure on</code>    needs to be added on all storage servers. After the modification of the    configuration file, the GlusterD process needs to be restarted with    <code>systemctl restart glusterd</code>.</li> <li>The brick processes for the volume are configured through a volume option.    By executing <code>gluster volume set backups server.allow-insecure on</code> the    needed option gets set. Some versions of Gluster require a volume stop/start    before the option is taken into account, for these versions you will need to    execute <code>gluster volume stop backups</code> and <code>gluster volume start backups</code>.</li> </ol> <p>Except for the network permissions, the Bareos Storage Daemon needs to be allowed to write to the filesystem provided by the Gluster Volume. This is achieved by setting normal UNIX permissions/ownership so that the right user/group can write to the volume:</p> <pre><code>mount -t glusterfs storage.example.org:/backups /mnt\nmkdir /mnt/bareos\nchown bareos:bareos /mnt/bareos\nchmod ug=rwx /mnt/bareos\numount /mnt\n</code></pre> <p>Depending on how users/groups are maintained in the environment, the <code>bareos</code> user and group may not be available on the storage servers. If that is the case, the <code>chown</code> command above can be adapted to use the <code>uid</code> and <code>gid</code> of the <code>bareos</code> user and group from <code>backup.example.org</code>. On the Bareos server, the output would look similar to:</p> <pre><code># id bareos\nuid=998(bareos) gid=997(bareos) groups=997(bareos),6(disk),30(tape)\n</code></pre> <p>And that makes the <code>chown</code> command look like this:</p> <pre><code>chown 998:997 /mnt/bareos\n</code></pre>"},{"location":"Administrator-Guide/Bareos/#bareos-configuration","title":"Bareos Configuration","text":"<p>When <code>bareos-storage-glusterfs</code> got installed, an example configuration file has been added too. The <code>/etc/bareos/bareos-sd.d/device-gluster.conf</code> contains the <code>Archive Device</code> directive, which is a URL for the Gluster Volume and path where the backups should get stored. In our example, the entry should get set to:</p> <pre><code>Device {\n    Name = GlusterStorage\n    Archive Device = gluster://storage.example.org/backups/bareos\n    Device Type = gfapi\n    Media Type = GlusterFile\n    ...\n}\n</code></pre> <p>The default configuration of the Bareos provided jobs is to write backups to <code>/var/lib/bareos/storage</code>. In order to write all the backups to the Gluster Volume instead, the configuration for the Bareos Director needs to be modified. In the <code>/etc/bareos/bareos-dir.conf</code> configuration, the defaults for all jobs can be changed to use the <code>GlusterFile</code> storage:</p> <pre><code>JobDefs {\n    Name = \"DefaultJob\"\n    ...\n  #   Storage = File\n    Storage = GlusterFile\n    ...\n}\n</code></pre> <p>After changing the configuration files, the Bareos daemons need to apply them. The easiest to inform the processes of the changed configuration files is by instructing them to <code>reload</code> their configuration:</p> <pre><code># bconsole\nConnecting to Director backup:9101\n1000 OK: backup-dir Version: 14.2.2 (12 December 2014)\nEnter a period to cancel a command.\n*reload\n</code></pre> <p>With <code>bconsole</code> it is also possible to check if the configuration has been applied. The <code>status</code> command can be used to show the URL of the storage that is configured. When all is setup correctly, the result looks like this:</p> <pre><code>*status storage=GlusterFile\nConnecting to Storage daemon GlusterFile at backup:9103\n...\nopen.\n...\n</code></pre>"},{"location":"Administrator-Guide/Bareos/#create-your-first-backup","title":"Create your first backup","text":"<p>There are several default jobs configured in the Bareos Director. One of them is the <code>DefaultJob</code> which was modified in an earlier step. This job uses the <code>SelfTest</code> FileSet, which backups <code>/usr/sbin</code>. Running this job will verify if the configuration is working correctly. Additional jobs, other FileSets and more File Daemons (clients that get backed up) can be added later.</p> <pre><code>*run\nA job name must be specified.\nThe defined Job resources are:\n        1: BackupClient1\n        2: BackupCatalog\n        3: RestoreFiles\nSelect Job resource (1-3): 1\nRun Backup job\nJobName:  BackupClient1\nLevel:    Incremental\nClient:   backup-fd\n...\nOK to run? (yes/mod/no): yes\nJob queued. JobId=1\n</code></pre> <p>The job will need a few seconds to complete, the <code>status</code> command can be used to show the progress. Once done, the <code>messages</code> command will display the result:</p> <pre><code>*messages\n...\n    JobId:                  1\n    Job:                    BackupClient1.2015-09-30_21.17.56_12\n    ...\n    Termination:            Backup OK\n</code></pre> <p>The archive that contains the backup will be located on the Gluster Volume. To check if the file is available, mount the volume on a storage server:</p> <pre><code>mount -t glusterfs storage.example.org:/backups /mnt\nls /mnt/bareos\n</code></pre>"},{"location":"Administrator-Guide/Bareos/#further-reading","title":"Further Reading","text":"<p>This document intends to provide a quick start of configuring Bareos to use Gluster as a storage backend. Bareos can be configured to create backups of different clients (which run a File Daemon), run jobs at scheduled time and intervals and much more. The excellent Bareos documentation can be consulted to find out how to create backups in a much more useful way than can get expressed on this page.</p>"},{"location":"Administrator-Guide/Brick-Naming-Conventions/","title":"Brick Naming Conventions","text":"<p>FHS-2.3 isn't entirely clear on where data shared by the server should reside. It does state that \"/srv contains site-specific data which is served by this system\", but is GlusterFS data site-specific?</p> <p>The consensus seems to lean toward using <code>/data</code>. A good hierarchical method for placing bricks is:</p> <pre><code>/data/glusterfs/&lt;volume&gt;/&lt;brick&gt;/brick\n</code></pre> <p>In this example, <code>&lt;brick&gt;</code> is the filesystem that is mounted.</p>"},{"location":"Administrator-Guide/Brick-Naming-Conventions/#example-one-brick-per-server","title":"Example: One Brick Per Server","text":"<p>A physical disk /dev/sdb is going to be used as brick storage for a volume you're about to create named myvol1. You've partitioned and formatted /dev/sdb1 with XFS on each of 4 servers.</p> <p>On all 4 servers:</p> <pre><code>mkdir -p /data/glusterfs/myvol1/brick1\nmount /dev/sdb1 /data/glusterfs/myvol1/brick1\n</code></pre> <p>We're going to define the actual brick in the <code>brick</code> directory on that filesystem. This helps by causing the brick to fail to start if the XFS filesystem isn't mounted.</p> <p>On just one server:</p> <pre><code>gluster volume create myvol1 replica 2 server{1..4}:/data/glusterfs/myvol1/brick1/brick\n</code></pre> <p>This will create the volume myvol1 which uses the directory <code>/data/glusterfs/myvol1/brick1/brick</code> on all 4 servers.</p>"},{"location":"Administrator-Guide/Brick-Naming-Conventions/#example-two-bricks-per-server","title":"Example: Two Bricks Per Server","text":"<p>Two physical disks /dev/sdb and /dev/sdc are going to be used as brick storage for a volume you're about to create named myvol2. You've partitioned and formatted /dev/sdb1 and /dev/sdc1 with XFS on each of 4 servers.</p> <p>On all 4 servers:</p> <pre><code>mkdir -p /data/glusterfs/myvol2/brick{1,2}\nmount /dev/sdb1 /data/glusterfs/myvol2/brick1\nmount /dev/sdc1 /data/glusterfs/myvol2/brick2\n</code></pre> <p>Again we're going to define the actual brick in the <code>brick</code> directory on these filesystems.</p> <p>On just one server:</p> <pre><code>gluster volume create myvol2 replica 2 \\\n  server{1..4}:/data/glusterfs/myvol2/brick1/brick \\\n  server{1..4}:/data/glusterfs/myvol2/brick2/brick\n</code></pre> <p>Note: It might be tempting to try <code>gluster volume create myvol2 replica 2 server{1..4}:/data/glusterfs/myvol2/brick{1,2}/brick</code> but Bash would expand the last <code>{}</code> first, so you would end up replicating between the two bricks on each servers, instead of across servers.</p>"},{"location":"Administrator-Guide/Building-QEMU-With-gfapi-For-Debian-Based-Systems/","title":"Building QEMU With gfapi For Debian Based Systems","text":"<p>This how-to has been tested on Ubuntu 13.10 in a clean, up to date environment. Older Ubuntu distros required some hacks if I remembered rightly. Other Debian based distros should be able to follow this adjusting for dependencies. Please update this if you get it working on another distro.</p>"},{"location":"Administrator-Guide/Building-QEMU-With-gfapi-For-Debian-Based-Systems/#satisfying-dependencies","title":"Satisfying dependencies","text":"<p>Make the first stab at getting qemu dependencies</p> <pre><code>apt-get  build-dep qemu\n</code></pre> <p>This next command grabs all the dependencies specified in the debian control file as asked for from upstream Debian sid You can look into the options specified there and adjust to taste.</p> <pre><code># get almost all the rest and the tools to work up the Debian magic\napt-get install devscripts quilt libiscsi-dev libusbredirparser-dev libssh2-1-dev libvdeplug-dev libjpeg-dev glusterfs*\n</code></pre> <p>we need a newer version of libseccomp for Ubuntu 13.10</p> <pre><code>mkdir libseccomp\ncd libseccomp\n\n# grab it from upstream sid\nwget http://ftp.de.debian.org/debian/pool/main/libs/libseccomp/libseccomp_2.1.0+dfsg.orig.tar.gz\nwget http://ftp.de.debian.org/debian/pool/main/libs/libseccomp/libseccomp_2.1.0+dfsg-1.debian.tar.gz\n\n# get it ready\ntar xf libseccomp_2.1.0+dfsg.orig.tar.gz\ncd libseccomp-2.1.0+dfsg/\n\n# install the debian magic\ntar xf ../libseccomp_2.1.0+dfsg-1.debian.tar.gz\n\n# apply series files if any\nwhile quilt push; do quilt refresh; done\n\n# build debs, they will appear one directory up\ndebuild -i -us -uc -b\ncd ..\n\n# install it\ndpkg -i *.deb\n</code></pre>"},{"location":"Administrator-Guide/Building-QEMU-With-gfapi-For-Debian-Based-Systems/#building-qemu","title":"Building QEMU","text":"<p>This next part is straightforward if your dependencies are met. For the advanced reader look around debian/control once it is extracted before you install as you may want to change what options QEMU is built with and what targets are requested.</p> <pre><code>cd ..\nmkdir qemu\ncd qemu\n\n# download our sources. you'll want to check back frequently on these for changes\nwget http://ftp.de.debian.org/debian/pool/main/q/qemu/qemu_1.7.0+dfsg.orig.tar.xz\nwget http://ftp.de.debian.org/debian/pool/main/q/qemu/qemu_1.7.0+dfsg-2.debian.tar.gz\nwget http://download.gluster.org/pub/gluster/glusterfs/3.4/LATEST/glusterfs-3.4.2.tar.gz\ntar xf glusterfs-3.4.2.tar.gz\ntar xf qemu_1.7.0+dfsg.orig.tar.xz\ncd qemu-1.7.0+dfsg/\n\n# unpack the debian magic\ntar xf ../qemu_1.7.0+dfsg-2.debian.tar.gz\n\n# bring glusterfs in to the buiild\ncp -r ../glusterfs-3.4.2 glusterfs\n\n# the glusterfs check in configure looks around weird. I've never asked why but moving the src stuff up one works and tests fine\ncd glusterfs/api/\nmv src/* .\ncd ../..\n\n#you'll need to edit debian/control to enable glusterfs replacing\n\n  - ##--enable-glusterfs todo\n  + # --enable-glusterfs\n  + glusterfs-common (&gt;= 3.4.0),\n\n#And finally build. It'll take ages.  http://xkcd.com/303/\n# apply series if any\nwhile quilt push; do quilt refresh; done\n\n# build packages\ndebuild -i -us -uc -b\ncd ..\n</code></pre> <p>Your debs now available to install. It is up to the reader to determine what targets they want installed.</p>"},{"location":"Administrator-Guide/Consul/","title":"Consul and GlusterFS integration","text":"<p>Consul is used for service discovery and configuration.</p> <p>It consists of consul server and agents connecting to it. Apps can get configuration data from consul via HTTP API or DNS queries.</p> <p>Long story short, instead of using standard hostnames and relying on official DNS servers which we may not control, we can use consul to resolve hosts with services under <code>.consul</code> domain, which turns this classic setup:</p> <pre><code>mount -t glusterfs -o backupvolfile-server=gluster-poc-02 gluster-poc-01:/g0 /mnt/gluster/g0\n</code></pre> <p>into more convenient entry:</p> <pre><code>mount -t glusterfs gluster.service.consul:/g0 /mnt/gluster/g0\n</code></pre> <p>which is especially useful when using image-based servers without further provisioning, and spreading load across all healthy servers registered in consul.</p>"},{"location":"Administrator-Guide/Consul/#warning","title":"Warning","text":"<p>In this document you will get a proof-of-concept basic setup - gluster servers and gluster clients configured, which should be a point to expand. You should read Further steps section to harden it.</p> <p>Tested on:</p> <ul> <li>isolated virtual network</li> <li>selinux permissive (yay!)</li> <li>consul server/agents version <code>v0.7.5</code></li> <li>gluster servers with glusterfs 3.8.x on CentOS 7.3 + samba 4 with simple auth and vfs gluster module</li> <li>gluster volume set as distributed-replicated + 'features.shard: true' and 'features.shard-block-size: 512MB'</li> <li>gluster agents with glusterfs 3.8.x on Ubuntu 14.04</li> <li>gluster agents with glusterfs 3.8.x on CentOS 7.3</li> <li>gluster agents with glusterfs 3.7.x on CentOS 5.9</li> <li>Windows 2012R2 connected to gluster servers via samba</li> </ul>"},{"location":"Administrator-Guide/Consul/#scenario","title":"Scenario","text":"<p>We want to create shared storage accessible via different operating systems - Linux and Windows.</p> <ul> <li>we do not control DNS server so we cannot add/remove entries on gluster server add/remove</li> <li>gluster servers are in the gluster pool and have gluster volume created named <code>g0</code></li> <li>gluster servers have consul agent installed, and they will register to consul as <code>gluster</code> service</li> <li>gluster servers have also SMB installed with very simple setup using gluster vfs plugin</li> <li>gluster client have consul agent installed, and they will use <code>gluster.service.consul</code> as entry point.</li> <li>DNS resolution under Linux will be handled via dnsmasq</li> <li>DNS resolution under Windows will be handled via consul itself</li> </ul>"},{"location":"Administrator-Guide/Consul/#known-limitations","title":"Known limitations","text":"<ul> <li>consul health checks introduce delay, also remember that consul can cache DNS entries to increase performance</li> <li>the way Windows share works is that it will connect to one of the samba servers, if this server die then transfers are   aborted, and we must retry operation, but watch out for delay.</li> <li>anything other than gluster volume distributed-replicated was not tested - it may not work for Windows.</li> </ul>"},{"location":"Administrator-Guide/Consul/#requirements","title":"Requirements","text":"<ul> <li>you should have consul server (or cluster) up and running, and the best, also accessible via default HTTP port.</li> <li>you should have gluster servers already joined in the gluster pool, bricks and volume configured.</li> <li>check you firewall rules for outbound and inbound for DNS, gluster, samba, consul</li> <li>make yourself familiar with consul documentation (or specific branch on github)</li> </ul>"},{"location":"Administrator-Guide/Consul/#linux-setup","title":"Linux setup","text":""},{"location":"Administrator-Guide/Consul/#consul-agent-on-linux-on-gluster-clients","title":"Consul agent on Linux on gluster clients","text":"<p>First, install consul agent. The best way is to use for example puppet module In general your Linux boxes should register in the consul server and be visible under <code>Nodes</code> section.</p> <p>To verify if consul agent is working properly, you can query its DNS interface, asking it to list consul servers:</p> <pre><code>\n[centos@gluster-poc-01]# dig consul.service.consul 127.0.0.1:8600\n\n; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-38.el7_3.3 &lt;&lt;&gt;&gt; consul.service.consul 127.0.01:8600\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 39354\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;consul.service.consul.     IN  A\n\n;; ANSWER SECTION:\nconsul.service.consul.  0   IN  A   172.30.64.198\nconsul.service.consul.  0   IN  A   172.30.82.255\nconsul.service.consul.  0   IN  A   172.30.81.155\n\n;; Query time: 1 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Sat May 20 08:50:21 UTC 2017\n;; MSG SIZE  rcvd: 87\n\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 22224\n;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;127.0.0.1:8600.            IN  A\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Sat May 20 08:50:21 UTC 2017\n;; MSG SIZE  rcvd: 32\n</code></pre> <p>Now, to be able to use it on system level, we want it to work without specifying port. We can achieve it with running consul on port 53 (not advised), or redirecting network traffic from port 53 to 8600 or proxy it via local DNS resolver - for example use locally installed dnsmasq.</p> <p>First, install dnsmasq, and add file <code>/etc/dnsmasq.d/10-consul</code>:</p> <pre><code>server=/consul/127.0.0.1#8600\n</code></pre> <p>This will ensure that any <code>*.consul</code> requests will be forwarded to local consul listening on its default DNS port 8600.</p> <p>Make sure that <code>/etc/resolv.conf</code> contains <code>nameserver 127.0.0.1</code>. Under Debian distros it should be there, under RedHat - not really. You can fix this in two ways, choose on your onw which one to apply:</p> <ul> <li>add <code>nameserver 127.0.0.1</code> to <code>/etc/resolvconf/resolv.conf.d/header</code></li> </ul> <p>or</p> <ul> <li>update <code>/etc/dhcp/dhclient.conf</code> and add to it line <code>prepend domain-name-servers 127.0.0.1;</code>.</li> </ul> <p>In both cases it ensures that dnsmasq will be a first nameserver, and requires reloading resolver or networking.</p> <p>Eventually you should have <code>nameserver 127.0.0.1</code> set as first entry in <code>/etc/resolv.conf</code> and have DNS resolving consul entries:</p> <pre><code>\n[centos@gluster-poc-01]# dig consul.service.consul\n\n; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-38.el7_3.3 &lt;&lt;&gt;&gt; consul.service.consul\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 42571\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;consul.service.consul.     IN  A\n\n;; ANSWER SECTION:\nconsul.service.consul.  0   IN  A   172.30.64.198\nconsul.service.consul.  0   IN  A   172.30.82.255\nconsul.service.consul.  0   IN  A   172.30.81.155\n\n;; Query time: 1 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Sat May 20 09:01:12 UTC 2017\n;; MSG SIZE  rcvd: 87\n\n</code></pre> <p>From now on we should be able to use <code>&lt;servicename&gt;.service.consul</code> in places, where we had FQDN entries of the single servers.</p> <p>Next, we must define gluster service consul on the servers.</p>"},{"location":"Administrator-Guide/Consul/#consul-agent-on-linux-on-gluster-servers","title":"Consul agent on Linux on gluster servers","text":"<p>Install consul agent as described in previous section.</p> <p>You can define consul services as <code>gluster</code> to run health checks, to do that we must add consul to sudoers or allow it executing certain sudo commands without password:</p> <p><code>/etc/sudoers.d/99-consul.conf</code>:</p> <pre><code>consul ALL=(ALL) NOPASSWD: /sbin/gluster pool list\n</code></pre> <p>First, lets define service in consul, it will be very basic, without volume names. Service name <code>gluster</code>, with default port 24007, and we will tag it as <code>gluster</code> and <code>server</code>.</p> <p>Our service will have service health checks every 10s:</p> <ul> <li>check if the gluster service is responding to TCP on 24007 port</li> <li>check if the gluster server is connected to other peers in the pool (to avoid registering as healthy service which is actaully not serving anything)</li> </ul> <p>Below is an example of <code>/etc/consul/service_gluster.json</code>:</p> <pre><code>{\n  \"service\": {\n    \"address\": \"\",\n    \"checks\": [\n      {\n        \"interval\": \"10s\",\n        \"tcp\": \"localhost:24007\",\n        \"timeout\": \"5s\"\n      },\n      {\n        \"interval\": \"10s\",\n        \"script\": \"/bin/bash -c \\\"sudo -n /sbin/gluster pool list |grep -v UUID|grep -v localhost|grep Connected\\\"\",\n        \"timeout\": \"5s\"\n      }\n    ],\n    \"enableTagOverride\": false,\n    \"id\": \"gluster\",\n    \"name\": \"gluster\",\n    \"port\": 24007,\n    \"tags\": [\"gluster\", \"server\"]\n  }\n}\n</code></pre> <p>Restart consul service and you should see gluster servers in consul web ui. After a while service should be in healthy stage and be available under nslookup:</p> <pre><code>[centos@gluster-poc-02]# nslookup gluster.service.consul\nServer:     127.0.0.1\nAddress:    127.0.0.1#53\n\nName:   gluster.service.consul\nAddress: 172.30.64.144\nName:   gluster.service.consul\nAddress: 172.30.65.61\n</code></pre> <p>Notice that gluster server can be also gluster client, for example if we want to mount gluster volume on the servers.</p>"},{"location":"Administrator-Guide/Consul/#mounting-gluster-volume-under-linux","title":"Mounting gluster volume under Linux","text":"<p>As a moutpoint we would usually select one of the gluster servers, and another as backup server, like this:</p> <pre><code>mount -t glusterfs -o backupvolfile-server=gluster-poc-02 gluster-poc-01:/g0 /mnt/gluster/g0\n</code></pre> <p>This is a bit inconvenient, for example we have an image with hardcoded hostnames, and old servers are gone due to maintenance. We would have to recreate image, or reconfigure existing nodes if they unmount gluster storage.</p> <p>To mitigate that issue we can now use consul for fetching the server pool:</p> <pre><code>mount -t glusterfs gluster.service.consul:/g0 /mnt/gluster/g0\n</code></pre> <p>So we can populate that to <code>/etc/fstab</code> or one of the <code>autofs</code> files.</p>"},{"location":"Administrator-Guide/Consul/#windows-setup","title":"Windows setup","text":""},{"location":"Administrator-Guide/Consul/#configuring-gluster-servers-as-samba-shares","title":"Configuring gluster servers as samba shares","text":"<p>This is the simplest and not so secure setup, you have been warned.</p> <p>Proper setup suggests using LDAP or CTDB. You can configure it with puppet using module kakwa-samba.</p> <p>First, we want to reconfigure gluster servers so that they serve as samba shares using user/pass credentials, which is separate to Linux credentials.</p> <p>We assume that accessing windows share will be done as user <code>steve</code> with password <code>steve-loves-bacon</code>, make sure you create that user on each gluster server host.</p> <pre><code>sudo adduser steve\nsudo smbpasswd -a steve\n</code></pre> <p>Notice that if you do not set <code>user.smb = disable</code> in gluster volume then it may auto-add itself to samba configuration. So better disable this by executing:</p> <pre><code>gluster volume get g0 user.smb disable\n</code></pre> <p>Now install <code>samba</code> and <code>samba-vfs-glusterfs</code> packages and configure <code>/etc/samba/smb.conf</code>:</p> <pre><code>[global]\nworkgroup = test\nsecurity = user\nmin protocol = SMB2\nnetbios name = gluster\nrealm = test\nvfs objects = acl_xattr\nmap acl inherit = Yes\nstore dos attributes = Yes\nlog level = 1\ndedicated keytab file = /etc/krb5.keytab\nmap untrusted to domain = Yes\n\n[vfs-g0]\nguest only = no\nwritable = yes\nguest ok = no\nforce user = steve\ncreate mask = 0666\ndirectory mask = 0777\ncomment = Gluster via VFS (native gluster)\npath = /\nvfs objects = glusterfs\nglusterfs:volume = g0\nkernel share modes = no\nglusterfs:loglevel = 7\nglusterfs:logfile = /var/log/samba/glusterfs-g0.%M.log\nbrowsable = yes\nforce group = steve\n</code></pre> <p>Some notes:</p> <ul> <li>when using vfs plugin then <code>path</code> is a relative path via gluster volume.</li> <li><code>kernel share modes = no</code> may be required to make it work.</li> </ul> <p>We can also use classic fuse mount and use it under samba as share path, then configuration is even simpler.</p> <p>For detailed description between those two solutions see gluster vfs blog posts.</p> <ul> <li>Remember to add user steve to samba with a password</li> <li>unblock firewall ports for samba</li> <li>test samba config and reload samba</li> </ul>"},{"location":"Administrator-Guide/Consul/#defining-new-samba-service-under-consul","title":"Defining new samba service under consul","text":"<p>Now we define gluster-samba service on gluster server hosts in a similiar way as we defined it for gluster itself.</p> <p>Below is an example of <code>/etc/consul/service_samba.json</code>:</p> <pre><code>{\n  \"service\": {\n    \"address\": \"\",\n    \"checks\": [\n      {\n        \"interval\": \"10s\",\n        \"tcp\": \"localhost:139\",\n        \"timeout\": \"5s\"\n      },\n      {\n        \"interval\": \"10s\",\n        \"tcp\": \"localhost:445\",\n        \"timeout\": \"5s\"\n      }\n    ],\n    \"enableTagOverride\": false,\n    \"id\": \"gluster-samba\",\n    \"name\": \"gluster-samba\",\n    \"port\": 139,\n    \"tags\": [\"gluster\", \"samba\"]\n  }\n}\n</code></pre> <p>We have two health checks here, just checking if we can connect to samba service. It could be also expanded to see if the network share is actually accessible.</p> <p>Reload consul service and you should after a while see new service registered in the consul. Check if it exists in dns:</p> <pre><code>nslookup gluster-samba.service.consul\n\nServer:     127.0.0.1\nAddress:    127.0.0.1#53\n\nName:   gluster-samba.service.consul\nAddress: 172.30.65.61\nName:   gluster-samba.service.consul\nAddress: 172.30.64.144\n</code></pre> <p>Install <code>samba-client</code> and check connectivity to samba from gluster server itself.</p> <pre><code>[centos@gluster-poc-01]# smbclient -L //gluster-samba.service.consul/g0 -U steve\nEnter steve's password:\nDomain=[test] OS=[Windows 6.1] Server=[Samba 4.4.4]\n\n    Sharename       Type      Comment\n    ---------       ----      -------\n    vfs-g0          Disk      Gluster via VFS (native gluster)\n    IPC$            IPC       IPC Service (Samba 4.4.4)\nDomain=[test] OS=[Windows 6.1] Server=[Samba 4.4.4]\n\n    Server               Comment\n    ---------            -------\n\n    Workgroup            Master\n    ---------            -------\n</code></pre> <p>Now check if we can list share directory as <code>steve</code>:</p> <pre><code>smbclient //gluster-samba.service.consul/vfs-g0/ -U steve -c ls\n\nEnter steve's password:\nDomain=[test] OS=[Windows 6.1] Server=[Samba 4.4.4]\n  .                                   D        0  Wed May 17 20:48:06 2017\n  ..                                  D        0  Wed May 17 20:48:06 2017\n  .trashcan                          DH        0  Mon May 15 15:41:37 2017\n  CentOS-7-x86_64-Everything-1611.iso      N 8280604672  Mon Dec  5 13:57:33 2016\n  hello.world                         D        0  Fri May 19 08:54:02 2017\n  ipconfig.all.txt                    A     2931  Wed May 17 20:18:52 2017\n  nslookup.txt                        A      126  Wed May 17 20:19:13 2017\n  net.view.txt                        A      315  Wed May 17 20:47:44 2017\n\n        463639360 blocks of size 1024. 447352464 blocks available\n\n</code></pre> <p>Notice that this might take a few seconds, because when we try to connect to the share, samba vfs connects to the gluster servers as agent.</p> <p>Looks good, time to configure Windows.</p>"},{"location":"Administrator-Guide/Consul/#installing-consul-agent-on-windows","title":"Installing Consul agent on Windows","text":"<p>Log in as administrator and install consul agent on the Windows machine, the easiest way is to use chocolatey.</p> <ul> <li> <p>install chocolatey and use preferred installation method, for example via <code>cmd.exe</code></p> </li> <li> <p>optionally install some tools via chocolatey to edit files:</p> </li> </ul> <pre><code>chocolatey install notepadplusplus\n</code></pre> <ul> <li>install consul as agent with specific version and configs to load:</li> </ul> <pre><code>chocolatey install consul --version 0.7.5 -params '-config-dir \"%PROGRAMDATA%\\consul\\\"'\n</code></pre> <ul> <li>stop consul service in command prompt:</li> </ul> <pre><code>net stop consul\n</code></pre> <ul> <li>edit consul config <code>%PROGRAMDATA%\\consul\\config.json</code>:</li> </ul> <pre><code>start notepad++.exe \"%PROGRAMDATA%\\consul\\config\\config.json\"\n</code></pre> <p>fill it with data (description below):</p> <pre><code>{\n  \"datacenter\": \"virt-gluster\",\n  \"retry_join\": [\"192.178.1.11\", \"192.178.1.12\", \"192.178.1.13\"],\n  \"recursors\": [\"8.8.8.8\", \"8.8.4.4\"],\n  \"ports\": {\n    \"dns\": 53\n  }\n}\n</code></pre> <p>Remember to replace <code>datacenter</code>, <code>recursors</code> with preferred local DNS servers and <code>retry_join</code> with list of consul server hosts or for example some generic Route53 entry from private zone (if it exists) which points to real consul servers.</p> <p>In AWS you can also use <code>retry_join_ec2</code> - his way Windows instance will always search other consul server EC2 instances and join them.</p> <p>Notice that recursors section is required if not using retry_join and just relying on AWS EC2 tags - otherwise consul will fail to resolve anything else, thus not joining to the consul.</p> <p>We use port <code>53</code> so that consul will serve as local DNS.</p> <ul> <li>start consul service</li> </ul> <pre><code>net start consul\n</code></pre> <ul> <li>update DNS settings for network interface in Windows, make it the primary entry</li> </ul> <pre><code>netsh interface ipv4 add dnsserver \\\"Ethernet\\\" address=127.0.0.1 index=1\n</code></pre> <ul> <li>verify that DNS Servers is pointing to localhost:</li> </ul> <pre><code>ipconfig /all\n\nWindows IP Configuration\n\n    Host Name . . . . . . . . . . . . : WIN-S8N782O8GG3\n    ...\n    ...\n    DNS Servers . . . . . . . . . . . : 127.0.0.1\n    ...\n    ...\n</code></pre> <ul> <li>verify that consul resolves some services:</li> </ul> <pre><code>nslookup gluster.service.consul\n\nnslookup gluster-samba.service.consul\n\nServer:  UnKnown\nAddress:  127.0.0.1\n\nName:    gluster-samba.service.consul\nAddresses:  172.30.65.61\n            172.30.64.144\n</code></pre>"},{"location":"Administrator-Guide/Consul/#mounting-gluster-volume-under-windows","title":"Mounting gluster volume under Windows","text":"<p>We have running gluster servers with volume and samba share, registered in consul. We have Windows with running consul agent. All hosts are registered in consul and can connect to each other.</p> <ul> <li>verify that samba can see network share:</li> </ul> <pre><code>net view \\\\gluster-samba.service.consul\n\nShared resources at \\\\gluster-samba.service.consul\n\nSamba 4.4.4\n\nShare name  Type  Used as  Comment\n\n-------------------------------------------------------------------------------\nvfs-g0      Disk           Gluster via VFS (native gluster)\nThe command completed successfully.\n</code></pre> <ul> <li>mount network share, providing credentials for gluster samba share:</li> </ul> <pre><code>net use s: \\\\gluster-samba.service.consul\\vfs-g0 /user:steve password: steve-loves-bacon /persistent:yes\n</code></pre> <p>If mounting fails due to error message: <code>System error 1219 has occurred. Multiple connections to a server or shared resource by the same user, using more than one user name, are not allowed....</code> then you must delete existing connections, for example:</p> <pre><code>net use /delete \\\\gluster-samba.service.consul\\IPC$\n</code></pre> <p>And then retry the <code>net use</code> commands again.</p> <p>From now on this windows share should reconnect to the random gluster samba server, if it is healthy.</p> <p>Enjoy.</p>"},{"location":"Administrator-Guide/Consul/#further-steps-for-improvements","title":"Further steps for improvements","text":"<p>Below is a list of things to improve:</p> <ul> <li>enable selinux</li> <li>harden samba setup on gluster servers to use domain logons</li> <li> <p>use consul ACL lists to control access to consul data</p> </li> <li> <p>export gluster volumes as key/value in consul, use consul-template to create mountpoints on consul updates - in autofs/ samba mounts/unmounts</p> </li> <li>expand consul health checks with more detailed checks, like:</li> <li>better checking if gluster volume exists etc</li> <li>if samba share is accessible by the client (to avoid situation samba tries to share non-mounted volume)</li> </ul>"},{"location":"Administrator-Guide/Directory-Quota/","title":"Managing Directory Quota","text":"<p>Directory quotas in GlusterFS allow you to set limits on the usage of the disk space by directories or volumes. The storage administrators can control the disk space utilization at the directory and/or volume levels in GlusterFS by setting limits to allocatable disk space at any level in the volume and directory hierarchy. This is particularly useful in cloud deployments to facilitate the utility billing model.</p> <p>Note: For now, only Hard limits are supported. Here, the limit cannot be exceeded, and attempts to use more disk space or inodes beyond the set limit are denied.</p> <p>System administrators can also monitor the resource utilization to limit the storage for the users depending on their role in the organization.</p> <p>You can set the quota at the following levels:</p> <ul> <li>Directory level \u2013 limits the usage at the directory level</li> <li>Volume level \u2013 limits the usage at the volume level</li> </ul> <p>Note: You can set the quota limit on an empty directory. The quota limit will be automatically enforced when files are added to the directory.</p>"},{"location":"Administrator-Guide/Directory-Quota/#enabling-quota","title":"Enabling Quota","text":"<p>You must enable Quota to set disk limits.</p> <p>To enable quota:</p> <p>Use the following command to enable quota:</p> <pre><code>gluster volume quota &lt;VOLNAME&gt; enable\n</code></pre> <p>For example, to enable quota on the test-volume:</p> <pre><code># gluster volume quota test-volume enable\nQuota is enabled on /test-volume\n</code></pre>"},{"location":"Administrator-Guide/Directory-Quota/#disabling-quota","title":"Disabling Quota","text":"<p>You can disable Quota if needed.</p> <p>To disable quota:</p> <p>Use the following command to disable quota:</p> <pre><code>gluster volume quota &lt;VOLNAME&gt; disable\n</code></pre> <p>For example, to disable quota translator on the test-volume:</p> <pre><code># gluster volume quota test-volume disable\nQuota translator is disabled on /test-volume\n</code></pre>"},{"location":"Administrator-Guide/Directory-Quota/#setting-or-replacing-disk-limit","title":"Setting or Replacing Disk Limit","text":"<p>You can create new directories in your storage environment and set the disk limit or set disk limit for the existing directories. The directory name should be relative to the volume with the export directory/mount being treated as \"/\".</p> <p>To set or replace disk limit:</p> <p>Set the disk limit using the following command:</p> <pre><code>gluster volume quota &lt;VOLNAME&gt; limit-usage &lt;DIR&gt; &lt;HARD_LIMIT&gt;\n</code></pre> <p>For example, to set a limit on data directory on the test-volume where data is a directory under the export directory:</p> <pre><code># gluster volume quota test-volume limit-usage /data 10GB\nUsage limit has been set on /data\n</code></pre> <p>Note In a multi-level directory hierarchy, the strictest disk limit will be considered for enforcement. Also, whenever the quota limit is set for the first time, an auxiliary mount point will be created under /var/run/gluster/. This is just like any other mount point with some special permissions and remains until the quota is disabled. This mount point is being used by quota to set and display limits and lists respectively."},{"location":"Administrator-Guide/Directory-Quota/#displaying-disk-limit-information","title":"Displaying Disk Limit Information","text":"<p>You can display disk limit information on all the directories on which the limit is set.</p> <p>To display disk limit information:</p> <ul> <li> <p>Display disk limit information of all the directories on which limit   is set, using the following command:</p> <p>gluster volume quota  list <p>For example, to see the set disks limit on the test-volume:</p> <pre><code>  # gluster volume quota test-volume list\n  /Test/data    10 GB       6 GB\n  /Test/data1   10 GB       4 GB\n</code></pre> <ul> <li> <p>Display disk limit information on a particular directory on which   limit is set, using the following command:</p> <p>gluster volume quota  list  <p>For example, to view the set limit on /data directory of test-volume:</p> <pre><code>  # gluster volume quota test-volume list /data\n  /Test/data    10 GB       6 GB\n</code></pre>"},{"location":"Administrator-Guide/Directory-Quota/#displaying-quota-limit-information-using-the-df-utility","title":"Displaying Quota Limit Information Using the df Utility","text":"<p>You can create a report of the disk usage using the df utility by considering quota limits. To generate a report, run the following command:</p> <pre><code>gluster volume set &lt;VOLNAME&gt; quota-deem-statfs on\n</code></pre> <p>In this case, the total disk space of the directory is taken as the quota hard limit set on the directory of the volume.</p> <p>Note The default value for quota-deem-statfs is on when the quota is enabled and it is recommended to keep quota-deem-statfs on.</p> <p>The following example displays the disk usage when quota-deem-statfs is off:</p> <pre><code># gluster volume set test-volume features.quota-deem-statfs off\nvolume set: success\n\n# gluster volume quota test-volume list\nPath            Hard-limit    Soft-limit    Used      Available\n---------------------------------------------------------------\n/               300.0GB        90%          11.5GB    288.5GB\n/John/Downloads  77.0GB        75%          11.5GB     65.5GB\n</code></pre> <p>Disk usage for volume test-volume as seen on client1:</p> <pre><code># df -hT /home\nFilesystem           Type            Size  Used Avail Use% Mounted on\nserver1:/test-volume fuse.glusterfs  400G   12G  389G   3% /home\n</code></pre> <p>The following example displays the disk usage when quota-deem-statfs is on:</p> <pre><code># gluster volume set test-volume features.quota-deem-statfs on\nvolume set: success\n\n# gluster vol quota test-volume list\nPath        Hard-limit    Soft-limit     Used     Available\n-----------------------------------------------------------\n/              300.0GB        90%        11.5GB     288.5GB\n/John/Downloads 77.0GB        75%        11.5GB     65.5GB\n</code></pre> <p>Disk usage for volume test-volume as seen on client1:</p> <pre><code># df -hT /home\nFilesystem            Type            Size  Used Avail Use% Mounted on\nserver1:/test-volume  fuse.glusterfs  300G   12G  289G   4% /home\n</code></pre> <p>The quota-deem-statfs option when set to on, allows the administrator to make the user view the total disk space available on the directory as the hard limit set on it.</p>"},{"location":"Administrator-Guide/Directory-Quota/#updating-memory-cache-size","title":"Updating Memory Cache Size","text":""},{"location":"Administrator-Guide/Directory-Quota/#setting-timeout","title":"Setting Timeout","text":"<p>For performance reasons, quota caches the directory sizes on the client. You can set a timeout indicating the maximum valid duration of directory sizes in the cache, from the time they are populated.</p> <p>For example: If multiple clients are writing to a single directory, there are chances that some other client might write till the quota limit is exceeded. However, this new file-size may not get reflected in the client till the size entry in the cache has become stale because of timeout. If writes happen on this client during this duration, they are allowed even though they would lead to exceeding of quota-limits, since the size in the cache is not in sync with the actual size. When a timeout happens, the size in the cache is updated from servers and will be in sync and no further writes will be allowed. A timeout of zero will force fetching of directory sizes from the server for every operation that modifies file data and will effectively disable directory size caching on the client-side.</p> <p>To update the memory cache size:</p> <p>Use the following command to update the memory cache size:</p> <ol> <li>Soft Timeout: The frequency at which the quota server-side translator checks the volume usage when the usage is below the soft limit. The soft timeout is in effect when the disk usage is less than the soft limit.</li> </ol> <pre><code>gluster volume set &lt;VOLNAME&gt; features.soft-timeout &lt;time&gt;\n</code></pre> <ol> <li>Hard Timeout: The frequency at which the quota server-side translator checks the volume usage when the usage is above the soft limit. The hard timeout is in effect when the disk usage is between the soft limit and the hard limit.</li> </ol> <pre><code>gluster volume set &lt;VOLNAME&gt; features.hard-timeout &lt;time&gt;\n</code></pre> <p>For example, to update the memory cache size for every 5 seconds on test-volume in case of hard-timeout:</p> <pre><code># gluster volume set test-volume features.hard-timeout 5\nSet volume successful\n</code></pre>"},{"location":"Administrator-Guide/Directory-Quota/#setting-alert-time","title":"Setting Alert Time","text":"<p>Alert time is the frequency at which you want your usage information to be logged after you reach the soft limit.</p> <p>To set the alert time:</p> <p>Use the following command to set the alert time:</p> <pre><code>gluster volume quota &lt;VOLNAME&gt; alert-time &lt;time&gt;\n</code></pre> <p>Note: The default alert-time is one week.</p> <p>For example, to set the alert time to one day:</p> <pre><code># gluster volume quota test-volume alert-time 1d\nvolume quota : success\n</code></pre>"},{"location":"Administrator-Guide/Directory-Quota/#removing-disk-limit","title":"Removing Disk Limit","text":"<p>You can remove the set disk limit if you do not want a quota anymore.</p> <p>To remove disk limit:</p> <p>Use the following command to remove the disk limit set on a particular directory:</p> <pre><code>gluster volume quota &lt;VOLNAME&gt; remove &lt;DIR&gt;\n</code></pre> <p>For example, to remove the disk limit on /data directory of test-volume:</p> <pre><code># gluster volume quota test-volume remove /data\nUsage limit set on /data is removed\n</code></pre>"},{"location":"Administrator-Guide/Events-APIs/","title":"Events APIs","text":"<p>New in version 3.9</p> <p>NOTE : glusterfs-selinux package would have to be installed for events feature to function properly when the selinux is in enforced mode. In addition to that, the default port to be used for eventsd has now been changed to 55555 and it has to lie between the ephemeral port ranges.</p>"},{"location":"Administrator-Guide/Events-APIs/#set-pythonpathonly-in-case-of-source-installation","title":"Set PYTHONPATH(Only in case of Source installation)","text":"<p>If Gluster is installed using source install, <code>cliutils</code> will get installed under <code>/usr/local/lib/python.2.7/site-packages</code> Set PYTHONPATH by adding in <code>~/.bashrc</code></p> <pre><code>export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH\n</code></pre>"},{"location":"Administrator-Guide/Events-APIs/#enable-and-start-events-apis","title":"Enable and Start Events APIs","text":"<p>Enable and Start glustereventsd in all peer nodes</p> <p>In Systems using Systemd,</p> <pre><code>systemctl enable glustereventsd\nsystemctl start glustereventsd\n</code></pre> <p>FreeBSD or others, add the following in <code>/etc/rc.conf</code></p> <pre><code>glustereventsd_enable=\"YES\"\n</code></pre> <p>And start the glustereventsd using,</p> <pre><code>service glustereventsd start\n</code></pre> <p>SysVInit(CentOS 6),</p> <pre><code>chkconfig glustereventsd on\nservice glustereventsd start\n</code></pre>"},{"location":"Administrator-Guide/Events-APIs/#status","title":"Status","text":"<p>Status Can be checked using,</p> <pre><code>gluster-eventsapi status\n</code></pre> <p>Example output:</p> <pre><code>Webhooks:\nNone\n\n+-----------+-------------+-----------------------+\n| NODE      | NODE STATUS | GLUSTEREVENTSD STATUS |\n+-----------+-------------+-----------------------+\n| localhost |          UP |                    UP |\n| node2     |          UP |                    UP |\n+-----------+-------------+-----------------------+\n</code></pre>"},{"location":"Administrator-Guide/Events-APIs/#webhooks","title":"Webhooks","text":"<p>Webhooks are similar to callbacks(over HTTP), on event Gluster will call the Webhook URL(via POST) which is configured. Webhook is a web server which listens on a URL, this can be deployed outside of the Cluster. Gluster nodes should be able to access this Webhook server on the configured port.</p> <p>Example Webhook written in python,</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/listen\", methods=[\"POST\"])\ndef events_listener():\n    gluster_event = request.json\n    if gluster_event is None:\n        # No event to process, may be test call\n        return \"OK\"\n\n    # Process gluster_event\n    # {\n    #  \"nodeid\": NODEID,\n    #  \"ts\": EVENT_TIMESTAMP,\n    #  \"event\": EVENT_TYPE,\n    #  \"message\": EVENT_DATA\n    # }\n    print (gluster_event)\n    return \"OK\"\n\napp.run(host=\"0.0.0.0\", port=9000)\n</code></pre> <p>Test and Register webhook using following commands,</p> <pre><code>usage: gluster-eventsapi webhook-test [-h] [--bearer_token BEARER_TOKEN] url\n\npositional arguments:\n  url                   URL of Webhook\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --bearer_token BEARER_TOKEN, -t BEARER_TOKEN\n                        Bearer Token\n</code></pre> <p>Example(Webhook server is running in <code>192.168.122.188:9000</code>),</p> <pre><code># gluster-eventsapi webhook-test http://192.168.122.188:9000/listen\n\n+-----------+-------------+----------------+\n| NODE      | NODE STATUS | WEBHOOK STATUS |\n+-----------+-------------+----------------+\n| localhost |          UP |             OK |\n| node2     |          UP |             OK |\n+-----------+-------------+----------------+\n</code></pre> <p>If Webhook status is OK from all peer nodes then register the Webhook using,</p> <pre><code>usage: gluster-eventsapi webhook-add [-h] [--bearer_token BEARER_TOKEN] url\n\npositional arguments:\n  url                   URL of Webhook\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --bearer_token BEARER_TOKEN, -t BEARER_TOKEN\n                        Bearer Token\n</code></pre> <p>Example,</p> <pre><code># gluster-eventsapi webhook-add http://192.168.122.188:9000/listen\n\n+-----------+-------------+-------------+\n| NODE      | NODE STATUS | SYNC STATUS |\n+-----------+-------------+-------------+\n| localhost |          UP |          OK |\n| node2     |          UP |          OK |\n+-----------+-------------+-------------+\n</code></pre> <p>Note: If Sync status is Not OK for any node, then make sure to run following command from a peer node when that node comes up.</p> <pre><code>gluster-eventsapi sync\n</code></pre> <p>To unsubscribe from events, delete the webhook using following command</p> <pre><code>usage: gluster-eventsapi webhook-del [-h] url\n\npositional arguments:\n  url         URL of Webhook\n\noptional arguments:\n  -h, --help  show this help message and exit\n</code></pre> <p>Example,</p> <pre><code>gluster-eventsapi webhook-del http://192.168.122.188:9000/listen\n</code></pre>"},{"location":"Administrator-Guide/Events-APIs/#configuration","title":"Configuration","text":"<p>View all configurations using,</p> <pre><code>usage: gluster-eventsapi config-get [-h] [--name NAME]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --name NAME  Config Name\n</code></pre> <p>Example output:</p> <pre><code>+--------------------+-------+\n| NAME               | VALUE |\n+--------------------+-------+\n| log-level          | INFO  |\n| port               | 55555 |\n| disable-events-log | False |\n+--------------------+-------+\n</code></pre> <p>To change any configuration,</p> <pre><code>usage: gluster-eventsapi config-set [-h] name value\n\npositional arguments:\n  name        Config Name\n  value       Config Value\n\noptional arguments:\n  -h, --help  show this help message and exit\n</code></pre> <p>Example output,</p> <pre><code>+-----------+-------------+-------------+\n| NODE      | NODE STATUS | SYNC STATUS |\n+-----------+-------------+-------------+\n| localhost |          UP |          OK |\n| node2     |          UP |          OK |\n+-----------+-------------+-------------+\n</code></pre> <p>To Reset any configuration,</p> <pre><code>usage: gluster-eventsapi config-reset [-h] name\n\npositional arguments:\n  name        Config Name or all\n\noptional arguments:\n  -h, --help  show this help message and exit\n</code></pre> <p>Example output,</p> <pre><code>+-----------+-------------+-------------+\n| NODE      | NODE STATUS | SYNC STATUS |\n+-----------+-------------+-------------+\n| localhost |          UP |          OK |\n| node2     |          UP |          OK |\n+-----------+-------------+-------------+\n</code></pre> <p>Note: If any node status is not UP or sync status is not OK, make sure to run <code>gluster-eventsapi sync</code> from a peer node.</p>"},{"location":"Administrator-Guide/Events-APIs/#add-node-to-the-cluster","title":"Add node to the Cluster","text":"<p>When a new node added to the cluster,</p> <ul> <li>Enable and Start Eventsd in the new node using the steps mentioned above</li> <li>Run <code>gluster-eventsapi sync</code> command from a peer node other than the new node.</li> </ul>"},{"location":"Administrator-Guide/Events-APIs/#apis-documentation","title":"APIs documentation","text":"<p>Glustereventsd pushes the Events in JSON format to configured Webhooks. All Events will have following attributes.</p> Attribute Description nodeid Node UUID ts Event Timestamp event Event Type message Event Specific Data <p>Example:</p> <pre><code>{\n  \"nodeid\": \"95cd599c-5d87-43c1-8fba-b12821fd41b6\",\n  \"ts\": 1468303352,\n  \"event\": \"VOLUME_CREATE\",\n  \"message\": {\n    \"name\": \"gv1\"\n  }\n}\n</code></pre> <p>\"message\" can have following attributes based on the type of event.</p>"},{"location":"Administrator-Guide/Events-APIs/#peer-events","title":"Peer Events","text":"Event Type Attribute Description PEER_ATTACH host Hostname or IP of added node PEER_DETACH host Hostname or IP of detached node"},{"location":"Administrator-Guide/Events-APIs/#volume-events","title":"Volume Events","text":"Event Type Attribute Description VOLUME_CREATE name Volume Name VOLUME_START force Force option used or not during Start name Volume Name VOLUME_STOP force Force option used or not during Stop name Volume Name VOLUME_DELETE name Volume Name VOLUME_SET name Volume Name options List of Options[(key1, val1), (key2, val2),..] VOLUME_RESET name Volume Name option Option Name"},{"location":"Administrator-Guide/Events-APIs/#brick-events","title":"Brick Events","text":"Event Type Attribute Description BRICK_RESET_START volume Volume Name source-brick Source Brick details BRICK_RESET_COMMIT volume Volume Name destination-brick Destination Brick source-brick Source Brick details BRICK_REPLACE volume Volume Name destination-brick Destination Brick source-brick Source Brick details"},{"location":"Administrator-Guide/Events-APIs/#georep-events","title":"Georep Events","text":"Event Type Attribute Description GEOREP_CREATE force Force option used during session Create secondary Secondary Details(Secondaryhost::SecondaryVolume) no_verify No verify option is used or not push_pem Push pem option is used or Not ssh_port If SSH port is configured during Session Create primary Primary Volume Name GEOREP_START force Force option used during session Start Primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) GEOREP_STOP force Force option used during session Stop primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) GEOREP_PAUSE force Force option used during session Pause primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) GEOREP_RESUME force Force option used during session Resume primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) GEOREP_DELETE force Force option used during session Delete primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) GEOREP_CONFIG_SET primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) option Name of Geo-rep config value Changed Value GEOREP_CONFIG_RESET primary Primary Volume Name secondary Secondary Details(Secondaryhost::SecondaryVolume) option Name of Geo-rep config"},{"location":"Administrator-Guide/Events-APIs/#bitrot-events","title":"Bitrot Events","text":"Event Type Attribute Description BITROT_ENABLE name Volume Name BITROT_DISABLE name Volume Name BITROT_SCRUB_THROTTLE name Volume Name value Changed Value BITROT_SCRUB_FREQ name Volume Name value Changed Value BITROT_SCRUB_OPTION name Volume Name value Changed Value"},{"location":"Administrator-Guide/Events-APIs/#quota-events","title":"Quota Events","text":"Event Type Attribute Description QUOTA_ENABLE volume Volume Name QUOTA_DISABLE volume Volume Name QUOTA_SET_USAGE_LIMIT volume Volume Name path Path in Volume on which Quota option is set limit Changed Value QUOTA_SET_OBJECTS_LIMIT volume Volume Name path Path in Volume on which Quota option is set limit Changed Value QUOTA_REMOVE_USAGE_LIMIT volume Volume Name path Path in Volume on which Quota option is Reset QUOTA_REMOVE_OBJECTS_LIMIT volume Volume Name path Path in Volume on which Quota option is Reset QUOTA_ALERT_TIME volume Volume Name time Changed Alert Time QUOTA_SOFT_TIMEOUT volume Volume Name soft-timeout Changed Value QUOTA_HARD_TIMEOUT volume Volume Name hard-timeout Changed Value QUOTA_DEFAULT_SOFT_LIMIT volume Volume Name default-soft-limit Changed Value"},{"location":"Administrator-Guide/Events-APIs/#snapshot-events","title":"Snapshot Events","text":"Event Type Attribute Description SNAPSHOT_CREATED snapshot_name Snapshot Name volume_name Volume Name snapshot_uuid Snapshot UUID SNAPSHOT_CREATE_FAILED snapshot_name Snapshot Name volume_name Volume Name error Failure details SNAPSHOT_ACTIVATED snapshot_name Snapshot Name snapshot_uuid Snapshot UUID SNAPSHOT_ACTIVATE_FAILED snapshot_name Snapshot Name error Failure details SNAPSHOT_DEACTIVATED snapshot_name Snapshot Name snapshot_uuid Snapshot UUID SNAPSHOT_DEACTIVATE_FAILED snapshot_name Snapshot Name error Failure details SNAPSHOT_SOFT_LIMIT_REACHED volume_name Volume Name volume_id Volume ID SNAPSHOT_HARD_LIMIT_REACHED volume_name Volume Name volume_id Volume ID SNAPSHOT_RESTORED snapshot_name Snapshot Name volume_name Volume Name snapshot_uuid Snapshot UUID SNAPSHOT_RESTORE_FAILED snapshot_name Snapshot Name error Failure details SNAPSHOT_DELETED snapshot_name Snapshot Name snapshot_uuid Snapshot UUID SNAPSHOT_DELETE_FAILED snapshot_name Snapshot Name error Failure details SNAPSHOT_CLONED clone_uuid Snapshot Clone UUID snapshot_name Snapshot Name clone_name Snapshot Clone Name SNAPSHOT_CLONE_FAILED snapshot_name Snapshot Name clone_name Snapshot Clone Name error Failure details SNAPSHOT_CONFIG_UPDATED auto-delete Auto delete Value if available config_type Volume Config or System Config hard_limit Hard Limit Value if available soft_limit Soft Limit Value if available snap-activate Snap activate Value if available SNAPSHOT_CONFIG_UPDATE_FAILED error Error details SNAPSHOT_SCHEDULER_INITIALISED status Succss Status SNAPSHOT_SCHEDULER_INIT_FAILED error Error details SNAPSHOT_SCHEDULER_ENABLED status Succss Status SNAPSHOT_SCHEDULER_ENABLE_FAILED error Error details SNAPSHOT_SCHEDULER_DISABLED status Succss Status SNAPSHOT_SCHEDULER_DISABLE_FAILED error Error details SNAPSHOT_SCHEDULER_SCHEDULE_ADDED status Succss Status SNAPSHOT_SCHEDULER_SCHEDULE_ADD_FAILED error Error details SNAPSHOT_SCHEDULER_SCHEDULE_EDITED status Succss Status SNAPSHOT_SCHEDULER_SCHEDULE_EDIT_FAILED error Error details SNAPSHOT_SCHEDULER_SCHEDULE_DELETED status Succss Status SNAPSHOT_SCHEDULER_SCHEDULE_DELETE_FAILED error Error details"},{"location":"Administrator-Guide/Events-APIs/#svc-events","title":"Svc Events","text":"Event Type Attribute Description SVC_MANAGER_FAILED volume Volume Name if available svc_name Service Name SVC_CONNECTED volume Volume Name if available svc_name Service Name SVC_DISCONNECTED svc_name Service Name"},{"location":"Administrator-Guide/Events-APIs/#peer-events_1","title":"Peer Events","text":"Event Type Attribute Description PEER_STORE_FAILURE peer Hostname or IP PEER_RPC_CREATE_FAILED peer Hostname or IP PEER_REJECT peer Hostname or IP PEER_CONNECT host Hostname or IP uuid Host UUID PEER_DISCONNECT host Hostname or IP uuid Host UUID state Disconnect State PEER_NOT_FOUND peer Hostname or IP uuid Host UUID"},{"location":"Administrator-Guide/Events-APIs/#unknown-events","title":"Unknown Events","text":"Event Type Attribute Description UNKNOWN_PEER peer Hostname or IP"},{"location":"Administrator-Guide/Events-APIs/#brick-events_1","title":"Brick Events","text":"Event Type Attribute Description BRICK_START_FAILED peer Hostname or IP volume Volume Name brick Brick BRICK_STOP_FAILED peer Hostname or IP volume Volume Name brick Brick BRICK_DISCONNECTED peer Hostname or IP volume Volume Name brick Brick BRICK_CONNECTED peer Hostname or IP volume Volume Name brick Brick"},{"location":"Administrator-Guide/Events-APIs/#bricks-events","title":"Bricks Events","text":"Event Type Attribute Description BRICKS_START_FAILED volume Volume Name"},{"location":"Administrator-Guide/Events-APIs/#brickpath-events","title":"Brickpath Events","text":"Event Type Attribute Description BRICKPATH_RESOLVE_FAILED peer Hostname or IP volume Volume Name brick Brick"},{"location":"Administrator-Guide/Events-APIs/#notify-events","title":"Notify Events","text":"Event Type Attribute Description NOTIFY_UNKNOWN_OP op Operation Name"},{"location":"Administrator-Guide/Events-APIs/#quorum-events","title":"Quorum Events","text":"Event Type Attribute Description QUORUM_LOST volume Volume Name QUORUM_REGAINED volume Volume Name"},{"location":"Administrator-Guide/Events-APIs/#rebalance-events","title":"Rebalance Events","text":"Event Type Attribute Description REBALANCE_START_FAILED volume Volume Name REBALANCE_STATUS_UPDATE_FAILED volume Volume Name"},{"location":"Administrator-Guide/Events-APIs/#import-events","title":"Import Events","text":"Event Type Attribute Description IMPORT_QUOTA_CONF_FAILED volume Volume Name IMPORT_VOLUME_FAILED volume Volume Name IMPORT_BRICK_FAILED peer Hostname or IP brick Brick details"},{"location":"Administrator-Guide/Events-APIs/#compare-events","title":"Compare Events","text":"Event Type Attribute Description COMPARE_FRIEND_VOLUME_FAILED volume Volume Name"},{"location":"Administrator-Guide/Events-APIs/#ec-events","title":"Ec Events","text":"Event Type Attribute Description EC_MIN_BRICKS_NOT_UP subvol Subvolume EC_MIN_BRICKS_UP subvol Subvolume"},{"location":"Administrator-Guide/Events-APIs/#georep-events_1","title":"Georep Events","text":"Event Type Attribute Description GEOREP_FAULTY primary_node Hostname or IP of Primary Volume brick_path Brick Path secondary_host Secondary Hostname or IP primary_volume Primary Volume Name current_secondary_host Current Secondary Host to which Geo-rep worker was trying to connect to secondary_volume Secondary Volume Name"},{"location":"Administrator-Guide/Events-APIs/#quota-events_1","title":"Quota Events","text":"Event Type Attribute Description QUOTA_CROSSED_SOFT_LIMIT usage Usage volume Volume Name path Path"},{"location":"Administrator-Guide/Events-APIs/#bitrot-events_1","title":"Bitrot Events","text":"Event Type Attribute Description BITROT_BAD_FILE gfid GFID of File path Path if Available brick Brick details"},{"location":"Administrator-Guide/Events-APIs/#client-events","title":"Client Events","text":"Event Type Attribute Description CLIENT_CONNECT client_identifier Client Identifier client_uid Client UID server_identifier Server Identifier brick_path Path of Brick CLIENT_AUTH_REJECT client_identifier Client Identifier client_uid Client UID server_identifier Server Identifier brick_path Path of Brick CLIENT_DISCONNECT client_identifier Client Identifier client_uid Client UID server_identifier Server Identifier brick_path Path of Brick"},{"location":"Administrator-Guide/Events-APIs/#posix-events","title":"Posix Events","text":"Event Type Attribute Description POSIX_SAME_GFID gfid GFID of File path Path of File newpath New Path of File brick Brick details POSIX_ALREADY_PART_OF_VOLUME volume-id Volume ID brick Brick details POSIX_BRICK_NOT_IN_VOLUME brick Brick details POSIX_BRICK_VERIFICATION_FAILED brick Brick details POSIX_ACL_NOT_SUPPORTED brick Brick details POSIX_HEALTH_CHECK_FAILED path Path brick Brick details op Error Number error Error"},{"location":"Administrator-Guide/Events-APIs/#afr-events","title":"Afr Events","text":"Event Type Attribute Description AFR_QUORUM_MET subvol Sub Volume Name AFR_QUORUM_FAIL subvol Sub Volume Name AFR_SUBVOL_UP subvol Sub Volume Name AFR_SUBVOLS_DOWN subvol Sub Volume Name AFR_SPLIT_BRAIN subvol Sub Volume Name"},{"location":"Administrator-Guide/Events-APIs/#tier-events","title":"Tier Events","text":"Event Type Attribute Description TIER_ATTACH vol Volume Name TIER_ATTACH_FORCE vol Volume Name TIER_DETACH_START vol Volume Name TIER_DETACH_STOP vol Volume Name TIER_DETACH_COMMIT vol Volume Name TIER_DETACH_FORCE vol Volume Name TIER_PAUSE vol Volume Name TIER_RESUME vol Volume Name TIER_WATERMARK_HI vol Volume Name TIER_WATERMARK_DROPPED_TO_MID vol Volume Name TIER_WATERMARK_RAISED_TO_MID vol Volume Name TIER_WATERMARK_DROPPED_TO_LOW vol Volume Name"},{"location":"Administrator-Guide/Events-APIs/#volume-events_1","title":"Volume Events","text":"Event Type Attribute Description VOLUME_ADD_BRICK volume Volume Name bricks Bricks details separated by Space VOLUME_REMOVE_BRICK_START volume Volume Name bricks Bricks details separated by Space VOLUME_REMOVE_BRICK_COMMIT volume Volume Name bricks Bricks details separated by Space VOLUME_REMOVE_BRICK_STOP volume Volume Name bricks Bricks details separated by Space VOLUME_REMOVE_BRICK_FORCE volume Volume Name bricks Bricks details separated by Space VOLUME_REBALANCE_START volume Volume Name VOLUME_REBALANCE_STOP volume Volume Name VOLUME_REBALANCE_FAILED volume Volume Name VOLUME_REBALANCE_COMPLETE volume Volume Name"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/","title":"Export and Netgroup Authentication","text":""},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#exports-and-netgroups-authentication-for-nfs","title":"Exports and Netgroups Authentication for NFS","text":"<p>This feature adds Linux-style exports &amp; netgroups authentication to Gluster's NFS server. More specifically, this feature allows users to restrict access specific IPs (exports authentication) or a netgroup (netgroups authentication), or a combination of both for both Gluster volumes and subdirectories within Gluster volumes. Netgroups are used in Unix environments to control access for NFS exports, remote logins and remote shells. Each netgroup has a unique name and defines a set of hosts, users, groups and other netgroups. This information is stored in files and gluster NFS server manage permission for clients based on those file</p>"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#implications-and-usage","title":"Implications and Usage","text":"<p>Currently, gluster can restrict access to volumes through simple IP list. But this feature makes that capability more scalable by allowing large lists of IPs to be managed through a netgroup. Moreover it provides more granular permission handling on volumes like wildcard support, read-only permission to certain client etc.</p> <p>The file <code>/var/lib/glusterd/nfs/export</code> contains the details of machines which can be used as clients for that server.An typical export entry use the following format :</p> <pre><code>/&lt;export path&gt; &lt;host/netgroup&gt; (options),..\n</code></pre> <p>Here export name can be gluster volume or subdirectory path inside that volume. Next it contains list of host/netgroup , followed by the options applicable to that entry.A string beginning with an '@' is treated as a netgroup and a string beginning without an @ is a host. The options include mount related parameters , right now options such as \"sec\", \"ro/rw\", \"anonuid\" valid one. If * is mention as host/netgroup field , then any client can mount that export path.</p> <p>The file <code>/var/lib/glusterd/nfs/netgroup</code> should mention the expansion of each netgroup which mentioned in the export file. An typical netgroup entry will look like :</p> <pre><code>&lt;netgroup name&gt; ng1000\\nng1000 ng999\\nng999 ng1\\nng1 ng2\\nng2 (ip1,ip2,..)\n</code></pre> <p>The gluster NFS server will check the contents of these file after specific time intervals</p>"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#volume-options","title":"Volume Options","text":"<ol> <li>Enabling export/netgroup feature</li> </ol> <pre><code>gluster volume set &lt;volname&gt; nfs.exports-auth-enable on\n</code></pre> <ol> <li>Changing the refresh interval for gluster NFS server</li> </ol> <pre><code>gluster volume set &lt;volname&gt; nfs.auth-refresh-interval-sec &lt;time in seconds&gt;\n</code></pre> <ol> <li>Changing the cache interval for an export entry</li> </ol> <pre><code>gluster volume set &lt;volname&gt; nfs.auth-cache-ttl-sec &lt;time in seconds&gt;\n</code></pre>"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#testing-the-exportnetgroup-file","title":"Testing the export/netgroup file","text":"<p>An user should have the ability to check the validity of the files before applying the configuration. The \"glusterfsd\" command now has the following additional arguments that can be used to check the configuration:</p> <ul> <li> <p>--print-netgroups: Validate the netgroups file and print it out. For example,</p> </li> <li> <p><code>glusterfsd --print-netgroups &lt;name of the file&gt;</code></p> </li> <li> <p>--print-exports: Validate the exports file and print it out. For example,</p> </li> <li><code>glusterfsd --print-export &lt;name of the file&gt;</code></li> </ul>"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#points-to-be-noted","title":"Points to be noted.","text":"<ol> <li> <p>This feature does not currently support all the options in the man page of exports, but we can easily add them.</p> </li> <li> <p>The files <code>/var/lib/glusterd/nfs/export</code> and <code>/var/lib/glusterd/nfs/netgroup</code> should be created before setting the <code>nfs.exports-auth-enable</code> option in every node in Trusted Storage Pool.</p> </li> <li> <p>These files are handled manually by the users. So that, their contents can be different among the gluster nfs servers across Trusted Storage Pool . i.e it is possible to have different authenticate mechanism for the gluster NFS servers in the same cluster.</p> </li> <li> <p>Do not mixup this feature and authentication using <code>nfs.rpc-auth-allow</code>, <code>nfs.export-dir</code> which may result in inconsistency.</p> </li> </ol>"},{"location":"Administrator-Guide/Export-And-Netgroup-Authentication/#troubleshooting","title":"Troubleshooting","text":"<p>After changing the contents of the file, if it is not reflected properly in the authentication mechanism , just restart the server using volume stop and start, So that gluster NFS server will forcefully read the contents of those files again.</p>"},{"location":"Administrator-Guide/Geo-Replication/","title":"Geo-Replication","text":""},{"location":"Administrator-Guide/Geo-Replication/#introduction","title":"Introduction","text":"<p>Geo-replication provides a continuous, asynchronous, and incremental replication service from one site to another over Local Area Networks (LANs), Wide Area Network (WANs), and across the Internet.</p>"},{"location":"Administrator-Guide/Geo-Replication/#prerequisites","title":"Prerequisites","text":"<ul> <li>Primary and Secondary Volumes should be Gluster Volumes.</li> <li>Primary and Secondary clusters should have the same GlusterFS version.</li> </ul>"},{"location":"Administrator-Guide/Geo-Replication/#replicated-volumes-vs-geo-replication","title":"Replicated Volumes vs Geo-replication","text":"<p>The following table lists the difference between replicated volumes and Geo-replication:</p> Replicated Volumes Geo-replication Mirrors data across clusters Mirrors data across geographically distributed clusters Provides high-availability Ensures backing up of data for disaster recovery Synchronous replication (each and every file operation is sent across all the bricks) Asynchronous replication (checks for the changes in files periodically and syncs them on detecting differences)"},{"location":"Administrator-Guide/Geo-Replication/#exploring-geo-replication-deployment-scenarios","title":"Exploring Geo-replication Deployment Scenarios","text":"<p>Geo-replication provides an incremental replication service over Local Area Networks (LANs), Wide Area Network (WANs), and across the Internet.</p> <p>This section illustrates the most common deployment scenarios for Geo-replication, including the following:</p>"},{"location":"Administrator-Guide/Geo-Replication/#geo-replication-over-local-area-networklan","title":"Geo-replication over Local Area Network(LAN)","text":""},{"location":"Administrator-Guide/Geo-Replication/#geo-replication-over-wide-area-networkwan","title":"Geo-replication over Wide Area Network(WAN)","text":""},{"location":"Administrator-Guide/Geo-Replication/#geo-replication-over-internet","title":"Geo-replication over Internet","text":""},{"location":"Administrator-Guide/Geo-Replication/#mirror-data-in-a-cascading-fashion-across-multiple-sitesmulti-site-cascading-geo-replication","title":"Mirror data in a cascading fashion across multiple sites(Multi-site cascading Geo-replication)","text":""},{"location":"Administrator-Guide/Geo-Replication/#secondary-user-setup","title":"Secondary User setup","text":"<p>Setup an unprivileged user in Secondary nodes to secure the SSH connectivity to those nodes. The unprivileged Secondary user uses the mountbroker service of glusterd to set up an auxiliary gluster mount for the user in a special environment, which ensures that the user is only allowed to access with special parameters that provide administrative level access to the particular Volume.</p> <p>In all the Secondary nodes, create a new group as \"geogroup\".</p> <pre><code>sudo groupadd geogroup\n</code></pre> <p>In all the Secondary nodes, create an unprivileged account. For example, \"geoaccount\". Add geoaccount as a member of \"geogroup\" group.</p> <pre><code>useradd -G geogroup geoaccount\n</code></pre> <p>In any one Secondary node, run the following command to setup the mountbroker root directory and group.</p> <pre><code>gluster-mountbroker setup &lt;MOUNT ROOT&gt; &lt;GROUP&gt;\n</code></pre> <p>For example,</p> <pre><code>gluster-mountbroker setup /var/mountbroker-root geogroup\n</code></pre> <p>In any one of Secondary node, Run the following commands to add Volume and user to mountbroker service.</p> <pre><code>gluster-mountbroker add &lt;VOLUME&gt; &lt;USER&gt;\n</code></pre> <p>For example,</p> <pre><code>gluster-mountbroker add gvol-secondary geoaccount\n</code></pre> <p>(Note: To remove a user, use <code>gluster-mountbroker remove</code> command)</p> <p>Check the status of setup using,</p> <pre><code>gluster-mountbroker status\n</code></pre> <p>Restart <code>glusterd</code> service on all Secondary nodes.</p>"},{"location":"Administrator-Guide/Geo-Replication/#setting-up-the-environment-for-geo-replication","title":"Setting Up the Environment for Geo-replication","text":""},{"location":"Administrator-Guide/Geo-Replication/#time-synchronization","title":"Time Synchronization","text":"<p>On bricks of a geo-replication Primary volume, all the servers' time must be uniform. You are recommended to set up NTP (Network Time Protocol) or similar service to keep the bricks sync in time and avoid the out-of-time sync effect.</p> <p>For example: In a Replicated volume where brick1 of the Primary is at 12.20 hrs, and brick 2 of the Primary is at 12.10 hrs with 10 minutes time lag, all the changes in brick2 between this period may go unnoticed during synchronization of files with Secondary.</p>"},{"location":"Administrator-Guide/Geo-Replication/#password-less-ssh","title":"Password-less SSH","text":"<p>Password-less login has to be set up between the host machine (where geo-replication Create command will be issued) and one of the Secondary node for the unprivileged account created above.</p> <p>Note: This is required to run Create command. This can be disabled once the session is established.(Required again while running create force)</p> <p>On one of the Primary node where geo-replication Create command will be issued, run the following command to generate the SSH key(Press Enter twice to avoid passphrase).</p> <pre><code>ssh-keygen\n</code></pre> <p>Run the following command on the same node to one Secondary node which is identified as the main Secondary node.</p> <pre><code>ssh-copy-id geoaccount@snode1.example.com\n</code></pre>"},{"location":"Administrator-Guide/Geo-Replication/#creating-secret-pem-pub-file","title":"Creating secret pem pub file","text":"<p>Execute the below command from the node where you setup the password-less ssh to Secondary. This will generate Geo-rep session specific ssh-keys in all Primary peer nodes and collect public keys from all peer nodes to the command initiated node.</p> <pre><code>gluster-georep-sshkey generate\n</code></pre> <p>This command adds extra prefix inside common_secret.pem.pub file to each pub keys to prevent running extra commands using this key, to disable that prefix,</p> <pre><code>gluster-georep-sshkey generate --no-prefix\n</code></pre>"},{"location":"Administrator-Guide/Geo-Replication/#creating-the-session","title":"Creating the session","text":"<p>Create a geo-rep session between Primary and Secondary volume using the following command. The node in which this command is executed and the <code>&lt;Secondary_host&gt;</code> specified in the command should have password less ssh setup between them. The push-pem option actually uses the secret pem pub file created earlier and establishes geo-rep specific password less ssh between each node in Primary to each node of Secondary.</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; \\\n    create [ssh-port &lt;port&gt;] push-pem|no-verify [force]\n</code></pre> <p>For example,</p> <pre><code>gluster volume geo-replication gvol-primary \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  create push-pem\n</code></pre> <p>If custom SSH port (example: 50022) is configured in Secondary nodes then</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  config ssh_port 50022\n\ngluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  create ssh-port 50022 push-pem\n</code></pre> <p>If the total available size in Secondary volume is less than the total size of Primary, the command will throw error message. In such cases 'force' option can be used.</p> <p>In use cases where the rsa-keys of nodes in Primary volume is distributed to Secondary nodes through an external agent and following Secondary side verifications are taken care of by the external agent, then</p> <ul> <li>if ssh port 22 or custom port is open in Secondary</li> <li>has proper passwordless ssh login setup</li> <li>Secondary volume is created and is empty</li> <li>if Secondary has enough memory</li> </ul> <p>Then use following command to create Geo-rep session with <code>no-verify</code> option.</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; create no-verify [force]\n</code></pre> <p>For example,</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  create no-verify\n</code></pre> <p>In this case the Primary node rsa-key distribution to Secondary node does not happen and above mentioned Secondary verification is not performed and these two things has to be taken care externaly.</p>"},{"location":"Administrator-Guide/Geo-Replication/#post-creation-steps","title":"Post Creation steps","text":"<p>Run the following command as root in any one of Secondary node.</p> <pre><code>/usr/libexec/glusterfs/set_geo_rep_pem_keys.sh &lt;secondary_user&gt; \\\n    &lt;primary_volume&gt; &lt;secondary_volume&gt;\n</code></pre> <p>For example,</p> <pre><code>/usr/libexec/glusterfs/set_geo_rep_pem_keys.sh geoaccount \\\n  gvol-primary gvol-secondary\n</code></pre>"},{"location":"Administrator-Guide/Geo-Replication/#configuration","title":"Configuration","text":"<p>Configuration can be changed anytime after creating the session. After successful configuration change, Geo-rep session will be automatically restarted.</p> <p>To view all configured options of a session,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; config [option]\n</code></pre> <p>For Example,</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  config\n\ngluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  config sync-jobs\n</code></pre> <p>To configure Gluster Geo-replication, use the following command at the Gluster command line</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n   &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; config [option]\n</code></pre> <p>For example:</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  config sync-jobs 3\n</code></pre> <p>Note: If Geo-rep is in between sync, restart due to configuration change may cause resyncing a few entries which are already synced.</p>"},{"location":"Administrator-Guide/Geo-Replication/#configurable-options","title":"Configurable Options","text":"<p>Meta Volume</p> <p>In case of Replica bricks, one brick worker will be Active and participate in syncing and others will be waiting as Passive. By default Geo-rep uses <code>node-uuid</code>, if <code>node-uuid</code> of worker present in first up subvolume node ids list then that worker will become Active. With this method, multiple workers of same replica becomes Active if multiple bricks used from same machine.</p> <p>To prevent this, Meta Volume(Extra Gluster Volume) can be used in Geo-rep. With this method, Each worker will try to acquire lock on a file inside meta volume. Lock file name pattern will be different for each sub volume. If a worker acquire lock, then it will become Active else remain as Passive.</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; config\n    use-meta-volume true\n</code></pre> <p>Note: Meta Volume is shared replica 3 Gluster Volume. The name of the meta-volume should be <code>gluster_shared_storage</code> and should be mounted at <code>/var/run/gluster/shared_storage/</code>.</p> <p>The following table provides an overview of the configurable options for a geo-replication setting:</p> Option Description log-level LOGFILELEVEL The log level for geo-replication. gluster-log-level LOGFILELEVEL The log level for glusterfs processes. changelog-log-level LOGFILELEVEL The log level for Changelog processes. ssh-command COMMAND The SSH command to connect to the remote machine (the default is ssh). If ssh is installed in custom location, that path can be configured. For ex <code>/usr/local/sbin/ssh</code> rsync-command COMMAND The rsync command to use for synchronizing the files (the default is rsync). use-tarssh true The use-tarssh command allows tar over Secure Shell protocol. Use this option to handle workloads of files that have not undergone edits. timeout SECONDS The timeout period in seconds. sync-jobs N The number of simultaneous files/directories that can be synchronized. ignore-deletes If this option is set to 1, a file deleted on the primary will not trigger a delete operation on the secondary. As a result, the secondary will remain as a superset of the primary and can be used to recover the primary in the event of a crash and/or accidental delete."},{"location":"Administrator-Guide/Geo-Replication/#starting-geo-replication","title":"Starting Geo-replication","text":"<p>Use the following command to start geo-replication session,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt;  \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; \\\n    start [force]\n</code></pre> <p>For example,</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  start\n</code></pre> <p>Note</p> <p>You may need to configure the session before starting Gluster Geo-replication.</p>"},{"location":"Administrator-Guide/Geo-Replication/#stopping-geo-replication","title":"Stopping Geo-replication","text":"<p>Use the following command to stop geo-replication sesion,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt;  \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; \\\n    stop [force]\n</code></pre> <p>For example,</p> <pre><code>gluster volume geo-replication gvol-primary  \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  stop\n</code></pre>"},{"location":"Administrator-Guide/Geo-Replication/#status","title":"Status","text":"<p>To check the status of all Geo-replication sessions in the Cluster</p> <pre><code>gluster volume geo-replication status\n</code></pre> <p>To check the status of one session,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; status [detail]\n</code></pre> <p>Example,</p> <pre><code>gluster volume geo-replication gvol-primary \\\n  geoaccount@snode1::gvol-secondary status\n\ngluster volume geo-replication gvol-primary \\\n  geoaccount@snode1::gvol-secondary status detail\n</code></pre> <p>Example Status Output</p> <pre><code>PRIMARY NODE    PRIMARY VOL          PRIMARY BRICK    SECONDARY USER    SECONDARY         SECONDARY NODE    STATUS    CRAWL STATUS       LAST_SYNCED\n---------------------------------------------------------------------------------------------------------------------------------------------------------\nmnode1         gvol-primary           /bricks/b1      root          snode1::gvol-secondary  snode1        Active    Changelog Crawl    2016-10-12 23:07:13\nmnode2         gvol-primary           /bricks/b2      root          snode1::gvol-secondary  snode2        Active    Changelog Crawl    2016-10-12 23:07:13\n</code></pre> <p>Example Status detail Output</p> <pre><code>PRIMARY NODE    PRIMARY VOL    PRIMARY BRICK    SECONDARY USER    SECONDARY        SECONDARY NODE    STATUS    CRAWL STATUS       LAST_SYNCED            ENTRY    DATA    META    FAILURES    CHECKPOINT TIME    CHECKPOINT COMPLETED    CHECKPOINT COMPLETION TIME\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nmnode1         gvol-primary           /bricks/b1      root          snode1::gvol-secondary  snode1        Active    Changelog Crawl    2016-10-12 23:07:13    0        0       0       0           N/A                N/A                     N/A\nmnode2         gvol-primary           /bricks/b2      root          snode1::gvol-secondary  snode2        Active    Changelog Crawl    2016-10-12 23:07:13    0        0       0       0           N/A                N/A                     N/A\n</code></pre> <p>The <code>STATUS</code> of the session could be one of the following,</p> <ul> <li> <p>Initializing: This is the initial phase of the Geo-replication   session; it remains in this state for a minute in order to make   sure no abnormalities are present.</p> </li> <li> <p>Created: The geo-replication session is created, but not   started.</p> </li> <li> <p>Active: The gsync daemon in this node is active and syncing the   data. (One worker among the replica pairs will be in Active state)</p> </li> <li> <p>Passive: A replica pair of the active node. The data   synchronization is handled by active node. Hence, this node does   not sync any data. If Active node goes down, Passive worker will   become Active</p> </li> <li> <p>Faulty: The geo-replication session has experienced a problem,   and the issue needs to be investigated further. Check log files   for more details about the Faulty status. Log file path can be   found using</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; config log-file\n</code></pre> </li> <li> <p>Stopped: The geo-replication session has stopped, but has not   been deleted.</p> </li> </ul> <p>The <code>CRAWL STATUS</code> can be one of the following:</p> <ul> <li> <p>Hybrid Crawl: The gsyncd daemon is crawling the glusterFS file   system and generating pseudo changelog to sync data. This crawl is   used during initial sync and if Changelogs are not available.</p> </li> <li> <p>History Crawl: gsyncd daemon syncs data by consuming Historical   Changelogs. On every worker restart, Geo-rep uses this Crawl to   process backlog Changelogs.</p> </li> <li> <p>Changelog Crawl: The changelog translator has produced the   changelog and that is being consumed by gsyncd daemon to sync   data.</p> </li> </ul> <p>The <code>ENTRY</code> denotes: The number of pending entry operations (create, mkdir, mknod, symlink, link, rename, unlink, rmdir) per session.</p> <p>The <code>DATA</code> denotes: The number of pending Data operations (write, writev, truncate, ftruncate) per session.</p> <p>The <code>META</code> denotes: The number of pending Meta operations (setattr, fsetattr, setxattr, fsetxattr, removexattr, fremovexattr) per session.</p> <p>The <code>FAILURE</code> denotes: The number of failures per session. On encountering failures, one can proceed to look at the log files.</p>"},{"location":"Administrator-Guide/Geo-Replication/#deleting-the-session","title":"Deleting the session","text":"<p>Established Geo-replication session can be deleted using the following command,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; delete [force]\n</code></pre> <p>For example,</p> <pre><code>gluster volume geo-replication gvol-primary \\\n  geoaccount@snode1.example.com::gvol-secondary delete\n</code></pre> <p>Note: If the same session is created again then syncing will resume from where it was stopped before deleting the session. If the session to be deleted permanently then use reset-sync-time option with delete command. For example, <code>gluster volume geo-replication gvol-primary geoaccount@snode1::gvol-secondary delete reset-sync-time</code></p>"},{"location":"Administrator-Guide/Geo-Replication/#checkpoint","title":"Checkpoint","text":"<p>Using Checkpoint feature we can find the status of sync with respect to the Checkpoint time. Checkpoint completion status shows \"Yes\" once Geo-rep syncs all the data from that brick which are created or modified before the Checkpoint Time.</p> <p>Set the Checkpoint using,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; config checkpoint now\n</code></pre> <p>Example,</p> <pre><code>gluster volume geo-replication gvol-primary \\\n  geoaccount@snode1.example.com::gvol-secondary \\\n  config checkpoint now\n</code></pre> <p>Touch the Primary mount point to make sure Checkpoint completes even though no I/O happening in the Volume</p> <pre><code>mount -t glusterfs &lt;primaryhost&gt;:&lt;primaryvol&gt; /mnt\ntouch /mnt\n</code></pre> <p>Checkpoint status can be checked using Geo-rep status command. Following columns in status output gives more information about Checkpoint</p> <ul> <li>CHECKPOINT TIME: Checkpoint Set Time</li> <li>CHECKPOINT COMPLETED: Yes/No/NA, Status of Checkpoint</li> <li>CHECKPOINT COMPLETION TIME: Checkpoint Completion Time if   completed, else N/A</li> </ul>"},{"location":"Administrator-Guide/Geo-Replication/#log-files","title":"Log Files","text":"<p>Primary Log files are located in <code>/var/log/glusterfs/geo-replication</code> directory in each Primary nodes. Secondary log files are located in <code>/var/log/glusterfs/geo-replication-secondary</code> directory in Secondary nodes.</p>"},{"location":"Administrator-Guide/Geo-Replication/#gluster-snapshots-and-geo-replicated-volumes","title":"Gluster Snapshots and Geo-replicated Volumes","text":"<p>Gluster snapshot of Primary and Secondary should not go out of order on restore. So while taking snapshot take snapshot of both Primary and Secondary Volumes.</p> <ul> <li> <p>Pause the Geo-replication session using,</p> <pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; pause\n</code></pre> </li> <li> <p>Take Gluster Snapshot of Secondary Volume and Primary Volume(Use same   name for snapshots)</p> <pre><code>gluster snapshot create &lt;snapname&gt; &lt;volname&gt;\n</code></pre> </li> </ul> <p>Example,</p> <pre><code>    gluster snapshot create snap1 gvol-secondary\n    gluster snapshot create snap1 gvol-primary\n</code></pre> <ul> <li>Resume Geo-replication session using,<pre><code>gluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; resume\n</code></pre> </li> </ul> <p>If we want to continue Geo-rep session after snapshot restore, we need to restore both Primary and Secondary Volume and resume the Geo-replication session using force option</p> <pre><code>gluster snapshot restore &lt;snapname&gt;\ngluster volume geo-replication &lt;primary_volume&gt; \\\n    &lt;secondary_user&gt;@&lt;secondary_host&gt;::&lt;secondary_volume&gt; resume force\n</code></pre> <p>Example,</p> <pre><code>gluster snapshot restore snap1 # Secondary Snap\ngluster snapshot restore snap1 # Primary Snap\ngluster volume geo-replication gvol-primary geoaccount@snode1::gvol-secondary \\\n  resume force\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/","title":"Gluster On ZFS","text":""},{"location":"Administrator-Guide/Gluster-On-ZFS/#gluster-on-zfs","title":"Gluster On ZFS","text":"<p>This is a step-by-step set of instructions to install Gluster on top of ZFS as the backing file store. There are some commands which were specific to my installation, specifically, the ZFS tuning section. Moniti estis.</p>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#preparation","title":"Preparation","text":"<ul> <li>Install CentOS 6.3</li> <li>Assumption is that your hostname is <code>gfs01</code></li> <li>Run all commands as the root user</li> <li>yum update</li> <li>Disable IP Tables</li> </ul> <pre><code>chkconfig\u00a0iptables\u00a0off\nservice\u00a0iptables\u00a0stop\n</code></pre> <ul> <li>Disable SELinux</li> </ul> <pre><code>1. edit `/etc/selinux/config`\n2. set `SELINUX=disabled`\n3. reboot\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#install-zfs-on-linux","title":"Install ZFS on Linux","text":"<p>For RHEL6 or 7 and derivatives, you can install the ZFSoL repo (and EPEL) and use that to install ZFS</p> <ul> <li>RHEL\u00a06:</li> </ul> <pre><code>yum\u00a0localinstall\u00a0--nogpgcheck\u00a0https://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum\u00a0localinstall\u00a0--nogpgcheck\u00a0http://archive.zfsonlinux.org/epel/zfs-release.el6.noarch.rpm\nyum\u00a0install\u00a0kernel-devel\u00a0zfs\n</code></pre> <ul> <li>RHEL\u00a07:</li> </ul> <pre><code>yum\u00a0localinstall\u00a0--nogpgcheck\u00a0https://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-2.noarch.rpm\nyum\u00a0localinstall\u00a0--nogpgcheck\u00a0http://archive.zfsonlinux.org/epel/zfs-release.el7.noarch.rpm\nyum\u00a0install\u00a0kernel-devel\u00a0zfs\n</code></pre> <p>and skip to Finish ZFS Configuration below.</p> <p>Or you can roll your own if you want specific patches:</p> <pre><code>yum\u00a0groupinstall\u00a0\"Development\u00a0Tools\"\n</code></pre> <ul> <li>Download &amp; unpack latest SPL and ZFS tarballs from zfsonlinux.org</li> </ul>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#install-dkms","title":"Install DKMS","text":"<p>We want automatically rebuild the kernel modules when we upgrade the kernel, so you definitely want DKMS with ZFS on Linux.</p> <ul> <li>Download latest RPM from http://linux.dell.com/dkms</li> <li>Install DKMS</li> </ul> <pre><code>rpm -Uvh dkms*.rpm\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#build-install-spl","title":"Build &amp; Install SPL","text":"<ul> <li>Enter SPL source directory</li> <li>The following commands create two source &amp; three binary RPMs. Remove the static module RPM (we are using DKMS) and install the rest:</li> </ul> <pre><code>./configure\nmake\u00a0rpm\nrm\u00a0spl-modules-0.6.0*.x86_64.rpm\nrpm\u00a0-Uvh\u00a0spl*.x86_64.rpm\u00a0spl*.noarch.rpm\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#build-install-zfs","title":"Build &amp; Install ZFS","text":"<p>Notice: If you plan to use the <code>xattr=sa</code> filesystem option, make sure you have the ZFS fix for https://github.com/zfsonlinux/zfs/issues/1648 so your symlinks don't get corrupted. (applies to ZFSoL before 0.6.3, <code>xattr=sa</code> is safe to use on 0.6.3 and later)</p> <ul> <li>Enter ZFS source directory</li> <li>The following commands create two source &amp; five binary RPMs. Remove the static module RPM and install the rest. Note we have a few preliminary packages to install before we can compile.</li> </ul> <pre><code>yum\u00a0install\u00a0zlib-devel\u00a0libuuid-devel\u00a0libblkid-devel\u00a0libselinux-devel\u00a0parted\u00a0lsscsi\n./configure\nmake\u00a0rpm\nrm\u00a0zfs-modules-0.6.0*.x86_64.rpm\nrpm\u00a0-Uvh\u00a0zfs*.x86_64.rpm\u00a0zfs*.noarch.rpm\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#finish-zfs-configuration","title":"Finish ZFS Configuration","text":"<ul> <li>Reboot to allow all changes to take effect, if desired</li> <li>Create ZFS storage pool, in below examples it will be named <code>sp1</code>. This is a simple example of 4 HDDs in RAID10. NOTE: Check the latest ZFS on Linux FAQ about configuring the <code>/etc/zfs/zdev.conf</code> file. You want to create mirrored devices across controllers to maximize performance. Make sure to run <code>udevadm trigger</code> after creating zdev.conf.</li> </ul> <pre><code>zpool\u00a0create\u00a0-f\u00a0sp1\u00a0mirror\u00a0A0\u00a0B0\u00a0mirror\u00a0A1\u00a0B1\nzpool\u00a0status\u00a0sp1\ndf\u00a0-h\n</code></pre> <ul> <li>You should see the <code>/sp1</code> mount point</li> <li>Enable ZFS compression to save disk space:</li> </ul> <p><code>zfs set compression=on sp1</code></p> <ul> <li>you can also use <code>lz4</code> compression on later versions of ZFS as it can be faster, especially for incompressible workloads. It is safe to change this on the fly, as ZFS will compress new data with the current setting:</li> </ul> <p><code>zfs set compression=lz4 sp1</code></p> <ul> <li>Set ZFS tunables. This is specific to my environment.</li> <li>Set ARC cache min to 33% and max to 75% of installed RAM. Since this is a dedicated storage node, I can get away with this. In my case my servers have 24G of RAM. More RAM is better with ZFS.</li> <li>We use SATA drives which do not accept command tagged queuing, therefore set the min and max pending requests to 1</li> <li>Disable read prefetch because it is almost completely useless and does nothing in our environment but work the drives unnecessarily. I see &lt; 10% prefetch cache hits, so it's really not required and actually hurts performance.</li> <li>Set transaction group timeout to 5 seconds to prevent the volume from appearing to freeze due to a large batch of writes. 5 seconds is the default, but safe to force this.</li> <li>Ignore client flush/sync commands; let ZFS handle this with the transaction group timeout flush. NOTE: Requires a UPS backup solution unless you don't mind losing that 5 seconds worth of data.</li> </ul> <pre><code>echo\u00a0\"options\u00a0zfs\u00a0zfs_arc_min=8G\u00a0zfs_arc_max=18G\u00a0zfs_vdev_min_pending=1\u00a0zfs_vdev_max_pending=1\u00a0zfs_prefetch_disable=1\u00a0zfs_txg_timeout=5\"\u00a0&gt;\u00a0/etc/modprobe.d/zfs.conf\nreboot\n</code></pre> <ul> <li>Setting the <code>acltype</code> property to <code>posixacl</code> indicates Posix ACLs should be used.</li> </ul> <p><code>zfs set acltype=posixacl sp1</code></p>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#install-glusterfs","title":"Install GlusterFS","text":"<pre><code>wget\u00a0-P\u00a0/etc/yum.repos.d\u00a0http://download.gluster.org/pub/gluster/glusterfs/LATEST/EPEL.repo/glusterfs-epel.repo\nyum\u00a0install\u00a0glusterfs{-fuse,-server}\nservice\u00a0glusterd\u00a0start\nservice\u00a0glusterd\u00a0status\nchkconfig\u00a0glusterd\u00a0on\n</code></pre> <ul> <li>Continue with your GFS peer probe, volume creation, etc.</li> <li>To mount GFS volumes automatically after reboot, add these lines to <code>/etc/rc.local</code> (assuming your gluster volume is called <code>export</code> and your desired mount point is <code>/export</code>:</li> </ul> <pre><code>#\u00a0Mount\u00a0GFS\u00a0Volumes\nmount\u00a0-t\u00a0glusterfs\u00a0gfs01:/export\u00a0/export\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#miscellaneous-notes-todo","title":"Miscellaneous Notes &amp; TODO","text":""},{"location":"Administrator-Guide/Gluster-On-ZFS/#daily-e-mail-status-reports","title":"Daily e-mail status reports","text":"<p>Python script source; put your desired e-mail address in the <code>toAddr</code> variable. Add a crontab entry to run this daily.</p> <pre><code>#!/usr/bin/python\n'''\nSend e-mail to given user with zfs status\n'''\nimport datetime\nimport socket\nimport smtplib\nimport subprocess\n\n\ndef doShellCmd(cmd):\n    '''execute system shell command, return output as string'''\n    subproc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n    cmdOutput = subproc.communicate()[0]\n    return cmdOutput\n\nhostname = socket.gethostname()\nstatusLine = \"Status of \" + hostname + \" at \" + str(datetime.datetime.now())\nzpoolList = doShellCmd('zpool list')\nzpoolStatus = doShellCmd('zpool status')\nzfsList = doShellCmd('zfs list')\nreport = (statusLine + \"\\n\" +\n    \"-----------------------------------------------------------\\n\" +\n    zfsList +\n    \"-----------------------------------------------------------\\n\" +\n    zpoolList +\n    \"-----------------------------------------------------------\\n\" +\n    zpoolStatus)\n\nfromAddr = \"From: root@\" + hostname + \"\\r\\n\"\ntoAddr = \"To: user@your.com\\r\\n\"\nsubject = \"Subject: ZFS Status from \" + hostname + \"\\r\\n\"\nmsg = (subject + report)\nserver = smtplib.SMTP('localhost')\nserver.set_debuglevel(1)\nserver.sendmail(fromAddr, toAddr, msg)\nserver.quit()\n\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#restoring-files-from-zfs-snapshots","title":"Restoring files from ZFS Snapshots","text":"<p>Show which node a file is on (for restoring files from ZFS snapshots):</p> <pre><code> getfattr\u00a0-n\u00a0trusted.glusterfs.pathinfo\u00a0&lt;file&gt;\n</code></pre>"},{"location":"Administrator-Guide/Gluster-On-ZFS/#recurring-zfs-snapshots","title":"Recurring ZFS Snapshots","text":"<p>Since the community site will not let me actually post the script due to some random bug with Akismet spam blocking, I'll just post links instead.</p> <ul> <li>Recurring ZFS Snapshots</li> <li>Or use https://github.com/zfsonlinux/zfs-auto-snapshot</li> </ul>"},{"location":"Administrator-Guide/GlusterFS-Cinder/","title":"Accessing GlusterFS using Cinder Hosts","text":"<p>Note: GlusterFS driver was removed from Openstack since Ocata. This guide applies only to older Openstack releases.</p>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#1-introduction","title":"1. Introduction","text":"<p>GlusterFS and Cinder integration provides a system for data storage that enables users to access the same data, both as an object and as a file, thus simplifying management and controlling storage costs.</p> <p>GlusterFS - GlusterFS is an open source, distributed file system capable of scaling to several petabytes and handling thousands of clients. GlusterFS clusters together storage building blocks over Infiniband RDMA or TCP/IP interconnect, aggregating disk and memory resources and managing data in a single global namespace. GlusterFS is based on a stackable user space design and can deliver exceptional performance for diverse workloads.</p> <p>Cinder - Cinder is the OpenStack service which is responsible for handling persistent storage for virtual machines. This is persistent block storage for the instances running in Nova. Snapshots can be taken for backing up and data, either for restoring data, or to be used to create new block storage volumes.</p> <p>With Enterprise Linux 6, configuring OpenStack Grizzly to use GlusterFS for its Cinder (block) storage is fairly simple.</p> <p>These instructions have been tested with both GlusterFS 3.3 and GlusterFS 3.4. Other releases may also work, but have not been tested.</p>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#2-prerequisites","title":"2. Prerequisites","text":""},{"location":"Administrator-Guide/GlusterFS-Cinder/#glusterfs","title":"GlusterFS","text":"<p>For information on prerequisites and instructions for installing GlusterFS, see http://www.gluster.org/community/documentation/index.php.</p>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#cinder","title":"Cinder","text":"<p>For information on prerequisites and instructions for installing Cinder, see http://docs.openstack.org/.</p> <p>Before beginning, you must ensure there are no existing volumes in Cinder. Use \"cinder delete\" to remove any, and \"cinder list\" to verify that they are deleted. If you do not delete the existing cinder volumes, it will cause errors later in the process, breaking your Cinder installation.</p> <p>NOTE - Unlike other software, the \"openstack-config\" and \"cinder\" commands generally require you to run them as a root user. Without prior configuration, running them through sudo generally does not work. (This can be changed, but is beyond the scope of this HOW-TO.)</p>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#3-installing-glusterfs-client-on-cinder-hosts","title":"3 Installing GlusterFS Client on Cinder hosts","text":"<p>On each Cinder host, install the GlusterFS client packages:</p> <pre><code>sudo\u00a0yum\u00a0-y\u00a0install\u00a0glusterfs-fuse\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#4-configuring-cinder-to-add-glusterfs","title":"4. Configuring Cinder to Add GlusterFS","text":"<p>On each Cinder host, run the following commands to add GlusterFS to the Cinder configuration:</p> <pre><code>openstack-config --set\u00a0/etc/cinder/cinder.conf\u00a0DEFAULT\u00a0volume_driver\u00a0cinder.volume.drivers.glusterfs.GlusterfsDriver\nopenstack-config\u00a0--set\u00a0/etc/cinder/cinder.conf\u00a0DEFAULT\u00a0glusterfs_shares_config\u00a0/etc/cinder/shares.conf\nopenstack-config\u00a0--set\u00a0/etc/cinder/cinder.conf\u00a0DEFAULT\u00a0glusterfs_mount_point_base\u00a0/var/lib/cinder/volumes\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#5-creating-glusterfs-volume-list","title":"5. Creating GlusterFS Volume List","text":"<p>On each of the Cinder nodes, create a simple text file /etc/cinder/shares.conf.</p> <p>This file is a simple list of the GlusterFS volumes to be used, one per line, using the following format:</p> <pre><code>GLUSTERHOST:VOLUME\nGLUSTERHOST:NEXTVOLUME\nGLUSTERHOST2:SOMEOTHERVOLUME\n</code></pre> <p>For example:</p> <pre><code>myglusterbox.example.org:myglustervol\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#6-updating-firewall-for-glusterfs","title":"6. Updating Firewall for GlusterFS","text":"<p>You must update the firewall rules on each Cinder node to communicate with the GlusterFS nodes.</p> <p>The ports to open are explained in Step 3:</p> <p>https://docs.gluster.org/en/latest/Install-Guide/Install/</p> <p>If you are using iptables as your firewall, these lines can be added under :OUTPUT ACCEPT in the \"*filter\" section. You should probably adjust them to suit your environment (eg. only accept connections from your GlusterFS servers).</p> <pre><code>-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a0111\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a024007\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a024008\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a024009\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a024010\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a024011\u00a0-j\u00a0ACCEPT\n-A\u00a0INPUT\u00a0-m\u00a0state\u00a0--state\u00a0NEW\u00a0-m\u00a0tcp\u00a0-p\u00a0tcp\u00a0--dport\u00a038465:38469\u00a0-j\u00a0ACCEPT\n</code></pre> <p>Restart the firewall service:</p> <pre><code>sudo\u00a0service\u00a0iptables\u00a0restart\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#7-restarting-cinder-services","title":"7. Restarting Cinder Services","text":"<p>Configuration is complete and now you must restart the Cinder services to make it active.</p> <pre><code>for\u00a0i\u00a0in\u00a0api\u00a0scheduler\u00a0volume;\u00a0do\u00a0sudo\u00a0service\u00a0openstack-cinder-${i}\u00a0start;\u00a0done\n</code></pre> <p>Check the Cinder volume log to make sure that there are no errors:</p> <pre><code>sudo\u00a0tail\u00a0-50\u00a0/var/log/cinder/volume.log\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Cinder/#8-verify-glusterfs-integration-with-cinder","title":"8. Verify GlusterFS Integration with Cinder","text":"<p>To verify if the installation and configuration is successful, create a Cinder volume then check using GlusterFS.</p> <p>Create a Cinder volume:</p> <pre><code>cinder\u00a0create\u00a0--display_name\u00a0myvol\u00a010\n</code></pre> <p>Volume creation takes a few seconds. Once created, run the following command:</p> <pre><code>cinder\u00a0list\n</code></pre> <p>The volume should be in \"available\" status. Now, look for a new file in the GlusterFS volume directory:</p> <pre><code>sudo\u00a0ls\u00a0-lah\u00a0/var/lib/cinder/volumes/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/\n</code></pre> <p>(the <code>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> will be a number specific to your installation)</p> <p>A newly created file should be inside that directory which is the new volume you just created. A new file will appear each time you create a volume.</p> <p>For example:</p> <pre><code>$ sudo\u00a0ls\u00a0-lah\u00a0/var/lib/cinder/volumes/29e55f0f3d56494ef1b1073ab927d425/\n\u00a0\n total\u00a04.0K\n\u00a0drwxr-xr-x.\u00a03\u00a0root\u00a0\u00a0\u00a0root\u00a0\u00a0\u00a0\u00a0\u00a073\u00a0Apr\u00a0\u00a04\u00a015:46\u00a0.\n\u00a0drwxr-xr-x.\u00a03\u00a0cinder\u00a0cinder\u00a04.0K\u00a0Apr\u00a0\u00a03\u00a009:31\u00a0..\n\u00a0-rw-rw-rw-.\u00a01\u00a0root\u00a0\u00a0\u00a0root\u00a0\u00a0\u00a0\u00a010G\u00a0Apr\u00a0\u00a04\u00a015:46\u00a0volume-a4b97d2e-0f8e-45b2-9b94-b8fa36bd51b9\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/","title":"Coreutils for GlusterFS volumes","text":"<p>The GlusterFS Coreutils is a suite of utilities that aims to mimic the standard Linux coreutils, with the exception that it utilizes the gluster C API in order to do work. It offers an interface similar to that of the ftp program. Operations include things like getting files from the server to the local machine, putting files from the local machine to the server, retrieving directory information from the server and so on.</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#installation","title":"Installation","text":""},{"location":"Administrator-Guide/GlusterFS-Coreutils/#install-glusterfs","title":"Install GlusterFS","text":"<p>For information on prerequisites, instructions and configuration of GlusterFS, see Installation Guides from http://docs.gluster.org/en/latest/.</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#install-glusterfs-coreutils","title":"Install glusterfs-coreutils","text":"<p>For now glusterfs-coreutils will be packaged only as rpm. Other package formats will be supported very soon.</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#for-fedora","title":"For fedora","text":"<p>Use dnf/yum to install glusterfs-coreutils:</p> <pre><code>dnf install glusterfs-coreutils\n</code></pre> <p>OR</p> <pre><code>yum install glusterfs-coreutils\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#usage","title":"Usage","text":"<p>glusterfs-coreutils provides a set of basic utilities such as cat, cp, flock, ls, mkdir, rm, stat and tail that are implemented specifically using the GlusterFS API commonly known as libgfapi. These utilities can be used either inside a gluster remote shell or as standalone commands with 'gf' prepended to their respective base names. For example, glusterfs cat utility is named as gfcat and so on with an exception to flock core utility for which a standalone gfflock command is not provided as such(see the notes section on why flock is designed in that way).</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#using-coreutils-within-a-remote-gluster-shell","title":"Using coreutils within a remote gluster-shell","text":""},{"location":"Administrator-Guide/GlusterFS-Coreutils/#invoke-a-new-shell","title":"Invoke a new shell","text":"<p>In order to enter into a gluster client-shell, type gfcli and press enter. You will now be presented with a similar prompt as shown below:</p> <pre><code># gfcli\ngfcli&gt;\n</code></pre> <p>See the man page for gfcli for more options.</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#connect-to-a-gluster-volume","title":"Connect to a gluster volume","text":"<p>Now we need to connect as a client to some glusterfs volume which has already started. Use connect command to do so as follows:</p> <pre><code>gfcli&gt; connect glfs://&lt;SERVER-IP or HOSTNAME&gt;/&lt;VOLNAME&gt;\n</code></pre> <p>For example if you have a volume named vol on a server with hostname localhost the above command will take the following form:</p> <pre><code>gfcli&gt; connect glfs://localhost/vol\n</code></pre> <p>Make sure that you are successfully attached to a remote gluster volume by verifying the new prompt which should look like:</p> <pre><code>gfcli (&lt;SERVER IP or HOSTNAME/&lt;VOLNAME&gt;)\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#try-out-your-favorite-utilities","title":"Try out your favorite utilities","text":"<p>Please go through the man pages for different utilities and available options for each command. For example, man gfcp will display details on the usage of cp command outside or within a gluster-shell. Run different commands as follows:</p> <pre><code>gfcli (localhost/vol) ls .\ngfcli (localhost/vol) stat .trashcan\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#terminate-the-client-connection-from-the-volume","title":"Terminate the client connection from the volume","text":"<p>Use disconnect command to close the connection:</p> <pre><code>gfcli (localhost/vol) disconnect\ngfcli&gt;\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#exit-from-shell","title":"Exit from shell","text":"<p>Run quit from shell:</p> <pre><code>gfcli&gt; quit\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#using-standalone-glusterfs-coreutil-commands","title":"Using standalone glusterfs coreutil commands","text":"<p>As mentioned above glusterfs coreutils also provides standalone commands to perform the basic GNU coreutil functionalities. All those commands are prepended by 'gf'. Instead of invoking a gluster client-shell you can directly make use of these to establish and perform the operation in one shot. For example see the following sample usage of gfstat command:</p> <pre><code>gfstat glfs://localhost/vol/foo\n</code></pre> <p>There is an exemption regarding flock coreutility which is not available as a standalone command for a reason described under 'Notes' section.</p> <p>For more information on each command and corresponding options see associated man pages.</p>"},{"location":"Administrator-Guide/GlusterFS-Coreutils/#notes","title":"Notes","text":"<ul> <li>Within a particular session of gluster client-shell, history of commands are preserved i.e, you can use up/down arrow keys to search through previously executed commands or the reverse history search technique using Ctrl+R.</li> <li>flock is not available as standalone 'gfflock'. Because locks are always associated with file descriptors. Unlike all other commands flock cannot straight away clean up the file descriptor after acquiring the lock. For flock we need to maintain an active connection as a glusterfs client.</li> </ul>"},{"location":"Administrator-Guide/GlusterFS-Filter/","title":"Modifying .vol files with a filter","text":"<p>If you need to make manual changes to a .vol file it is recommended to make these through the client interface ('gluster foo'). Making changes directly to .vol files is discouraged, because it cannot be predicted when a .vol file will be reset on disk, for example with a 'gluster set foo' command. The command line interface was never designed to read the .vol files, but rather to keep state and rebuild them (from <code>/var/lib/glusterd/vols/$vol/info</code>). There is, however, another way to do this.</p> <p>You can create a shell script in the directory <code>/usr/lib*/glusterfs/$VERSION/filter</code>. All scripts located there will be executed every time the .vol files are written back to disk. The first and only argument passed to all script located there is the name of the .vol file.</p> <p>So you could create a script there that looks like this:</p> <pre><code>#!/bin/sh\nsed\u00a0-i\u00a0'some-sed-magic'\u00a0\"$1\"\n</code></pre> <p>Which will run the script, which in turn will run the sed command on the .vol file (passed as \\$1).</p> <p>Importantly, the script needs to be set as executable (eg via chmod), else it won't be run.</p>"},{"location":"Administrator-Guide/GlusterFS-Introduction/","title":"What is Gluster ?","text":"<p>Gluster is a scalable, distributed file system that aggregates disk storage resources from multiple servers into a single global namespace.</p>"},{"location":"Administrator-Guide/GlusterFS-Introduction/#advantages","title":"Advantages","text":"<ul> <li>Scales to several petabytes</li> <li>Handles thousands of clients</li> <li>POSIX compatible</li> <li>Uses commodity hardware</li> <li>Can use any ondisk filesystem that supports extended attributes</li> <li>Accessible using industry standard protocols like NFS and SMB</li> <li>Provides replication, quotas, geo-replication, snapshots and bitrot detection</li> <li>Allows optimization for different workloads</li> <li>Open Source</li> </ul> <p>Enterprises can scale capacity, performance, and availability on demand, with no vendor lock-in, across on-premise, public cloud, and hybrid environments. Gluster is used in production at thousands of organisations spanning media, healthcare, government, education, web 2.0, and financial services.</p>"},{"location":"Administrator-Guide/GlusterFS-Introduction/#commercial-offerings-and-support","title":"Commercial offerings and support","text":"<p>Several companies offer support or consulting.</p> <p>Red Hat Gluster Storage is a commercial storage software product, based on Gluster.</p>"},{"location":"Administrator-Guide/GlusterFS-Keystone-Quickstart/","title":"GlusterFS Keystone Quickstart","text":"<p>This is a document in progress, and may contain some errors or missing information.</p> <p>I am currently in the process of building an AWS Image with this installed, however if you can't wait, and want to install this with a script, here are the commands from both articles, with defaults appropriate for an Amazon CentOS/RHEL 6 AMI, such as ami-a6e15bcf</p> <p>This document assumes you already have GlusterFS with UFO installed, 3.3.1-11 or later, and are using the instructions here:</p> <p><code>http://www.gluster.org/2012/09/howto-using-ufo-swift-a-quick-and-dirty-setup-guide/</code></p> <p>These docs are largely derived from:</p> <p><code>http://fedoraproject.org/wiki/Getting_started_with_OpenStack_on_Fedora_17#Initial_Keystone_setup</code></p> <p>Add the RDO Openstack Grizzly and Epel repos:</p> <pre><code>sudo\u00a0yum\u00a0install\u00a0-y\u00a0\"http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\"\n\nsudo\u00a0yum\u00a0install\u00a0-y\u00a0\"http://rdo.fedorapeople.org/openstack/openstack-grizzly/rdo-release-grizzly-1.noarch.rpm\"\n</code></pre> <p>Install Openstack-Keystone</p> <pre><code>sudo\u00a0yum\u00a0install\u00a0openstack-keystone\u00a0openstack-utils\u00a0python-keystoneclient\n</code></pre> <p>Configure keystone</p> <pre><code>$\u00a0cat\u00a0&gt;\u00a0keystonerc\u00a0&lt;&lt;\u00a0_EOF\nexport\u00a0ADMIN_TOKEN=$(openssl\u00a0rand\u00a0-hex\u00a010)\nexport\u00a0OS_USERNAME=admin\nexport\u00a0OS_PASSWORD=$(openssl\u00a0rand\u00a0-hex\u00a010)\nexport\u00a0OS_TENANT_NAME=admin\nexport\u00a0OS_AUTH_URL=`[`https://127.0.0.1:5000/v2.0/`](https://127.0.0.1:5000/v2.0/)\nexport\u00a0SERVICE_ENDPOINT=`[`https://127.0.0.1:35357/v2.0/`](https://127.0.0.1:35357/v2.0/)\nexport\u00a0SERVICE_TOKEN=\\$ADMIN_TOKEN\n_EOF\n\n$\u00a0.\u00a0./keystonerc\n$\u00a0sudo\u00a0openstack-db\u00a0--service\u00a0keystone\u00a0--init\n</code></pre> <p>Append the keystone configs to /etc/swift/proxy-server.conf</p> <pre><code>$\u00a0sudo\u00a0-i\n\n#\u00a0cat\u00a0&gt;&gt;\u00a0/etc/swift/proxy-server.conf\u00a0&lt;&lt;\u00a0_EOM\n[filter:keystone]`\nuse\u00a0=\u00a0egg:swift#keystoneauth`\noperator_roles\u00a0=\u00a0admin,\u00a0swiftoperator`\n\n[filter:authtoken]\npaste.filter_factory\u00a0=\u00a0keystoneclient.middleware.auth_token:filter_factory\nauth_port\u00a0=\u00a035357\nauth_host\u00a0=\u00a0127.0.0.1\nauth_protocol\u00a0=\u00a0https\n_EOM\n\n# exit\n</code></pre> <p>Finish configuring both swift and keystone using the command-line tool:</p> <pre><code>sudo\u00a0openstack-config\u00a0--set\u00a0/etc/swift/proxy-server.conf\u00a0filter:authtoken\u00a0admin_token\u00a0$ADMIN_TOKEN\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/swift/proxy-server.conf\u00a0filter:authtoken\u00a0auth_token\u00a0$ADMIN_TOKEN\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/swift/proxy-server.conf\u00a0DEFAULT\u00a0log_name\u00a0proxy_server\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/swift/proxy-server.conf\u00a0filter:authtoken\u00a0signing_dir\u00a0/etc/swift\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/swift/proxy-server.conf\u00a0pipeline:main\u00a0pipeline\u00a0\"healthcheck\u00a0cache\u00a0authtoken\u00a0keystone\u00a0proxy-server\"\n\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0DEFAULT\u00a0admin_token\u00a0$ADMIN_TOKEN\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0ssl\u00a0enable\u00a0True\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0ssl\u00a0keyfile\u00a0/etc/swift/cert.key\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0ssl\u00a0certfile\u00a0/etc/swift/cert.crt\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0signing\u00a0token_format\u00a0UUID\nsudo\u00a0openstack-config\u00a0--set\u00a0/etc/keystone/keystone.conf\u00a0sql\u00a0connection\u00a0mysql://keystone:keystone@127.0.0.1/keystone\n</code></pre> <p>Configure keystone to start at boot and start it up.</p> <pre><code>sudo\u00a0chkconfig\u00a0openstack-keystone\u00a0on\nsudo\u00a0service\u00a0openstack-keystone\u00a0start\u00a0#\u00a0If\u00a0you\u00a0script\u00a0this,\u00a0you'll\u00a0want\u00a0to\u00a0wait\u00a0a\u00a0few\u00a0seconds\u00a0to\u00a0start\u00a0using\u00a0it\n</code></pre> <p>We are using untrusted certs, so tell keystone not to complain. If you replace with trusted certs, or are not using SSL, set this to \"\".</p> <pre><code>INSECURE=\"--insecure\"\n</code></pre> <p>Create the keystone and swift services in keystone:</p> <pre><code>KS_SERVICEID=$(keystone\u00a0$INSECURE\u00a0service-create\u00a0--name=keystone\u00a0--type=identity\u00a0--description=\"Keystone\u00a0Identity\u00a0Service\"\u00a0|\u00a0grep\u00a0\"\u00a0id\u00a0\"\u00a0|\u00a0cut\u00a0-d\u00a0\"|\"\u00a0-f\u00a03)\n\nSW_SERVICEID=$(keystone\u00a0$INSECURE\u00a0service-create\u00a0--name=swift\u00a0--type=object-store\u00a0--description=\"Swift\u00a0Service\"\u00a0|\u00a0grep\u00a0\"\u00a0id\u00a0\"\u00a0|\u00a0cut\u00a0-d\u00a0\"|\"\u00a0-f\u00a03)\n\nendpoint=\"`[`https://127.0.0.1:443`](https://127.0.0.1:443)`\"\n\nkeystone\u00a0$INSECURE\u00a0endpoint-create\u00a0--service_id\u00a0$KS_SERVICEID\u00a0\\\n\u00a0\u00a0--publicurl\u00a0$endpoint'/v2.0'\u00a0--adminurl\u00a0`[`https://127.0.0.1:35357/v2.0`](https://127.0.0.1:35357/v2.0)`\u00a0\\\n\u00a0\u00a0--internalurl\u00a0`[`https://127.0.0.1:5000/v2.0`](https://127.0.0.1:5000/v2.0)\n\nkeystone\u00a0$INSECURE\u00a0endpoint-create\u00a0--service_id\u00a0$SW_SERVICEID\u00a0\\\n\u00a0\u00a0--publicurl\u00a0$endpoint'/v1/AUTH_$(tenant_id)s'\u00a0\\\n\u00a0\u00a0--adminurl\u00a0$endpoint'/v1/AUTH_$(tenant_id)s'\u00a0\\\n\u00a0\u00a0--internalurl\u00a0$endpoint'/v1/AUTH_$(tenant_id)s'\n</code></pre> <p>Create the admin tenant:</p> <pre><code>admin_id=$(keystone\u00a0$INSECURE\u00a0tenant-create\u00a0--name\u00a0admin\u00a0--description\u00a0\"Internal\u00a0Admin\u00a0Tenant\"\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\n</code></pre> <p>Create the admin roles:</p> <pre><code>admin_role=$(keystone\u00a0$INSECURE\u00a0role-create\u00a0--name\u00a0admin\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\nksadmin_role=$(keystone\u00a0$INSECURE\u00a0role-create\u00a0--name\u00a0KeystoneServiceAdmin\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\nkadmin_role=$(keystone\u00a0$INSECURE\u00a0role-create\u00a0--name\u00a0KeystoneAdmin\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\nmember_role=$(keystone\u00a0$INSECURE\u00a0role-create\u00a0--name\u00a0member\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\n</code></pre> <p>Create the admin user:</p> <pre><code>user_id=$(keystone\u00a0$INSECURE\u00a0user-create\u00a0--name\u00a0admin\u00a0--tenant-id\u00a0$admin_id\u00a0--pass\u00a0$OS_PASSWORD\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\n\nkeystone\u00a0$INSECURE\u00a0user-role-add\u00a0--user-id\u00a0$user_id\u00a0--tenant-id\u00a0$admin_id\u00a0\\\n\u00a0\u00a0--role-id\u00a0$admin_role\n\nkeystone\u00a0$INSECURE\u00a0user-role-add\u00a0--user-id\u00a0$user_id\u00a0--tenant-id\u00a0$admin_id\u00a0\\\n\u00a0\u00a0--role-id\u00a0$kadmin_role\n\nkeystone\u00a0$INSECURE\u00a0user-role-add\u00a0--user-id\u00a0$user_id\u00a0--tenant-id\u00a0$admin_id\u00a0\\\n\u00a0\u00a0--role-id\u00a0$ksadmin_role\n</code></pre> <p>If you do not have multi-volume support (broken in 3.3.1-11), then the volume names will not correlate to the tenants, and all tenants will map to the same volume, so just use a normal name. (This will be fixed in 3.4, and should be fixed in 3.4 Beta. The bug report for this is here: https://bugzilla.redhat.com/show_bug.cgi?id=924792)</p> <pre><code>volname=\"admin\"\n\n# or\u00a0if\u00a0you\u00a0have\u00a0the\u00a0multi-volume\u00a0patch\nvolname=$admin_id\n</code></pre> <p>Create and start the admin volume:</p> <pre><code>sudo\u00a0gluster\u00a0volume\u00a0create\u00a0$volname\u00a0$myhostname:$pathtobrick\nsudo\u00a0gluster\u00a0volume\u00a0start\u00a0$volname\nsudo\u00a0service\u00a0openstack-keystone\u00a0start\n</code></pre> <p>Create the ring for the admin tenant. If you have working multi-volume support, then you can specify multiple volume names in the call:</p> <pre><code>cd\u00a0/etc/swift\nsudo\u00a0/usr/bin/gluster-swift-gen-builders\u00a0$volname\nsudo\u00a0swift-init\u00a0main\u00a0restart\n</code></pre> <p>Create a testadmin user associated with the admin tenant with password testadmin and admin role:</p> <pre><code>user_id=$(keystone\u00a0$INSECURE\u00a0user-create\u00a0--name\u00a0testadmin\u00a0--tenant-id\u00a0$admin_id\u00a0--pass\u00a0testadmin\u00a0|\u00a0grep\u00a0id\u00a0|\u00a0awk\u00a0'{print\u00a0$4}')\n\nkeystone\u00a0$INSECURE\u00a0user-role-add\u00a0--user-id\u00a0$user_id\u00a0--tenant-id\u00a0$admin_id\u00a0\\\n\u00a0\u00a0--role-id\u00a0$admin_role\n</code></pre> <p>Test the user:</p> <pre><code>curl\u00a0$INSECURE\u00a0-d\u00a0'{\"auth\":{\"tenantName\":\u00a0\"admin\",\u00a0\"passwordCredentials\":{\"username\":\u00a0\"testadmin\",\u00a0\"password\":\u00a0\"testadmin\"}}}'\u00a0-H\u00a0\"Content-type:\u00a0application/json\"\u00a0\"https://127.0.0.1:5000/v2.0/tokens\"\n</code></pre> <p>See here for more examples:</p> <p>http://docs.openstack.org/developer/keystone/api_curl_examples.html</p>"},{"location":"Administrator-Guide/GlusterFS-iSCSI/","title":"GlusterFS iSCSI","text":""},{"location":"Administrator-Guide/GlusterFS-iSCSI/#introduction","title":"Introduction","text":"<p>iSCSI on Gluster can be set up using the Linux Target driver. This is a user space daemon that accepts iSCSI (as well as iSER and FCoE.) It interprets iSCSI CDBs and converts them into some other I/O operation, according to user configuration. In our case, we can convert the CDBs into file operations that run against a gluster file. The file represents the LUN and the offset in the file the LBA.</p> <p>A plug-in for the Linux target driver has been written to use the libgfapi. It is part of the Linux target driver (bs_glfs.c). Using it, the datapath skips FUSE. This document will be updated to describe how to use it. You can see README.glfs in the Linux target driver's documentation subdirectory.</p> <p>LIO is a replacement for the Linux Target Driver that is included in RHEL7. A user-space plug-in mechanism for it is under development. Once that piece of code exists a similar mechanism can be built for gluster as was done for the Linux target driver.</p> <p>Below is a cookbook to set it up using the Linux Target Driver on the server. This has been tested on XEN and KVM instances within RHEL6, RHEL7, and Fedora 19 instances. In this setup a single path leads to gluster, which represents a performance bottleneck and single point of failure. For HA and load balancing, it is possible to setup two or more paths to different gluster servers using mpio; if the target name is equivalent over each path, mpio will coalless both paths into a single device.</p> <p>For more information on iSCSI and the Linux target driver, see [1] and [2].</p>"},{"location":"Administrator-Guide/GlusterFS-iSCSI/#setup","title":"Setup","text":"<p>Mount gluster locally on your gluster server. Note you can also run it on the gluster client. There are pros and cons to these configurations, described below.</p> <pre><code>mount\u00a0-t\u00a0glusterfs\u00a0127.0.0.1:gserver\u00a0/mnt\n</code></pre> <p>Create a large file representing your block device within the gluster fs. In this case, the lun is 2G. (You could also create a gluster \"block device\" for this purpose, which would skip the file system).</p> <pre><code>dd\u00a0if=/dev/zero\u00a0of=disk3\u00a0bs=2G\u00a0count=25\n</code></pre> <p>Create a target using the file as the backend storage.</p> <p>If necessary, download the Linux SCSI target. Then start the service.</p> <pre><code>yum\u00a0install\u00a0scsi-target-utils\nservice\u00a0tgtd\u00a0start\n</code></pre> <p>You must give an iSCSI Qualified name (IQN), in the format : iqn.yyyy-mm.reversed.domain.name:OptionalIdentifierText</p> <p>where:</p> <p>yyyy-mm represents the 4-digit year and 2-digit month the device was started (for example: 2011-07)</p> <pre><code>tgtadm\u00a0--lld\u00a0iscsi\u00a0--op\u00a0new\u00a0--mode\u00a0target\u00a0--tid\u00a01\u00a0-T\u00a0iqn.20013-10.com.redhat\n</code></pre> <p>You can look at the target:</p> <pre><code>#\u00a0tgtadm\u00a0--lld\u00a0iscsi\u00a0--op\u00a0show\u00a0--mode\u00a0conn\u00a0--tid\u00a01\n\nSession:\u00a011\u00a0\u00a0Connection:\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0Initiator\u00a0iqn.1994-05.com.redhat:cf75c8d4274d\n</code></pre> <p>Next, add a logical unit to the target</p> <pre><code>tgtadm\u00a0--lld\u00a0iscsi\u00a0--op\u00a0new\u00a0--mode\u00a0logicalunit\u00a0--tid\u00a01\u00a0--lun\u00a01\u00a0-b\u00a0/mnt/disk3\n</code></pre> <p>Allow any initiator to access the target.</p> <pre><code>tgtadm\u00a0--lld\u00a0iscsi\u00a0--op\u00a0bind\u00a0--mode\u00a0target\u00a0--tid\u00a01\u00a0-I\u00a0ALL\n</code></pre> <p>Now it\u2019s time to set up your client.</p> <p>Discover your targets. Note in this example's case, the target IP address is 192.168.1.2</p> <pre><code>iscsiadm\u00a0--mode\u00a0discovery\u00a0--type\u00a0sendtargets\u00a0--portal\u00a0192.168.1.2\n</code></pre> <p>Login to your target session.</p> <pre><code>iscsiadm\u00a0--mode\u00a0node\u00a0--targetname\u00a0iqn.2001-04.com.example:storage.disk1.amiens.sys1.xyz\u00a0--portal\u00a0192.168.1.2:3260\u00a0--login\n</code></pre> <p>You should have a new SCSI disk. You will see it created in /var/log/messages. You will see it in lsblk.</p> <p>You can send I/O to it:</p> <pre><code>dd\u00a0if=/dev/zero\u00a0of=/dev/sda\u00a0bs=4K\u00a0count=100\n</code></pre> <p>To tear down your iSCSI connection:</p> <pre><code>iscsiadm\u00a0\u00a0-m\u00a0node\u00a0-T\u00a0iqn.2001-04.com.redhat\u00a0\u00a0-p\u00a0172.17.40.21\u00a0-u\n</code></pre>"},{"location":"Administrator-Guide/GlusterFS-iSCSI/#running-the-iscsi-target-on-the-gluster-client","title":"Running the iSCSI target on the gluster client","text":"<p>You can run the Linux target daemon on the gluster client. The advantages to this setup is the client could run gluster and enjoy all of gluster's benefits. For example, gluster could \"fan out\" I/O to different gluster servers. The downside would be that the client would need to load and configure gluster. It is better to run gluster on the client if it is possible.</p>"},{"location":"Administrator-Guide/GlusterFS-iSCSI/#references","title":"References","text":"<p>[1] http://www.linuxjournal.com/content/creating-software-backed-iscsi-targets-red-hat-enterprise-linux-6</p> <p>[2] http://www.cyberciti.biz/tips/howto-setup-linux-iscsi-target-sanwith-tgt.html</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/","title":"Handling of users that belong to many groups","text":"<p>Users can belong to many different (UNIX) groups. These groups are generally used to allow or deny permissions for executing commands or access to files and directories.</p> <p>The number of groups a user can belong to depends on the operating system, but there are also components that support fewer groups. In Gluster, there are different restrictions on different levels in the stack. The explanations in this document should clarify which restrictions exist, and how these can be handled.</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/#tldr","title":"tl;dr","text":"<ul> <li>if users belong to more than 90 groups, the brick processes need to resolve   the secondary/auxiliary groups with the <code>server.manage-gids</code> volume option</li> <li>the linux kernels <code>/proc</code> filesystem provides up to 32 groups of a running   process, if this is not sufficient the mount option <code>resolve-gids</code> can be   used</li> <li>Gluster/NFS needs <code>nfs.server-aux-gids</code> when users accessing a Gluster volume   over NFS belong to more than 16 groups</li> </ul> <p>For all of the above options counts that the system doing the group resolving must be configured (<code>nsswitch</code>, <code>sssd</code>, ..) to be able to get all groups when only a UID is known.</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/#limit-in-the-glusterfs-protocol","title":"Limit in the GlusterFS protocol","text":"<p>When a Gluster client does some action on a Gluster volume, the operation is sent in an RPC packet. This RPC packet contains an header with the credentials of the user. The server-side receives the RPC packet and uses the credentials from the RPC header to perform ownership operations and allow/deny checks.</p> <p>The RPC header used by the GlusterFS protocols can contain at most ~93 groups. In order to pass this limit, the server process (brick) receiving the RPC procedure can do the resolving of the groups locally, and ignore the (too few) groups from the RPC header.</p> <p>This requires that the service process can resolve all of the users groups by the UID of the client process. Most environments that have many groups, already use a configuration where users and groups are maintained in a central location. for enterprises it is common to manage users and their groups in LDAP, Active Directory, NIS or similar.</p> <p>To have the groups of a user resolved on the server-side (brick), the volume option <code>server.manage-gids</code> needs to be set. Once this option is enabled, the brick processes will not use the groups that the Gluster clients send, but will use the POSIX <code>getgrouplist()</code> function to fetch them.</p> <p>Because this is a protocol limitation, all clients, including FUSE mounts, Gluster/NFS server and libgfapi applications are affected by this.</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/#group-limit-with-fuse","title":"Group limit with FUSE","text":"<p>The FUSE client gets the groups of the process that does the I/O by reading the information from <code>/proc/$pid/status</code>. This file only contains up to 32 groups. If client-side xlators rely on all groups of a process/user (like posix-acl), these 32 groups could limit functionality.</p> <p>For that reason a mount option has been added. With the <code>resolve-gids</code> mount option, the FUSE client calls the POSIX <code>getgrouplist()</code> function instead of reading <code>/proc/$pid/status</code>.</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/#group-limit-for-nfs","title":"Group limit for NFS","text":"<p>The NFS protocol (actually the AUTH_SYS/AUTH_UNIX RPC header) allows up to 16 groups. These are the groups that the NFS-server receives from NFS-clients. Similar to the way the brick processes can resolve the groups on the server-side, the NFS-server can take the UID passed by the NFS-client and use that to resolve the groups. the volume option for that is <code>nfs.server-aux-gids</code>.</p> <p>Other NFS-servers offer options like this too. The Linux kernel nfsd server uses <code>rpc.mountd --manage-gids</code>. NFS-Ganesha has the configuration option <code>Manage_Gids</code>.</p>"},{"location":"Administrator-Guide/Handling-of-users-with-many-groups/#implications-of-these-solutions","title":"Implications of these solutions","text":"<p>All of the mentioned options are disabled by default. one of the reasons is that resolving groups is an expensive operation. in many cases there is no need for supporting many groups and there could be a performance hit.</p> <p>When groups are resolved, the list is cached. the validity of the cache is configurable. the Gluster processes are not the only ones that cache these groups. <code>nscd</code> or <code>sssd</code> also keep a cache when they handle the <code>getgroupslist()</code> requests. When there are many requests, and querying the groups from a centralized management system takes long, caches might benefit from a longer validity.</p> <p>An other, less obvious difference might be noticed too. Many processes that are written with security in mind reduce the groups that the process can effectively use. This is normally done with the <code>setegids()</code> function. When storage processes do not honour the fewer groups that are effective, and the processes use the UID to resolve all groups of a process, the groups that got dropped with <code>setegids()</code> are added back again. this could lead to permissions that the process should not have.</p>"},{"location":"Administrator-Guide/Hook-scripts/","title":"Managing GlusterFS Volume Life-Cycle Extensions with Hook Scripts","text":"<p>Glusterfs allows automation of operations by user-written scripts. For every operation, you can execute a pre and a post script.</p>"},{"location":"Administrator-Guide/Hook-scripts/#pre-scripts","title":"Pre Scripts","text":"<p>These scripts are run before the occurrence of the event. You can write a script to automate activities like managing system-wide services. For example, you can write a script to stop exporting the SMB share corresponding to the volume before you stop the volume.</p>"},{"location":"Administrator-Guide/Hook-scripts/#post-scripts","title":"Post Scripts","text":"<p>These scripts are run after execution of the event. For example, you can write a script to export the SMB share corresponding to the volume after you start the volume.</p> <p>You can run scripts for the following events:</p> <ul> <li>Creating a volume</li> <li>Starting a volume</li> <li>Adding a brick</li> <li>Removing a brick</li> <li>Tuning volume options</li> <li>Stopping a volume</li> <li>Deleting a volume</li> </ul>"},{"location":"Administrator-Guide/Hook-scripts/#naming-convention","title":"Naming Convention","text":"<p>While creating the file names of your scripts, you must follow the naming convention followed in your underlying file system like XFS.</p> <p>Note: To enable the script, the name of the script must start with an S . Scripts run in lexicographic order of their names.</p>"},{"location":"Administrator-Guide/Hook-scripts/#location-of-scripts","title":"Location of Scripts","text":"<p>This section provides information on the folders where the scripts must be placed. When you create a trusted storage pool, the following directories are created:</p> <ul> <li><code>/var/lib/glusterd/hooks/1/create/</code></li> <li><code>/var/lib/glusterd/hooks/1/delete/</code></li> <li><code>/var/lib/glusterd/hooks/1/start/</code></li> <li><code>/var/lib/glusterd/hooks/1/stop/</code></li> <li><code>/var/lib/glusterd/hooks/1/set/</code></li> <li><code>/var/lib/glusterd/hooks/1/add-brick/</code></li> <li><code>/var/lib/glusterd/hooks/1/remove-brick/</code></li> </ul> <p>After creating a script, you must ensure to save the script in its respective folder on all the nodes of the trusted storage pool. The location of the script dictates whether the script must be executed before or after an event. Scripts are provided with the command line argument <code>--volname=VOLNAME</code> to specify the volume. Command-specific additional arguments are provided for the following volume operations:</p> <pre><code>Start volume\n    --first=yes, if the volume is the first to be started\n    --first=no, for otherwise\nStop volume\n    --last=yes, if the volume is to be stopped last.\n    --last=no, for otherwise\nSet volume\n    -o key=value\n    For every key, value is specified in volume set command.\n</code></pre>"},{"location":"Administrator-Guide/Hook-scripts/#prepackaged-scripts","title":"Prepackaged Scripts","text":"<p>Gluster provides scripts to export Samba (SMB) share when you start a volume and to remove the share when you stop the volume. These scripts are available at: <code>/var/lib/glusterd/hooks/1/start/post</code> and <code>/var/lib/glusterd/hooks/1/stop/pre</code>. By default, the scripts are enabled.</p> <p>When you start a volume using <code>gluster volume start VOLNAME</code>, the S30samba-start.sh script performs the following:</p> <ul> <li>Adds Samba share configuration details of the volume to the smb.conf file</li> <li>Mounts the volume through FUSE and adds an entry in /etc/fstab for the same.</li> <li>Restarts Samba to run with updated configuration</li> </ul> <p>When you stop the volume using <code>gluster volume stop VOLNAME</code>, the S30samba-stop.sh script performs the following:</p> <ul> <li>Removes the Samba share details of the volume from the smb.conf file</li> <li>Unmounts the FUSE mount point and removes the corresponding entry in   /etc/fstab</li> <li>Restarts Samba to run with updated configuration</li> </ul>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/","title":"Linux Kernel Tuning","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#linux-kernel-tuning-for-glusterfs","title":"Linux kernel tuning for GlusterFS","text":"<p>Every now and then, questions come up here internally and with many enthusiasts on what Gluster has to say about kernel tuning, if anything.</p> <p>The rarity of kernel tuning is on account of the Linux kernel doing a pretty good job on most workloads. But there is a flip side to this design. The Linux kernel historically has eagerly eaten up a lot of RAM, provided there is some, or driven towards caching as the primary way to improve performance.</p> <p>For most cases, this is fine, but as the amount of workload increases over time and clustered load is thrown upon the servers, this turns out to be troublesome, leading to catastrophic failures of jobs etc.</p> <p>Having had a fair bit of experience looking at large memory systems with heavily loaded regressions, be it CAD, EDA or similar tools, we've sometimes encountered stability problems with Gluster. We had to carefully analyse the memory footprint and amount of disk wait times over days. This gave us a rather remarkable story of disk trashing, huge iowaits, kernel oops, disk hangs etc.</p> <p>This article is the result of my many experiences with tuning options which were performed on many sites. The tuning not only helped with overall responsiveness, but it dramatically stabilized the cluster overall.</p> <p>When it comes to memory tuning the journey starts with the 'VM' subsystem which has a bizarre number of options, which can cause a lot of confusion.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#vmswappiness","title":"vm.swappiness","text":"<p>vm.swappiness is a tunable kernel parameter that controls how much the kernel favors swap over RAM. At the source code level, it\u2019s also defined as the tendency to steal mapped memory. A high swappiness value means that the kernel will be more apt to unmap mapped pages. A low swappiness value means the opposite, the kernel will be less apt to unmap mapped pages. In other words, the higher the vm.swappiness value, the more the system will swap.</p> <p>High system swapping has very undesirable effects when there are huge chunks of data being swapped in and out of RAM. Many have argued for the value to be set high, but in my experience, setting the value to '0' causes a performance increase.</p> <p>Conforming with the details here - http://lwn.net/Articles/100978/</p> <p>But again these changes should be driven by testing and due diligence from the user for their own applications. Heavily loaded, streaming apps should set this value to '0'. By changing this value to '0', the system's responsiveness improves.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#vmvfs_cache_pressure","title":"vm.vfs_cache_pressure","text":"<p>This option controls the tendency of the kernel to reclaim the memory which is used for caching of directory and inode objects.</p> <p>At the default value of vfs_cache_pressure=100 the kernel will attempt to reclaim dentries and inodes at a \"fair\" rate with respect to pagecache and swapcache reclaim. Decreasing vfs_cache_pressure causes the kernel to prefer to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will never reclaim dentries and inodes due to memory pressure and this can easily lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100 causes the kernel to prefer to reclaim dentries and inodes.</p> <p>With GlusterFS, many users with a lot of storage and many small files easily end up using a lot of RAM on the server side due to 'inode/dentry' caching, leading to decreased performance when the kernel keeps crawling through data-structures on a 40GB RAM system. Changing this value higher than 100 has helped many users to achieve fair caching and more responsiveness from the kernel.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#vmdirty_background_ratio","title":"vm.dirty_background_ratio","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#vmdirty_ratio","title":"vm.dirty_ratio","text":"<p>The first of the two (vm.dirty_background_ratio) defines the percentage of memory that can become dirty before a background flushing of the pages to disk starts. Until this percentage is reached no pages are flushed to disk. However when the flushing starts, then it's done in the background without disrupting any of the running processes in the foreground.</p> <p>Now the second of the two parameters (vm.dirty_ratio) defines the percentage of memory which can be occupied by dirty pages before a forced flush starts. If the percentage of dirty pages reaches this threshold, then all processes become synchronous, and they are not allowed to continue until the io operation they have requested is actually performed and the data is on disk. In cases of high performance I/O machines, this causes a problem as the data caching is cut away and all of the processes doing I/O become blocked to wait for I/O. This will cause a large number of hanging processes, which leads to high load, which leads to an unstable system and crappy performance.</p> <p>Lowering them from standard values causes everything to be flushed to disk rather than storing much in RAM. It helps large memory systems, which would normally flush a 45G-90G pagecache to disk, causing huge wait times for front-end applications, decreasing overall responsiveness and interactivity.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#1-procsysvmpagecache","title":"\"1\" &gt; /proc/sys/vm/pagecache","text":"<p>Page Cache is a disk cache which holds data from files and executable programs, i.e. pages with actual contents of files or block devices. Page Cache (disk cache) is used to reduce the number of disk reads. A value of '1' indicates 1% of the RAM is used for this, so that most of them are fetched from disk rather than RAM. This value is somewhat fishy after the above values have been changed. Changing this option is not necessary, but if you are still paranoid about controlling the pagecache, this value should help.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#deadline-sysblocksdcqueuescheduler","title":"\"deadline\" &gt; /sys/block/sdc/queue/scheduler","text":"<p>The I/O scheduler is a component of the Linux kernel which decides how the read and write buffers are to be queued for the underlying device. Theoretically 'noop' is better with a smart RAID controller because Linux knows nothing about (physical) disk geometry, therefore it can be efficient to let the controller, well aware of disk geometry, handle the requests as soon as possible. But 'deadline' seems to enhance performance. You can read more about them in the Linux kernel source documentation: linux/Documentation/block/*iosched.txt . I have also seen 'read' throughput increase during mixed-operations (many writes).</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#256-sysblocksdcqueuenr_requests","title":"\"256\" &gt; /sys/block/sdc/queue/nr_requests","text":"<p>This is the size of I/O requests which are buffered before they are communicated to the disk by the Scheduler. The internal queue size of some controllers (queue_depth) is larger than the I/O scheduler's nr_requests so that the I/O scheduler doesn't get much of a chance to properly order and merge the requests. Deadline or CFQ scheduler likes to have nr_requests to be set 2 times the value of queue_depth, which is the default for a given controller. Merging the order and requests helps the scheduler to be more responsive during huge load.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#echo-16-procsysvmpage-cluster","title":"echo \"16\" &gt; /proc/sys/vm/page-cluster","text":"<p>page-cluster controls the number of pages which are written to swap in a single attempt. It defines the swap I/O size, in the above example adding '16' as per the RAID stripe size of 64k. This wouldn't make sense after you have used swappiness=0, but if you defined swappiness=10 or 20, then using this value helps when your have a RAID stripe size of 64k.</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#blockdev-setra-4096-dev-eg-sdb-hdc-or-dev_mapper","title":"blockdev --setra 4096 /dev/ (eg:- sdb, hdc or dev_mapper) <p>Default block device settings often result in terrible performance for many RAID controllers. Adding the above option, which sets read-ahead to 4096 * 512-byte sectors, at least for the streamed copy, increases the speed, saturating the HD's integrated cache by reading ahead during the period used by the kernel to prepare I/O. It may put in cached data which will be requested by the next read. Too much read-ahead may kill random I/O on huge files if it uses potentially useful drive time or loads data beyond caches.</p> <p>A few other miscellaneous changes which are recommended at filesystem level but haven't been tested yet are the following. Make sure that your filesystem knows about the stripe size and number of disks in the array. E.g. for a raid5 array with a stripe size of 64K and 6 disks (effectively 5, because in every stripe-set there is one disk doing parity). These are built on theoretical assumptions and gathered from various other blogs/articles provided by RAID experts.</p> <p>-&gt; ext4 fs, 5 disks, 64K stripe, units in 4K blocks</p> <p>mkfs -text4 -E stride=\\$((64/4))</p> <p>-&gt; xfs, 5 disks, 64K stripe, units in 512-byte sectors</p> <p>mkfs -txfs -d sunit=\\$((64*2)) -d swidth=\\$((5*64*2))</p> <p>You may want to consider increasing the above stripe sizes for streaming large files.</p> <p>WARNING: Above changes are highly subjective with certain types of applications. This article doesn't guarantee any benefits whatsoever without prior due diligence from the user for their respective applications. It should only be applied at the behest of an expected increase in overall system responsiveness or if it resolves ongoing issues.</p> <p>More informative and interesting articles/emails/blogs to read</p> <ul> <li>http://dom.as/2008/02/05/linux-io-schedulers/</li> <li>http://www.nextre.it/oracledocs/oraclemyths.html</li> <li>https://lkml.org/lkml/2006/11/15/40</li> <li>http://misterd77.blogspot.com/2007/11/3ware-hardware-raid-vs-linux-software.html</li> </ul> <p><code>Last updated by:</code><code>User:y4m4</code></p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commentjdarcy","title":"comment:jdarcy <p>Some additional tuning ideas:</p> <p><code>* The choice of scheduler is *really* hardware- and workload-dependent, and some schedulers have unique features other than performance. For example, last time I looked cgroups support was limited to the cfq scheduler. Different tests regularly do best on any of cfq, deadline, or noop. The best advice here is not to use a particular scheduler but to try them all for a specific need.</code></p> <p><code>* It's worth checking to make sure that /sys/.../max_sectors_kb matches max_hw_sectors_kb. I haven't seen this problem for a while, but back when I used to work on Lustre I often saw that these didn't match and performance suffered.</code></p> <p><code>* For read-heavy workloads, experimenting with /sys/.../readahead_kb is definitely worthwhile.</code></p> <p><code>* Filesystems should be built with -I 512 or similar so that more xattrs can be stored in the inode instead of requiring an extra seek.</code></p> <p><code>* Mounting with noatime or relatime is usually good for performance.</code></p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#replyy4m4","title":"reply:y4m4","text":"<p><code>Agreed i was about write those parameters you mentioned. I should write another elaborate article on FS changes.</code></p> <p>y4m4</p>"},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commenteco","title":"comment:eco <p><code>1 year ago</code>\\ <code>This article is the model on which all articles should be written. Detailed information, solid examples and a great selection of references to let readers go more in depth on topics they choose. Great benchmark for others to strive to attain.</code>\\ <code>Eco</code>\\</p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commenty4m4","title":"comment:y4m4 <p><code>sysctl -w net.core.{r,w}mem_max = 4096000 - this helped us to Reach 800MB/sec with replicated GlusterFS on 10gige - Thanks to Ben England for these test results.</code>\\ <code>y4m4</code></p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commentbengland","title":"comment:bengland <p><code>After testing Gluster 3.2.4 performance with RHEL6.1, I'd suggest some changes to this article's recommendations:</code></p> <p><code>vm.swappiness=10 not 0 -- I think 0 is a bit extreme and might lead to out-of-memory conditions, but 10 will avoid just about all paging/swapping. If you still see swapping, you need to probably focus on restricting dirty pages with vm.dirty_ratio.</code></p> <p><code>vfs_cache_pressure &gt; 100 -- why? I thought this was a percentage.</code></p> <p><code>vm.pagecache=1 -- some distros (e.g. RHEL6) don't have vm.pagecache parameter.</code></p> <p><code>vm.dirty_background_ratio=1 not 10 (kernel default?) -- the kernel default is a bit dependent on choice of Linux distro, but for most workloads it's better to set this parameter very low to cause Linux to push dirty pages out to storage sooner. It means that if dirty pages exceed 1% of RAM then it will start to asynchronously write dirty pages to storage. The only workload where this is really bad: apps that write temp files and then quickly delete them (compiles) -- and you should probably be using local storage for such files anyway.</code></p> <p><code>Choice of vm.dirty_ratio is more dependent upon the workload, but in other contexts I have observed that response time fairness and stability is much better if you lower dirty ratio so that it doesn't take more than 2-5 seconds to flush all dirty pages to storage.</code></p> <p><code>block device parameters:</code></p> <p><code>I'm not aware of any case where cfq scheduler actually helps Gluster server. Unless server I/O threads correspond directly to end-users, I don't see how cfq can help you. Deadline scheduler is a good choice. I/O request queue has to be deep enough to allow scheduler to reorder requests to optimize away disk seeks. The parameters max_sectors_kb and nr_requests are relevant for this. For read-ahead, consider increasing it to the point where you prefetch for longer period of time than a disk seek (on order of 10 msec), so that you can avoid unnecessary disk seeks for multi-stream workloads. This comes at the expense of I/O latency so don't overdo it.</code></p> <p><code>network:</code></p> <p><code>jumbo frames can increase throughput significantly for 10-GbE networks.</code></p> <p><code>Raise net.core.{r,w}mem_max to 540000 from default of 131071 (not 4 MB above, my previous recommendation). Gluster 3.2 does setsockopt() call to use 1/2 MB mem for TCP socket buffer space.</code>\\ <code>bengland</code>\\</p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commenthjmangalam","title":"comment:hjmangalam <p><code>Thanks very much for noting this info - the descriptions are VERY good.. I'm in the midst of debugging a misbehaving gluster that can't seem to handle small writes over IPoIB and this contains some useful pointers.</code></p> <p><code>Some suggestions that might make this more immediately useful:</code></p> <p><code>- I'm assuming that this discussion refers to the gluster server nodes, not to the gluster native client nodes, yes? If that's the case, are there are also kernel parameters or recommended settings for the client nodes?</code>\\ <code>- While there are some cases where you mention that a value should be changed to a particular # or %, in a number of cases you advise just increasing/decreasing the values, which for something like a kernel parameter is probably not a useful suggestion. Do I raise it by 10? 10% 2x? 10x?</code></p> <p><code>I also ran across a complimentary page, which might be of interest - it explains more of the vm variables, especially as it relates to writing.</code>\\ <code>\"Theory of Operation and Tuning for Write-Heavy Loads\"</code>\\ <code>`` and refs therein.</code> <code>hjmangalam</code></p>","text":""},{"location":"Administrator-Guide/Linux-Kernel-Tuning/#commentbengland_1","title":"comment:bengland <p><code>Here are some additional suggestions based on recent testing:</code>\\ <code>- scaling out number of clients -- you need to increase the size of the ARP tables on Gluster server if you want to support more than 1K clients mounting a gluster volume. The defaults for RHEL6.3 were too low to support this, we used this:</code></p> <p><code>net.ipv4.neigh.default.gc_thresh2 = 2048</code>\\ <code>net.ipv4.neigh.default.gc_thresh3 = 4096</code></p> <p><code>In addition, tunings common to webservers become relevant at this number of clients as well, such as netdev_max_backlog, tcp_fin_timeout, and somaxconn.</code></p> <p><code>Bonding mode 6 has been observed to increase replication write performance, I have no experience with bonding mode 4 but it should work if switch is properly configured, other bonding modes are a waste of time.</code></p> <p><code>bengland</code>\\ <code>3 months ago</code></p>","text":""},{"location":"Administrator-Guide/Logging/","title":"GlusterFS service Logs and locations","text":"<p>Below lists the component, services, and functionality based logs in the GlusterFS Server. As per the File System Hierarchy Standards (FHS) all the log files are placed in the <code>/var/log</code> directory. \u2060</p>"},{"location":"Administrator-Guide/Logging/#glusterd","title":"Glusterd:","text":"<p>glusterd logs are located at <code>/var/log/glusterfs/glusterd.log</code>. One glusterd log file per server. This log file also contains the snapshot and user logs.</p>"},{"location":"Administrator-Guide/Logging/#gluster-cli-command","title":"Gluster cli command:","text":"<p>gluster cli logs are located at <code>/var/log/glusterfs/cli.log</code>. Gluster commands executed on a node in a GlusterFS Trusted Storage Pool is logged in <code>/var/log/glusterfs/cmd_history.log</code>.</p>"},{"location":"Administrator-Guide/Logging/#bricks","title":"Bricks:","text":"<p>Bricks logs are located at <code>/var/log/glusterfs/bricks/&lt;path extraction of brick path&gt;.log</code>. One log file per brick on the server</p>"},{"location":"Administrator-Guide/Logging/#rebalance","title":"Rebalance:","text":"<p>rebalance logs are located at <code>/var/log/glusterfs/VOLNAME-rebalance.log</code> . One log file per volume on the server.</p>"},{"location":"Administrator-Guide/Logging/#self-heal-deamon","title":"Self heal deamon:","text":"<p>self heal deamon are logged at <code>/var/log/glusterfs/glustershd.log</code>. One log file per server</p>"},{"location":"Administrator-Guide/Logging/#quota","title":"Quota:","text":"<p><code>/var/log/glusterfs/quotad.log</code> are log of the quota daemons running on each node. <code>/var/log/glusterfs/quota-crawl.log</code> Whenever quota is enabled, a file system crawl is performed and the corresponding log is stored in this file. <code>/var/log/glusterfs/quota-mount- VOLNAME.log</code> An auxiliary FUSE client is mounted in /VOLNAME of the glusterFS and the corresponding client logs found in this file. One log file per server and per volume from quota-mount."},{"location":"Administrator-Guide/Logging/#gluster-nfs","title":"Gluster NFS:","text":"<p><code>/var/log/glusterfs/nfs.log</code> One log file per server</p>"},{"location":"Administrator-Guide/Logging/#samba-gluster","title":"SAMBA Gluster:","text":"<p><code>/var/log/samba/glusterfs-VOLNAME-&lt;ClientIP&gt;.log</code> . If the client mounts this on a glusterFS server node, the actual log file or the mount point may not be found. In such a case, the mount outputs of all the glusterFS type mount operations need to be considered.</p>"},{"location":"Administrator-Guide/Logging/#ganesha-nfs","title":"Ganesha NFS :","text":"<p><code>/var/log/nfs-ganesha.log</code></p>"},{"location":"Administrator-Guide/Logging/#fuse-mount","title":"FUSE Mount:","text":"<p><code>/var/log/glusterfs/&lt;mountpoint path extraction&gt;.log</code></p>"},{"location":"Administrator-Guide/Logging/#geo-replication","title":"Geo-replication:","text":"<p><code>/var/log/glusterfs/geo-replication/&lt;primary&gt;</code> <code>/var/log/glusterfs/geo-replication-secondary</code></p>"},{"location":"Administrator-Guide/Logging/#gluster-volume-heal-volname-info-command","title":"Gluster volume heal VOLNAME info command:","text":"<p><code>/var/log/glusterfs/glfsheal-VOLNAME.log</code> . One log file per server on which the command is executed.</p>"},{"location":"Administrator-Guide/Logging/#gluster-swift","title":"Gluster-swift:","text":"<p><code>/var/log/messages</code></p>"},{"location":"Administrator-Guide/Logging/#swiftkrbauth","title":"SwiftKrbAuth:","text":"<p><code>/var/log/httpd/error_log</code></p>"},{"location":"Administrator-Guide/Managing-Snapshots/","title":"Managing GlusterFS Volume Snapshots","text":"<p>This section describes how to perform common GlusterFS volume snapshot management operations</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#pre-requisites","title":"Pre-requisites","text":"<p>GlusterFS volume snapshot feature is based on thinly provisioned LVM snapshot. To make use of snapshot feature GlusterFS volume should fulfill following pre-requisites:</p> <ul> <li>Each brick should be on an independent thinly provisioned LVM.</li> <li>Brick LVM should not contain any other data other than brick.</li> <li>None of the brick should be on a thick LVM.</li> <li>gluster version should be 3.6 and above.</li> </ul> <p>Details of how to create thin volume can be found at the following link. https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Logical_Volume_Manager_Administration/LV.html#thinly_provisioned_volume_creation</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#few-features-of-snapshot-are","title":"Few features of snapshot are:","text":"<p>Crash Consistency</p> <p>when a snapshot is taken at a particular point-in-time, it is made sure that the taken snapshot is crash consistent. when the taken snapshot is restored, then the data is identical as it was at the time of taking a snapshot.</p> <p>Online Snapshot</p> <p>When the snapshot is being taken the file system and its associated data continue to be available for the clients.</p> <p>Barrier</p> <p>During snapshot creation some of the fops are blocked to guarantee crash consistency. There is a default time-out of 2 minutes, if snapshot creation is not complete within that span then fops are unbarried. If unbarrier happens before the snapshot creation is complete then the snapshot creation operation fails. This to ensure that the snapshot is in a consistent state.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#snapshot-management","title":"Snapshot Management","text":""},{"location":"Administrator-Guide/Managing-Snapshots/#snapshot-creation","title":"Snapshot creation","text":"<pre><code>gluster snapshot create &lt;snapname&gt; &lt;volname&gt; [no-timestamp] [description &lt;description&gt;]\n</code></pre> <p>Creates a snapshot of a GlusterFS volume. User can provide a snap-name and a description to identify the snap. The description cannot be more than 1024 characters.</p> <p>Snapshot will be created by appending timestamp with user provided snap name. User can override this behaviour by giving no-timestamp flag.</p> <p>NOTE: To be able to take a snapshot, volume should be present and it should be in started state. All the bricks used in creating the snapshot have to be online in order to successfully create a snapshot as the force option is now deprecated.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#snapshot-clone","title":"Snapshot clone","text":"<pre><code>gluster snapshot clone &lt;clonename&gt; &lt;snapname&gt;\n</code></pre> <p>Creates a clone of a snapshot. Upon successful completion, a new GlusterFS volume will be created from snapshot. The clone will be a space efficient clone, i.e, the snapshot and the clone will share the backend disk.</p> <p>NOTE: To be able to take a clone from snapshot, snapshot should be present and it should be in activated state.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#restoring-snaps","title":"Restoring snaps","text":"<pre><code>gluster snapshot restore &lt;snapname&gt;\n</code></pre> <p>Restores an already taken snapshot of a GlusterFS volume. Snapshot restore is an offline activity therefore if the volume is online (in started state) then the restore operation will fail.</p> <p>Once the snapshot is restored it will not be available in the list of snapshots.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#deleting-snaps","title":"Deleting snaps","text":"<pre><code>gluster snapshot delete (all | &lt;snapname&gt; | volume &lt;volname&gt;)\n</code></pre> <p>If snapname is specified then mentioned snapshot is deleted. If volname is specified then all snapshots belonging to that particular volume is deleted. If keyword all is used then all snapshots belonging to the system is deleted.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#listing-of-available-snaps","title":"Listing of available snaps","text":"<pre><code>gluster snapshot list [volname]\n</code></pre> <p>Lists all snapshots taken. If volname is provided, then only the snapshots belonging to that particular volume is listed.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#information-of-available-snaps","title":"Information of available snaps","text":"<pre><code>gluster snapshot info [(snapname | volume &lt;volname&gt;)]\n</code></pre> <p>This command gives information such as snapshot name, snapshot UUID, time at which snapshot was created, and it lists down the snap-volume-name, number of snapshots already taken and number of snapshots still available for that particular volume, and the state of the snapshot.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#status-of-snapshots","title":"Status of snapshots","text":"<pre><code>gluster snapshot status [(snapname | volume &lt;volname&gt;)]\n</code></pre> <p>This command gives status of the snapshot. The details included are snapshot brick path, volume group(LVM details), status of the snapshot bricks, PID of the bricks, data percentage filled for that particular volume group to which the snapshots belong to, and total size of the logical volume.</p> <p>If snapname is specified then status of the mentioned snapshot is displayed. If volname is specified then status of all snapshots belonging to that volume is displayed. If both snapname and volname is not specified then status of all the snapshots present in the system are displayed.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#configuring-the-snapshot-behavior","title":"Configuring the snapshot behavior","text":"<pre><code>snapshot config [volname] ([snap-max-hard-limit &lt;count&gt;] [snap-max-soft-limit &lt;percent&gt;])\n                            | ([auto-delete &lt;enable|disable&gt;])\n                            | ([activate-on-create &lt;enable|disable&gt;])\n</code></pre> <p>Displays and sets the snapshot config values.</p> <p>snapshot config without any keywords displays the snapshot config values of all volumes in the system. If volname is provided, then the snapshot config values of that volume is displayed.</p> <p>Snapshot config command along with keywords can be used to change the existing config values. If volname is provided then config value of that volume is changed, else it will set/change the system limit.</p> <p>snap-max-soft-limit and auto-delete are global options, that will be inherited by all volumes in the system and cannot be set to individual volumes.</p> <p>The system limit takes precedence over the volume specific limit.</p> <p>When auto-delete feature is enabled, then upon reaching the soft-limit, with every successful snapshot creation, the oldest snapshot will be deleted.</p> <p>When auto-delete feature is disabled, then upon reaching the soft-limit, the user gets a warning with every successful snapshot creation.</p> <p>Upon reaching the hard-limit, further snapshot creations will not be allowed.</p> <p>activate-on-create is disabled by default. If you enable activate-on-create, then further snapshot will be activated during the time of snapshot creation.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#activating-a-snapshot","title":"Activating a snapshot","text":"<pre><code>gluster snapshot activate &lt;snapname&gt;\n</code></pre> <p>Activates the mentioned snapshot.</p> <p>Note: By default the snapshot will not be activated during snapshot creation.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#deactivate-a-snapshot","title":"Deactivate a snapshot","text":"<pre><code>gluster snapshot deactivate &lt;snapname&gt;\n</code></pre> <p>Deactivates the mentioned snapshot.</p>"},{"location":"Administrator-Guide/Managing-Snapshots/#accessing-the-snapshot","title":"Accessing the snapshot","text":"<p>Snapshots can be accessed in 2 ways.</p> <ol> <li> <p>Mounting the snapshot:</p> <p>The snapshot can be accessed via FUSE mount (only fuse). To do that it has to be mounted first. A snapshot can be mounted via fuse by below command</p> <pre><code>mount -t glusterfs &lt;hostname&gt;:/snaps/&lt;snap-name&gt;/&lt;volume-name&gt; &lt;mount-path&gt;\n</code></pre> <p>i.e. say \"host1\" is one of the peers. Let \"vol\" be the volume name and \"my-snap\" be the snapshot name. In this case a snapshot can be mounted via this command</p> <pre><code>mount -t glusterfs host1:/snaps/my-snap/vol /mnt/snapshot\n</code></pre> </li> <li> <p>User serviceability:</p> <p>Apart from the above method of mounting the snapshot, a list of available snapshots and the contents of each snapshot can be viewed from any of the mount points accessing the glusterfs volume (either FUSE or NFS or SMB). For having user serviceable snapshots, it has to be enabled for a volume first. User serviceability can be enabled for a volume using the below command.</p> <pre><code>gluster volume set &lt;volname&gt; features.uss enable\n</code></pre> <p>Once enabled, from any of the directory (including root of the filesystem) an access point will be created to the snapshot world. The access point is a hidden directory cding into which will make the user enter the snapshot world. By default the hidden directory is \".snaps\". Once user serviceability is enabled, one will be able to cd into .snaps from any directory. Doing \"ls\" on that directory shows a list of directories which are nothing but the snapshots present for that volume. Say if there are 3 snapshots (\"snap1\", \"snap2\", \"snap3\"), then doing ls in .snaps directory will show those 3 names as the directory entries. They represent the state of the directory from which .snaps was entered, at different points in time.</p> <p>NOTE: The access to the snapshots are read-only. The snapshot needs to be activated for it to be accessible inside .snaps directory.</p> <p>Also, the name of the hidden directory (or the access point to the snapshot world) can be changed using the below command.</p> <pre><code>gluster volume set &lt;volname&gt; snapshot-directory &lt;new-name&gt;\n</code></pre> </li> <li> <p>Accessing from windows:</p> <p>The glusterfs volumes can be made accessible by windows via samba. (the glusterfs plugin for samba helps achieve this, without having to re-export a fuse mounted glusterfs volume). The snapshots of a glusterfs volume can also be viewed in the windows explorer.</p> <p>There are 2 ways:</p> <ul> <li> <p>Give the path of the entry point directory   (<code>&lt;hostname&gt;&lt;samba-share&gt;&lt;directory&gt;&lt;entry-point path&gt;</code>) in the run command   window</p> </li> <li> <p>Go to the samba share via windows explorer. Make hidden files and folders   visible so that in the root of the samba share a folder icon for the entry point   can be seen.</p> </li> </ul> </li> </ol> <p>NOTE: From the explorer, snapshot world can be entered via entry point only from the root of the samba share. If snapshots have to be seen from subfolders, then the path should be provided in the run command window.</p> <p>For snapshots to be accessible from windows, below 2 options can be used.</p> <ol> <li> <p>The glusterfs plugin for samba should give the option \"snapdir-entry-path\"     while starting. The option is an indication to glusterfs, that samba is loading     it and the value of the option should be the path that is being used as the     share for windows.</p> <p>Ex: Say, there is a glusterfs volume and a directory called \"export\" from the root of the volume is being used as the samba share, then samba has to load glusterfs with this option as well.</p> <pre><code> ret = glfs_set_xlator_option(\n         fs,\n         \"*-snapview-client\",\n         \"snapdir-entry-path\", \"/export\"\n );\n</code></pre> <p>The xlator option \"snapdir-entry-path\" is not exposed via volume set options, cannot be changed from CLI. Its an option that has to be provided at the time of mounting glusterfs or when samba loads glusterfs.</p> </li> <li> <p>The accessibility of snapshots via root of the samba share from windows     is configurable. By default it is turned off. It is a volume set option which can     be changed via CLI.</p> <p><code>gluster volume set &lt;volname&gt; features.show-snapshot-directory &lt;on/off&gt;</code>. By default it is off.</p> </li> </ol> <p>Only when both the above options have been provided (i.e snapdir-entry-path contains a valid unix path that is exported and show-snapshot-directory option is set to true), snapshots can accessed via windows explorer.</p> <p>If only 1st option (i.e. snapdir-entry-path) is set via samba and 2nd option (i.e. show-snapshot-directory) is off, then snapshots can be accessed from windows via the run command window, but not via the explorer.</p>"},{"location":"Administrator-Guide/Managing-Volumes/","title":"Managing GlusterFS Volumes","text":"<p>This section describes how to perform common GlusterFS management operations, including the following:</p> <ul> <li>Tuning Volume Options</li> <li>Configuring Transport Types for a Volume</li> <li>Expanding Volumes</li> <li>Shrinking Volumes</li> <li>Replacing Bricks</li> <li>Rebalancing Volumes</li> <li>Stopping Volumes</li> <li>Deleting Volumes</li> <li>Triggering Self-Heal on Replicate</li> <li>Non Uniform File Allocation(NUFA)</li> </ul> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#configuring-transport-types-for-a-volume","title":"Configuring Transport Types for a Volume","text":"<p>A volume can support one or more transport types for communication between clients and brick processes. There are three types of supported transport, which are tcp, rdma, and tcp,rdma.</p> <p>To change the supported transport types of a volume, follow the procedure:</p> <ol> <li> <p>Unmount the volume on all the clients using the following command:</p> <pre><code>umount mount-point\n</code></pre> </li> <li> <p>Stop the volumes using the following command:</p> <pre><code>gluster volume stop &lt;VOLNAME&gt;\n</code></pre> </li> <li> <p>Change the transport type. For example, to enable both tcp and rdma execute the followimg command:</p> <pre><code>gluster volume set test-volume config.transport tcp,rdma OR tcp OR rdma\n</code></pre> </li> <li> <p>Mount the volume on all the clients. For example, to mount using rdma transport, use the following command:</p> <pre><code>mount -t glusterfs -o transport=rdma server1:/test-volume /mnt/glusterfs\n</code></pre> </li> </ol> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#expanding-volumes","title":"Expanding Volumes","text":"<p>You can expand volumes, as needed, while the cluster is online and available. For example, you might want to add a brick to a distributed volume, thereby increasing the distribution and adding to the capacity of the GlusterFS volume.</p> <p>Similarly, you might want to add a group of bricks to a distributed replicated volume, increasing the capacity of the GlusterFS volume.</p> <p>Note When expanding distributed replicated and distributed dispersed volumes, you need to add a number of bricks that is a multiple of the replica or disperse count. For example, to expand a distributed replicated volume with a replica count of 2, you need to add bricks in multiples of 2 (such as 4, 6, 8, etc.).</p> <p>To expand a volume</p> <ol> <li> <p>If they are not already part of the TSP, probe the servers which contain the bricks you     want to add to the volume using the following command:</p> <pre><code>gluster peer probe &lt;SERVERNAME&gt;\n</code></pre> <p>For example:</p> <pre><code># gluster peer probe server4\nProbe successful\n</code></pre> </li> <li> <p>Add the brick using the following command:</p> <pre><code>gluster volume add-brick &lt;VOLNAME&gt; &lt;NEW-BRICK&gt;\n</code></pre> <p>For example:</p> <pre><code># gluster volume add-brick test-volume server4:/exp4\nAdd Brick successful\n</code></pre> </li> <li> <p>Check the volume information using the following command:</p> <pre><code>gluster volume info &lt;VOLNAME&gt;\n</code></pre> <p>The command displays information similar to the following:</p> <pre><code>Volume Name: test-volume\nType: Distribute\nStatus: Started\nNumber of Bricks: 4\nBricks:\nBrick1: server1:/exp1\nBrick2: server2:/exp2\nBrick3: server3:/exp3\nBrick4: server4:/exp4\n</code></pre> </li> <li> <p>Rebalance the volume to ensure that files are distributed to the     new brick.</p> <p>You can use the rebalance command as described in Rebalancing Volumes</p> </li> </ol> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#shrinking-volumes","title":"Shrinking Volumes","text":"<p>You can shrink volumes, as needed, while the cluster is online and available. For example, you might need to remove a brick that has become inaccessible in a distributed volume due to hardware or network failure.</p> <p>Note Data residing on the brick that you are removing will no longer be accessible at the Gluster mount point. Note however that only the configuration information is removed - you can continue to access the data directly from the brick, as necessary.</p> <p>When shrinking distributed replicated and distributed dispersed volumes, you need to remove a number of bricks that is a multiple of the replica or stripe count. For example, to shrink a distributed replicate volume with a replica count of 2, you need to remove bricks in multiples of 2 (such as 4, 6, 8, etc.). In addition, the bricks you are trying to remove must be from the same sub-volume (the same replica or disperse set).</p> <p>Running remove-brick with the start option will automatically trigger a rebalance operation to migrate data from the removed-bricks to the rest of the volume.</p> <p>To shrink a volume</p> <ol> <li> <p>Remove the brick using the following command:</p> <pre><code>gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICKNAME&gt; start\n</code></pre> <p>For example, to remove server2:/exp2:</p> <pre><code># gluster volume remove-brick test-volume server2:/exp2 start\nvolume remove-brick start: success\n</code></pre> </li> <li> <p>View the status of the remove brick operation using the     following command:</p> <pre><code>gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICKNAME&gt; status\n</code></pre> <p>For example, to view the status of remove brick operation on server2:/exp2 brick:</p> <pre><code># gluster volume remove-brick test-volume server2:/exp2 status\n                                Node  Rebalanced-files  size  scanned       status\n                           ---------  ----------------  ----  -------  -----------\n617c923e-6450-4065-8e33-865e28d9428f               34   340      162   in progress\n</code></pre> </li> <li> <p>Once the status displays \"completed\", commit the remove-brick operation</p> <pre><code>gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICKNAME&gt; commit\n</code></pre> <p>In this example:</p> <pre><code># gluster volume remove-brick test-volume server2:/exp2 commit\nRemoving brick(s) can result in data loss. Do you want to Continue? (y/n) y\nvolume remove-brick commit: success\nCheck the removed bricks to ensure all files are migrated.\nIf files with data are found on the brick path, copy them via a gluster mount point before re-purposing the removed brick.\n</code></pre> </li> <li> <p>Check the volume information using the following command:</p> <pre><code>gluster volume info\n</code></pre> <p>The command displays information similar to the following:</p> <pre><code># gluster volume info\nVolume Name: test-volume\nType: Distribute\nStatus: Started\nNumber of Bricks: 3\nBricks:\nBrick1: server1:/exp1\nBrick3: server3:/exp3\nBrick4: server4:/exp4\n</code></pre> </li> </ol> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#replace-faulty-brick","title":"Replace faulty brick","text":"<p>Replacing a brick in a pure distribute volume</p> <p>To replace a brick on a distribute only volume, add the new brick and then remove the brick you want to replace. This will trigger a rebalance operation which will move data from the removed brick.</p> <p>NOTE: Replacing a brick using the 'replace-brick' command in gluster is supported only for distributed-replicate or pure replicate volumes.</p> <p>Steps to remove brick Server1:/home/gfs/r2_1 and add Server1:/home/gfs/r2_2:</p> <ol> <li> <p>Here is the initial volume configuration:</p> <pre><code>Volume Name: r2\nType: Distribute\nVolume ID: 25b4e313-7b36-445d-b524-c3daebb91188\nStatus: Started\nNumber of Bricks: 2\nTransport-type: tcp\nBricks:\nBrick1: Server1:/home/gfs/r2_0\nBrick2: Server1:/home/gfs/r2_1\n</code></pre> </li> <li> <p>Here are the files that are present on the mount:</p> <pre><code># ls\n1  10  2  3  4  5  6  7  8  9\n</code></pre> </li> <li> <p>Add the new brick - Server1:/home/gfs/r2_2 now:</p> <pre><code># gluster volume add-brick r2 Server1:/home/gfs/r2_2\nvolume add-brick: success\n</code></pre> </li> <li> <p>Start remove-brick using the following command:</p> <pre><code># gluster volume remove-brick r2 Server1:/home/gfs/r2_1 start\nvolume remove-brick start: success\nID: fba0a488-21a4-42b7-8a41-b27ebaa8e5f4\n</code></pre> </li> <li> <p>Wait until remove-brick status indicates that it is complete.</p> <pre><code># gluster volume remove-brick r2 Server1:/home/gfs/r2_1 status\n                                Node Rebalanced-files          size       scanned      failures       skipped               status   run time in secs\n                           ---------      -----------   -----------   -----------   -----------   -----------         ------------     --------------\n                           localhost                5       20Bytes            15             0             0            completed               0.00\n</code></pre> </li> <li> <p>Now we can safely remove the old brick, so commit the changes:</p> <pre><code># gluster volume remove-brick r2 Server1:/home/gfs/r2_1 commit\nRemoving brick(s) can result in data loss. Do you want to Continue? (y/n) y\nvolume remove-brick commit: success\n</code></pre> </li> <li> <p>Here is the new volume configuration.</p> <pre><code>Volume Name: r2\nType: Distribute\nVolume ID: 25b4e313-7b36-445d-b524-c3daebb91188\nStatus: Started\nNumber of Bricks: 2\nTransport-type: tcp\nBricks:\nBrick1: Server1:/home/gfs/r2_0\nBrick2: Server1:/home/gfs/r2_2\n</code></pre> </li> <li> <p>Check the contents of the mount:</p> <pre><code># ls\n1  10  2  3  4  5  6  7  8  9\n</code></pre> </li> </ol> <p>Replacing bricks in Replicate/Distributed Replicate volumes</p> <p>This section of the document describes how brick: <code>Server1:/home/gfs/r2_0</code> is replaced with brick: <code>Server1:/home/gfs/r2_5</code> in volume <code>r2</code> with replica count <code>2</code>.</p> <pre><code>    Volume Name: r2\n    Type: Distributed-Replicate\n    Volume ID: 24a0437a-daa0-4044-8acf-7aa82efd76fd\n    Status: Started\n    Number of Bricks: 2 x 2 = 4\n    Transport-type: tcp\n    Bricks:\n    Brick1: Server1:/home/gfs/r2_0\n    Brick2: Server2:/home/gfs/r2_1\n    Brick3: Server1:/home/gfs/r2_2\n    Brick4: Server2:/home/gfs/r2_3\n</code></pre> <p>Steps:</p> <ol> <li>Make sure there is no data in the new brick Server1:/home/gfs/r2_5</li> <li>Check that all the bricks are running. It is okay if the brick that is going to be replaced is down.</li> <li> <p>Bring the brick that is going to be replaced down if not already.</p> <ul> <li> <p>Get the pid of the brick by executing 'gluster volume  status' <p># gluster volume status    Status of volume: r2    Gluster process                        Port    Online    Pid</p> <p>Brick Server1:/home/gfs/r2_0            49152    Y    5342    Brick Server2:/home/gfs/r2_1            49153    Y    5354    Brick Server1:/home/gfs/r2_2            49154    Y    5365    Brick Server2:/home/gfs/r2_3            49155    Y    5376</p> <li> <p>Login to the machine where the brick is running and kill the brick.</p> <p># kill -15 5342</p> </li> <li> <p>Confirm that the brick is not running anymore and the other bricks are running fine.</p> <p># gluster volume status    Status of volume: r2    Gluster process                        Port    Online    Pid</p> <p>Brick Server1:/home/gfs/r2_0            N/A      N    5342 &lt;&lt;---- brick is not running, others are running fine.    Brick Server2:/home/gfs/r2_1            49153    Y    5354    Brick Server1:/home/gfs/r2_2            49154    Y    5365    Brick Server2:/home/gfs/r2_3            49155    Y    5376</p> </li> <li> <p>Using the gluster volume fuse mount (In this example: <code>/mnt/r2</code>) set up metadata so that data will be synced to new brick (In this case it is from <code>Server1:/home/gfs/r2_1</code> to <code>Server1:/home/gfs/r2_5</code>)</p> <ul> <li> <p>Create a directory on the mount point that doesn't already exist. Then delete that directory, do the same for metadata changelog by doing setfattr. This operation marks the pending changelog which will tell self-heal damon/mounts to perform self-heal from <code>/home/gfs/r2_1</code> to <code>/home/gfs/r2_5</code>.</p> <p>mkdir /mnt/r2/    rmdir /mnt/r2/    setfattr -n trusted.non-existent-key -v abc /mnt/r2    setfattr -x trusted.non-existent-key  /mnt/r2 <li> <p>Check that there are pending xattrs on the replica of the brick that is being replaced:</p> <p>getfattr -d -m. -e hex /home/gfs/r2_1    # file: home/gfs/r2_1    security.selinux=0x756e636f6e66696e65645f753a6f626a6563745f723a66696c655f743a733000    trusted.afr.r2-client-0=0x000000000000000300000002 &lt;&lt;---- xattrs are marked from source brick Server2:/home/gfs/r2_1    trusted.afr.r2-client-1=0x000000000000000000000000    trusted.gfid=0x00000000000000000000000000000001    trusted.glusterfs.dht=0x0000000100000000000000007ffffffe    trusted.glusterfs.volume-id=0xde822e25ebd049ea83bfaa3c4be2b440</p> </li> <li> <p>Volume heal info will show that '/' needs healing.(There could be more entries based on the work load. But '/' must exist)</p> <pre><code>    # gluster volume heal r2 info\n    Brick Server1:/home/gfs/r2_0\n    Status: Transport endpoint is not connected\n\n    Brick Server2:/home/gfs/r2_1\n    /\n    Number of entries: 1\n\n    Brick Server1:/home/gfs/r2_2\n    Number of entries: 0\n\n    Brick Server2:/home/gfs/r2_3\n    Number of entries: 0\n</code></pre> </li> <li> <p>Replace the brick with 'commit force' option. Please note that other variants of replace-brick command are not supported.</p> <ul> <li> <p>Execute replace-brick command</p> <p># gluster volume replace-brick r2 Server1:/home/gfs/r2_0 Server1:/home/gfs/r2_5 commit force    volume replace-brick: success: replace-brick commit successful</p> </li> <li> <p>Check that the new brick is now online</p> <p># gluster volume status    Status of volume: r2    Gluster process                        Port    Online    Pid</p> <p>Brick Server1:/home/gfs/r2_5            49156    Y    5731 &lt;&lt;&lt;---- new brick is online    Brick Server2:/home/gfs/r2_1            49153    Y    5354    Brick Server1:/home/gfs/r2_2            49154    Y    5365    Brick Server2:/home/gfs/r2_3            49155    Y    5376</p> </li> <li> <p>Users can track the progress of self-heal using: <code>gluster volume heal [volname] info</code>.   Once self-heal completes the changelogs will be removed.</p> <pre><code># getfattr -d -m. -e hex /home/gfs/r2_1\ngetfattr: Removing leading '/' from absolute path names\n# file: home/gfs/r2_1\nsecurity.selinux=0x756e636f6e66696e65645f753a6f626a6563745f723a66696c655f743a733000\ntrusted.afr.r2-client-0=0x000000000000000000000000 &lt;&lt;---- Pending changelogs are cleared.\ntrusted.afr.r2-client-1=0x000000000000000000000000\ntrusted.gfid=0x00000000000000000000000000000001\ntrusted.glusterfs.dht=0x0000000100000000000000007ffffffe\ntrusted.glusterfs.volume-id=0xde822e25ebd049ea83bfaa3c4be2b440\n</code></pre> </li> <li> <p><code># gluster volume heal &lt;VOLNAME&gt; info</code> will show that no heal is required.</p> <p># gluster volume heal r2 info    Brick Server1:/home/gfs/r2_5    Number of entries: 0</p> <p>Brick Server2:/home/gfs/r2_1    Number of entries: 0</p> <p>Brick Server1:/home/gfs/r2_2    Number of entries: 0</p> <p>Brick Server2:/home/gfs/r2_3    Number of entries: 0</p> </li> </ul> </li> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#rebalancing-volumes","title":"Rebalancing Volumes","text":"<p>After expanding a volume using the add-brick command, you may need to rebalance the data among the servers. New directories created after expanding or shrinking of the volume will be evenly distributed automatically. For all the existing directories, the distribution can be fixed by rebalancing the layout and/or data.</p> <p>This section describes how to rebalance GlusterFS volumes in your storage environment, using the following common scenarios:</p> <ul> <li> <p>Fix Layout - Fixes the layout to use the new volume topology so that files can   be distributed to newly added nodes.</p> </li> <li> <p>Fix Layout and Migrate Data - Rebalances volume by fixing the layout   to use the new volume topology and migrating the existing data.</p> </li> </ul>"},{"location":"Administrator-Guide/Managing-Volumes/#rebalancing-volume-to-fix-layout-changes","title":"Rebalancing Volume to Fix Layout Changes","text":"<p>Fixing the layout is necessary because the layout structure is static for a given directory. Even after new bricks are added to the volume, newly created files in existing directories will still be distributed only among the original bricks. The command <code>gluster volume rebalance &lt;volname&gt; fix-layout start</code> will fix the layout information so that the files can be created on the newly added bricks. When this command is issued, all the file stat information which is already cached will get revalidated.</p> <p>As of GlusterFS 3.6, the assignment of files to bricks will take into account the sizes of the bricks. For example, a 20TB brick will be assigned twice as many files as a 10TB brick. In versions before 3.6, the two bricks were treated as equal regardless of size, and would have been assigned an equal share of files.</p> <p>A fix-layout rebalance will only fix the layout changes and does not migrate data. If you want to migrate the existing data, use <code>gluster volume rebalance &lt;volume&gt; start</code> command to rebalance data among the servers.</p> <p>To rebalance a volume to fix layout</p> <ul> <li>Start the rebalance operation on any Gluster server using the   following command:</li> </ul> <p><code># gluster volume rebalance &lt;VOLNAME&gt; fix-layout start</code></p> <p>For example:</p> <pre><code>  # gluster volume rebalance test-volume fix-layout start\n  Starting rebalance on volume test-volume has been successful\n</code></pre>"},{"location":"Administrator-Guide/Managing-Volumes/#rebalancing-volume-to-fix-layout-and-migrate-data","title":"Rebalancing Volume to Fix Layout and Migrate Data","text":"<p>After expanding a volume using the add-brick respectively, you need to rebalance the data among the servers. A remove-brick command will automatically trigger a rebalance.</p> <p>To rebalance a volume to fix layout and migrate the existing data</p> <ul> <li>Start the rebalance operation on any one of the server using the   following command:</li> </ul> <p><code># gluster volume rebalance &lt;VOLNAME&gt; start</code></p> <p>For example:</p> <pre><code>  # gluster volume rebalance test-volume start\n  Starting rebalancing on volume test-volume has been successful\n</code></pre> <ul> <li>Start the migration operation forcefully on any one of the servers   using the following command:</li> </ul> <p><code># gluster volume rebalance &lt;VOLNAME&gt; start force</code></p> <p>For example:</p> <pre><code>  # gluster volume rebalance test-volume start force\n  Starting rebalancing on volume test-volume has been successful\n</code></pre> <p>A rebalance operation will attempt to balance the diskusage across nodes, therefore it will skip files where the move will result in a less balanced volume. This leads to link files that are still left behind in the system and hence may cause performance issues. The behaviour can be overridden with the <code>force</code> argument.</p>"},{"location":"Administrator-Guide/Managing-Volumes/#displaying-the-status-of-rebalance-operation","title":"Displaying the Status of Rebalance Operation","text":"<p>You can display the status information about rebalance volume operation, as needed.</p> <ul> <li>Check the status of the rebalance operation, using the following   command:</li> </ul> <p><code># gluster volume rebalance &lt;VOLNAME&gt; status</code></p> <p>For example:</p> <pre><code>  # gluster volume rebalance test-volume status\n                                  Node  Rebalanced-files  size  scanned       status\n                             ---------  ----------------  ----  -------  -----------\n  617c923e-6450-4065-8e33-865e28d9428f               416  1463      312  in progress\n</code></pre> <p>The time to complete the rebalance operation depends on the number   of files on the volume along with the corresponding file sizes.   Continue checking the rebalance status, verifying that the number of   files rebalanced or total files scanned keeps increasing.</p> <p>For example, running the status command again might display a result   similar to the following:</p> <pre><code>  # gluster volume rebalance test-volume status\n                                  Node  Rebalanced-files  size  scanned       status\n                             ---------  ----------------  ----  -------  -----------\n  617c923e-6450-4065-8e33-865e28d9428f               498  1783      378  in progress\n</code></pre> <p>The rebalance status displays the following when the rebalance is   complete:</p> <pre><code>  # gluster volume rebalance test-volume status\n                                  Node  Rebalanced-files  size  scanned       status\n                             ---------  ----------------  ----  -------  -----------\n  617c923e-6450-4065-8e33-865e28d9428f               502  1873      334   completed\n</code></pre>"},{"location":"Administrator-Guide/Managing-Volumes/#stopping-an-ongoing-rebalance-operation","title":"Stopping an Ongoing Rebalance Operation","text":"<p>You can stop the rebalance operation, if needed.</p> <ul> <li>Stop the rebalance operation using the following command:</li> </ul> <p><code># gluster volume rebalance &lt;VOLNAME&gt; stop</code></p> <p>For example:</p> <pre><code>  # gluster volume rebalance test-volume stop\n                                  Node  Rebalanced-files  size  scanned       status\n                             ---------  ----------------  ----  -------  -----------\n  617c923e-6450-4065-8e33-865e28d9428f               59   590      244       stopped\n  Stopped rebalance process on volume test-volume\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#stopping-volumes","title":"Stopping Volumes","text":"<ol> <li> <p>Stop the volume using the following command:</p> <p><code># gluster volume stop &lt;VOLNAME&gt;</code></p> <p>For example, to stop test-volume:</p> <pre><code># gluster volume stop test-volume\nStopping volume will make its data inaccessible. Do you want to continue? (y/n)\n</code></pre> </li> <li> <p>Enter <code>y</code> to confirm the operation. The output of the command     displays the following:</p> <pre><code>Stopping volume test-volume has been successful\n</code></pre> </li> </ol> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#deleting-volumes","title":"Deleting Volumes","text":"<ol> <li> <p>Delete the volume using the following command:</p> <p><code># gluster volume delete &lt;VOLNAME&gt;</code></p> <p>For example, to delete test-volume:</p> <pre><code># gluster volume delete test-volume\nDeleting volume will erase all information about the volume. Do you want to continue? (y/n)\n</code></pre> </li> <li> <p>Enter <code>y</code> to confirm the operation. The command displays the     following:</p> <pre><code>Deleting volume test-volume has been successful\n</code></pre> </li> </ol> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#triggering-self-heal-on-replicate","title":"Triggering Self-Heal on Replicate","text":"<p>In replicate module, previously you had to manually trigger a self-heal when a brick goes offline and comes back online, to bring all the replicas in sync. Now the pro-active self-heal daemon runs in the background, diagnoses issues and automatically initiates self-healing every 10 minutes on the files which requireshealing.</p> <p>You can view the list of files that need healing, the list of files which are currently/previously healed, list of files which are in split-brain state, and you can manually trigger self-heal on the entire volume or only on the files which need healing.</p> <ul> <li>Trigger self-heal only on the files which requires healing:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt;</code></p> <p>For example, to trigger self-heal on files which requires healing   of test-volume:</p> <pre><code>  # gluster volume heal test-volume\n  Heal operation on volume test-volume has been successful\n</code></pre> <ul> <li>Trigger self-heal on all the files of a volume:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt; full</code></p> <p>For example, to trigger self-heal on all the files of of   test-volume:</p> <pre><code>  # gluster volume heal test-volume full\n  Heal operation on volume test-volume has been successful\n</code></pre> <ul> <li>View the list of files that needs healing:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt; info</code></p> <p>For example, to view the list of files on test-volume that needs   healing:</p> <pre><code>  # gluster volume heal test-volume info\n  Brick server1:/gfs/test-volume_0\n  Number of entries: 0\n\n  Brick server2:/gfs/test-volume_1\n  Number of entries: 101\n  /95.txt\n  /32.txt\n  /66.txt\n  /35.txt\n  /18.txt\n  /26.txt\n  /47.txt\n  /55.txt\n  /85.txt\n  ...\n</code></pre> <ul> <li>View the list of files that are self-healed:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt; info healed</code></p> <p>For example, to view the list of files on test-volume that are   self-healed:</p> <pre><code>  # gluster volume heal test-volume info healed\n  Brick Server1:/gfs/test-volume_0\n  Number of entries: 0\n\n  Brick Server2:/gfs/test-volume_1\n  Number of entries: 69\n  /99.txt\n  /93.txt\n  /76.txt\n  /11.txt\n  /27.txt\n  /64.txt\n  /80.txt\n  /19.txt\n  /41.txt\n  /29.txt\n  /37.txt\n  /46.txt\n  ...\n</code></pre> <ul> <li>View the list of files of a particular volume on which the self-heal   failed:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt; info failed</code></p> <p>For example, to view the list of files of test-volume that are not   self-healed:</p> <pre><code>  # gluster volume heal test-volume info failed\n  Brick Server1:/gfs/test-volume_0\n  Number of entries: 0\n\n  Brick Server2:/gfs/test-volume_3\n  Number of entries: 72\n  /90.txt\n  /95.txt\n  /77.txt\n  /71.txt\n  /87.txt\n  /24.txt\n  ...\n</code></pre> <ul> <li>View the list of files of a particular volume which are in   split-brain state:</li> </ul> <p><code># gluster volume heal &lt;VOLNAME&gt; info split-brain</code></p> <p>For example, to view the list of files of test-volume which are in   split-brain state:</p> <pre><code>  # gluster volume heal test-volume info split-brain\n  Brick Server1:/gfs/test-volume_2\n  Number of entries: 12\n  /83.txt\n  /28.txt\n  /69.txt\n  ...\n\n  Brick Server2:/gfs/test-volume_3\n  Number of entries: 12\n  /83.txt\n  /28.txt\n  /69.txt\n  ...\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Managing-Volumes/#non-uniform-file-allocation","title":"Non Uniform File Allocation","text":"<p>NUFA translator or Non Uniform File Access translator is designed for giving higher preference to a local drive when used in a HPC type of environment. It can be applied to Distribute and Replica translators; in the latter case it ensures that one copy is local if space permits.</p> <p>When a client on a server creates files, the files are allocated to a brick in the volume based on the file name. This allocation may not be ideal, as there is higher latency and unnecessary network traffic for read/write operations to a non-local brick or export directory. NUFA ensures that the files are created in the local export directory of the server, and as a result, reduces latency and conserves bandwidth for that server accessing that file. This can also be useful for applications running on mount points on the storage server.</p> <p>If the local brick runs out of space or reaches the minimum disk free limit, instead of allocating files to the local brick, NUFA distributes files to other bricks in the same volume if there is space available on those bricks.</p> <p>NUFA should be enabled before creating any data in the volume.</p> <p>Use the following command to enable NUFA:</p> <p><code># gluster volume set &lt;VOLNAME&gt; cluster.nufa enable</code></p> <p>Important</p> <p>NUFA is supported under the following conditions:</p> <ul> <li>Volumes with only one brick per server.</li> <li>For use with a FUSE client. NUFA is not supported with NFS or SMB.</li> <li>A client that is mounting a NUFA-enabled volume must be present within the trusted storage pool.</li> </ul> <p>The NUFA scheduler also exists, for use with the Unify translator; see below.</p> <pre><code>volume bricks\n  type cluster/nufa\n  option local-volume-name brick1\n  subvolumes brick1 brick2 brick3 brick4 brick5 brick6 brick7\nend-volume\n</code></pre>"},{"location":"Administrator-Guide/Managing-Volumes/#nufa-additional-options","title":"NUFA additional options","text":"<ul> <li>lookup-unhashed</li> </ul> <p>This is an advanced option where files are looked up in all subvolumes if they are missing on the subvolume matching the hash value of the filename. The default is on.</p> <ul> <li>local-volume-name</li> </ul> <p>The volume name to consider local and prefer file creations on. The default is to search for a volume matching the hostname of the system.</p> <ul> <li>subvolumes</li> </ul> <p>This option lists the subvolumes that are part of this 'cluster/nufa' volume. This translator requires more than one subvolume.</p>"},{"location":"Administrator-Guide/Managing-Volumes/#bitrot-detection","title":"BitRot Detection","text":"<p>With BitRot detection in Gluster, it's possible to identify \"insidious\" type of disk errors where data is silently corrupted with no indication from the disk to the storage software layer than an error has occured. This also helps in catching \"backend\" tinkering of bricks (where data is directly manipulated on the bricks without going through FUSE, NFS or any other access protocol(s).</p> <p>BitRot detection is disbled by default and needs to be enabled to make use of other sub-commands.</p> <ol> <li>To enable bitrot detection for a given volume : <p><code># gluster volume bitrot &lt;VOLNAME&gt; enable</code></p> <p>and similarly to disable bitrot use:</p> <p><code># gluster volume bitrot &lt;VOLNAME&gt; disable</code></p> <p>NOTE: Enabling bitrot spawns the Signer &amp; Scrubber daemon per node. Signer is responsible</p> <pre><code>  for signing (calculating checksum for each file) an object and scrubber verifies the\n  calculated checksum against the objects data.\n</code></pre> <ol> <li> <p>Scrubber daemon has three (3) throttling modes that adjusts the rate at which objects     are verified.</p> <pre><code> # volume bitrot &lt;VOLNAME&gt; scrub-throttle lazy\n # volume bitrot &lt;VOLNAME&gt; scrub-throttle normal\n # volume bitrot &lt;VOLNAME&gt; scrub-throttle aggressive\n</code></pre> </li> <li> <p>By default scrubber scrubs the filesystem biweekly. It's possible to tune it to scrub     based on predefined frequency such as monthly, etc. This can be done as shown below:</p> <pre><code> # volume bitrot &lt;VOLNAME&gt; scrub-frequency daily\n # volume bitrot &lt;VOLNAME&gt; scrub-frequency weekly\n # volume bitrot &lt;VOLNAME&gt; scrub-frequency biweekly\n # volume bitrot &lt;VOLNAME&gt; scrub-frequency monthly\n</code></pre> </li> </ol> <p>NOTE: Daily scrubbing would not be available with GA release.</p> <ol> <li>Scrubber daemon can be paused and later resumed when required. This can be done as    shown below:</li> </ol> <p><code># volume bitrot &lt;VOLNAME&gt; scrub pause</code></p> <p>and to resume scrubbing:</p> <p><code># volume bitrot &lt;VOLNAME&gt; scrub resume</code></p> <p>NOTE: Signing cannot be paused (and resumed) and would always be active as long as</p> <pre><code>  bitrot is enabled for that particular volume.\n</code></pre>"},{"location":"Administrator-Guide/Mandatory-Locks/","title":"Mandatory Locks","text":"<p>Support for mandatory locks inside GlusterFS does not converge all by itself to what Linux kernel provides to user space file systems. Here we enforce core mandatory lock semantics with and without the help of file mode bits. Please read through the design specification which explains the whole concept behind the mandatory locks implementation done for GlusterFS.</p>"},{"location":"Administrator-Guide/Mandatory-Locks/#implications-and-usage","title":"Implications and Usage","text":"<p>By default, mandatory locking will be disabled for a volume and a volume set options is available to configure volume to operate under 3 different mandatory locking modes.</p>"},{"location":"Administrator-Guide/Mandatory-Locks/#volume-option","title":"Volume Option","text":"<pre><code>gluster volume set &lt;VOLNAME&gt; locks.mandatory-locking &lt;off / file / forced / optimal&gt;\n</code></pre> <p>off - Disable mandatory locking for specified volume. file - Enable Linux kernel style mandatory locking semantics with the help of mode bits (not well tested) forced - Check for conflicting byte range locks for every data modifying operation in a volume optimal - Combinational mode where POSIX clients can live with their advisory lock semantics which will still honour the mandatory locks acquired by other clients like SMB.</p> <p>Note:- Please refer the design doc for more information on these key values.</p>"},{"location":"Administrator-Guide/Mandatory-Locks/#points-to-be-remembered","title":"Points to be remembered","text":"<ul> <li>Valid key values available with mandatory-locking volume set option are taken into effect only after a subsequent start/restart of the volume.</li> <li>Due to some outstanding issues, it is recommended to turn off the performance translators in order to have the complete functionality of mandatory-locks when volume is configured in any one of the above described mandatory-locking modes. Please see the 'Known issue' section below for more details.</li> </ul>"},{"location":"Administrator-Guide/Mandatory-Locks/#known-issues","title":"Known issues","text":"<ul> <li>Since the whole logic of mandatory-locks are implemented within the locks translator loaded at the server side, early success returned to fops like open, read, write to upper/application layer by performance translators residing at the client side will impact the intended functionality of mandatory-locks. One such issue is being tracked in the following bugzilla report:</li> </ul> <p>https://bugzilla.redhat.com/show_bug.cgi?id=1194546</p> <ul> <li>There is a possible race window uncovered with respect to mandatory locks and an ongoing read/write operation. For more details refer the bug report given below:</li> </ul> <p>https://bugzilla.redhat.com/show_bug.cgi?id=1287099</p>"},{"location":"Administrator-Guide/Monitoring-Workload/","title":"Monitoring your GlusterFS Workload","text":"<p>You can monitor the GlusterFS volumes on different parameters. Monitoring volumes helps in capacity planning and performance tuning tasks of the GlusterFS volume. Using these information, you can identify and troubleshoot issues.</p> <p>You can use Volume Top and Profile commands to view the performance and identify bottlenecks/hotspots of each brick of a volume. This helps system administrators to get vital performance information whenever performance needs to be probed.</p> <p>You can also perform statedump of the brick processes and nfs server process of a volume, and also view volume status and volume information.</p>"},{"location":"Administrator-Guide/Monitoring-Workload/#running-glusterfs-volume-profile-command","title":"Running GlusterFS Volume Profile Command","text":"<p>GlusterFS Volume Profile command provides an interface to get the per-brick I/O information for each File Operation (FOP) of a volume. The per brick information helps in identifying bottlenecks in the storage system.</p> <p>This section describes how to run GlusterFS Volume Profile command by performing the following operations:</p> <ul> <li>Start Profiling</li> <li>Displaying the I/0 Information</li> <li>Stop Profiling</li> </ul> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#start-profiling","title":"Start Profiling","text":"<p>You must start the Profiling to view the File Operation information for each brick.</p> <p>To start profiling, use following command:</p> <p><code># gluster volume profile start</code></p> <p>For example, to start profiling on test-volume:</p> <pre><code># gluster volume profile test-volume start\nProfiling started on test-volume\n</code></pre> <p>When profiling on the volume is started, the following additional options are displayed in the Volume Info:</p> <pre><code>diagnostics.count-fop-hits: on\ndiagnostics.latency-measurement: on\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#displaying-the-i0-information","title":"Displaying the I/0 Information","text":"<p>You can view the I/O information of each brick by using the following command:</p> <p><code># gluster volume profile info</code></p> <p>For example, to see the I/O information on test-volume:</p> <pre><code># gluster volume profile test-volume info\nBrick: Test:/export/2\nCumulative Stats:\n\nBlock                     1b+           32b+           64b+\nSize:\n       Read:                0              0              0\n       Write:             908             28              8\n\nBlock                   128b+           256b+         512b+\nSize:\n       Read:                0               6             4\n       Write:               5              23            16\n\nBlock                  1024b+          2048b+        4096b+\nSize:\n       Read:                 0              52           17\n       Write:               15             120          846\n\nBlock                   8192b+         16384b+      32768b+\nSize:\n       Read:                52               8           34\n       Write:              234             134          286\n\nBlock                                  65536b+     131072b+\nSize:\n       Read:                               118          622\n       Write:                             1341          594\n\n\n%-latency  Avg-      Min-       Max-       calls     Fop\n          latency   Latency    Latency\n___________________________________________________________\n4.82      1132.28   21.00      800970.00   4575    WRITE\n5.70       156.47    9.00      665085.00   39163   READDIRP\n11.35      315.02    9.00     1433947.00   38698   LOOKUP\n11.88     1729.34   21.00     2569638.00    7382   FXATTROP\n47.35   104235.02 2485.00     7789367.00     488   FSYNC\n\n------------------\n\n------------------\n\nDuration     : 335\n\nBytesRead    : 94505058\n\nBytesWritten : 195571980\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#stop-profiling","title":"Stop Profiling","text":"<p>You can stop profiling the volume, if you do not need profiling information anymore.</p> <p>Stop profiling using the following command:</p> <pre><code># gluster volume profile  stop\n</code></pre> <p>For example, to stop profiling on test-volume:</p> <pre><code># gluster volume profile  stop\n\nProfiling stopped on test-volume\n</code></pre>"},{"location":"Administrator-Guide/Monitoring-Workload/#running-glusterfs-volume-top-command","title":"Running GlusterFS Volume TOP Command","text":"<p>GlusterFS Volume Top command allows you to view the glusterfs bricks\u2019 performance metrics like read, write, file open calls, file read calls, file write calls, directory open calls, and directory real calls. The top command displays up to 100 results.</p> <p>This section describes how to run and view the results for the following GlusterFS Top commands:</p> <ul> <li>Viewing Open fd Count and Maximum fd Count</li> <li>Viewing Highest File Read Calls</li> <li>Viewing Highest File Write Calls</li> <li>Viewing Highest Open Calls on Directories</li> <li>Viewing Highest Read Calls on Directory</li> <li>Viewing List of Read Performance on each Brick</li> <li>Viewing List of Write Performance on each Brick</li> </ul> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-open-fd-count-and-maximum-fd-count","title":"Viewing Open fd Count and Maximum fd Count","text":"<p>You can view both current open fd count (list of files that are currently the most opened and the count) on the brick and the maximum open fd count (count of files that are the currently open and the count of maximum number of files opened at any given point of time, since the servers are up and running). If the brick name is not specified, then open fd metrics of all the bricks belonging to the volume will be displayed.</p> <ul> <li>View open fd count and maximum fd count using the following command:</li> </ul> <p><code># gluster volume top open [brick ] [list-cnt ]</code></p> <p>For example, to view open fd count and maximum fd count on brick   server:/export of test-volume and list top 10 open calls:</p> <p><code># gluster volume top open brick list-cnt</code></p> <p><code>Brick: server:/export/dir1</code></p> <p><code>Current open fd's: 34 Max open fd's: 209</code></p> <pre><code>               ==========Open file stats========\n\n  open            file name\n  call count\n\n  2               /clients/client0/~dmtmp/PARADOX/\n                  COURSES.DB\n\n  11              /clients/client0/~dmtmp/PARADOX/\n                  ENROLL.DB\n\n  11              /clients/client0/~dmtmp/PARADOX/\n                  STUDENTS.DB\n\n  10              /clients/client0/~dmtmp/PWRPNT/\n                  TIPS.PPT\n\n  10              /clients/client0/~dmtmp/PWRPNT/\n                  PCBENCHM.PPT\n\n  9               /clients/client7/~dmtmp/PARADOX/\n                  STUDENTS.DB\n\n  9               /clients/client1/~dmtmp/PARADOX/\n                  STUDENTS.DB\n\n  9               /clients/client2/~dmtmp/PARADOX/\n                  STUDENTS.DB\n\n  9               /clients/client0/~dmtmp/PARADOX/\n                  STUDENTS.DB\n\n  9               /clients/client8/~dmtmp/PARADOX/\n                  STUDENTS.DB\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-highest-file-read-calls","title":"Viewing Highest File Read Calls","text":"<p>You can view highest read calls on each brick. If brick name is not specified, then by default, list of 100 files will be displayed.</p> <ul> <li>View highest file Read calls using the following command:</li> </ul> <p><code># gluster volume top read [brick ] [list-cnt ]</code></p> <p>For example, to view highest Read calls on brick server:/export of   test-volume:</p> <p><code># gluster volume top read brick list-cnt</code></p> <p><code>Brick:</code> server:/export/dir1</p> <pre><code>            ==========Read file stats========\n\n  read              filename\n  call count\n\n  116              /clients/client0/~dmtmp/SEED/LARGE.FIL\n\n  64               /clients/client0/~dmtmp/SEED/MEDIUM.FIL\n\n  54               /clients/client2/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client6/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client5/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client0/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client3/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client4/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client9/~dmtmp/SEED/LARGE.FIL\n\n  54               /clients/client8/~dmtmp/SEED/LARGE.FIL\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-highest-file-write-calls","title":"Viewing Highest File Write Calls","text":"<p>You can view list of files which has highest file write calls on each brick. If brick name is not specified, then by default, list of 100 files will be displayed.</p> <ul> <li>View highest file Write calls using the following command:</li> </ul> <p><code># gluster volume top write [brick ] [list-cnt ]</code></p> <p>For example, to view highest Write calls on brick server:/export of   test-volume:</p> <p><code># gluster volume top write brick list-cnt</code></p> <p><code>Brick: server:/export/dir1</code></p> <pre><code>                 ==========Write file stats========\n  write call count   filename\n\n  83                /clients/client0/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client7/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client1/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client2/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client0/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client8/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client5/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client4/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client6/~dmtmp/SEED/LARGE.FIL\n\n  59                /clients/client3/~dmtmp/SEED/LARGE.FIL\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-highest-open-calls-on-directories","title":"Viewing Highest Open Calls on Directories","text":"<p>You can view list of files which has highest open calls on directories of each brick. If brick name is not specified, then the metrics of all the bricks belonging to that volume will be displayed.</p> <ul> <li>View list of open calls on each directory using the following   command:</li> </ul> <p><code># gluster volume top opendir [brick ] [list-cnt ]</code></p> <p>For example, to view open calls on brick server:/export/ of   test-volume:</p> <p><code># gluster volume top opendir brick list-cnt</code></p> <p><code>Brick: server:/export/dir1</code></p> <pre><code>           ==========Directory open stats========\n\n  Opendir count     directory name\n\n  1001              /clients/client0/~dmtmp\n\n  454               /clients/client8/~dmtmp\n\n  454               /clients/client2/~dmtmp\n\n  454               /clients/client6/~dmtmp\n\n  454               /clients/client5/~dmtmp\n\n  454               /clients/client9/~dmtmp\n\n  443               /clients/client0/~dmtmp/PARADOX\n\n  408               /clients/client1/~dmtmp\n\n  408               /clients/client7/~dmtmp\n\n  402               /clients/client4/~dmtmp\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-highest-read-calls-on-directory","title":"Viewing Highest Read Calls on Directory","text":"<p>You can view list of files which has highest directory read calls on each brick. If brick name is not specified, then the metrics of all the bricks belonging to that volume will be displayed.</p> <ul> <li>View list of highest directory read calls on each brick using the   following command:</li> </ul> <p><code># gluster volume top test-volume readdir [brick BRICK] [list-cnt {0..100}]</code></p> <p>For example, to view highest directory read calls on brick   server:/export of test-volume:</p> <p><code># gluster volume top test-volume readdir brick server:/export list-cnt 10</code></p> <p><code>Brick:</code></p> <pre><code>  ==========Directory readdirp stats========\n\n  readdirp count           directory name\n\n  1996                    /clients/client0/~dmtmp\n\n  1083                    /clients/client0/~dmtmp/PARADOX\n\n  904                     /clients/client8/~dmtmp\n\n  904                     /clients/client2/~dmtmp\n\n  904                     /clients/client6/~dmtmp\n\n  904                     /clients/client5/~dmtmp\n\n  904                     /clients/client9/~dmtmp\n\n  812                     /clients/client1/~dmtmp\n\n  812                     /clients/client7/~dmtmp\n\n  800                     /clients/client4/~dmtmp\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-list-of-read-performance-on-each-brick","title":"Viewing List of Read Performance on each Brick","text":"<p>You can view the read throughput of files on each brick. If brick name is not specified, then the metrics of all the bricks belonging to that volume will be displayed. The output will be the read throughput.</p> <pre><code>       ==========Read throughput file stats========\n\nread         filename                         Time\nthrough\nput(MBp\ns)\n\n2570.00    /clients/client0/~dmtmp/PWRPNT/      -2011-01-31\n           TRIDOTS.POT                      15:38:36.894610\n2570.00    /clients/client0/~dmtmp/PWRPNT/      -2011-01-31\n           PCBENCHM.PPT                     15:38:39.815310\n2383.00    /clients/client2/~dmtmp/SEED/        -2011-01-31\n           MEDIUM.FIL                       15:52:53.631499\n\n2340.00    /clients/client0/~dmtmp/SEED/        -2011-01-31\n           MEDIUM.FIL                       15:38:36.926198\n\n2299.00   /clients/client0/~dmtmp/SEED/         -2011-01-31\n          LARGE.FIL                         15:38:36.930445\n\n2259.00   /clients/client0/~dmtmp/PARADOX/      -2011-01-31\n          COURSES.X04                       15:38:40.549919\n\n2221.00   /clients/client0/~dmtmp/PARADOX/      -2011-01-31\n          STUDENTS.VAL                      15:52:53.298766\n\n2221.00   /clients/client3/~dmtmp/SEED/         -2011-01-31\n          COURSES.DB                        15:39:11.776780\n\n2184.00   /clients/client3/~dmtmp/SEED/         -2011-01-31\n          MEDIUM.FIL                        15:39:10.251764\n\n2184.00   /clients/client5/~dmtmp/WORD/         -2011-01-31\n          BASEMACH.DOC                      15:39:09.336572\n</code></pre> <p>This command will initiate a dd for the specified count and block size and measures the corresponding throughput.</p> <ul> <li>View list of read performance on each brick using the following   command:</li> </ul> <p><code># gluster volume top read-perf [bs count ] [brick ] [list-cnt ]</code></p> <p>For example, to view read performance on brick server:/export/ of   test-volume, 256 block size of count 1, and list count 10:</p> <p><code># gluster volume top read-perf bs 256 count 1 brick list-cnt</code></p> <p><code>Brick: server:/export/dir1 256 bytes (256 B) copied, Throughput: 4.1 MB/s</code></p> <pre><code>         ==========Read throughput file stats========\n\n  read         filename                         Time\n  through\n  put(MBp\n  s)\n\n  2912.00   /clients/client0/~dmtmp/PWRPNT/    -2011-01-31\n             TRIDOTS.POT                   15:38:36.896486\n\n  2570.00   /clients/client0/~dmtmp/PWRPNT/    -2011-01-31\n             PCBENCHM.PPT                  15:38:39.815310\n\n  2383.00   /clients/client2/~dmtmp/SEED/      -2011-01-31\n             MEDIUM.FIL                    15:52:53.631499\n\n  2340.00   /clients/client0/~dmtmp/SEED/      -2011-01-31\n             MEDIUM.FIL                    15:38:36.926198\n\n  2299.00   /clients/client0/~dmtmp/SEED/      -2011-01-31\n             LARGE.FIL                     15:38:36.930445\n\n  2259.00  /clients/client0/~dmtmp/PARADOX/    -2011-01-31\n            COURSES.X04                    15:38:40.549919\n\n  2221.00  /clients/client9/~dmtmp/PARADOX/    -2011-01-31\n            STUDENTS.VAL                   15:52:53.298766\n\n  2221.00  /clients/client8/~dmtmp/PARADOX/    -2011-01-31\n           COURSES.DB                      15:39:11.776780\n\n  2184.00  /clients/client3/~dmtmp/SEED/       -2011-01-31\n            MEDIUM.FIL                     15:39:10.251764\n\n  2184.00  /clients/client5/~dmtmp/WORD/       -2011-01-31\n           BASEMACH.DOC                    15:39:09.336572\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#viewing-list-of-write-performance-on-each-brick","title":"Viewing List of Write Performance on each Brick","text":"<p>You can view list of write throughput of files on each brick. If brick name is not specified, then the metrics of all the bricks belonging to that volume will be displayed. The output will be the write throughput.</p> <p>This command will initiate a dd for the specified count and block size and measures the corresponding throughput. To view list of write performance on each brick:</p> <ul> <li>View list of write performance on each brick using the following   command:</li> </ul> <p><code># gluster volume top write-perf [bs count ] [brick ] [list-cnt ]</code></p> <p>For example, to view write performance on brick server:/export/ of   test-volume, 256 block size of count 1, and list count 10:</p> <p><code># gluster volume top write-perf bs 256 count 1 brick list-cnt</code></p> <p><code>Brick</code>: server:/export/dir1</p> <p><code>256 bytes (256 B) copied, Throughput: 2.8 MB/s</code></p> <pre><code>         ==========Write throughput file stats========\n\n  write                filename                 Time\n  throughput\n  (MBps)\n\n  1170.00    /clients/client0/~dmtmp/SEED/     -2011-01-31\n             SMALL.FIL                     15:39:09.171494\n\n  1008.00    /clients/client6/~dmtmp/SEED/     -2011-01-31\n             LARGE.FIL                      15:39:09.73189\n\n  949.00    /clients/client0/~dmtmp/SEED/      -2011-01-31\n            MEDIUM.FIL                     15:38:36.927426\n\n  936.00   /clients/client0/~dmtmp/SEED/       -2011-01-31\n           LARGE.FIL                        15:38:36.933177\n  897.00   /clients/client5/~dmtmp/SEED/       -2011-01-31\n           MEDIUM.FIL                       15:39:09.33628\n\n  897.00   /clients/client6/~dmtmp/SEED/       -2011-01-31\n           MEDIUM.FIL                       15:39:09.27713\n\n  885.00   /clients/client0/~dmtmp/SEED/       -2011-01-31\n            SMALL.FIL                      15:38:36.924271\n\n  528.00   /clients/client5/~dmtmp/SEED/       -2011-01-31\n           LARGE.FIL                        15:39:09.81893\n\n  516.00   /clients/client6/~dmtmp/ACCESS/    -2011-01-31\n           FASTENER.MDB                    15:39:01.797317\n</code></pre>"},{"location":"Administrator-Guide/Monitoring-Workload/#displaying-volume-information","title":"Displaying Volume Information","text":"<p>You can display information about a specific volume, or all volumes, as needed.</p> <ul> <li>Display information about a specific volume using the following   command:</li> </ul> <p><code># gluster volume info VOLNAME</code></p> <p>For example, to display information about test-volume:</p> <pre><code>  # gluster volume info test-volume\n  Volume Name: test-volume\n  Type: Distribute\n  Status: Created\n  Number of Bricks: 4\n  Bricks:\n  Brick1: server1:/exp1\n  Brick2: server2:/exp2\n  Brick3: server3:/exp3\n  Brick4: server4:/exp4\n</code></pre> <ul> <li>Display information about all volumes using the following command:</li> </ul> <p><code># gluster volume info all</code></p> <pre><code>  # gluster volume info all\n\n  Volume Name: test-volume\n  Type: Distribute\n  Status: Created\n  Number of Bricks: 4\n  Bricks:\n  Brick1: server1:/exp1\n  Brick2: server2:/exp2\n  Brick3: server3:/exp3\n  Brick4: server4:/exp4\n\n  Volume Name: mirror\n  Type: Distributed-Replicate\n  Status: Started\n  Number of Bricks: 2 X 2 = 4\n  Bricks:\n  Brick1: server1:/brick1\n  Brick2: server2:/brick2\n  Brick3: server3:/brick3\n  Brick4: server4:/brick4\n\n  Volume Name: Vol\n  Type: Distribute\n  Status: Started\n  Number of Bricks: 1\n  Bricks:\n  Brick: server:/brick6\n</code></pre>"},{"location":"Administrator-Guide/Monitoring-Workload/#performing-statedump-on-a-volume","title":"Performing Statedump on a Volume","text":"<p>Statedump is a mechanism through which you can get details of all internal variables and state of the glusterfs process at the time of issuing the command.You can perform statedumps of the brick processes and nfs server process of a volume using the statedump command. The following options can be used to determine what information is to be dumped:</p> <ul> <li> <p>mem - Dumps the memory usage and memory pool details of the   bricks.</p> </li> <li> <p>iobuf - Dumps iobuf details of the bricks.</p> </li> <li> <p>priv - Dumps private information of loaded translators.</p> </li> <li> <p>callpool - Dumps the pending calls of the volume.</p> </li> <li> <p>fd - Dumps the open fd tables of the volume.</p> </li> <li> <p>inode - Dumps the inode tables of the volume.</p> </li> </ul> <p>To display volume statedump</p> <ul> <li>Display statedump of a volume or NFS server using the following   command:</li> </ul> <p><code># gluster volume statedump [nfs] [all|mem|iobuf|callpool|priv|fd|inode]</code></p> <p>For example, to display statedump of test-volume:</p> <pre><code>  # gluster volume statedump test-volume\n  Volume statedump successful\n</code></pre> <p>The statedump files are created on the brick servers in the<code>/tmp</code>   directory or in the directory set using <code>server.statedump-path</code>   volume option. The naming convention of the dump file is   <code>&lt;brick-path&gt;.&lt;brick-pid&gt;.dump</code>.</p> <ul> <li>By defult, the output of the statedump is stored at   <code>/tmp/&lt;brickname.PID.dump&gt;</code> file on that particular server. Change   the directory of the statedump file using the following command:</li> </ul> <p><code># gluster volume set server.statedump-path</code></p> <p>For example, to change the location of the statedump file of   test-volume:</p> <pre><code>  # gluster volume set test-volume server.statedump-path /usr/local/var/log/glusterfs/dumps/\n  Set volume successful\n</code></pre> <p>You can view the changed path of the statedump file using the   following command:</p> <p><code># gluster volume info</code></p>"},{"location":"Administrator-Guide/Monitoring-Workload/#displaying-volume-status","title":"Displaying Volume Status","text":"<p>You can display the status information about a specific volume, brick or all volumes, as needed. Status information can be used to understand the current status of the brick, nfs processes, and overall file system. Status information can also be used to monitor and debug the volume information. You can view status of the volume along with the following details:</p> <ul> <li> <p>detail - Displays additional information about the bricks.</p> </li> <li> <p>clients - Displays the list of clients connected to the volume.</p> </li> <li> <p>mem - Displays the memory usage and memory pool details of the   bricks.</p> </li> <li> <p>inode - Displays the inode tables of the volume.</p> </li> <li> <p>fd - Displays the open fd (file descriptors) tables of the   volume.</p> </li> <li> <p>callpool - Displays the pending calls of the volume.</p> </li> </ul> <p>To display volume status</p> <ul> <li>Display information about a specific volume using the following   command:</li> </ul> <p><code># gluster volume status [all| []] [detail|clients|mem|inode|fd|callpool]</code></p> <p>For example, to display information about test-volume:</p> <pre><code>  # gluster volume status test-volume\n  STATUS OF VOLUME: test-volume\n  BRICK                           PORT   ONLINE   PID\n  --------------------------------------------------------\n  arch:/export/1                  24009   Y       22445\n  --------------------------------------------------------\n  arch:/export/2                  24010   Y       22450\n</code></pre> <ul> <li>Display information about all volumes using the following command:</li> </ul> <p><code># gluster volume status all</code></p> <pre><code>  # gluster volume status all\n  STATUS OF VOLUME: volume-test\n  BRICK                           PORT   ONLINE   PID\n  --------------------------------------------------------\n  arch:/export/4                  24010   Y       22455\n\n  STATUS OF VOLUME: test-volume\n  BRICK                           PORT   ONLINE   PID\n  --------------------------------------------------------\n  arch:/export/1                  24009   Y       22445\n  --------------------------------------------------------\n  arch:/export/2                  24010   Y       22450\n</code></pre> <ul> <li>Display additional information about the bricks using the following   command:</li> </ul> <p><code># gluster volume status detail</code></p> <p>For example, to display additional information about the bricks of   test-volume:</p> <pre><code>  # gluster volume status test-volume detail\n  STATUS OF VOLUME: test-volume\n  -------------------------------------------\n  Brick                : arch:/export/1\n  Port                 : 24009\n  Online               : Y\n  Pid                  : 16977\n  File System          : rootfs\n  Device               : rootfs\n  Mount Options        : rw\n  Disk Space Free      : 13.8GB\n  Total Disk Space     : 46.5GB\n  Inode Size           : N/A\n  Inode Count          : N/A\n  Free Inodes          : N/A\n\n  Number of Bricks: 1\n  Bricks:\n  Brick: server:/brick6\n</code></pre> <ul> <li>Display the list of clients accessing the volumes using the   following command:</li> </ul> <p><code># gluster volume status test-volume clients</code></p> <p>For example, to display the list of clients connected to   test-volume:</p> <pre><code>  # gluster volume status test-volume clients\n  Brick : arch:/export/1\n  Clients connected : 2\n  Hostname          Bytes Read   BytesWritten\n  --------          ---------    ------------\n  127.0.0.1:1013    776          676\n  127.0.0.1:1012    50440        51200\n</code></pre> <ul> <li>Display the memory usage and memory pool details of the bricks using   the following command:</li> </ul> <p><code># gluster volume status test-volume mem</code></p> <p>For example, to display the memory usage and memory pool details of   the bricks of test-volume:</p> <pre><code>  Memory status for volume : test-volume\n  ----------------------------------------------\n  Brick : arch:/export/1\n  Mallinfo\n  --------\n  Arena    : 434176\n  Ordblks  : 2\n  Smblks   : 0\n  Hblks    : 12\n  Hblkhd   : 40861696\n  Usmblks  : 0\n  Fsmblks  : 0\n  Uordblks : 332416\n  Fordblks : 101760\n  Keepcost : 100400\n\n  Mempool Stats\n  -------------\n  Name                               HotCount ColdCount PaddedSizeof AllocCount MaxAlloc\n  ----                               -------- --------- ------------ ---------- --------\n  test-volume-server:fd_t                0     16384           92         57        5\n  test-volume-server:dentry_t           59       965           84         59       59\n  test-volume-server:inode_t            60       964          148         60       60\n  test-volume-server:rpcsvc_request_t    0       525         6372        351        2\n  glusterfs:struct saved_frame           0      4096          124          2        2\n  glusterfs:struct rpc_req               0      4096         2236          2        2\n  glusterfs:rpcsvc_request_t             1       524         6372          2        1\n  glusterfs:call_stub_t                  0      1024         1220        288        1\n  glusterfs:call_stack_t                 0      8192         2084        290        2\n  glusterfs:call_frame_t                 0     16384          172       1728        6\n</code></pre> <ul> <li>Display the inode tables of the volume using the following command:</li> </ul> <p><code># gluster volume status inode</code></p> <p>For example, to display the inode tables of the test-volume:</p> <pre><code>  # gluster volume status test-volume inode\n  inode tables for volume test-volume\n  ----------------------------------------------\n  Brick : arch:/export/1\n  Active inodes:\n  GFID                                            Lookups            Ref   IA type\n  ----                                            -------            ---   -------\n  6f3fe173-e07a-4209-abb6-484091d75499                  1              9         2\n  370d35d7-657e-44dc-bac4-d6dd800ec3d3                  1              1         2\n\n  LRU inodes:\n  GFID                                            Lookups            Ref   IA type\n  ----                                            -------            ---   -------\n  80f98abe-cdcf-4c1d-b917-ae564cf55763                  1              0         1\n  3a58973d-d549-4ea6-9977-9aa218f233de                  1              0         1\n  2ce0197d-87a9-451b-9094-9baa38121155                  1              0         2\n</code></pre> <ul> <li>Display the open fd tables of the volume using the following   command:</li> </ul> <p><code># gluster volume status fd</code></p> <p>For example, to display the open fd tables of the test-volume:</p> <pre><code>  # gluster volume status test-volume fd\n\n  FD tables for volume test-volume\n  ----------------------------------------------\n  Brick : arch:/export/1\n  Connection 1:\n  RefCount = 0  MaxFDs = 128  FirstFree = 4\n  FD Entry            PID                 RefCount            Flags\n  --------            ---                 --------            -----\n  0                   26311               1                   2\n  1                   26310               3                   2\n  2                   26310               1                   2\n  3                   26311               3                   2\n\n  Connection 2:\n  RefCount = 0  MaxFDs = 128  FirstFree = 0\n  No open fds\n\n  Connection 3:\n  RefCount = 0  MaxFDs = 128  FirstFree = 0\n  No open fds\n</code></pre> <ul> <li>Display the pending calls of the volume using the following command:</li> </ul> <p><code># gluster volume status callpool</code></p> <p>Each call has a call stack containing call frames.</p> <p>For example, to display the pending calls of test-volume:</p> <pre><code>  # gluster volume status test-volume\n\n  Pending calls for volume test-volume\n  ----------------------------------------------\n  Brick : arch:/export/1\n  Pending calls: 2\n  Call Stack1\n   UID    : 0\n   GID    : 0\n   PID    : 26338\n   Unique : 192138\n   Frames : 7\n   Frame 1\n    Ref Count   = 1\n    Translator  = test-volume-server\n    Completed   = No\n   Frame 2\n    Ref Count   = 0\n    Translator  = test-volume-posix\n    Completed   = No\n    Parent      = test-volume-access-control\n    Wind From   = default_fsync\n    Wind To     = FIRST_CHILD(this)-&gt;fops-&gt;fsync\n   Frame 3\n    Ref Count   = 1\n    Translator  = test-volume-access-control\n    Completed   = No\n    Parent      = repl-locks\n    Wind From   = default_fsync\n    Wind To     = FIRST_CHILD(this)-&gt;fops-&gt;fsync\n   Frame 4\n    Ref Count   = 1\n    Translator  = test-volume-locks\n    Completed   = No\n    Parent      = test-volume-io-threads\n    Wind From   = iot_fsync_wrapper\n    Wind To     = FIRST_CHILD (this)-&gt;fops-&gt;fsync\n   Frame 5\n    Ref Count   = 1\n    Translator  = test-volume-io-threads\n    Completed   = No\n    Parent      = test-volume-marker\n    Wind From   = default_fsync\n    Wind To     = FIRST_CHILD(this)-&gt;fops-&gt;fsync\n   Frame 6\n    Ref Count   = 1\n    Translator  = test-volume-marker\n    Completed   = No\n    Parent      = /export/1\n    Wind From   = io_stats_fsync\n    Wind To     = FIRST_CHILD(this)-&gt;fops-&gt;fsync\n   Frame 7\n    Ref Count   = 1\n    Translator  = /export/1\n    Completed   = No\n    Parent      = test-volume-server\n    Wind From   = server_fsync_resume\n    Wind To     = bound_xl-&gt;fops-&gt;fsync\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/","title":"Configuring NFS-Ganesha over GlusterFS","text":"<p>NFS-Ganesha is a user-space file server for the NFS protocol with support for NFSv3, v4, v4.1, pNFS. It provides a FUSE-compatible File System Abstraction Layer(FSAL) to allow the file-system developers to plug in their storage mechanism and access it from any NFS client. NFS-Ganesha can access the FUSE filesystems directly through its FSAL without copying any data to or from the kernel, thus potentially improving response times.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#installing-nfs-ganesha","title":"Installing nfs-ganesha","text":""},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#gluster-rpms-310","title":"Gluster RPMs (&gt;= 3.10)","text":"<p>glusterfs-server glusterfs-api glusterfs-ganesha</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#ganesha-rpms-25","title":"Ganesha RPMs (&gt;= 2.5)","text":"<p>nfs-ganesha nfs-ganesha-gluster</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#start-nfs-ganesha-manually","title":"Start NFS-Ganesha manually","text":"<ul> <li>To start NFS-Ganesha manually, use the command:   <code>service nfs-ganesha start</code></li> </ul> <pre><code>where:\n/var/log/ganesha.log is the default log file for the ganesha process.\n/etc/ganesha/ganesha.conf is the default configuration file\nNIV_EVENT is the default log level.\n</code></pre> <ul> <li>If the user wants to run ganesha in a preferred mode, execute the following command : <code>ganesha.nfsd -f &lt;location_of_nfs-ganesha.conf_file&gt; -L &lt;location_of_log_file&gt; -N &lt;log_level&gt;</code></li> </ul> <pre><code>For example:\n#ganesha.nfsd -f nfs-ganesha.conf -L nfs-ganesha.log -N NIV_DEBUG\nwhere:\nnfs-ganesha.log is the log file for the ganesha.nfsd process.\nnfs-ganesha.conf is the configuration file\nNIV_DEBUG is the log level.\n</code></pre> <ul> <li>By default, the export list for the server will be Null</li> </ul> <pre><code>Note : include following parameters in ganesha configuration file for exporting gluster volumes\nNFS_Core_Param {\n        #Use supplied name other tha IP In NSM operations\n        NSM_Use_Caller_Name = true;\n        #Copy lock states into \"/var/lib/nfs/ganesha\" dir\n        Clustered = false;\n        #Use a non-privileged port for RQuota\n        Rquota_Port = 875;\n    #please note add below option for Mac clients\n    #Enable_RQUOTA = false;\n}\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-by-step-procedures-to-exporting-glusterfs-volume-via-nfs-ganesha","title":"Step by step procedures to exporting GlusterFS volume via NFS-Ganesha","text":""},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-1","title":"step 1 :","text":"<p>To export any GlusterFS volume or directory inside a volume, create the EXPORT block for each of those entries in an export configuration file. The following parameters are required to export any entry.</p> <ul> <li><code>cat export.conf</code></li> </ul> <pre><code>EXPORT{\n    Export_Id = 1 ;   # Export ID unique to each export\n    Path = \"volume_path\";  # Path of the volume to be exported. Eg: \"/test_volume\"\n\n    FSAL {\n        name = GLUSTER;\n        hostname = \"10.xx.xx.xx\";  # IP of one of the nodes in the trusted pool\n        volume = \"volume_name\";  # Volume name. Eg: \"test_volume\"\n    }\n\n    Access_type = RW;    # Access permissions\n    Squash = No_root_squash; # To enable/disable root squashing\n    Disable_ACL = TRUE;  # To enable/disable ACL\n    Pseudo = \"pseudo_path\";  # NFSv4 pseudo path for this export. Eg: \"/test_volume_pseudo\"\n    Protocols = \"3\",\"4\" ;    # NFS protocols supported\n    Transports = \"UDP\",\"TCP\" ; # Transport protocols supported\n    SecType = \"sys\";     # Security flavors supported\n}\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-2","title":"step 2 :","text":"<p>Now include the export configuration file in the ganesha configuration file (by default). This can be done by adding the line below at the end of file</p> <ul> <li><code>%include \u201c&lt;path of export configuration&gt;\u201d</code></li> </ul> <pre><code>Note :\nThe above two steps can be done with following script\n#/usr/libexec/ganesha/create-export-ganesha.sh &lt;ganesha directory&gt; on &lt;volume name&gt;\nBy default ganesha directory is \"/etc/ganesha\"\nThis will create export configuration file in &lt;ganesha directory&gt;/exports/export.&lt;volume name&gt;.conf\nAlso, it will add the above entry to ganesha.conf\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-3","title":"step 3 :","text":"<p>Turn on features.cache-invalidation for that volume</p> <ul> <li><code>gluster volume set \\&lt;volume name\\&gt; features.cache-invalidation on</code></li> </ul>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-4","title":"step 4 :","text":"<p>dbus commands are used to export/unexport volume </p> <ul> <li> <p>export</p> </li> <li> <p><code>dbus-send --system --print-reply --dest=org.ganesha.nfsd /org/ganesha/nfsd/ExportMgr org.ganesha.nfsd.exportmgr.AddExport string:&lt;ganesha directory&gt;/exports/export.&lt;volume name&gt;.conf string:\"EXPORT(Path=/&lt;volume name&gt;)\"</code></p> </li> <li> <p>unexport</p> </li> <li><code>dbus-send --system --dest=org.ganesha.nfsd /org/ganesha/nfsd/ExportMgr org.ganesha.nfsd.exportmgr.RemoveExport uint16:&lt;export id&gt;</code></li> </ul> <pre><code>Note :\nStep 4 can be performed via following script\n#/usr/libexec/ganesha/dbus-send.sh &lt;ganesha directory&gt; [on|off] &lt;volume name&gt;\n</code></pre> <p>Above scripts (mentioned in step 3 and step 4) are available in glusterfs 3.10 rpms.</p> <p>You can download it from here</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-5","title":"step 5 :","text":"<ul> <li>To check if the volume is exported, run</li> <li><code>showmount -e localhost</code></li> <li>Or else use the following dbus command</li> <li><code>dbus-send --type=method_call --print-reply --system --dest=org.ganesha.nfsd /org/ganesha/nfsd/ExportMgr org.ganesha.nfsd.exportmgr.ShowExports</code></li> <li>To see clients</li> <li><code>dbus-send --type=method_call --print-reply --system --dest=org.ganesha.nfsd /org/ganesha/nfsd/ClientMgr org.ganesha.nfsd.clientmgr.ShowClients</code></li> </ul>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#using-highly-available-active-active-nfs-ganesha-and-glusterfs-cli","title":"Using Highly Available Active-Active NFS-Ganesha And GlusterFS cli","text":"<p>Please Note currently HA solution for nfs-ganesha is available in 3.10. From 3.12 onwards HA will be handled by a different project known as storhaug which is under development.</p> <p>In a highly available active-active environment, if an NFS-Ganesha server that is connected to an NFS client running a particular application crashes, the application/NFS client is seamlessly connected to another NFS-Ganesha server without any administrative intervention. The cluster is maintained using Pacemaker and Corosync. Pacemaker acts as a resource manager and Corosync provides the communication layer of the cluster. Data coherency across the multi-head NFS-Ganesha servers in the cluster is achieved using the UPCALL infrastructure. UPCALL infrastructure is a generic and extensible framework that sends notifications to the respective glusterfs clients (in this case NFS-Ganesha server) in case of any changes detected in the backend filesystem.</p> <p>The Highly Available cluster is configured in the following three stages:</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#creating-the-ganesha-haconf-file","title":"Creating the ganesha-ha.conf file","text":"<p>The ganesha-ha.conf.example is created in the following location /etc/ganesha when Gluster Storage is installed. Rename the file to ganesha-ha.conf and make the changes as suggested in the following example: sample ganesha-ha.conf file:</p> <p># Name of the HA cluster created. must be unique within the subnet HA_NAME=\"ganesha-ha-360\" # The subset of nodes of the Gluster Trusted Pool that form the ganesha HA cluster. # Hostname is specified. HA_CLUSTER_NODES=\"server1,server2,...\" #HA_CLUSTER_NODES=\"server1.lab.redhat.com,server2.lab.redhat.com,...\" # Virtual IPs for each of the nodes specified above. VIP_server1=\"10.0.2.1\" VIP_server2=\"10.0.2.2\"</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#configuring-nfs-ganesha-using-gluster-cli","title":"Configuring NFS-Ganesha using gluster CLI","text":"<p>The HA cluster can be set up or torn down using gluster CLI. Also, it can export and unexport specific volumes. For more information, see section Configuring NFS-Ganesha using gluster CLI.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#modifying-the-ha-cluster-using-the-ganesha-hash-script","title":"Modifying the HA cluster using the <code>ganesha-ha.sh</code> script","text":"<p>Post the cluster creation any further modification can be done using the <code>ganesha-ha.sh</code> script. For more information, see the section Modifying the HA cluster using the <code>ganesha-ha.sh</code> script.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-by-step-guide","title":"Step-by-step guide","text":""},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#configuring-nfs-ganesha-using-gluster-cli_1","title":"Configuring NFS-Ganesha using Gluster CLI\u2060","text":""},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#pre-requisites-to-run-nfs-ganesha","title":"Pre-requisites to run NFS-Ganesha","text":"<p>Ensure that the following pre-requisites are taken into consideration before you run NFS-Ganesha in your environment:</p> <ul> <li>A Gluster Storage volume must be available for export and NFS-Ganesha rpms are installed on all the nodes.</li> <li> <p>IPv6 must be enabled on the host interface which is used by the NFS-Ganesha daemon. To enable IPv6 support, perform the following steps:</p> </li> <li> <p>Comment or remove the line options ipv6 disable=1 in the /etc/modprobe.d/ipv6.conf file.</p> </li> <li> <p>Reboot the system.</p> </li> <li> <p>Ensure that all the nodes in the cluster are DNS resolvable. For example, you can populate the /etc/hosts with the details of all the nodes in the cluster.</p> </li> <li>Disable and stop NetworkManager service.</li> <li>Enable and start network service on all machines.</li> <li>Create and mount a gluster shared volume.</li> <li><code>gluster volume set all cluster.enable-shared-storage enable</code></li> <li>Install Pacemaker and Corosync on all machines.</li> <li>Set the cluster auth password on all the machines.</li> <li> <p>Passwordless ssh needs to be enabled on all the HA nodes. Follow these steps,</p> </li> <li> <p>On one (primary) node in the cluster, run:</p> <ul> <li><code>ssh-keygen -f /var/lib/glusterd/nfs/secret.pem</code></li> </ul> </li> <li>Deploy the pubkey ~root/.ssh/authorized keys on all nodes, run:<ul> <li><code>ssh-copy-id -i /var/lib/glusterd/nfs/secret.pem.pub root@$node</code></li> </ul> </li> <li> <p>Copy the keys to all nodes in the cluster, run:</p> <ul> <li><code>scp /var/lib/glusterd/nfs/secret.\\* $node:/var/lib/glusterd/nfs/</code></li> </ul> </li> <li> <p>Create a directory named \"nfs-ganesha\" in shared storage path and create ganesha.conf &amp; ganesha-ha.conf in it (from glusterfs 3.9 onwards)</p> </li> </ul>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#configuring-the-ha-cluster","title":"Configuring the HA Cluster","text":"<p>To set up the HA cluster, enable NFS-Ganesha by executing the following command:</p> <pre><code>gluster nfs-ganesha enable\n</code></pre> <p>To tear down the HA cluster, execute the following command:</p> <pre><code>gluster nfs-ganesha disable\n</code></pre> <pre><code>Note :\nEnable command performs the following\n* create a symlink ganesha.conf in /etc/ganesha using ganesha.conf in shared storage\n* start nfs-ganesha process on nodes part of ganesha cluster\n* set up ha cluster\nand disable does the reversal of enable\nAlso if gluster nfs-ganesha [enable/disable] fails of please check following logs\n* /var/log/glusterfs/glusterd.log\n* /var/log/messages (and grep for pcs commands)\n* /var/log/pcsd/pcsd.log\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#exporting-volumes-through-nfs-ganesha-using-cli","title":"Exporting Volumes through NFS-Ganesha using cli","text":"<p>To export a Red Hat Gluster Storage volume, execute the following command:</p> <pre><code>gluster volume set &lt;volname&gt; ganesha.enable on\n</code></pre> <p>To unexport a Red Hat Gluster Storage volume, execute the following command:</p> <pre><code>gluster volume set &lt;volname&gt; ganesha.enable off\n</code></pre> <p>This command unexports the Red Hat Gluster Storage volume without affecting other exports.</p> <p>To verify the status of the volume set options, follow the guidelines mentioned below:</p> <ul> <li>Check if NFS-Ganesha is started by executing the following command:</li> <li><code>ps aux | grep ganesha.nfsd</code></li> <li>Check if the volume is exported.</li> <li><code>showmount -e localhost</code></li> </ul> <p>The logs of ganesha.nfsd daemon is written to /var/log/ganesha.log. Check the log file on noticing any unexpected behavior.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#modifying-the-ha-cluster-using-the-ganesha-hash-script_1","title":"Modifying the HA cluster using the ganesha-ha.sh script","text":"<p>To modify the existing HA cluster and to change the default values of the exports use the ganesha-ha.sh script located at /usr/libexec/ganesha/.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#adding-a-node-to-the-cluster","title":"Adding a node to the cluster","text":"<p>Before adding a node to the cluster, ensure all the prerequisites mentioned in section <code>Pre-requisites to run NFS-Ganesha</code> are met. To add a node to the cluster. execute the following command on any of the nodes in the existing NFS-Ganesha cluster:</p> <pre><code>#./ganesha-ha.sh --add &lt;HA_CONF_DIR&gt; &lt;HOSTNAME&gt; &lt;NODE-VIP&gt;\nwhere,\nHA_CONF_DIR: The directory path containing the ganesha-ha.conf file.\nHOSTNAME: Hostname of the new node to be added\nNODE-VIP: Virtual IP of the new node to be added.\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#deleting-a-node-in-the-cluster","title":"Deleting a node in the cluster","text":"<p>To delete a node from the cluster, execute the following command on any of the nodes in the existing NFS-Ganesha cluster:</p> <pre><code>#./ganesha-ha.sh --delete &lt;HA_CONF_DIR&gt; &lt;HOSTNAME&gt;\n\nwhere,\nHA_CONF_DIR: The directory path containing the ganesha-ha.conf file.\nHOSTNAME: Hostname of the new node to be added\n</code></pre>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#modifying-the-default-export-configuration","title":"Modifying the default export configuration","text":"<p>To modify the default export configurations perform the following steps on any of the nodes in the existing ganesha cluster:</p> <ul> <li> <p>Edit/add the required fields in the corresponding export file located at <code>/etc/ganesha/exports</code>.</p> </li> <li> <p>Execute the following command:</p> <pre><code>  #./ganesha-ha.sh --refresh-config &lt;HA_CONFDIR&gt; &lt;volname&gt;\n\n  where,\n  HA_CONF_DIR: The directory path containing the ganesha-ha.conf file.\n  volname: The name of the volume whose export configuration has to be changed.\n</code></pre> <p>Note:       The export ID must not be changed.</p> </li> </ul> <p>\u2060</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#configure-ganesha-ha-cluster-outside-of-gluster-nodes","title":"Configure ganesha ha cluster outside of gluster nodes","text":"<p>Currently, ganesha HA cluster creating tightly integrated with glusterd. So here user needs to create another TSP using ganesha nodes. Then create ganesha HA cluster using above mentioned steps till executing \"gluster nfs-ganesha enable\" Exporting/Unexporting should be performed without using glusterd cli (follow the manual steps, before performing step 4 replace localhost with required hostname/ip \"hostname=localhost;\" in the export configuration file)</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#configuring-gluster-volume-for-pnfs","title":"Configuring Gluster volume for pNFS","text":"<p>The Parallel Network File System (pNFS) is part of the NFS v4.1 protocol that allows computing clients to access storage devices directly and in parallel. The pNFS cluster consists of MDS (Meta-Data-Server) and DS (Data-Server). The client sends all the read/write requests directly to DS and all other operations are handle by the MDS.</p>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#step-by-step-guide_1","title":"Step by step guide","text":"<ul> <li> <p>Turn on <code>feature.cache-invalidation</code> for the volume.</p> </li> <li> <p><code>gluster v set &lt;volname&gt; features.cache-invalidation on</code></p> </li> <li> <p>Select one of the nodes in the cluster as MDS and configure it adding the following block to ganesha configuration file</p> </li> </ul> <pre><code>GLUSTER\n{\n PNFS_MDS = true;\n}\n</code></pre> <ul> <li> <p>Manually start NFS-Ganesha in every node in the cluster.</p> </li> <li> <p>Check whether the volume is exported via nfs-ganesha in all the nodes.</p> </li> <li> <p><code>showmount -e localhost</code></p> </li> <li> <p>Mount the volume using NFS version 4.1 protocol with the ip of MDS</p> </li> <li><code>mount -t nfs4 -o minorversion=1 &lt;ip of MDS&gt;:&lt;volume name&gt; &lt;mount path&gt;</code></li> </ul>"},{"location":"Administrator-Guide/NFS-Ganesha-GlusterFS-Integration/#points-to-be-noted","title":"Points to be Noted","text":"<ul> <li> <p>The current architecture supports only a single MDS and multiple DS. The server with which client mounts will act as MDS and all servers including MDS can act as DS.</p> </li> <li> <p>Currently, HA is not supported for pNFS (more specifically MDS). Although it is configurable, consistency is guaranteed across the cluster.</p> </li> <li> <p>If any of the DS goes down, then MDS will handle those I/O's.</p> </li> <li> <p>Hereafter, all the subsequent NFS clients need to use the same server for mounting that volume via pNFS. i.e more than one MDS for a volume is not preferred</p> </li> <li> <p>pNFS support is only tested with distributed, replicated, or distribute-replicate volumes</p> </li> <li> <p>It is tested and verified with RHEL 6.5 , fedora 20, fedora 21 nfs clients. It is always better to use latest nfs-clients</p> </li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/","title":"Network Configurations Techniques","text":""},{"location":"Administrator-Guide/Network-Configurations-Techniques/#bonding-best-practices","title":"Bonding best practices","text":"<p>Bonded network interfaces incorporate multiple physical interfaces into a single logical bonded interface, with a single IP addr. An N-way bonded interface can survive loss of N-1 physical interfaces, and performance can be improved in some cases.</p>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#when-to-bond","title":"When to bond?","text":"<ul> <li>Need high availability for network link</li> <li>Workload: sequential access to large files (most time spent reading/writing)</li> <li>Network throughput limit of client/server \\&lt;\\&lt; storage throughput limit</li> <li>1 GbE (almost always)</li> <li>10-Gbps links or faster -- for writes, replication doubles the load on the network and replicas are usually on different peers to which the client can transmit in parallel.</li> <li>LIMITATION: Bonding mode 6 doesn't improve throughput if network peers are not on the same VLAN.</li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#how-to-configure","title":"How to configure","text":"<ul> <li>Bonding-howto</li> <li>Best bonding mode for Gluster client is mode 6 (balance-alb), this allows client to transmit writes in parallel on separate NICs much of the time. A peak throughput of 750 MB/s on writes from a single client was observed with bonding mode 6 on 2 10-GbE NICs with jumbo frames. That's 1.5 GB/s of network traffic.</li> <li>Another way to balance both transmit and receive traffic is bonding mode 4 (802.3ad) but this requires switch configuration (trunking commands)</li> <li>Still another way to load balance is bonding mode 2 (balance-xor) with option \"xmit_hash_policy=layer3+4\". The bonding modes 6 and 2 will not improve single-connection throughput, but improve aggregate throughput across all connections.</li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#jumbo-frames","title":"Jumbo frames","text":"<p>Jumbo frames are Ethernet (or Infiniband) frames with size greater than the default of 1500 bytes (Infiniband default is around 2000 bytes). Increasing frame size reduces load on operating system and hardware, which must process interrupts and protocol messages per frame.</p>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#when-to-configure","title":"When to configure?","text":"<ul> <li>Any network faster than 1-GbE</li> <li>Workload is sequential large-file reads/writes</li> <li>LIMITATION: Requires all network switches in VLAN must be configured to handle jumbo frames, do not configure otherwise.</li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#how-to-configure_1","title":"How to configure?","text":"<ul> <li>Edit network interface file at /etc/sysconfig/network-scripts/ifcfg-your-interface</li> <li>Ethernet (on ixgbe driver): add \"MTU=9000\" (MTU means \"maximum transfer unit\") record to network interface file</li> <li>Infiniband (on mlx4 driver): add \"CONNECTED_MODE=yes\" and \"MTU=65520\" records to network interface file</li> <li>ifdown your-interface; ifup your-interface</li> <li>Test with \"ping -s 16384 other-host-on-VLAN\"</li> <li>Switch requires max frame size larger than MTU because of protocol headers, usually 9216 bytes</li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#configuring-a-backend-network-for-storage","title":"Configuring a backend network for storage","text":"<p>This method lets you add network capacity for multi-protocol sites by segregating traffic for different protocols on different network interfaces. This method can lower latency and improve throughput. For example, this method can keep self-heal and rebalancing traffic from competing with non-Gluster client traffic for a network interface, and will better support multi-stream I/O.</p>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#when-to-configure_1","title":"When to configure?","text":"<ul> <li>For non-Gluster services such as NFS, Swift (REST), CIFS being provided on Gluster servers. It will not help Gluster clients (external nodes with Gluster mountpoints on them).</li> <li>Network port is over-utilized.</li> </ul>"},{"location":"Administrator-Guide/Network-Configurations-Techniques/#how-to-configure_2","title":"How to configure?","text":"<ul> <li>Most network cards have multiple ports on them -- make port 1 the non-Gluster port and port 2 the Gluster port.</li> <li>Separate Gluster ports onto a separate VLAN from non-Gluster ports, to simplify configuration.</li> </ul>"},{"location":"Administrator-Guide/Object-Storage/","title":"SwiftOnFile","text":"<p>SwiftOnFile project enables GlusterFS volume to be used as backend for Openstack Swift - a distributed object store. This allows objects PUT over Swift's RESTful API to be accessed as files over filesystem interface and vice versa i.e files created over filesystem interface (NFS/FUSE/native) can be accessed as objects over Swift's RESTful API.</p> <p>SwiftOnFile project was formerly known as <code>gluster-swift</code> and also as <code>UFO (Unified File and Object)</code> before that. More information about SwiftOnFile can be found here. There are differences in working of gluster-swift (now obsolete) and swiftonfile projects. The older gluster-swift code and relevant documentation can be found in icehouse branch of swiftonfile repo.</p>"},{"location":"Administrator-Guide/Object-Storage/#swiftonfile-vs-gluster-swift","title":"SwiftOnFile vs gluster-swift","text":"Gluster-Swift SwiftOnFile One GlusterFS volume maps to and stores only one Swift account. Mountpoint Hierarchy: <code>container/object</code> One GlusterFS volume or XFS partition can have multiple accounts. Mountpoint Hierarchy: <code>acc/container/object</code> Over-rides account server, container server and object server. We need to keep in sync with upstream Swift and often may need code changes or workarounds to support new Swift features Implements only object-server. Very less need to catch-up to Swift as new features at proxy,container and account level would very likely be compatible with SwiftOnFile as it's just a storage policy. Does not use DBs for accounts and container.A container listing involves a filesystem crawl.A HEAD on account/container gives inaccurate or stale results without FS crawl. Uses Swift's DBs to store account and container information. An account or container listing does not involve FS crawl. Accurate info on HEAD to account/container \u2013 ability to support account quotas. GET on a container and account lists actual files in filesystem. GET on a container and account only lists objects PUT over Swift. Files created over filesystem interface do not appear in container and object listings. Standalone deployment required and does not integrate with existing Swift cluster. Integrates with any existing Swift deployment as a Storage Policy."},{"location":"Administrator-Guide/Performance-Testing/","title":"Gluster performance testing","text":"<p>Once you have created a Gluster volume, you need to verify that it has adequate performance for your application, and if it does not, you need a way to isolate the root cause of the problem.</p> <p>There are two kinds of workloads:</p> <ul> <li>synthetic - run a test program such as ones below</li> <li>application - run existing application</li> </ul>"},{"location":"Administrator-Guide/Performance-Testing/#profiling-tools","title":"Profiling tools","text":"<p>Ideally it's best to use the actual application that you want to run on Gluster, but applications often don't tell the sysadmin much about where the performance problems are, particularly latency (response-time) problems. So there are non-invasive profiling tools built into Gluster that can measure performance as seen by the application, without changing the application. Gluster profiling methods at present are based on the io-stats translator, and include:</p> <ul> <li> <p>client-side profiling - instrument a Gluster mountpoint or libgfapi process to sample profiling data. In this case, the io-stats translator is at the \"top\" of the translator stack, so the profile data truly represents what the application (or FUSE mountpoint) is asking Gluster to do. For example, a single application write is counted once as a WRITE FOP (file operation) call, and the latency for that WRITE FOP includes latency of the data replication done by the AFR translator lower in the stack.</p> </li> <li> <p>server-side profiling - this is done using the \"gluster volume profile\" command (and \"gluster volume top\" can be used to identify particular hot files in use as well). Server-side profiling can measure the throughput of an entire Gluster volume over time, and can measure server-side latencies. However, it does not incorporate network or client-side latencies. It is also hard to infer application behavior because of client-side translators that alter the I/O workload (examples: erasure coding, cache tiering).</p> </li> </ul> <p>In short, use client-side profiling for understanding \"why is my application unresponsive\"? and use server-side profiling for understanding how busy your Gluster volume is, what kind of workload is being applied to it (i.e. is it mostly-read? is it small-file?), and how well the I/O load is spread across the volume.</p>"},{"location":"Administrator-Guide/Performance-Testing/#client-side-profiling","title":"client-side profiling","text":"<p>To run client-side profiling,</p> <ul> <li>gluster volume profile your-volume start</li> <li>setfattr -n trusted.io-stats-dump -v io-stats-pre.txt /your/mountpoint</li> </ul> <p>This will generate the specified file (<code>/var/run/gluster/io-stats-pre.txt</code>) on the client. A script like gvp-client.sh can automate collection of this data.</p> <p>TBS: what the different FOPs are and what they mean.</p>"},{"location":"Administrator-Guide/Performance-Testing/#server-side-profiling","title":"server-side profiling","text":"<p>To run it:</p> <ul> <li>gluster volume profile your-volume start</li> <li>repeat this command periodically: gluster volume profile your-volume info</li> <li>gluster volume profile your-volume stop</li> </ul> <p>A script like gvp.sh can help you automate this procedure.</p> <p>Scripts to post-process this data are in development now, let us know what you need and what would be a useful format for presenting the data.</p>"},{"location":"Administrator-Guide/Performance-Testing/#testing-tools","title":"Testing tools","text":"<p>In this section, we suggest some basic workload tests that can be used to measure Gluster performance in an application-independent way for a wide variety of POSIX-like operating systems and runtime environments. We then provide some terminology and conceptual framework for interpreting these results.</p> <p>The tools that we suggest here are designed to run in a distributed filesystem. This is still a relatively rare attribute for filesystem benchmarks, even now! There is a much larger set of benchmarks available that can be run from a single system. While single-system results are important, they are far from a definitive measure of the performance capabilities of a distributed filesystem.</p> <ul> <li>fio - for large file I/O tests.</li> <li>smallfile - for   pure-workload small-file tests</li> <li>iozone - for pure-workload large-file tests</li> <li>parallel-libgfapi - for pure-workload libgfapi tests</li> </ul> <p>The \"netmist\" mixed-workload generator of SPECsfs2014 may be suitable in some cases, but is not technically an open-source tool. This tool was written by Don Capps, who was an author of iozone.</p>"},{"location":"Administrator-Guide/Performance-Testing/#fio","title":"fio","text":"<p>fio is extremely powerful and is easily installed from traditional distros, unlike iozone, and has increasingly powerful distributed test capabilities described in its --client parameter upstream as of May 2015. To use this mode, start by launching an fio \"server\" instance on each workload generator host using:</p> <pre><code>    fio --server --daemonize=/var/run/fio-svr.pid\n</code></pre> <p>And make sure your firewall allows port 8765 through for it. You can now run tests on sets of hosts using syntax like:</p> <pre><code>    fio --client=workload-generator.list --output-format=json my-workload.fiojob\n</code></pre> <p>You can also use it for distributed testing, however, by launching fio instances on separate hosts, taking care to start all fio instances as close to the same time as possible, limiting per-thread throughput, and specifying the run duration rather than the amount of data, so that all fio instances end at around the same time. You can then aggregate the fio results from different hosts to get a meaningful aggregate result.</p> <p>fio also has different I/O engines, in particular Huamin Chen authored the libgfapi engine for fio so that you can use fio to test Gluster performance without using FUSE.</p> <p>Limitations of fio in distributed mode:</p> <ul> <li>stonewalling - fio calculates throughput based on when the last thread finishes a test run. In contrast, iozone calculates throughput by default based on when the FIRST thread finishes the workload. This can lead to (deceptively?) higher throughput results for iozone, since there are inevitably some \"straggler\" threads limping to the finish line later than others. It is possible in some cases to overcome this limitation by specifying a time limit for the test. This works well for random I/O tests, where typically you do not want to read/write the entire file/device anyway.</li> <li>inaccuracy when response times &gt; 1 sec - at least in some cases fio has reported excessively high IOPS when fio threads encounter response times much greater than 1 second, this can happen for distributed storage when there is unfairness in the implementation.</li> <li>io engines are not integrated.</li> </ul>"},{"location":"Administrator-Guide/Performance-Testing/#smallfile-distributed-io-benchmark","title":"smallfile Distributed I/O Benchmark","text":"<p>Smallfile is a python-based small-file distributed POSIX workload generator which can be used to quickly measure performance for a variety of metadata-intensive workloads across an entire cluster. It has no dependencies on any specific filesystem or implementation AFAIK. It runs on Linux, Windows and should work on most Unixes too. It is intended to complement use of iozone benchmark for measuring performance of large-file workloads, and borrows certain concepts from iozone and Ric Wheeler's fs_mark. It was developed by Ben England starting in March 2009, and is now open-source (Apache License v2).</p> <p>Here is a typical simple sequence of tests where files laid down in an initial create test are then used in subsequent tests. There are many more smallfile operation types than these 5 (see doc), but these are the most commonly used ones.</p> <pre><code>    SMF=\"./smallfile_cli.py --top /mnt/glusterfs/smf --host-set h1,h2,h3,h4 --threads 8 --file-size 4 --files 10000 --response-times Y \"\n    $SMF --operation create\n    for s in $SERVERS ; do ssh $h 'echo 3 &gt; /proc/sys/vm/drop_caches' ; done\n    $SMF --operation read\n    $SMF --operation append\n    $SMF --operation rename\n    $SMF --operation delete\n</code></pre>"},{"location":"Administrator-Guide/Performance-Testing/#iozone","title":"iozone","text":"<p>This tool has limitations but does distributed testing well using -+m option (below).</p> <p>The \"-a\" option for automated testing of all use cases is discouraged, because:</p> <ul> <li>this does not allow you to drop the read cache in server before a   test.</li> <li>most of the data points being measured will be irrelevant to the   problem you are solving.</li> </ul> <p>Single-thread testing is an important use case, but to fully utilize the available hardware you typically need to do multi-thread and even multi-host testing.</p> <p>Consider using \"-c -e\" options to measure the time it takes for data to reach persistent storage. \"-C\" option lets you see how much each thread participated in the test. \"-+n\" allows you to save time by skipping re-read and re-write tests. \"-w\" option tells iozone not to delete any files that it accessed, so that subsequent tests can use them. Specify these options with each test:</p> <ul> <li>-i -- test type, 0=write, 1=read, 2=random read/write</li> <li>-r -- data transfer size -- allows you to simulate I/O size used by   application</li> <li>-s -- per-thread file size -- choose this to be large enough for the   system to reach steady state (typically multiple GB needed)</li> <li>-t -- number of threads -- how many subprocesses will be   concurrently issuing I/O requests</li> <li>-F -- list of files -- what files to write/read. If you do not   specify then the filenames iozone.DUMMY.* will be used in the   default directory.</li> </ul> <p>Example of an 8-thread sequential write test with 64-KB transfer size and file size of 1 GB to shared Gluster mountpoint directory /mnt/glusterfs , including time to fsync() and close() the files in the throughput calculation:</p> <pre><code>    iozone\u00a0-w\u00a0-c\u00a0-e\u00a0-i\u00a00\u00a0-+n\u00a0-C\u00a0-r\u00a064k\u00a0-s\u00a01g\u00a0-t\u00a08\u00a0-F\u00a0/mnt/glusterfs/f{0,1,2,3,4,5,6,7,8}.ioz\n</code></pre> <p>WARNING: random I/O testing in iozone is heavily restricted by the iozone constraint that it must randomly read then randomly write the entire file! This is not what we want - instead it should randomly read/write for some fraction of file size or time duration, allowing us to spread out more on the disk while not waiting too long for test to finish. This is why fio (below) is the preferred test tool for random I/O workloads.</p> <p>Distributed testing is a strength of the iozone utility, but this requires use of \"-+m\" option in place of \"-F\" option. The configuration file passed with \"-+m\" option contains a series of records that look like this:</p> <pre><code>    hostname\u00a0\u00a0\u00a0directory\u00a0\u00a0\u00a0iozone-pathname\n</code></pre> <p>Where hostname is a host name or IP address of a test driver machine that iozone can use, directory is the pathname of a directory to use within that host, and iozone-pathname is the full pathname of the iozone executable to use on that host. Be sure that every target host can resolve the hostname of host where the iozone command was run. All target hosts must permit password-less ssh access from the host running the command.</p> <p>For example: (Here, my-ip-address refers to the machine from where the iozone is being run)</p> <pre><code>    export\u00a0RSH=ssh\n    iozone\u00a0-+m\u00a0ioz.cfg\u00a0-+h\u00a0my-ip-address\u00a0-w\u00a0-c\u00a0-e\u00a0-i\u00a00\u00a0-+n\u00a0-C\u00a0-r\u00a064k\u00a0-s\u00a01g\u00a0-t\u00a04\n</code></pre> <p>And the file ioz.cfg contains these records (where /mnt/glusterfs is the Gluster mountpoint on each test machine and test-client-ip is the IP address of a client). Also note that, Each record in the file is a thread in IOZone terminology. Since we have defined the number of threads to be 4 in the above example, we have four records(threads) for a single client.</p> <pre><code>    test-client-ip\u00a0\u00a0/mnt/glusterfs\u00a0\u00a0/usr/local/bin/iozone\n    test-client-ip\u00a0\u00a0/mnt/glusterfs\u00a0\u00a0/usr/local/bin/iozone\n    test-client-ip\u00a0\u00a0/mnt/glusterfs\u00a0\u00a0/usr/local/bin/iozone\n    test-client-ip\u00a0\u00a0/mnt/glusterfs\u00a0\u00a0/usr/local/bin/iozone\n</code></pre> <p>Restriction: Since iozone uses non-privileged ports it may be necessary to temporarily shut down or alter iptables on some/all of the hosts. Secondary machines must support password-less access from Primary machine via ssh.</p> <p>Note that the -+h option is undocumented but it tells the secondary host what IP address to use so that the secondary does not have to be able to resolve the hostname of the test driver. my-ip-address is the IP address that the secondary should connect to in order to report results back to the host. This need not be the same as the host's hostname.</p> <p>Typically you run the sequential write test first to lay down the file, drop cache on the servers (and clients if necessary), do the sequential read test, drop cache, do random I/O test if desired. Using above example:</p> <pre><code>    export\u00a0RSH=ssh\n    IOZ=\"iozone\u00a0-+m\u00a0ioz.cfg\u00a0-+h\u00a0my-ip-address\u00a0-w\u00a0-C\u00a0-c\u00a0-e\u00a0-r\u00a064k\u00a0-+n\u00a0\"\n     hosts=\"`awk\u00a0'{\u00a0print\u00a0$1\u00a0}'\u00a0ioz.cfg`\"\n    $IOZ\u00a0-i\u00a00\u00a0-s\u00a01g\u00a0-t\u00a04`\\\n    for\u00a0n\u00a0in\u00a0$hosts\u00a0$servers\u00a0;\u00a0do\u00a0\\\n    \u00a0\u00a0\u00a0ssh\u00a0$n\u00a0'sync;\u00a0echo\u00a01\u00a0&gt;\u00a0/proc/sys/vm/drop_caches'\u00a0;\u00a0done\n    $IOZ\u00a0-i\u00a01\u00a0-s\u00a01g\u00a0-t\u00a04\n    for\u00a0n\u00a0in\u00a0$hosts\u00a0$servers\u00a0;\u00a0do\u00a0\\\n    \u00a0\u00a0\u00a0ssh\u00a0$n\u00a0'sync;\u00a0echo\u00a01\u00a0&gt;\u00a0/proc/sys/vm/drop_caches'\u00a0;\u00a0done\n    $IOZ\u00a0-i\u00a02\u00a0-s\u00a01g\u00a0-t\u00a04\n</code></pre> <p>If you use client with buffered I/O (the default), drop cache on the client machines first, then the server machines also as shown above.</p>"},{"location":"Administrator-Guide/Performance-Testing/#parallel-libgfapi","title":"parallel-libgfapi","text":"<p>This test exercises Gluster performance using the libgfapi API, bypassing FUSE - no mountpoints are used. Available here.</p> <p>To use it, you edit the script parameters in parallel_gfapi_test.sh script - all of them are above the comment \"NO EDITABLE PARAMETERS BELOW THIS LINE\". These include such things as the Gluster volume name, a host serving that volume, number of files, etc. You then make sure that the gfapi_perf_test executable is distributed to the client machines at the specified directory, and then run the script. The script starts all libgfapi workload generator processes in parallel in such a way that they all start the test at the same time. It waits until they all complete, and then it collects and aggregates the results for you.</p> <p>Note that libgfapi processes consume one socket per brick, so in Gluster volumes with high brick counts, there can be constraints on the number of libgfapi processes that can run concurrently. Specifically, each host can only support up to about 30000 concurrent TCP ports. You may need to adjust \"ulimit -n\" parameter (see /etc/security/limits.conf \"nofile\" parameter for persistent tuning).</p>"},{"location":"Administrator-Guide/Performance-Testing/#object-store-tools","title":"Object Store tools","text":"<p>COSBench was developed by Intel employees and is very useful for both Swift and S3 workload generation.</p> <p>ssbench is part of OpenStack Swift toolset and is command-line tool with a workload definition file format.</p>"},{"location":"Administrator-Guide/Performance-Testing/#workload","title":"Workload","text":"<p>An application can be as simple as writing some files, or it can be as complex as running a cloud on top of Gluster. But all applications have performance requirements, whether the users are aware of them or not, and if these requirements aren't met, the system as a whole is not functional from the user's perspective. The activities that the application spends most of its time doing with Gluster are called the \"workload\" below. For the Gluster filesystem, the \"workload\" consists of the filesystem requests being delivered to Gluster by the application. There are two ways to look at workload:</p> <ul> <li>top-down - what is the application trying to get the filesystem to   do?</li> <li>bottom-up - what requests is the application actually generating to   the filesystem?</li> </ul>"},{"location":"Administrator-Guide/Performance-Testing/#data-vs-metadata","title":"data vs metadata","text":"<p>In this page we frequently refer to \"large-file\" or \"small-file\" workloads. But what do we mean by the terms \"large-file\" or \"small-file\"? \"large-file\" is a deliberately vague but descriptive term that refers to workloads where most of the application time is spent reading/writing the file. This is in contrast to a \"small-file\" workload, where most of the application's time is spent opening/closing the file or accessing metadata about the file. Metadata means \"data about data\", so it is information that describes the state of the file, rather than the contents of the file. For example, a filename is a type of metadata, as are directories and extended attributes.</p>"},{"location":"Administrator-Guide/Performance-Testing/#top-down-workload-analysis","title":"Top-down workload analysis","text":"<p>Often this is what users will be able to help you with -- for example, a workload might consist of ingesting a billion .mp3 files. Typical questions that need to be answered (approximately) are:</p> <ul> <li>what is file size distribution? Averages are often not enough - file   size distributions can be bi-modal (i.e. consist mostly of the very   large and very small file sizes). TBS: provide pointers to scripts   that can collect this.</li> <li>what fraction of file accesses are reads vs writes?</li> <li>how cache-friendly is the workload? Do the same files get read   repeatedly by different Gluster clients, or by different   processes/threads on these clients?</li> <li>for large-file workloads, what fraction of accesses are   sequential/random? Sequential file access means that the application   thread reads/writes the file from start to finish in byte offset   order, and random file access is the exact opposite -- the thread   may read/write from any offset at any time. Virtual machine disk   images are typically accessed randomly, since the VM's filesystem is   embedded in a Gluster file.</li> </ul> <p>Why do these questions matter? For example, if you have a large-file sequential read workload, network configuration + Gluster and Linux readahead is important. If you have a small-file workload, storage configuration is important, and so on. You will not know what tuning is appropriate for Gluster unless you have a basic understanding the workload.</p>"},{"location":"Administrator-Guide/Performance-Testing/#bottom-up-analysis","title":"Bottom-up analysis","text":"<p>Even a complex application may have a very simple workload from the point of view of the filesystem servicing its requests. If you don't know what your application spends its time doing, you can start by running the \"gluster volume profile\" and \"gluster volume top\" commands. These extremely useful tools will help you understand both the workload and the bottlenecks which are limiting performance of that workload.</p> <p>TBS: links to documentation for these tools and scripts that reduce the data to usable form.</p>"},{"location":"Administrator-Guide/Performance-Testing/#configuration","title":"Configuration","text":"<p>There are 4 basic hardware dimensions to a Gluster server, listed here in order of importance:</p> <ul> <li>network - possibly the most important hardware component of a   Gluster site</li> <li>access protocol - what kind of client is used to get to the     files/objects?</li> <li>storage - this is absolutely critical to get right up front</li> <li>cpu - on client, look for hot threads (see below)</li> <li>memory - can impact performance of read-intensive, cacheable   workloads</li> </ul>"},{"location":"Administrator-Guide/Performance-Testing/#network-testing","title":"network testing","text":"<p>Network configuration has a huge impact on performance of distributed storage, but is often not given the attention it deserves during the planning and installation phases of the cluster lifecycle. Fortunately, network configuration can be enhanced significantly, often without additional hardware.</p> <p>To measure network performance, consider use of a netperf-based script.</p> <p>The purpose of these two tools is to characterize the capacity of your entire network infrastructure to support the desired level of traffic induced by distributed storage, using multiple network connections in parallel. The latter script is probably the most realistic network workload for distributed storage.</p> <p>The two most common hardware problems impacting distributed storage are, not surprisingly, disk drive failures and network failures. Some of these failures do not cause hard errors, but instead cause performance degradation. For example, with a bonded network interface containing two physical network interfaces, if one of the physical interfaces fails (either port on NIC/switch, or cable), then the bonded interface will stay up, but will have less performance (how much less depends on the bonding mode). Another error would be failure of an 10-GbE Ethernet interface to autonegotiate speed to 10-Gbps -- sometimes network interfaces auto-negotiate to 1-Gbps instead. If the TCP connection is experiencing a high rate of packet loss or is not tuned correctly, it may not reach the full network speed supported by the hardware.</p> <p>So why run parallel netperf sessions instead of just one? There are a variety of network performance problems relating to network topology (the way in which hosts are interconnected), particularly network switch and router topology, that only manifest when several pairs of hosts are attempting to transmit traffic across the same shared resource, which could be a trunk connecting top-of-rack switches or a blade-based switch with insufficient bandwidth to switch backplane, for example. Individual netperf/iperf sessions will not find these problems, but this script will.</p> <p>This test can be used to simulate flow of data through a distributed filesystem, for example. If you want to simulate 4 Gluster clients, call them c1 through c4, writing large files to a set of 2 servers, call them s1 and s2, you can specify these (sender, receiver) pairs:</p> <pre><code>    (c1,s1),\u00a0(c2,\u00a0s2),\u00a0(c3,\u00a0s1),\u00a0(c4,\u00a0s2)\n</code></pre> <p>If on the other hand you want to simulate reads, you can use these (sender, receiver) pairs:</p> <pre><code>    (s1,\u00a0c1),\u00a0(s2,\u00a0c2),\u00a0(s1,\u00a0c3),\u00a0(s2,\u00a0c4)\n</code></pre> <p>To simulate a mixed read-write workload, use both sets of pairs:</p> <pre><code>    (c1,s1),\u00a0(c2,\u00a0s2),\u00a0(c3,\u00a0s1),\u00a0(c4,\u00a0s2),\u00a0(s1,\u00a0c1),\u00a0(s2,\u00a0c2),\u00a0(s1,\u00a0c3),\u00a0(s2,\u00a0c4)\n</code></pre> <p>More complicated flows can model behavior of non-native protocols, where a cluster node acts as a proxy server- it is a server (for non-native protocol) and a client (for native protocol). For example, such protocols often induce full-duplex traffic which can stress the network differently than unidirectional in/out traffic. For example, try adding this set of flows to preceding flow:</p> <pre><code>    (s1, s2),.(s2, s3),.(s3, s4),.(s4, s1)\n</code></pre> <p>The comments at the top of the script describe the input syntax, but here are some suggestions on how to best utilize it. You typically run this script from a head node or test driver that has password-less ssh access to the set of machines being tested. The hosts running the test do not need ssh access to each other -- they only have to allow password-less ssh access from the head node. The script does not rely on root privileges, so you can run it from a non-root account. Just create a public key on the head node in the right account (usually in \\$HOME/.ssh/id_rsa.pub ) and then append this public key to \\$HOME/.ssh/authorized_keys on each host participating in the test.</p> <p>We input senders and receivers using separate text files, 1 host per line. For pair (sender[j], receiver[j]), you get sender[j] from line j in the sender file, and receiver[j] from line j in the receiver file. You have to use the IP address/name that corresponds to the interface you want to test, and you have to be able to ssh to each host from the head node using this interface.</p>"},{"location":"Administrator-Guide/Performance-Testing/#results","title":"Results","text":"<p>There are 3 basic forms of performance results, not in order of importance:</p> <ul> <li>throughput -- how much work is done in a unit of time? Best metrics   typically are workload-dependent:</li> <li>for large-file random: IOPS</li> <li>for large-file sequential: MB/s</li> <li>for small-file: files/sec</li> <li>response time -- IMPORTANT, how long does it take for filesystem   request to complete?</li> <li>utilization -- how busy is the hardware while the workload is   running?</li> <li>scalability -- can we linearly scale throughput without sacrificing   response time as we add servers to a Gluster volume?</li> </ul> <p>Typically throughput results get the most attention, but in a distributed-storage environment, the hardest goal to achieve may well be CONSISTENTLY LOW RESPONSE TIME, not throughput.</p> <p>While there are non-interactive workloads where response time does not matter as much, you should pay attention to response time in any situation where a user has to directly interact with the filesystem. Tuning the filesystem to achieve the absolute highest throughput can result in a filesystem that is unusable because of high response time. Unless you are in a benchmarking situation, you want to achieve a balance of good throughput and response time. Typically an interactive user wants to see a response time under 5 seconds always, with most response times much lower than this. To keep response times under control (including system management!), you do not want any hardware component to run at maximum utilization, typically 60-80% utilization is a good peak utilization target. On the other hand, to avoid wasting hardware, you want all of the hardware to be utilized to some extent.</p>"},{"location":"Administrator-Guide/Performance-Tuning/","title":"Performance tuning","text":""},{"location":"Administrator-Guide/Performance-Tuning/#enable-metadata-cache","title":"Enable Metadata cache","text":"<p>Metadata caching improves performance in almost all the workloads, except for use cases with most of the workload accessing a file sumultaneously from multiple clients.</p> <ol> <li> <p>Execute the following command to enable metadata caching and cache invalidation:</p> <p><code>console gluster volume set &lt;volname&gt; group metadata-cache</code></p> <p>This group command enables caching of stat and xattr information of a file or directory. The caching is refreshed every 10 min, and cache-invalidation is enabled to ensure cache consistency.</p> </li> <li> <p>To increase the number of files that can be cached, execute the following command:</p> <p><code>console gluster volume set &lt;volname&gt; network.inode-lru-limit &lt;n&gt;</code></p> <p>n, is set to 50000. It can be increased if the number of active files in the volume is very high. Increasing this number increases the memory footprint of the brick processes.</p> </li> <li> <p>Execute the following command to enable samba specific metadata caching:</p> <p><code>console gluster volume set &lt;volname&gt; cache-samba-metadata on</code></p> </li> <li> <p>By default, some xattrs are cached by gluster like: capability xattrs, ima xattrs     ACLs, etc. If there are any other xattrs that are used by the application using     the Gluster storage, execute the following command to add these xattrs to the metadata     cache list:     <code>console     gluster volume set &lt;volname&gt; xattr-cache-list \"comma separated xattr list\"</code>     Eg:     <code>console     gluster volume set &lt;volname&gt; xattr-cache-list \"user.org.netatalk.*,user.swift.metadata\"</code></p> </li> </ol>"},{"location":"Administrator-Guide/Performance-Tuning/#directory-operations","title":"Directory operations","text":"<p>Along with enabling the metadata caching, the following options can be set to increase performance of directory operations:</p>"},{"location":"Administrator-Guide/Performance-Tuning/#directory-listing-performance","title":"Directory listing Performance:","text":"<ul> <li>Enable <code>parallel-readdir</code></li> </ul> <p><code>console   gluster volume set &lt;VOLNAME&gt; performance.readdir-ahead on   gluster volume set &lt;VOLNAME&gt; performance.parallel-readdir on</code></p>"},{"location":"Administrator-Guide/Performance-Tuning/#filedirectory-create-performance","title":"File/Directory Create Performance","text":"<ul> <li>Enable <code>nl-cache</code></li> </ul> <p><code>console   gluster volume set &lt;volname&gt; group nl-cache   gluster volume set &lt;volname&gt; nl-cache-positive-entry on</code></p> <p>The above command also enables cache invalidation and increases the timeout to 10 minutes</p>"},{"location":"Administrator-Guide/Performance-Tuning/#small-file-read-operations","title":"Small file Read operations","text":"<p>For use cases with dominant small file reads, enable the following options</p> <pre><code>gluster volume set &lt;volname&gt; performance.cache-invalidation on\ngluster volume set &lt;volname&gt; features.cache-invalidation on\ngluster volume set &lt;volname&gt; performance.qr-cache-timeout 600 # 10 min recommended setting\ngluster volume set &lt;volname&gt; cache-invalidation-timeout 600 # 10 min recommended setting\n</code></pre> <p>This command enables caching of the content of small file, in the client cache. Enabling cache invalidation ensures cache consistency.</p> <p>The total cache size can be set using</p> <pre><code>gluster volume set &lt;volname&gt; cache-size &lt;size&gt;\n</code></pre> <p>By default, the files with size <code>&lt;=64KB</code> are cached. To change this value:</p> <pre><code>gluster volume set &lt;volname&gt; performance.cache-max-file-size &lt;size&gt;\n</code></pre> <p>Note that the <code>size</code> arguments use SI unit suffixes, e.g. <code>64KB</code> or <code>2MB</code>.</p>"},{"location":"Administrator-Guide/Puppet/","title":"Puppet-Gluster","text":""},{"location":"Administrator-Guide/Puppet/#a-glusterfs-puppet-module-by-james","title":"A GlusterFS Puppet module by James","text":""},{"location":"Administrator-Guide/Puppet/#available-from","title":"Available from:","text":""},{"location":"Administrator-Guide/Puppet/#httpsgithubcompurpleideapuppet-gluster","title":"https://github.com/purpleidea/puppet-gluster/","text":""},{"location":"Administrator-Guide/Puppet/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Module description - What the module does</li> <li>Setup - Getting started with Puppet-Gluster<ul> <li>What can Puppet-Gluster manage?</li> <li>Simple setup</li> <li>Elastic setup</li> <li>Advanced setup</li> </ul> </li> <li>Usage/FAQ - Notes on management and frequently asked questions</li> <li>Reference - Class and type reference<ul> <li>gluster::simple</li> <li>gluster::elastic</li> <li>gluster::server</li> <li>gluster::host</li> <li>gluster::brick</li> <li>gluster::volume</li> <li>gluster::volume::property</li> </ul> </li> <li>Examples - Example configurations</li> <li>Limitations - Puppet versions, OS compatibility, etc...</li> <li>Development - Background on module development</li> <li>Author - Author and contact information</li> </ol>"},{"location":"Administrator-Guide/Puppet/#overview","title":"Overview","text":"<p>The Puppet-Gluster module installs, configures, and manages a GlusterFS cluster.</p>"},{"location":"Administrator-Guide/Puppet/#module-description","title":"Module Description","text":"<p>This Puppet-Gluster module handles installation, configuration, and management of GlusterFS across all of the hosts in the cluster.</p>"},{"location":"Administrator-Guide/Puppet/#setup","title":"Setup","text":""},{"location":"Administrator-Guide/Puppet/#what-can-puppet-gluster-manage","title":"What can Puppet-Gluster manage?","text":"<p>Puppet-Gluster is designed to be able to manage as much or as little of your GlusterFS cluster as you wish. All features are optional. If there is a feature that doesn't appear to be optional, and you believe it should be, please let me know. Having said that, it makes good sense to me to have Puppet-Gluster manage as much of your GlusterFS infrastructure as it can. At the moment, it cannot rack new servers, but I am accepting funding to explore this feature ;) At the moment it can manage:</p> <ul> <li>GlusterFS packages (rpm)</li> <li>GlusterFS configuration files (/var/lib/glusterd/)</li> <li>GlusterFS host peering (gluster peer probe)</li> <li>GlusterFS storage partitioning (fdisk)</li> <li>GlusterFS storage formatting (mkfs)</li> <li>GlusterFS brick creation (mkdir)</li> <li>GlusterFS services (glusterd)</li> <li>GlusterFS firewalling (whitelisting)</li> <li>GlusterFS volume creation (gluster volume create)</li> <li>GlusterFS volume state (started/stopped)</li> <li>GlusterFS volume properties (gluster volume set)</li> <li>And much more...</li> </ul>"},{"location":"Administrator-Guide/Puppet/#simple-setup","title":"Simple setup","text":"<p>include '::gluster::simple' is enough to get you up and running. When using the gluster::simple class, or with any other Puppet-Gluster configuration, identical definitions must be used on all hosts in the cluster. The simplest way to accomplish this is with a single shared puppet host definition like:</p> <pre><code>node /^annex\\d+$/ {        # annex{1,2,..N}\n        class { '::gluster::simple':\n        }\n}\n</code></pre> <p>If you wish to pass in different parameters, you can specify them in the class before you provision your hosts:</p> <pre><code>class { '::gluster::simple':\n    replica =&gt; 2,\n    volume =&gt; ['volume1', 'volume2', 'volumeN'],\n}\n</code></pre>"},{"location":"Administrator-Guide/Puppet/#elastic-setup","title":"Elastic setup","text":"<p>The gluster::elastic class is not yet available. Stay tuned!</p>"},{"location":"Administrator-Guide/Puppet/#advanced-setup","title":"Advanced setup","text":"<p>Some system administrators may wish to manually itemize each of the required components for the Puppet-Gluster deployment. This happens automatically with the higher level modules, but may still be a desirable feature, particularly for non-elastic storage pools where the configuration isn't expected to change very often (if ever).</p> <p>To put together your cluster piece by piece, you must manually include and define each class and type that you wish to use. If there are certain aspects that you wish to manage yourself, you can omit them from your configuration. See the reference section below for the specifics. Here is one possible example:</p> <pre><code>class { '::gluster::server':\n    shorewall =&gt; true,\n}\n\ngluster::host { 'annex1.example.com':\n    # use uuidgen to make these\n    uuid =&gt; '1f660ca2-2c78-4aa0-8f4d-21608218c69c',\n}\n\n# note that this is using a folder on your existing file system...\n# this can be useful for prototyping gluster using virtual machines\n# if this isn't a separate partition, remember that your root fs will\n# run out of space when your gluster volume does!\ngluster::brick { 'annex1.example.com:/data/gluster-storage1':\n    areyousure =&gt; true,\n}\n\ngluster::host { 'annex2.example.com':\n    # NOTE: specifying a host uuid is now optional!\n    # if you don't choose one, one will be assigned\n    #uuid =&gt; '2fbe6e2f-f6bc-4c2d-a301-62fa90c459f8',\n}\n\ngluster::brick { 'annex2.example.com:/data/gluster-storage2':\n    areyousure =&gt; true,\n}\n\n$brick_list = [\n    'annex1.example.com:/data/gluster-storage1',\n    'annex2.example.com:/data/gluster-storage2',\n]\n\ngluster::volume { 'examplevol':\n    replica =&gt; 2,\n    bricks =&gt; $brick_list,\n    start =&gt; undef, # i'll start this myself\n}\n\n# namevar must be: &lt;VOLNAME&gt;#&lt;KEY&gt;\ngluster::volume::property { 'examplevol#auth.reject':\n    value =&gt; ['192.0.2.13', '198.51.100.42', '203.0.113.69'],\n}\n</code></pre>"},{"location":"Administrator-Guide/Puppet/#usage-and-frequently-asked-questions","title":"Usage and frequently asked questions","text":"<p>All management should be done by manipulating the arguments on the appropriate Puppet-Gluster classes and types. Since certain manipulations are either not yet possible with Puppet-Gluster, or are not supported by GlusterFS, attempting to manipulate the Puppet configuration in an unsupported way will result in undefined behaviour, and possible even data loss, however this is unlikely.</p>"},{"location":"Administrator-Guide/Puppet/#how-do-i-change-the-replica-count","title":"How do I change the replica count?","text":"<p>You must set this before volume creation. This is a limitation of GlusterFS. There are certain situations where you can change the replica count by adding a multiple of the existing brick count to get this desired effect. These cases are not yet supported by Puppet-Gluster. If you want to use Puppet-Gluster before and / or after this transition, you can do so, but you'll have to do the changes manually.</p>"},{"location":"Administrator-Guide/Puppet/#do-i-need-to-use-a-virtual-ip","title":"Do I need to use a virtual IP?","text":"<p>Using a virtual IP (VIP) is strongly recommended as a distributed lock manager (DLM) and also to provide a highly-available (HA) IP address for your clients to connect to. For a more detailed explanation of the reasoning please see:</p> <p>https://ttboj.wordpress.com/2012/08/23/how-to-avoid-cluster-race-conditions-or-how-to-implement-a-distributed-lock-manager-in-puppet/</p> <p>Remember that even if you're using a hosted solution (such as AWS) that doesn't provide an additional IP address, or you want to avoid using an additional IP, and you're okay not having full HA client mounting, you can use an unused private RFC1918 IP address as the DLM VIP. Remember that a layer 3 IP can co-exist on the same layer 2 network with the layer 3 network that is used by your cluster.</p>"},{"location":"Administrator-Guide/Puppet/#is-it-possible-to-have-puppet-gluster-complete-in-a-single-run","title":"Is it possible to have Puppet-Gluster complete in a single run?","text":"<p>No. This is a limitation of Puppet, and is related to how GlusterFS operates. For example, it is not reliably possible to predict which ports a particular GlusterFS volume will run on until after the volume is started. As a result, this module will initially whitelist connections from GlusterFS host IP addresses, and then further restrict this to only allow individual ports once this information is known. This is possible in conjunction with the puppet-shorewall module. You should notice that each run should complete without error. If you do see an error, it means that either something is wrong with your system and / or configuration, or because there is a bug in Puppet-Gluster.</p>"},{"location":"Administrator-Guide/Puppet/#can-you-integrate-this-with-vagrant","title":"Can you integrate this with vagrant?","text":"<p>Not until vagrant properly supports libvirt/KVM. I have no desire to use VirtualBox for fun.</p>"},{"location":"Administrator-Guide/Puppet/#awesome-work-but-its-missing-support-for-a-feature-andor-platform","title":"Awesome work, but it's missing support for a feature and/or platform!","text":"<p>Since this is an Open Source / Free Software project that I also give away for free (as in beer, free as in gratis, free as in libre), I'm unable to provide unlimited support. Please consider donating funds, hardware, virtual machines, and other resources. For specific needs, you could perhaps sponsor a feature!</p>"},{"location":"Administrator-Guide/Puppet/#you-didnt-answer-my-question-or-i-have-a-question","title":"You didn't answer my question, or I have a question!","text":"<p>Contact me through my technical blog and I'll do my best to help. If you have a good question, please remind me to add my answer to this documentation!</p>"},{"location":"Administrator-Guide/Puppet/#reference","title":"Reference","text":"<p>Please note that there are a number of undocumented options. For more information on these options, please view the source at: https://github.com/purpleidea/puppet-gluster/. If you feel that a well used option needs documenting here, please contact me.</p>"},{"location":"Administrator-Guide/Puppet/#overview-of-classes-and-types","title":"Overview of classes and types","text":"<ul> <li>gluster::simple: Simple Puppet-Gluster deployment.</li> <li>gluster::elastic: Under construction.</li> <li>gluster::server: Base class for server hosts.</li> <li>gluster::host: Host type for each participating host.</li> <li>gluster::brick: Brick type for each defined brick, per host.</li> <li>gluster::volume: Volume type for each defined volume.</li> <li>gluster::volume::property: Manages properties for each volume.</li> </ul>"},{"location":"Administrator-Guide/Puppet/#glustersimple","title":"gluster::simple","text":"<p>This is gluster::simple. It should probably take care of 80% of all use cases. It is particularly useful for deploying quick test clusters. It uses a finite-state machine (FSM) to decide when the cluster has settled and volume creation can begin. For more information on the FSM in Puppet-Gluster see: https://ttboj.wordpress.com/2013/09/28/finite-state-machines-in-puppet/</p>"},{"location":"Administrator-Guide/Puppet/#replica","title":"replica","text":"<p>The replica count. Can't be changed automatically after initial deployment.</p>"},{"location":"Administrator-Guide/Puppet/#volume","title":"volume","text":"<p>The volume name or list of volume names to create.</p>"},{"location":"Administrator-Guide/Puppet/#path","title":"path","text":"<p>The valid brick path for each host. Defaults to local file system. If you need a different path per host, then Gluster::Simple will not meet your needs.</p>"},{"location":"Administrator-Guide/Puppet/#vip","title":"vip","text":"<p>The virtual IP address to be used for the cluster distributed lock manager.</p>"},{"location":"Administrator-Guide/Puppet/#shorewall","title":"shorewall","text":"<p>Boolean to specify whether puppet-shorewall integration should be used or not.</p>"},{"location":"Administrator-Guide/Puppet/#glusterelastic","title":"gluster::elastic","text":"<p>Under construction.</p>"},{"location":"Administrator-Guide/Puppet/#glusterserver","title":"gluster::server","text":"<p>Main server class for the cluster. Must be included when building the GlusterFS cluster manually. Wrapper classes such as gluster::simple include this automatically.</p>"},{"location":"Administrator-Guide/Puppet/#vip_1","title":"vip","text":"<p>The virtual IP address to be used for the cluster distributed lock manager.</p>"},{"location":"Administrator-Guide/Puppet/#shorewall_1","title":"shorewall","text":"<p>Boolean to specify whether puppet-shorewall integration should be used or not.</p>"},{"location":"Administrator-Guide/Puppet/#glusterhost","title":"gluster::host","text":"<p>Main host type for the cluster. Each host participating in the GlusterFS cluster must define this type on itself, and on every other host. As a result, this is not a singleton like the gluster::server class.</p>"},{"location":"Administrator-Guide/Puppet/#ip","title":"ip","text":"<p>Specify which IP address this host is using. This defaults to the $::ipaddress variable. Be sure to set this manually if you're declaring this yourself on each host without using exported resources. If each host thinks the other hosts should have the same IP address as itself, then Puppet-Gluster and GlusterFS won't work correctly.</p>"},{"location":"Administrator-Guide/Puppet/#uuid","title":"uuid","text":"<p>Universally unique identifier (UUID) for the host. If empty, Puppet-Gluster will generate this automatically for the host. You can generate your own manually with uuidgen, and set them yourself. I found this particularly useful for testing, because I would pick easy to recognize UUID's like: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa, bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb, and so on. If you set a UUID manually, and Puppet-Gluster has a chance to run, then it will remember your choice, and store it locally to be used again if you no longer specify the UUID. This is particularly useful for upgrading an existing un-managed GlusterFS installation to a Puppet-Gluster managed one, without changing any UUID's.</p>"},{"location":"Administrator-Guide/Puppet/#glusterbrick","title":"gluster::brick","text":"<p>Main brick type for the cluster. Each brick is an individual storage segment to be used on a host. Each host must have at least one brick to participate in the cluster, but usually a host will have multiple bricks. A brick can be as simple as a file system folder, or it can be a separate file system. Please read the official GlusterFS documentation, if you aren't entirely comfortable with the concept of a brick.</p> <p>For most test clusters, and for experimentation, it is easiest to use a directory on the root file system. You can even use a /tmp sub folder if you don't care about the persistence of your data. For more serious clusters, you might want to create separate file systems for your data. On self-hosted iron, it is not uncommon to create multiple RAID-6 drive pools, and to then create a separate file system per virtual drive. Each file system can then be used as a single brick.</p> <p>So that each volume in GlusterFS has the maximum ability to grow, without having to partition storage separately, the bricks in Puppet-Gluster are actually folders (on whatever backing store you wish) which then contain sub folders-- one for each volume. As a result, all the volumes on a given GlusterFS cluster can share the total available storage space. If you wish to limit the storage used by each volume, you can setup quotas. Alternatively, you can buy more hardware, and elastically grow your GlusterFS volumes, since the price per GB will be significantly less than any proprietary storage system. The one downside to this brick sharing, is that if you have chosen the brick per host count specifically to match your performance requirements, and each GlusterFS volume on the same cluster has drastically different brick per host performance requirements, then this won't suit your needs. I doubt that anyone actually has such requirements, but if you do insist on needing this compartmentalization, then you can probably use the Puppet-Gluster grouping feature to accomplish this goal. Please let me know about your use-case, and be warned that the grouping feature hasn't been extensively tested.</p> <p>To prove to you that I care about automation, this type offers the ability to automatically partition and format your file systems. This means you can plug in new iron, boot, provision and configure the entire system automatically. Regrettably, I don't have a lot of test hardware to routinely use this feature. If you'd like to donate some, I'd be happy to test this thoroughly. Having said that, I have used this feature, I consider it to be extremely safe, and it has never caused me to lose data. If you're uncertain, feel free to look at the code, or avoid using this feature entirely. If you think there's a way to make it even safer, then feel free to let me know.</p>"},{"location":"Administrator-Guide/Puppet/#dev","title":"dev","text":"<p>Block device, such as /dev/sdc or /dev/disk/by-id/scsi-0123456789abcdef. By default, Puppet-Gluster will assume you're using a folder to store the brick data, if you don't specify this parameter.</p>"},{"location":"Administrator-Guide/Puppet/#fsuuid","title":"fsuuid","text":"<p>File system UUID. This ensures we can distinctly identify a file system. You can set this to be used with automatic file system creation, or you can specify the file system UUID that you'd like to use.</p>"},{"location":"Administrator-Guide/Puppet/#labeltype","title":"labeltype","text":"<p>Only gpt is supported. Other options include msdos, but this has never been used because of it's size limitations.</p>"},{"location":"Administrator-Guide/Puppet/#fstype","title":"fstype","text":"<p>This should be xfs or ext4. Using xfs is recommended, but ext4 is also quite common. This only affects a file system that is getting created by this module. If you provision a new machine, with a root file system of ext4, and the brick you create is a root file system path, then this option does nothing.</p>"},{"location":"Administrator-Guide/Puppet/#xfs_inode64","title":"xfs_inode64","text":"<p>Set inode64 mount option when using the xfs fstype. Choose true to set.</p>"},{"location":"Administrator-Guide/Puppet/#xfs_nobarrier","title":"xfs_nobarrier","text":"<p>Set nobarrier mount option when using the xfs fstype. Choose true to set.</p>"},{"location":"Administrator-Guide/Puppet/#ro","title":"ro","text":"<p>Whether the file system should be mounted read only. For emergencies only.</p>"},{"location":"Administrator-Guide/Puppet/#force","title":"force","text":"<p>If true, this will overwrite any xfs file system it sees. This is useful for rebuilding GlusterFS repeatedly and wiping data. There are other safeties in place to stop this. In general, you probably don't ever want to touch this.</p>"},{"location":"Administrator-Guide/Puppet/#areyousure","title":"areyousure","text":"<p>Do you want to allow Puppet-Gluster to do dangerous things? You have to set this to true to allow Puppet-Gluster to fdisk and mkfs your file system.</p>"},{"location":"Administrator-Guide/Puppet/#glustervolume","title":"gluster::volume","text":"<p>Main volume type for the cluster. This is where a lot of the magic happens. Remember that changing some of these parameters after the volume has been created won't work, and you'll experience undefined behaviour. There could be FSM based error checking to verify that no changes occur, but it has been left out so that this code base can eventually support such changes, and so that the user can manually change a parameter if they know that it is safe to do so.</p>"},{"location":"Administrator-Guide/Puppet/#bricks","title":"bricks","text":"<p>List of bricks to use for this volume. If this is left at the default value of true, then this list is built automatically. The algorithm that determines this order does not support all possible situations, and most likely can't handle certain corner cases. It is possible to examine the FSM to view the selected brick order before it has a chance to create the volume. The volume creation script won't run until there is a stable brick list as seen by the FSM running on the host that has the DLM. If you specify this list of bricks manually, you must choose the order to match your desired volume layout. If you aren't sure about how to order the bricks, you should review the GlusterFS documentation first.</p>"},{"location":"Administrator-Guide/Puppet/#transport","title":"transport","text":"<p>Only tcp is supported. Possible values can include rdma, but this won't get any testing if I don't have access to infiniband hardware. Donations welcome.</p>"},{"location":"Administrator-Guide/Puppet/#replica_1","title":"replica","text":"<p>Replica count. Usually you'll want to set this to 2. Some users choose 3. Other values are seldom seen. A value of 1 can be used for simply testing a distributed setup, when you don't care about your data or high availability. A value greater than 4 is probably wasteful and unnecessary. It might even cause performance issues if a synchronous write is waiting on a slow fourth server.</p>"},{"location":"Administrator-Guide/Puppet/#stripe","title":"stripe","text":"<p>Stripe count. Thoroughly unsupported and untested option. Not recommended for use by GlusterFS.</p>"},{"location":"Administrator-Guide/Puppet/#ping","title":"ping","text":"<p>Do we want to include ping checks with fping?</p>"},{"location":"Administrator-Guide/Puppet/#settle","title":"settle","text":"<p>Do we want to run settle checks?</p>"},{"location":"Administrator-Guide/Puppet/#start","title":"start","text":"<p>Requested state for the volume. Valid values include: true (start), false (stop), or undef (un-managed start/stop state).</p>"},{"location":"Administrator-Guide/Puppet/#glustervolumeproperty","title":"gluster::volume::property","text":"<p>Main volume property type for the cluster. This allows you to manage GlusterFS volume specific properties. There are a wide range of properties that volumes support. For the full list of properties, you should consult the GlusterFS documentation, or run the gluster volume set help command. To set a property you must use the special name pattern of: volume#key. The value argument is used to set the associated value. It is smart enough to accept values in the most logical format for that specific property. Some properties aren't yet supported, so please report any problems you have with this functionality. Because this feature is an awesome way to document as code the volume specific optimizations that you've made, make sure you use this feature even if you don't use all the others.</p>"},{"location":"Administrator-Guide/Puppet/#value","title":"value","text":"<p>The value to be used for this volume property.</p>"},{"location":"Administrator-Guide/Puppet/#examples","title":"Examples","text":"<p>For example configurations, please consult the examples/ directory in the git source repository. It is available from:</p> <p>https://github.com/purpleidea/puppet-gluster/tree/master/examples</p>"},{"location":"Administrator-Guide/Puppet/#limitations","title":"Limitations","text":"<p>This module has been tested against open source Puppet 3.2.4 and higher.</p> <p>The module has been tested on:</p> <ul> <li>CentOS 6.4</li> </ul> <p>It will probably work without incident or without major modification on:</p> <ul> <li>CentOS 5.x/6.x</li> <li>RHEL 5.x/6.x</li> </ul> <p>It will most likely work with other Puppet versions and on other platforms, but testing under other conditions has been light due to lack of resources. It will most likely not work on Debian/Ubuntu systems without modification. I would really love to add support for these operating systems, but I do not have any test resources to do so. Please sponsor this if you'd like to see it happen.</p>"},{"location":"Administrator-Guide/Puppet/#development","title":"Development","text":"<p>This is my personal project that I work on in my free time. Donations of funding, hardware, virtual machines, and other resources are appreciated. Please contact me if you'd like to sponsor a feature, invite me to talk/teach or for consulting.</p> <p>You can follow along on my technical blog.</p>"},{"location":"Administrator-Guide/Puppet/#author","title":"Author","text":"<p>Copyright (C) 2010-2013+ James Shubin</p> <ul> <li>github</li> <li>@purpleidea</li> <li>https://ttboj.wordpress.com/</li> </ul>"},{"location":"Administrator-Guide/RDMA-Transport/","title":"NOTE: FEATURE DEPRECATED","text":"<p>THE RDMA is no longer supported in Gluster builds. This has been removed from release 8 onwards.</p> <p>Currently we dont have</p> <ol> <li>The expertise to support RDMA</li> <li>Infrastructure to test/verify the performances each release    The options are getting discussed here - https://github.com/gluster/glusterfs/issues/2000</li> </ol> <p>Ready to enable as a compile time option, if there is proper support and testing infrastructure.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#introduction","title":"Introduction","text":"<p>GlusterFS supports using RDMA protocol for communication between glusterfs clients and glusterfs bricks. GlusterFS clients include FUSE client, libgfapi clients(Samba and NFS-Ganesha included), gNFS server and other glusterfs processes that communicate with bricks like self-heal daemon, quotad, rebalance process etc.</p> <p>NOTE: As of now only FUSE client and gNFS server would support RDMA transport.</p> <p>NOTE: NFS client to gNFS Server/NFS Ganesha Server communication would still happen over tcp. CIFS Clients/Windows Clients to Samba Server communication would still happen over tcp.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#setup","title":"Setup","text":"<p>Please refer to these external documentation to setup RDMA on your machines http://people.redhat.com/dledford/infiniband_get_started.html</p>"},{"location":"Administrator-Guide/RDMA-Transport/#creating-trusted-storage-pool","title":"Creating Trusted Storage Pool","text":"<p>All the servers in the Trusted Storage Pool must have RDMA devices if either RDMA or TCP,RDMA volumes are created in the storage pool. The peer probe must be performed using IP/hostname assigned to the RDMA device.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#ports-and-firewall","title":"Ports and Firewall","text":"<p>Process glusterd will listen on both tcp and rdma if rdma device is found. Port used for rdma is 24008. Similarly, brick processes will also listen on two ports for a volume created with transport \"tcp,rdma\".</p> <p>Make sure you update the firewall to accept packets on these ports.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#gluster-volume-create","title":"Gluster Volume Create","text":"<p>A volume can support one or more transport types for communication between clients and brick processes. There are three types of supported transport, which are, tcp, rdma, and tcp,rdma.</p> <p>Example: To create a distributed volume with four storage servers over InfiniBand:</p> <p><code># gluster volume create test-volume transport rdma server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</code> Creation of test-volume has been successful Please start the volume to access data.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#changing-transport-of-volume","title":"Changing Transport of Volume","text":"<p>To change the supported transport types of a existing volume, follow the procedure: NOTE: This is possible only if the volume was created with IP/hostname assigned to RDMA device.</p> <ol> <li> <p>Unmount the volume on all the clients using the following command:</p> <pre><code>umount mount-point\n</code></pre> </li> <li> <p>Stop the volumes using the following command:</p> <pre><code>gluster volume stop volname\n</code></pre> </li> <li> <p>Change the transport type.     For example, to enable both tcp and rdma execute the followimg command:</p> <pre><code>gluster volume set volname config.transport tcp,rdma\n</code></pre> </li> <li> <p>Mount the volume on all the clients.     For example, to mount using rdma transport, use the following command:</p> <pre><code>mount -t glusterfs -o transport=rdma server1:/test-volume /mnt/glusterfs`\n</code></pre> </li> </ol> <p>NOTE: config.transport option does not have a entry in help of gluster cli.</p> <pre><code>gluster vol set help | grep config.transport`\n</code></pre> <p>However, the key is a valid one.</p>"},{"location":"Administrator-Guide/RDMA-Transport/#mounting-a-volume-using-rdma","title":"Mounting a Volume using RDMA","text":"<p>You can use the mount option \"transport\" to specify the transport type that FUSE client must use to communicate with bricks. If the volume was created with only one transport type, then that becomes the default when no value is specified. In case of tcp,rdma volume, tcp is the default.</p> <p>For example, to mount using rdma transport, use the following command:</p> <pre><code>mount -t glusterfs -o transport=rdma server1:/test-volume /mnt/glusterfs\n</code></pre>"},{"location":"Administrator-Guide/RDMA-Transport/#transport-used-by-auxillary-processes","title":"Transport used by auxillary processes","text":"<p>All the auxillary processes like self-heal daemon, rebalance process etc use the default transport.In case you have a tcp,rdma volume it will use tcp. In case of rdma volume, rdma will be used. Configuration options to select transport used by these processes when volume is tcp,rdma are not yet available and will be coming in later releases.</p>"},{"location":"Administrator-Guide/SSL/","title":"Setting up GlusterFS with SSL/TLS","text":"<p>GlusterFS allows its communication to be secured using the Transport Layer Security standard (which supersedes Secure Sockets Layer), using the OpenSSL library. Setting this up requires a basic working knowledge of some SSL/TLS concepts, which can only be briefly summarized here.</p> <ul> <li> <p>\"Authentication\" is the process of one entity (e.g. a machine, process, or   person) proving its identity to a second entity.</p> </li> <li> <p>\"Authorization\" is the process of checking whether an entity has permission   to perform an action.</p> </li> <li> <p>TLS provides authentication and encryption. It does not provide   authorization, though GlusterFS can use TLS-authenticated identities to   authorize client connections to bricks/volumes.</p> </li> <li> <p>An entity X which must authenticate to a second entity Y does so by sharing   with Y a certificate, which contains information sufficient to prove X's   identity. X's proof of identity also requires possession of a private key   which matches its certificate, but this key is never seen by Y or anyone   else. Because the certificate is already public, anyone who has the key can   claim that identity.</p> </li> <li> <p>Each certificate contains the identity of its principal (owner) along with   the identity of a certifying authority or CA who can verify the integrity   of the certificate's contents. The principal and CA can be the same (a   \"self-signed certificate\"). If they are different, the CA must sign the   certificate by appending information derived from both the certificate   contents and the CA's own private key.</p> </li> <li> <p>Certificate-signing relationships can extend through multiple levels. For   example, a company X could sign another company Y's certificate, which could   then be used to sign a third certificate Z for a specific user or purpose.   Anyone who trusts X (and is willing to extend that trust through a   certificate depth of two or more) would therefore be able to authenticate   Y and Z as well.</p> </li> <li> <p>Any entity willing to accept other entities' authentication attempts must   have some sort of database seeded with the certificates that already accept.</p> </li> </ul> <p>In GlusterFS's case, a client or server X uses the following files to contain TLS-related information:</p> <ul> <li> <p>/etc/ssl/glusterfs.pem X's own certificate</p> </li> <li> <p>/etc/ssl/glusterfs.key X's private key</p> </li> <li> <p>/etc/ssl/glusterfs.ca concatenation of others' certificates</p> </li> </ul> <p>GlusterFS always performs mutual authentication, though clients do not currently do anything with the authenticated server identity. Thus, if client X wants to communicate with server Y, then X's certificate (or that of a signer) must be in Y's CA file, and vice versa.</p> <p>For all uses of TLS in GlusterFS, if one side of a connection is configured to use TLS then the other side must use it as well. There is no automatic fallback to non-TLS communication, or allowance for concurrent TLS and non-TLS access to the same resource, because either would be insecure. Instead, any such \"mixed mode\" connections will be rejected by the TLS-using side, sacrificing availability to maintain security.</p> <p>NOTEThe TLS certificate verification will fail if the machines' date and time are not in sync with each other. Certificate verification depends on the time of the client as well as the server and if that is not found to be in sync then it is deemed to be an invalid certificate. To get the date and times in sync, tools such as ntpdate can be used.</p>"},{"location":"Administrator-Guide/SSL/#using-certmonger-and-freeipa-to-generate-and-manage-certs","title":"Using Certmonger and FreeIPA to generate and manage certs","text":"<p>Certmonger can be used to generate keys, request certs from a CA and then automatically keep the Gluster certificate and the CA bundle updated as required, simplifying deployment. Either a commercial CA or a local CA can be used. E.g., FreeIPA (with dogtag CA) is an open-source CA with user-friendly tooling.</p> <p>If using FreeIPA, first add the host. This is required for FreeIPA to issue certificates. This can be done via the web UI, or the CLI with:</p> <pre><code>ipa host-add &lt;hostname&gt;\n</code></pre> <p>If the host has been added the following should show the host:</p> <pre><code>ipa host-show &lt;hostname&gt;\n</code></pre> <p>And it should show a kerberos principal for the host in the form of:</p> <pre><code>host/&lt;hostname&gt;\n</code></pre> <p>Now use certmonger on the gluster server or client to generate the key (if required), and submit a CSR to the CA. Certmonger will monitor the request, and create and update the files as required. For FreeIPA we need to specify the Kerberos principal from above to -K. E.g.:</p> <pre><code> getcert request -r  \\\n    -K host/$(hostname)  \\\n    -f /etc/ssl/gluster.pem \\\n    -k /etc/ssl/gluster.key \\\n    -D $(hostname)  \\\n    -F /etc/ssl/gluster.ca\n</code></pre> <p>Certmonger should print out an ID for the request, e.g.:</p> <pre><code>New signing request \"20210801190305\" added.\n</code></pre> <p>You can check the status of the request with this ID:</p> <pre><code>getcert list -i 20210801190147\n</code></pre> <p>If the CA approves the CSR and issues the cert, then the previous command should print a status field with:</p> <pre><code>status: MONITORING\n</code></pre> <p>As this point, the key, the cert and the CA bundle should all be in /etc/ssl ready for Gluster to use. Certmonger will renew the certificates as required for you.</p> <p>You do not need to manually concatenate certs to a trusted cert bundle and distribute them to all servers.</p> <p>You may need to set the certificate depth to allow the CA signed certs to be used, if there are intermediate CAs in the signing path. E.g., on every server and client:</p> <pre><code>echo \"option transport.socket.ssl-cert-depth 3\" &gt;  /var/lib/glusterd/secure-access\n</code></pre> <p>This should not be necessary where a local CA (e.g., FreeIPA) has directly signed the cart.</p>"},{"location":"Administrator-Guide/SSL/#enabling-tls-on-the-io-path","title":"Enabling TLS on the I/O Path","text":"<p>To enable authentication and encryption between clients and brick servers, two options must be set:</p> <pre><code>gluster volume set MYVOLUME client.ssl on\ngluster volume set MYVOLUME server.ssl on\n</code></pre> <p>Note that the above options affect only the GlusterFS native protocol. For foreign protocols such as NFS, SMB, or Swift the encryption will not be affected between:</p> <ol> <li>NFS client and Glusterfs NFS Ganesha Server</li> <li>SMB client and Glusterfs SMB server</li> </ol> <p>While it affects the encryption between the following:</p> <ol> <li>NFS Ganesha server and Glusterfs bricks</li> <li>Glusterfs SMB server and Glusterfs bricks</li> </ol>"},{"location":"Administrator-Guide/SSL/#using-tls-identities-for-authorization","title":"Using TLS Identities for Authorization","text":"<p>Once TLS has been enabled on the I/O path, TLS identities can be used instead of IP addresses or plain usernames to control access to specific volumes. For example:</p> <pre><code>gluster volume set MYVOLUME auth.ssl-allow Zaphod\n</code></pre> <p>Here, we're allowing the TLS-authenticated identity \"Zaphod\" to access MYVOLUME. This is intentionally identical to the existing \"auth.allow\" option, except that the name is taken from a TLS certificate instead of a command-line string. Note that infelicities in the gluster CLI preclude using names that include spaces, which would otherwise be allowed.</p>"},{"location":"Administrator-Guide/SSL/#enabling-tls-on-the-management-path","title":"Enabling TLS on the Management Path","text":"<p>Management-daemon traffic is not controlled by an option. Instead, it is controlled by the presence of a file on each machine:</p> <pre><code>/var/lib/glusterd/secure-access\n</code></pre> <p>Creating this file will cause glusterd connections made from that machine to use TLS. Note that even clients must do this to communicate with a remote glusterd while mounting, but not thereafter.</p>"},{"location":"Administrator-Guide/SSL/#additional-options","title":"Additional Options","text":"<p>The GlusterFS TLS implementation supports two additional options related to TLS internals.</p> <p>The first option allows the user to set the certificate depth, as mentioned above.</p> <pre><code>gluster volume set MYVOLUME ssl.certificate-depth 2\n</code></pre> <p>Here, we're setting our certificate depth to two, as in the introductory example. By default this value is zero, meaning that only certificates which are directly specified in the local CA file will be accepted (i.e. no signed certificates at all).</p> <p>The second option allows the user to specify the set of allowed TLS ciphers.</p> <pre><code>gluster volume set MYVOLUME ssl.cipher-list 'HIGH:!SSLv2'\n</code></pre> <p>Cipher lists are negotiated between the two parties to a TLS connection so that both sides' security needs are satisfied. In this example, we're setting the initial cipher list to HIGH, representing ciphers that the cryptography community still believes to be unbroken. We are also explicitly disallowing ciphers specific to SSL version 2. The default is based on this example but also excludes CBC-based cipher modes to provide extra mitigation against the POODLE attack.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/","title":"Accessing Data - Setting Up GlusterFS Client","text":"<p>You can access gluster volumes in multiple ways. You can use Gluster Native Client method for high concurrency, performance and transparent failover in GNU/Linux clients. You can also use NFS v3 to access gluster volumes. Extensive testing has been done on GNU/Linux clients and NFS implementation in other operating system, such as FreeBSD, and Mac OS X, as well as Windows 7 (Professional and Up) and Windows Server 2003. Other NFS client implementations may work with gluster NFS server.</p> <p>You can use CIFS to access volumes when using Microsoft Windows as well as SAMBA clients. For this access method, Samba packages need to be present on the client side.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#gluster-native-client","title":"Gluster Native Client","text":"<p>The Gluster Native Client is a FUSE-based client running in user space. Gluster Native Client is the recommended method for accessing volumes when high concurrency and high write performance is required.</p> <p>This section introduces the Gluster Native Client and explains how to install the software on client machines. This section also describes how to mount volumes on clients (both manually and automatically) and how to verify that the volume has mounted successfully.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#installing-the-gluster-native-client","title":"Installing the Gluster Native Client","text":"<p>Before you begin installing the Gluster Native Client, you need to verify that the FUSE module is loaded on the client and has access to the required modules as follows:</p> <ol> <li> <p>Add the FUSE loadable kernel module (LKM) to the Linux kernel:</p> <pre><code>modprobe fuse\n</code></pre> </li> <li> <p>Verify that the FUSE module is loaded:</p> <pre><code># dmesg | grep -i fuse\nfuse init (API version 7.13)\n</code></pre> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Clients/#installing-on-red-hat-package-manager-rpm-distributions","title":"Installing on Red Hat Package Manager (RPM) Distributions","text":"<p>To install Gluster Native Client on RPM distribution-based systems</p> <ol> <li> <p>Install required prerequisites on the client using the following     command:</p> <pre><code>sudo yum -y install openssh-server wget fuse fuse-libs openib libibverbs\n</code></pre> </li> <li> <p>Ensure that TCP and UDP ports 24007 and 24008 are open on all     Gluster servers. Apart from these ports, you need to open one port     for each brick starting from port 49152 (instead of 24009 onwards as     with previous releases). The brick ports assignment scheme is now     compliant with IANA guidelines. For example: if you have     five bricks, you need to have ports 49152 to 49156 open.</p> <p>From Gluster-10 onwards, the brick ports will be randomized. A port is randomly selected within the range of <code>base-port</code> to <code>max-port</code> as defined in the glusterd.vol file and then assigned to the brick. For example: if you have five bricks, you need to have at least 5 ports open within the given range of <code>base-port</code> and <code>max-port</code>. To reduce the number of open ports (for best security practices), one can lower the <code>max-port</code> value in the glusterd.vol file and restart glusterd to get it into effect.</p> <p>You can use the following chains with iptables:</p> <pre><code>sudo iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 24007:24008 -j ACCEPT\n\nsudo iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 49152:49156 -j ACCEPT\n</code></pre> <p>Note If you already have iptable chains, make sure that the above ACCEPT rules precede the DROP rules. This can be achieved by providing a lower rule number than the DROP rule.</p> </li> <li> <p>Download the latest glusterfs, glusterfs-fuse, and glusterfs-rdma     RPM files to each client. The glusterfs package contains the Gluster     Native Client. The glusterfs-fuse package contains the FUSE     translator required for mounting on client systems and the     glusterfs-rdma packages contain OpenFabrics verbs RDMA module for     Infiniband.</p> <p>You can download the software at GlusterFS download page.</p> </li> <li> <p>Install Gluster Native Client on the client.</p> <p>Note The package versions listed in the example below may not be the latest release. Please refer to the download page to ensure that you have the recently released packages.</p> <pre><code>sudo rpm -i glusterfs-3.8.5-1.x86_64\nsudo rpm -i glusterfs-fuse-3.8.5-1.x86_64\nsudo rpm -i glusterfs-rdma-3.8.5-1.x86_64\n</code></pre> </li> </ol> <p>Note: The RDMA module is only required when using Infiniband.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#installing-on-debian-based-distributions","title":"Installing on Debian-based Distributions","text":"<p>To install Gluster Native Client on Debian-based distributions</p> <ol> <li> <p>Install OpenSSH Server on each client using the following command:</p> <pre><code>sudo apt-get install openssh-server vim wget\n</code></pre> </li> <li> <p>Download the latest GlusterFS .deb file and checksum to each client.</p> <p>You can download the software at GlusterFS download page.</p> </li> <li> <p>For each .deb file, get the checksum (using the following command)     and compare it against the checksum for that file in the md5sum     file.</p> <pre><code>md5sum GlusterFS_DEB_file.deb\n</code></pre> <p>The md5sum of the packages is available at: GlusterFS download page</p> </li> <li> <p>Uninstall GlusterFS v3.1 (or an earlier version) from the client     using the following command:</p> <pre><code>sudo dpkg -r glusterfs\n</code></pre> <p>(Optional) Run <code>$ sudo dpkg -purge glusterfs</code>to purge the configuration files.</p> </li> <li> <p>Install Gluster Native Client on the client using the following     command:</p> <pre><code>sudo dpkg -i GlusterFS_DEB_file\n</code></pre> <p>For example:</p> <pre><code>sudo dpkg -i glusterfs-3.8.x.deb\n</code></pre> </li> <li> <p>Ensure that TCP and UDP ports 24007 and 24008 are open on all     Gluster servers. Apart from these ports, you need to open one port     for each brick starting from port 49152 (instead of 24009 onwards as     with previous releases). The brick ports assignment scheme is now     compliant with IANA guidelines. For example: if you have     five bricks, you need to have ports 49152 to 49156 open.</p> <p>From Gluster-10 onwards, the brick ports will be randomized. A port is randomly selected within the range of base_port to max_port as defined in glusterd.vol file and then assigned to the brick. For example: if you have five bricks, you need to have at least 5 ports open within the given range of base_port and max_port. To reduce the number of open ports (for best security practices), one can lower the max_port value in the glusterd.vol file and restart glusterd to get it into effect.</p> <p>You can use the following chains with iptables:</p> <pre><code>sudo iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 24007:24008 -j ACCEPT\n\nsudo iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 49152:49156 -j ACCEPT\n</code></pre> </li> </ol> <p>Note If you already have iptable chains, make sure that the above ACCEPT rules precede the DROP rules. This can be achieved by providing a lower rule number than the DROP rule.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#performing-a-source-installation","title":"Performing a Source Installation","text":"<p>To build and install Gluster Native Client from the source code</p> <ol> <li> <p>Create a new directory using the following commands:</p> <pre><code>mkdir glusterfs\ncd glusterfs\n</code></pre> </li> <li> <p>Download the source code.</p> <p>You can download the source at link.</p> </li> <li> <p>Extract the source code using the following command:</p> <pre><code>tar -xvzf SOURCE-FILE\n</code></pre> </li> <li> <p>Run the configuration utility using the following command:</p> <pre><code>$ ./configure\n\nGlusterFS configure summary\n===========================\nFUSE client : yes\nInfiniband verbs : yes\nepoll IO multiplex : yes\nargp-standalone : no\nfusermount : no\nreadline : yes\n</code></pre> <p>The configuration summary shows the components that will be built with Gluster Native Client.</p> </li> <li> <p>Build the Gluster Native Client software using the following     commands:</p> <pre><code>make\nmake install`\n</code></pre> </li> <li> <p>Verify that the correct version of Gluster Native Client is     installed, using the following command:</p> <pre><code>glusterfs --version\n</code></pre> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Clients/#mounting-volumes","title":"Mounting Volumes","text":"<p>After installing the Gluster Native Client, you need to mount Gluster volumes to access data. There are two methods you can choose:</p> <ul> <li>Manually Mounting Volumes</li> <li>Automatically Mounting Volumes</li> </ul> <p>Note Server names selected during creation of Volumes should be resolvable in the client machine. You can use appropriate /etc/hosts entries or DNS server to resolve server names to IP addresses.</p> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#manually-mounting-volumes","title":"Manually Mounting Volumes","text":"<ul> <li>To mount a volume, use the following command:<pre><code>mount -t glusterfs HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR\n</code></pre> </li> </ul> <p>For example:</p> <pre><code>    mount -t glusterfs server1:/test-volume /mnt/glusterfs\n</code></pre> <p>Note The server specified in the mount command is only used to fetch the gluster configuration volfile describing the volume name. Subsequently, the client will communicate directly with the servers mentioned in the volfile (which might not even include the one used for mount).</p> <p>If you see a usage message like \"Usage: mount.glusterfs\", mount usually requires you to create a directory to be used as the mount point. Run \"mkdir /mnt/glusterfs\" before you attempt to run the mount command listed above.</p> <p>Mounting Options</p> <p>You can specify the following options when using the <code>mount -t glusterfs</code> command. Note that you need to separate all options with commas.</p> <pre><code>backupvolfile-server=server-name\n\nvolfile-max-fetch-attempts=number of attempts\n\nlog-level=loglevel\n\nlog-file=logfile\n\ntransport=transport-type\n\ndirect-io-mode=[enable|disable]\n\nuse-readdirp=[yes|no]\n\n</code></pre> <p>For example:</p> <p><code>mount -t glusterfs -o backupvolfile-server=volfile_server2,use-readdirp=no,volfile-max-fetch-attempts=2,log-level=WARNING,log-file=/var/log/gluster.log server1:/test-volume /mnt/glusterfs</code></p> <p>If <code>backupvolfile-server</code> option is added while mounting fuse client, when the first volfile server fails, then the server specified in <code>backupvolfile-server</code> option is used as volfile server to mount the client.</p> <p>In <code>volfile-max-fetch-attempts=X</code> option, specify the number of attempts to fetch volume files while mounting a volume. This option is useful when you mount a server with multiple IP addresses or when round-robin DNS is configured for the server-name..</p> <p>If <code>use-readdirp</code> is set to ON, it forces the use of readdirp mode in fuse kernel module</p> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#automatically-mounting-volumes","title":"Automatically Mounting Volumes","text":"<p>You can configure your system to automatically mount the Gluster volume each time your system starts.</p> <p>The server specified in the mount command is only used to fetch the gluster configuration volfile describing the volume name. Subsequently, the client will communicate directly with the servers mentioned in the volfile (which might not even include the one used for mount).</p> <ul> <li>To mount a volume, edit the /etc/fstab file and add the following   line:</li> </ul> <p><code>HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR glusterfs defaults,_netdev 0 0</code></p> <p>For example:</p> <p><code>server1:/test-volume /mnt/glusterfs glusterfs defaults,_netdev 0 0</code></p> <p>Mounting Options</p> <p>You can specify the following options when updating the /etc/fstab file. Note that you need to separate all options with commas.</p> <pre><code>log-level=loglevel\n\nlog-file=logfile\n\ntransport=transport-type\n\ndirect-io-mode=[enable|disable]\n\nuse-readdirp=no\n</code></pre> <p>For example:</p> <p><code>HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR glusterfs defaults,_netdev,log-level=WARNING,log-file=/var/log/gluster.log 0 0</code></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#testing-mounted-volumes","title":"Testing Mounted Volumes","text":"<p>To test mounted volumes</p> <ul> <li>Use the following command:</li> </ul> <p><code># mount</code></p> <p>If the gluster volume was successfully mounted, the output of the   mount command on the client will be similar to this example:</p> <p><code>server1:/test-volume on /mnt/glusterfs type fuse.glusterfs (rw,allow_other,default_permissions,max_read=131072</code></p> <ul> <li>Use the following command:</li> </ul> <p><code># df</code></p> <p>The output of df command on the client will display the aggregated   storage space from all the bricks in a volume similar to this   example:</p> <pre><code>  # df -h /mnt/glusterfs\n  Filesystem               Size Used Avail Use% Mounted on\n  server1:/test-volume     28T 22T 5.4T 82% /mnt/glusterfs\n</code></pre> <ul> <li>Change to the directory and list the contents by entering the   following:</li> </ul> <pre><code>    `# cd MOUNTDIR `\n    `# ls`\n</code></pre> <ul> <li>For example,</li> </ul> <pre><code>    `# cd /mnt/glusterfs `\n    `# ls`\n</code></pre>"},{"location":"Administrator-Guide/Setting-Up-Clients/#nfs","title":"NFS","text":"<p>You can use NFS v3 to access to gluster volumes. Extensive testing has be done on GNU/Linux clients and NFS implementation in other operating system, such as FreeBSD, and Mac OS X, as well as Windows 7 (Professional and Up), Windows Server 2003, and others, may work with gluster NFS server implementation.</p> <p>GlusterFS now includes network lock manager (NLM) v4. NLM enables applications on NFSv3 clients to do record locking on files on NFS server. It is started automatically whenever the NFS server is run.</p> <p>You must install nfs-common package on both servers and clients (only for Debian-based) distribution.</p> <p>This section describes how to use NFS to mount Gluster volumes (both manually and automatically) and how to verify that the volume has been mounted successfully.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#using-nfs-to-mount-volumes","title":"Using NFS to Mount Volumes","text":"<p>You can use either of the following methods to mount Gluster volumes:</p> <ul> <li>Manually Mounting Volumes Using NFS</li> <li>Automatically Mounting Volumes Using NFS</li> </ul> <p>Prerequisite: Install nfs-common package on both servers and clients (only for Debian-based distribution), using the following command:</p> <pre><code>    sudo aptitude install nfs-common\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#manually-mounting-volumes-using-nfs","title":"Manually Mounting Volumes Using NFS","text":"<p>To manually mount a Gluster volume using NFS</p> <ul> <li>To mount a volume, use the following command:<pre><code>mount -t nfs -o vers=3 HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR\n</code></pre> </li> </ul> <p>For example:</p> <pre><code>   mount -t nfs -o vers=3 server1:/test-volume /mnt/glusterfs\n</code></pre> <p>Note Gluster NFS server does not support UDP. If the NFS client you are using defaults to connecting using UDP, the following message appears:</p> <p><code>requested NFS version or transport protocol is not supported</code>.</p> <p>To connect using TCP</p> <ul> <li>Add the following option to the mount command:</li> </ul> <p><code>-o mountproto=tcp</code></p> <p>For example:</p> <pre><code>    mount -o mountproto=tcp -t nfs server1:/test-volume /mnt/glusterfs\n</code></pre> <p>To mount Gluster NFS server from a Solaris client</p> <ul> <li>Use the following command:<pre><code>mount -o proto=tcp,vers=3 nfs://HOSTNAME-OR-IPADDRESS:38467/VOLNAME MOUNTDIR\n</code></pre> </li> </ul> <p>For example:</p> <pre><code>    mount -o proto=tcp,vers=3 nfs://server1:38467/test-volume /mnt/glusterfs\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#automatically-mounting-volumes-using-nfs","title":"Automatically Mounting Volumes Using NFS","text":"<p>You can configure your system to automatically mount Gluster volumes using NFS each time the system starts.</p> <p>To automatically mount a Gluster volume using NFS</p> <ul> <li>To mount a volume, edit the /etc/fstab file and add the following   line:<pre><code>HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR nfs defaults,_netdev,vers=3 0 0\n</code></pre> </li> </ul> <p>For example,</p> <p><code>server1:/test-volume /mnt/glusterfs nfs defaults,_netdev,vers=3 0 0</code></p> <p>Note Gluster NFS server does not support UDP. If the NFS client you are using defaults to connecting using UDP, the following message appears:</p> <p><code>requested NFS version or transport protocol is not supported.</code></p> <p>To connect using TCP</p> <ul> <li>Add the following entry in /etc/fstab file :<pre><code>HOSTNAME-OR-IPADDRESS:/VOLNAME MOUNTDIR nfs defaults,_netdev,mountproto=tcp 0 0\n</code></pre> </li> </ul> <p>For example,</p> <p><code>server1:/test-volume /mnt/glusterfs nfs defaults,_netdev,mountproto=tcp 0 0</code></p> <p>To automount NFS mounts</p> <p>Gluster supports *nix standard method of automounting NFS mounts. Update the /etc/auto.master and /etc/auto.misc and restart the autofs service. After that, whenever a user or process attempts to access the directory it will be mounted in the background.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#testing-volumes-mounted-using-nfs","title":"Testing Volumes Mounted Using NFS","text":"<p>You can confirm that Gluster directories are mounting successfully.</p> <p>To test mounted volumes</p> <ul> <li>Use the mount command by entering the following:</li> </ul> <p><code># mount</code></p> <p>For example, the output of the mount command on the client will   display an entry like the following:</p> <p><code>server1:/test-volume on /mnt/glusterfs type nfs (rw,vers=3,addr=server1)</code></p> <ul> <li>Use the df command by entering the following:</li> </ul> <p><code># df</code></p> <p>For example, the output of df command on the client will display the   aggregated storage space from all the bricks in a volume.</p> <pre><code>  # df -h /mnt/glusterfs\n  Filesystem              Size Used Avail Use% Mounted on\n  server1:/test-volume    28T  22T  5.4T  82%  /mnt/glusterfs\n</code></pre> <ul> <li>Change to the directory and list the contents by entering the   following:</li> </ul> <p><code># cd MOUNTDIR</code> <code># ls</code></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#cifs","title":"CIFS","text":"<p>You can use CIFS to access to volumes when using Microsoft Windows as well as SAMBA clients. For this access method, Samba packages need to be present on the client side. You can export glusterfs mount point as the samba export, and then mount it using CIFS protocol.</p> <p>This section describes how to mount CIFS shares on Microsoft Windows-based clients (both manually and automatically) and how to verify that the volume has mounted successfully.</p> <p>Note</p> <p>CIFS access using the Mac OS X Finder is not supported, however, you can use the Mac OS X command line to access Gluster volumes using CIFS.</p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#using-cifs-to-mount-volumes","title":"Using CIFS to Mount Volumes","text":"<p>You can use either of the following methods to mount Gluster volumes:</p> <ul> <li>Exporting Gluster Volumes Through Samba</li> <li>Manually Mounting Volumes Using CIFS</li> <li>Automatically Mounting Volumes Using CIFS</li> </ul> <p>You can also use Samba for exporting Gluster Volumes through CIFS protocol.</p> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#exporting-gluster-volumes-through-samba","title":"Exporting Gluster Volumes Through Samba","text":"<p>We recommend you to use Samba for exporting Gluster volumes through the CIFS protocol.</p> <p>To export volumes through CIFS protocol</p> <ol> <li> <p>Mount a Gluster volume.</p> </li> <li> <p>Setup Samba configuration to export the mount point of the Gluster     volume.</p> <p>For example, if a Gluster volume is mounted on /mnt/gluster, you must edit smb.conf file to enable exporting this through CIFS. Open smb.conf file in an editor and add the following lines for a simple configuration:</p> </li> </ol> <pre><code>    [glustertest]\n\n    comment = For testing a Gluster volume exported through CIFS\n\n    path = /mnt/glusterfs\n\n    read only = no\n\n    guest ok = yes\n</code></pre> <p>Save the changes and start the smb service using your systems init scripts (/etc/init.d/smb [re]start). Abhove steps is needed for doing multiple mount. If you want only samba mount then in your smb.conf you need to add</p> <pre><code>    kernel share modes = no\n    kernel oplocks = no\n    map archive = no\n    map hidden = no\n    map read only = no\n    map system = no\n    store dos attributes = yes\n</code></pre> <p>Note</p> <p>To be able mount from any server in the trusted storage pool, you must repeat these steps on each Gluster node. For more advanced configurations, see Samba documentation.</p> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#manually-mounting-volumes-using-cifs","title":"Manually Mounting Volumes Using CIFS","text":"<p>You can manually mount Gluster volumes using CIFS on Microsoft Windows-based client machines.</p> <p>To manually mount a Gluster volume using CIFS</p> <ol> <li> <p>Using Windows Explorer, choose Tools &gt; Map Network Drive\u2026 from     the menu. The Map Network Drivewindow appears.</p> </li> <li> <p>Choose the drive letter using the Drive drop-down list.</p> </li> <li> <p>Click Browse, select the volume to map to the network drive, and     click OK.</p> </li> <li> <p>Click Finish.</p> </li> </ol> <p>The network drive (mapped to the volume) appears in the Computer window.</p> <p>Alternatively, to manually mount a Gluster volume using CIFS by going to Start &gt; Run and entering Network path manually.</p> <p></p>"},{"location":"Administrator-Guide/Setting-Up-Clients/#automatically-mounting-volumes-using-cifs","title":"Automatically Mounting Volumes Using CIFS","text":"<p>You can configure your system to automatically mount Gluster volumes using CIFS on Microsoft Windows-based clients each time the system starts.</p> <p>To automatically mount a Gluster volume using CIFS</p> <p>The network drive (mapped to the volume) appears in the Computer window and is reconnected each time the system starts.</p> <ol> <li> <p>Using Windows Explorer, choose Tools &gt; Map Network Drive\u2026 from     the menu. The Map Network Drivewindow appears.</p> </li> <li> <p>Choose the drive letter using the Drive drop-down list.</p> </li> <li> <p>Click Browse, select the volume to map to the network drive, and     click OK.</p> </li> <li> <p>Click the Reconnect at logon checkbox.</p> </li> <li> <p>Click Finish.</p> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Clients/#testing-volumes-mounted-using-cifs","title":"Testing Volumes Mounted Using CIFS","text":"<p>You can confirm that Gluster directories are mounting successfully by navigating to the directory using Windows Explorer.</p>"},{"location":"Administrator-Guide/Setting-Up-Volumes/","title":"Setting up GlusterFS Volumes","text":"<p>A volume is a logical collection of bricks where each brick is an export directory on a server in the trusted storage pool. To create a new volume in your storage environment, specify the bricks that comprise the volume. After you have created a new volume, you must start it before attempting to mount it.</p> <p>See Setting up Storage for how to set up bricks.</p>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#volume-types","title":"Volume Types","text":"<ul> <li> <p>Volumes of the following types can be created in your storage     environment:</p> <ul> <li> <p>Distributed - Distributed volumes     distribute files across the bricks in the volume. You can use distributed     volumes where the requirement is to scale storage and the redundancy is     either not important or is provided by other hardware/software layers.</p> </li> <li> <p>Replicated \u2013 Replicated volumes replicate     files across bricks in the volume. You can use replicated volumes in     environments where high-availability and high-reliability are critical.</p> </li> <li> <p>Distributed Replicated -     Distributed replicated volumes distribute files across replicated bricks in the     volume. You can use distributed replicated volumes in environments where the     requirement is to scale storage and high-reliability is critical. Distributed     replicated volumes also offer improved read performance in most environments.</p> </li> <li> <p>Dispersed - Dispersed volumes are based on     erasure codes, providing space-efficient protection against disk or server     failures. It stores an encoded fragment of the original file to each brick in a     way that only a subset of the fragments is needed to recover the original file.     The number of bricks that can be missing without losing access to data is     configured by the administrator on volume creation time.</p> </li> <li> <p>Distributed Dispersed -     Distributed dispersed volumes distribute files across dispersed subvolumes. This     has the same advantages of distribute replicate volumes, but using disperse to     store the data into the bricks.</p> </li> </ul> </li> </ul> <p>To create a new volume</p> <ul> <li> <p>Create a new volume :</p> <p><code># gluster volume create &lt;NEW-VOLNAME&gt; [[replica &lt;COUNT&gt; [arbiter &lt;COUNT&gt;]]|[replica 2 thin-arbiter 1]] [disperse [&lt;COUNT&gt;]] [disperse-data &lt;COUNT&gt;] [redundancy &lt;COUNT&gt;] [transport &lt;tcp|rdma|tcp,rdma&gt;] &lt;NEW-BRICK&gt; &lt;TA-BRICK&gt;... [force]</code></p> <p>For example, to create a volume called test-volume consisting of server3:/exp3 and server4:/exp4:</p> <pre><code># gluster volume create test-volume server3:/exp3 server4:/exp4\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> </li> </ul>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#creating-distributed-volumes","title":"Creating Distributed Volumes","text":"<p>In a distributed volume files are spread randomly across the bricks in the volume. Use distributed volumes where you need to scale storage and redundancy is either not important or is provided by other hardware/software layers.</p> <p>Note: Disk/server failure in distributed volumes can result in a serious loss of data because directory contents are spread randomly across the bricks in the volume.</p> <p></p> <p>To create a distributed volume</p> <ol> <li> <p>Create a trusted storage pool.</p> </li> <li> <p>Create the distributed volume:</p> <p><code># gluster volume create  [transport tcp | rdma | tcp,rdma]</code></p> <p>For example, to create a distributed volume with four storage servers using tcp:</p> <pre><code># gluster volume create test-volume server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> <p>(Optional) You can display the volume information:</p> <pre><code># gluster volume info\nVolume Name: test-volume\nType: Distribute\nStatus: Created\nNumber of Bricks: 4\nTransport-type: tcp\nBricks:\nBrick1: server1:/exp1\nBrick2: server2:/exp2\nBrick3: server3:/exp3\nBrick4: server4:/exp4\n</code></pre> <p>For example, to create a distributed volume with four storage servers over InfiniBand:</p> <pre><code># gluster volume create test-volume transport rdma server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> <p>If the transport type is not specified, tcp is used as the default. You can also set additional options if required, such as auth.allow or auth.reject.</p> <p>Note: Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#creating-replicated-volumes","title":"Creating Replicated Volumes","text":"<p>Replicated volumes create copies of files across multiple bricks in the volume. You can use replicated volumes in environments where high-availability and high-reliability are critical.</p> <p>Note: The number of bricks should be equal to of the replica count for a replicated volume. To protect against server and disk failures, it is recommended that the bricks of the volume are from different servers.</p> <p></p> <p>To create a replicated volume</p> <ol> <li> <p>Create a trusted storage pool.</p> </li> <li> <p>Create the replicated volume:</p> <p><code># gluster volume create  [replica ] [transport tcp | rdma | tcp,rdma]</code></p> <p>For example, to create a replicated volume with two storage servers:</p> <pre><code># gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> <p>If the transport type is not specified, tcp is used as the default. You can also set additional options if required, such as auth.allow or auth.reject.</p> <p>Note:</p> <ul> <li> <p>Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p> </li> <li> <p>GlusterFS will fail to create a replicate volume if more than one brick of a replica set is present on the same peer. For eg. a four node replicated volume where more than one brick of a replica set is present on the same peer. </p> <pre><code># gluster volume create &lt;volname&gt; replica 4 server1:/brick1 server1:/brick2 server2:/brick3 server4:/brick4\nvolume create: &lt;volname&gt;: failed: Multiple bricks of a replicate volume are present on the same server. This setup is not optimal. Use 'force' at the end of the command if you want to override this behavior.\n</code></pre> </li> </ul> <p>Use the <code>force</code> option at the end of command if you still want to create the volume with this configuration.</p> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#arbiter-configuration-for-replica-volumes","title":"Arbiter configuration for replica volumes","text":"<p>Arbiter volumes are replica 3 volumes where the 3rd brick acts as the arbiter brick. This configuration has mechanisms that prevent occurrence of split-brains.</p> <p>It can be created with the following command:</p> <pre><code>`# gluster volume create &lt;VOLNAME&gt; replica 2 arbiter 1 host1:brick1 host2:brick2 host3:brick3`\n</code></pre> <p>More information about this configuration can be found at Administrator-Guide : arbiter-volumes-and-quorum</p> <p>Note that the arbiter configuration for replica 3 can be used to create distributed-replicate volumes as well.</p>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#creating-distributed-replicated-volumes","title":"Creating Distributed Replicated Volumes","text":"<p>Distributes files across replicated bricks in the volume. You can use distributed replicated volumes in environments where the requirement is to scale storage and high-reliability is critical. Distributed replicated volumes also offer improved read performance in most environments.</p> <p>Note: The number of bricks should be a multiple of the replica count for a distributed replicated volume. Also, the order in which bricks are specified has a great effect on data protection. Each replica_count consecutive bricks in the list you give will form a replica set, with all replica sets combined into a volume-wide distribute set. To make sure that replica-set members are not placed on the same node, list the first brick on every server, then the second brick on every server in the same order, and so on.</p> <p></p> <p>To create a distributed replicated volume</p> <ol> <li> <p>Create a trusted storage pool.</p> </li> <li> <p>Create the distributed replicated volume:</p> <p><code># gluster volume create  [replica ] [transport tcp | rdma | tcp,rdma]</code></p> <p>For example, a four node distributed (replicated) volume with a two-way mirror:</p> <pre><code># gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> <p>For example, to create a six node distributed (replicated) volume with a two-way mirror:</p> <pre><code># gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6\nCreation of test-volume has been successful\nPlease start the volume to access data.\n</code></pre> <p>If the transport type is not specified, tcp is used as the default. You can also set additional options if required, such as auth.allow or auth.reject.</p> <p>Note: - Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p> <ul> <li>GlusterFS will fail to create a distribute replicate volume if more than one brick of a replica set is present on the same peer. For eg. for a four node distribute (replicated) volume where more than one brick of a replica set is present on the same peer. <pre><code># gluster volume create &lt;volname&gt; replica 2 server1:/brick1 server1:/brick2 server2:/brick3 server4:/brick4\nvolume create: &lt;volname&gt;: failed: Multiple bricks of a replicate volume are present on the same server. This setup is not optimal. Use 'force' at the end of the command if you want to override this behavior.\n</code></pre> </li> </ul> <p>Use the <code>force</code> option at the end of command if you want to create the volume in this case.</p> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#creating-dispersed-volumes","title":"Creating Dispersed Volumes","text":"<p>Dispersed volumes are based on erasure codes. It stripes the encoded data of files, with some redundancy added, across multiple bricks in the volume. You can use dispersed volumes to have a configurable level of reliability with  minimum space waste.</p> <p>Redundancy</p> <p>Each dispersed volume has a redundancy value defined when the volume is created. This value determines how many bricks can be lost without interrupting the operation of the volume. It also determines the amount of usable space of the volume using this formula:</p> <pre><code>&lt;Usable size&gt; = &lt;Brick size&gt; * (#Bricks - Redundancy)\n</code></pre> <p>All bricks of a disperse set should have the same capacity, otherwise, when the smallest brick becomes full, no additional data will be allowed in the disperse set.</p> <p>It's important to note that a configuration with 3 bricks and redundancy 1 will have less usable space (66.7% of the total physical space) than a configuration with 10 bricks and redundancy 1 (90%). However the first one will be safer than the second one (roughly the probability of failure of the second configuration if more than 4.5 times bigger than the first one).</p> <p>For example, a dispersed volume composed of 6 bricks of 4TB and a redundancy of 2 will be completely operational even with two bricks inaccessible. However a third inaccessible brick will bring the volume down because it won't be possible to read or write to it. The usable space of the volume will be equal to 16TB.</p> <p>The implementation of erasure codes in GlusterFS limits the redundancy to a value smaller than #Bricks / 2 (or equivalently, redundancy * 2 &lt; #Bricks). Having a redundancy equal to half of the number of bricks would be almost equivalent to a replica-2 volume, and probably a replicated volume will perform better in this case.</p> <p>Optimal volumes</p> <p>One of the worst things erasure codes have in terms of performance is the RMW (Read-Modify-Write) cycle. Erasure codes operate in blocks of a certain size and it cannot work with smaller ones. This means that if a user issues a write of a portion of a file that doesn't fill a full block, it needs to read the remaining portion from the current contents of the file, merge them, compute the updated encoded block and, finally, writing the resulting data.</p> <p>This adds latency, reducing performance when this happens. Some GlusterFS performance xlators can help to reduce or even eliminate this problem for some workloads, but it should be taken into account when using dispersed volumes for a specific use case.</p> <p>Current implementation of dispersed volumes use blocks of a size that depends on the number of bricks and redundancy: 512 * (#Bricks - redundancy) bytes. This value is also known as the stripe size.</p> <p>Using combinations of #Bricks/redundancy that give a power of two for the stripe size will make the disperse volume perform better in most workloads because it's more typical to write information in blocks that are multiple of two (for example databases, virtual machines and many applications).</p> <p>These combinations are considered optimal.</p> <p>For example, a configuration with 6 bricks and redundancy 2 will have a stripe size of 512 * (6 - 2) = 2048 bytes, so it's considered optimal. A configuration with 7 bricks and redundancy 2 would have a stripe size of 2560 bytes, needing a RMW cycle for many writes (of course this always depends on the use case).</p> <p>To create a dispersed volume</p> <ol> <li> <p>Create a trusted storage pool.</p> </li> <li> <p>Create the dispersed volume:</p> <p><code># gluster volume create [disperse [&lt;count&gt;]] [redundancy &lt;count&gt;] [transport tcp | rdma | tcp,rdma]</code></p> <p>A dispersed volume can be created by specifying the number of bricks in a disperse set, by specifying the number of redundancy bricks, or both.</p> <p>If disperse is not specified, or the &lt;count&gt; is missing, the entire volume will be treated as a single disperse set composed by all bricks enumerated in the command line.</p> <p>If redundancy is not specified, it is computed automatically to be the optimal value. If this value does not exist, it's assumed to be '1' and a warning message is shown:</p> <pre><code># gluster volume create test-volume disperse 4 server{1..4}:/bricks/test-volume\nThere isn't an optimal redundancy value for this configuration. Do you want to create the volume with redundancy 1 ? (y/n)\n</code></pre> <p>In all cases where redundancy is automatically computed and it's not equal to '1', a warning message is displayed:</p> <pre><code># gluster volume create test-volume disperse 6 server{1..6}:/bricks/test-volume\nThe optimal redundancy for this configuration is 2. Do you want to create the volume with this value ? (y/n)\n</code></pre> <p>redundancy must be greater than 0, and the total number of bricks must be greater than 2 * redundancy. This means that a dispersed volume must have a minimum of 3 bricks.</p> <p>If the transport type is not specified, tcp is used as the default. You can also set additional options if required, like in the other volume types.</p> <p>Note:</p> <ul> <li> <p>Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p> </li> <li> <p>GlusterFS will fail with a warning to create a dispersed volume if more than one brick of a disperse set is present on the same peer.</p> <pre><code># gluster volume create &lt;volname&gt; disperse 3 server1:/brick{1..3}\nvolume create: &lt;volname&gt;: failed: Multiple bricks of a disperse volume are present on the same server. This setup is not optimal. Bricks should be on different nodes to have best fault tolerant configuration. Use 'force' at the end of the command if you want to override this behavior.\n</code></pre> </li> </ul> </li> </ol>"},{"location":"Administrator-Guide/Setting-Up-Volumes/#creating-distributed-dispersed-volumes","title":"Creating Distributed Dispersed Volumes","text":"<p>Distributed dispersed volumes are the equivalent to distributed replicated volumes, but using dispersed subvolumes instead of replicated ones.</p> <p>To create a distributed dispersed volume</p> <ol> <li> <p>Create a trusted storage pool.</p> </li> <li> <p>Create the distributed dispersed volume:</p> <p><code># gluster volume create disperse &lt;count&gt; [redundancy &lt;count&gt;] [transport tcp | rdma | tcp,rdma]</code></p> <p>To create a distributed dispersed volume, the disperse keyword and &lt;count&gt; is mandatory, and the number of bricks specified in the command line must must be a multiple of the disperse count.</p> <p>redundancy is exactly the same as in the dispersed volume.</p> <p>If the transport type is not specified, tcp is used as the default. You can also set additional options if required, like in the other volume types.</p> <p>Note:</p> <ul> <li> <p>Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p> </li> <li> <p>For distributed disperse volumes bricks can be hosted on same node if they belong to different subvol.</p> <pre><code># gluster volume create &lt;volname&gt; disperse 3 server1:/br1 server2:/br1 server3:/br1 server1:/br2 server2:/br2 server3:/br2\n</code></pre> <p>volume create: : success: please start the volume to access data"},{"location":"Administrator-Guide/Setting-Up-Volumes/#starting-volumes","title":"Starting Volumes","text":"<p>You must start your volumes before you try to mount them.</p> <p>To start a volume</p> <ul> <li> <p>Start a volume:</p> <p><code># gluster volume start &lt;VOLNAME&gt; [force]</code></p> <p>For example, to start test-volume:</p> <pre><code># gluster volume start test-volume\nStarting test-volume has been successful\n</code></pre> </li> </ul>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/","title":"Split brain and the ways to deal with it","text":""},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#split-brain","title":"Split brain:","text":"<p>Split brain is a situation where two or more replicated copies of a file become divergent. When a file is in split brain, there is an inconsistency in either data or metadata of the file amongst the bricks of a replica and do not have enough information to authoritatively pick a copy as being pristine and heal the bad copies, despite all bricks being up and online. For a directory, there is also an entry split brain where a file inside it can have different gfid/file-type across the bricks of a replica. Split brain can happen mainly because of 2 reasons:</p> <ul> <li>Due to network disconnect Where a client temporarily loses connection to the bricks.</li> </ul> <ol> <li> <p>There is a replica pair of 2 bricks, brick1 on server1 and brick2 on server2.</p> </li> <li> <p>Client1 loses connection to brick2 and client2 loses connection to brick1 due to network split.</p> </li> <li> <p>Writes from client1 goes to brick1 and from client2 goes to brick2, which is nothing but split-brain.</p> </li> </ol> <ul> <li>Gluster brick processes going down or returning error:</li> </ul> <ol> <li> <p>Server1 is down and server2 is up: Writes happen on server 2.</p> </li> <li> <p>Server1 comes up, server2 goes down (Heal not happened / data on server 2 is not replicated on server1): Writes happen on server1.</p> </li> <li> <p>Server2 comes up: Both server1 and server2 has data independent of each other.</p> </li> </ol> <p>If we use the <code>replica 2</code> volume, it is not possible to prevent split-brain without losing availability.</p>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#ways-to-deal-with-split-brain","title":"Ways to deal with split brain:","text":"<p>In glusterfs there are ways to resolve split brain. You can see the detailed description of how to resolve a split-brain here. Moreover, there are ways to reduce the chances of ending up in split-brain situations. They are:</p> <ol> <li>Replica 3 volume</li> <li>Arbiter volume</li> </ol> <p>Both of these use the client-quorum option of glusterfs to avoid the split-brain situations.</p>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#client-quorum","title":"Client quorum:","text":"<p>This is a feature implemented in Automatic File Replication (AFR here on) module, to prevent split-brains in the I/O path for replicate/distributed-replicate volumes. By default, if the client-quorum is not met for a particular replica subvol, it becomes read-only. The other subvols (in a dist-rep volume) will still have R/W access. Here you can see more details about client-quorum.</p>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#client-quorum-in-replica-2-volumes","title":"Client quorum in replica 2 volumes:","text":"<p>In a replica 2 volume it is not possible to achieve high availability and consistency at the same time, without sacrificing tolerance to partition. If we set the client-quorum option to auto, then the first brick must always be up, irrespective of the status of the second brick. If only the second brick is up, the subvolume becomes read-only. If the quorum-type is set to fixed, and the quorum-count is set to 1, then we may end up in split brain. - Brick1 is up and brick2 is down. Quorum is met and write happens on brick1. - Brick1 goes down and brick2 comes up (No heal happened). Quorum is met, write happens on brick2. - Brick1 comes up. Quorum is met, but both the bricks have independent writes - split-brain. To avoid this we have to set the quorum-count to 2, which will cost the availability. Even if we have one replica brick up and running, the quorum is not met and we end up seeing EROFS.</p>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#1-replica-3-volume","title":"1. Replica 3 volume:","text":"<p>When we create a replicated or distributed replicated volume with replica count 3, the cluster.quorum-type option is set to auto by default. That means at least 2 bricks should be up and running to satisfy the quorum and allow the writes. This is the recommended setting for a replica 3 volume and this should not be changed. Here is how it prevents files from ending up in split brain:</p> <p>B1, B2, and B3 are the 3 bricks of a replica 3 volume.</p> <ol> <li>B1 &amp; B2 are up and B3 is down. Quorum is met and write happens on B1 &amp; B2.</li> <li>B3 comes up and B2 is down. Quorum is met and write happens on B1 &amp; B3.</li> <li>B2 comes up and B1 goes down. Quorum is met. But when a write request comes, AFR sees that B2 &amp; B3 are blaming each other (B2 says that some writes are pending on B3 and B3 says that some writes are pending on B2), therefore the write is not allowed and is failed with EIO.</li> </ol> <p>Command to create a replica 3 volume:</p> <pre><code>gluster volume create &lt;volname&gt; replica 3 host1:brick1 host2:brick2 host3:brick3\n</code></pre>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#2-arbiter-volume","title":"2. Arbiter volume:","text":"<p>Arbiter offers the sweet spot between replica 2 and replica 3, where user wants the split-brain protection offered by replica 3 but does not want to invest in 3x storage space. Arbiter is also an replica 3 volume where the third brick of the replica is automatically configured as an arbiter node. This means that the third brick stores only the file name and metadata, but not any data. This will help in avoiding split brain while providing the same level of consistency as a normal replica 3 volume.</p> <p>Command to create a arbiter volume:</p> <pre><code>gluster volume create &lt;volname&gt; replica 3 arbiter 1 host1:brick1 host2:brick2 host3:brick3\n</code></pre> <p>The only difference in the command is, we need to add one more keyword <code>arbiter 1</code> after the replica count. Since it is also a replica 3 volume, the cluster.quorum-type option is set to auto by default and at least 2 bricks should be up to satisfy the quorum and allow writes. Since the arbiter brick has only name and metadata of the files, there are some more checks to guarantee consistency. Arbiter works as follows:</p> <ol> <li>Clients take full file locks while writing (replica 3 takes range locks).</li> <li>If 2 bricks are up and if one of them is the arbiter, and it blames the other up brick, then all FOPs will fail with ENOTCONN (Transport endpoint is not connected). If the arbiter doesn't blame the other brick, FOPs will be allowed to proceed.</li> <li>If 2 bricks are up and the arbiter is down, then FOPs will be allowed.</li> <li>If only one brick is up, then client-quorum is not met and the volume becomes EROFS.</li> <li>In all cases, if there is only one source before the FOP is initiated and if the FOP fails on that source, the application will receive ENOTCONN.</li> </ol> <p>You can find more details on arbiter here.</p>"},{"location":"Administrator-Guide/Split-brain-and-ways-to-deal-with-it/#differences-between-replica-3-and-arbiter-volumes","title":"Differences between replica 3 and arbiter volumes:","text":"<ol> <li>In case of a replica 3 volume, we store the entire file in all the bricks and it is recommended to have bricks of same size. But in case of arbiter, since we do not store data, the size of the arbiter brick is comparatively lesser than the other bricks.</li> <li>Arbiter is a state between replica 2 and replica 3 volume. If we have only arbiter and one of the other brick is up and the arbiter brick blames the other brick, then we can not proceed with the FOPs.</li> <li>Replica 3 gives high availability compared to arbiter, because unlike in arbiter, replica 3 has a full copy of the data in all 3 bricks.</li> </ol>"},{"location":"Administrator-Guide/Start-Stop-Daemon/","title":"Managing the glusterd Service","text":"<p>After installing GlusterFS, you must start glusterd service. The glusterd service serves as the Gluster elastic volume manager, overseeing glusterfs processes, and co-ordinating dynamic volume operations, such as adding and removing volumes across multiple storage servers non-disruptively.</p> <p>This section describes how to start the glusterd service in the following ways:</p> <ul> <li>Starting and stopping glusterd manually on distributions using systemd</li> <li>Starting glusterd automatically on distributions using systemd</li> <li>Starting and stopping glusterd manually</li> <li>Starting glusterd Automatically</li> </ul> <p>Note: You must start glusterd on all GlusterFS servers.</p>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#distributions-with-systemd","title":"Distributions with systemd","text":""},{"location":"Administrator-Guide/Start-Stop-Daemon/#starting-and-stopping-glusterd-manually","title":"Starting and stopping glusterd manually","text":"<ul> <li> <p>To start <code>glusterd</code> manually:</p> <pre><code>systemctl start glusterd\n</code></pre> </li> <li> <p>To stop <code>glusterd</code> manually:</p> <pre><code>systemctl stop glusterd\n</code></pre> </li> </ul> <p></p>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#starting-glusterd-automatically","title":"Starting glusterd automatically","text":"<ul> <li> <p>To enable the glusterd service and start it if stopped:</p> <pre><code>systemctl enable --now glusterd\n</code></pre> </li> <li> <p>To disable the glusterd service and stop it if started:</p> <pre><code>systemctl disable --now glusterd\n</code></pre> </li> </ul>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#distributions-without-systemd","title":"Distributions without systemd","text":""},{"location":"Administrator-Guide/Start-Stop-Daemon/#starting-and-stopping-glusterd-manually_1","title":"Starting and stopping glusterd manually","text":"<p>This section describes how to start and stop glusterd manually</p> <ul> <li> <p>To start glusterd manually, enter the following command:</p> <pre><code>/etc/init.d/glusterd start\n</code></pre> </li> <li> <p>To stop glusterd manually, enter the following command:</p> <pre><code>/etc/init.d/glusterd stop\n</code></pre> </li> </ul> <p></p>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#starting-glusterd-automatically_1","title":"Starting glusterd Automatically","text":"<p>This section describes how to configure the system to automatically start the glusterd service every time the system boots.</p>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#red-hat-and-fedora-distributions","title":"Red Hat and Fedora distributions","text":"<p>To configure Red Hat-based systems to automatically start the glusterd service every time the system boots, enter the following from the command line:</p> <pre><code>chkconfig glusterd on\n</code></pre>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#debian-and-derivatives-like-ubuntu","title":"Debian and derivatives like Ubuntu","text":"<p>To configure Debian-based systems to automatically start the glusterd service every time the system boots, enter the following from the command line:</p> <pre><code>update-rc.d glusterd defaults\n</code></pre>"},{"location":"Administrator-Guide/Start-Stop-Daemon/#systems-other-than-red-hat-and-debian","title":"Systems Other than Red Hat and Debian","text":"<p>To configure systems other than Red Hat or Debian to automatically start the glusterd service every time the system boots, enter the following entry to the/etc/rc.local file:</p> <pre><code>echo \"glusterd\" &gt;&gt; /etc/rc.local\n</code></pre>"},{"location":"Administrator-Guide/Storage-Pools/","title":"Managing Trusted Storage Pools","text":""},{"location":"Administrator-Guide/Storage-Pools/#overview","title":"Overview","text":"<p>A trusted storage pool(TSP) is a trusted network of storage servers. Before you can configure a GlusterFS volume, you must create a trusted storage pool of the storage servers that will provide bricks to the volume by peer probing the servers. The servers in a TSP are peers of each other.</p> <p>After installing Gluster on your servers and before creating a trusted storage pool, each server belongs to a storage pool consisting of only that server.</p> <ul> <li>Managing Trusted Storage Pools<ul> <li>Overview</li> <li>Adding Servers</li> <li>Listing Servers</li> <li>Viewing Peer Status</li> <li>Removing Servers</li> </ul> </li> </ul> <p>Before you start:</p> <ul> <li> <p>The servers used to create the storage pool must be resolvable by hostname.</p> </li> <li> <p>The glusterd daemon must be running on all storage servers that you   want to add to the storage pool. See Managing the glusterd Service for details.</p> </li> <li> <p>The firewall on the servers must be configured to allow access to port 24007.</p> </li> </ul> <p>The following commands were run on a TSP consisting of 3 servers - server1, server2, and server3.</p> <p></p>"},{"location":"Administrator-Guide/Storage-Pools/#adding-servers","title":"Adding Servers","text":"<p>To add a server to a TSP, peer probe it from a server already in the pool.</p> <pre><code>    # gluster peer probe &lt;server&gt;\n</code></pre> <p>For example, to add a new server4 to the cluster described above, probe it from one of the other servers:</p> <pre><code>    server1#  gluster peer probe server4\n    Probe successful\n</code></pre> <p>Verify the peer status from the first server (server1):</p> <pre><code>    server1# gluster peer status\n    Number of Peers: 3\n\n    Hostname: server2\n    Uuid: 5e987bda-16dd-43c2-835b-08b7d55e94e5\n    State: Peer in Cluster (Connected)\n\n    Hostname: server3\n    Uuid: 1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7\n    State: Peer in Cluster (Connected)\n\n    Hostname: server4\n    Uuid: 3e0cabaa-9df7-4f66-8e5d-cbc348f29ff7\n    State: Peer in Cluster (Connected)\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Storage-Pools/#listing-servers","title":"Listing Servers","text":"<p>To list all nodes in the TSP:</p> <pre><code>    server1# gluster pool list\n    UUID                                    Hostname        State\n    d18d36c5-533a-4541-ac92-c471241d5418    localhost       Connected\n    5e987bda-16dd-43c2-835b-08b7d55e94e5    server2         Connected\n    1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7    server3         Connected\n    3e0cabaa-9df7-4f66-8e5d-cbc348f29ff7    server4         Connected\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Storage-Pools/#viewing-peer-status","title":"Viewing Peer Status","text":"<p>To view the status of the peers in the TSP:</p> <pre><code>    server1# gluster peer status\n    Number of Peers: 3\n\n    Hostname: server2\n    Uuid: 5e987bda-16dd-43c2-835b-08b7d55e94e5\n    State: Peer in Cluster (Connected)\n\n    Hostname: server3\n    Uuid: 1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7\n    State: Peer in Cluster (Connected)\n\n    Hostname: server4\n    Uuid: 3e0cabaa-9df7-4f66-8e5d-cbc348f29ff7\n    State: Peer in Cluster (Connected)\n</code></pre> <p></p>"},{"location":"Administrator-Guide/Storage-Pools/#removing-servers","title":"Removing Servers","text":"<p>To remove a server from the TSP, run the following command from another server in the pool:</p> <pre><code>    # gluster peer detach &lt;server&gt;\n</code></pre> <p>For example, to remove server4 from the trusted storage pool:</p> <pre><code>    server1# gluster peer detach server4\n    Detach successful\n</code></pre> <p>Verify the peer status:</p> <pre><code>    server1# gluster peer status\n    Number of Peers: 2\n\n    Hostname: server2\n    Uuid: 5e987bda-16dd-43c2-835b-08b7d55e94e5\n    State: Peer in Cluster (Connected)\n\n    Hostname: server3\n    Uuid: 1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7\n    State: Peer in Cluster (Connected)\n</code></pre>"},{"location":"Administrator-Guide/Thin-Arbiter-Volumes/","title":"Thin Arbiter volumes in gluster","text":"<p>Thin Arbiter is a new type of quorum node where granularity of what is good and what is bad data is less compared to the traditional arbiter brick. In this type of volume, quorum is taken into account at a brick level rather than per file basis. If there is even one file that is marked bad (i.e. needs healing) on a data brick, that brick is considered bad for all files as a whole. So, even different file, if the write fails on the other data brick but succeeds on this 'bad' brick we will return failure for the write.</p> <ul> <li>Thin Arbiter volumes in gluster</li> <li>Why Thin Arbiter?</li> <li>Setting UP Thin Arbiter Volume</li> <li>How Thin Arbiter works</li> </ul>"},{"location":"Administrator-Guide/Thin-Arbiter-Volumes/#why-thin-arbiter","title":"Why Thin Arbiter?","text":"<p>This is a solution for handling stretch cluster kind of workload, but it can be used for regular workloads as well in case users are satisfied with this kind of quorum in comparison to arbiter/3-way-replication. Thin arbiter node can be placed outside of trusted storage pool i.e, thin arbiter is the \"stretched\" node in the cluster. This node can be placed on cloud or anywhere even if that connection has high latency. As this node will take part only in case of failure (or a brick is down) and to decide the quorum, it will not impact the performance in normal cases. Cost to perform any file operation would be lesser than arbiter if everything is fine. I/O will only go to the data bricks and goes to thin-arbiter only in the case of first failure until heal completes.</p>"},{"location":"Administrator-Guide/Thin-Arbiter-Volumes/#setting-up-thin-arbiter-volume","title":"Setting UP Thin Arbiter Volume","text":"<p>The command to run thin-arbiter process on node:</p> <pre><code>/usr/local/sbin/glusterfsd -N --volfile-id ta-vol -f /var/lib/glusterd/vols/thin-arbiter.vol --brick-port 24007 --xlator-option ta-vol-server.transport.socket.listen-port=24007\n</code></pre> <p>Creating a thin arbiter replica 2 volume:</p> <pre><code>glustercli volume create &lt;volname&gt; --replica 2 &lt;host1&gt;:&lt;brick1&gt; &lt;host2&gt;:&lt;brick2&gt; --thin-arbiter &lt;quorum-host&gt;:&lt;path-to-store-replica-id-file&gt;\n</code></pre> <p>For example:</p> <pre><code>glustercli volume create testvol --replica 2 server{1..2}:/bricks/brick-{1..2} --thin-arbiter server-3:/bricks/brick_ta --force\nvolume create: testvol: success: please start the volume to access data\n</code></pre>"},{"location":"Administrator-Guide/Thin-Arbiter-Volumes/#how-thin-arbiter-works","title":"How Thin Arbiter works","text":"<p>There will be only one process running on thin arbiter node which will be used to update replica id file for all replica pairs across all volumes. Replica id file contains the information of good and bad data bricks in the form of xattrs. Replica pairs will use its respective replica-id file that is going to be created during mount.</p> <ol> <li> <p>Read Transactions:    Reads are allowed when quorum is met. i.e.</p> </li> <li> <p>When all data bricks and thin arbiter are up: Perform lookup on data bricks to figure out good/bad bricks and   serve content from the good brick.</p> </li> <li>When one brick is up: Fail FOP with EIO.</li> <li> <p>Two bricks are up:   If two data bricks are up, lookup is done on data bricks to figure out good/bad bricks and content will be served   from the good brick. One lookup is enough to figure out good/bad copy of that file and keep this in inode context.   If one data brick and thin arbiter brick are up, xattrop is done on thin arbiter to get information of source (good)   brick. If the data brick, which is UP, has also been marked as source brick on thin arbiter, lookup on this file is   done on the data brick to check if the file is really healthy or not. If the file is good, data will be served from   this brick else an EIO error would be returned to user.</p> </li> <li> <p>Write transactions:    Thin arbiter doesn\u2019t participate in I/O, transaction will choose to wind operations on thin-arbiter brick to    make sure the necessary metadata is kept up-to-date in case of failures. Operation failure will lead to    updating the replica-id file on thin-arbiter with source/sink information in the xattrs just how it happens in AFR.</p> </li> </ol>"},{"location":"Administrator-Guide/Trash/","title":"Trash Translator","text":"<p>Trash translator will allow users to access deleted or truncated files. Every brick will maintain a hidden .trashcan directory, which will be used to store the files deleted or truncated from the respective brick. The aggregate of all those .trashcan directories can be accessed from the mount point. To avoid name collisions, a timestamp is appended to the original file name while it is being moved to the trash directory.</p>"},{"location":"Administrator-Guide/Trash/#implications-and-usage","title":"Implications and Usage","text":"<p>Apart from the primary use-case of accessing files deleted or truncated by the user, the trash translator can be helpful for internal operations such as self-heal and rebalance. During self-heal and rebalance it is possible to lose crucial data. In those circumstances, the trash translator can assist in the recovery of the lost data. The trash translator is designed to intercept unlink, truncate and ftruncate fops, store a copy of the current file in the trash directory, and then perform the fop on the original file. For the internal operations, the files are stored under the 'internal_op' folder inside the trash directory.</p>"},{"location":"Administrator-Guide/Trash/#volume-options","title":"Volume Options","text":"<ul> <li><code>gluster volume set &lt;VOLNAME&gt; features.trash &lt;on/off&gt;</code></li> </ul> <p>This command can be used to enable a trash translator in a volume. If set to on, a trash directory will be created in every brick inside the volume during the volume start command. By default, a translator is loaded during volume start but remains non-functional. Disabling trash with the help of this option will not remove the trash directory or even its contents from the volume.</p> <ul> <li><code>gluster volume set &lt;VOLNAME&gt; features.trash-dir &lt;name&gt;</code></li> </ul> <p>This command is used to reconfigure the trash directory to a user-specified name. The argument is a valid directory name. The directory will be created inside every brick under this name. If not specified by the user, the trash translator will create the trash directory with the default name \u201c.trashcan\u201d. This can be used only when the trash-translator is on.</p> <ul> <li><code>gluster volume set &lt;VOLNAME&gt; features.trash-max-filesize &lt;size&gt;</code></li> </ul> <p>This command can be used to filter files entering the trash directory based on their size. Files above trash_max_filesize are deleted/truncated directly. Value for size may be followed by multiplicative suffixes as KB(=1024 bytes), MB(=1024*1024 bytes) ,and GB(=1024*1024*1024 bytes). The default size is set to 5MB.</p> <ul> <li><code>gluster volume set &lt;VOLNAME&gt; features.trash-eliminate-path &lt;path1&gt; [ , &lt;path2&gt; , . . . ]</code></li> </ul> <p>This command can be used to set the eliminate pattern for the trash translator. Files residing under this pattern will not be moved to the trash directory during deletion/truncation. The path must be a valid one present in the volume.</p> <ul> <li><code>gluster volume set &lt;VOLNAME&gt; features.trash-internal-op &lt;on/off&gt;</code></li> </ul> <p>This command can be used to enable trash for internal operations like self-heal and re-balance. By default set to off.</p>"},{"location":"Administrator-Guide/Trash/#sample-usage","title":"Sample usage","text":"<p>The following steps give illustrates a simple scenario of deletion of a file from a directory</p> <ol> <li> <p>Create a simple distributed volume and start it.</p> <pre><code>gluster volume create test rhs:/home/brick\ngluster volume start test\n</code></pre> </li> <li> <p>Enable trash translator</p> <pre><code>gluster volume set test features.trash on\n</code></pre> </li> <li> <p>Mount glusterfs volume via native client as follows.</p> <pre><code>mount -t glusterfs  rhs:test /mnt\n</code></pre> </li> <li> <p>Create a directory and file in the mount.</p> <pre><code>mkdir mnt/dir\necho abc &gt; mnt/dir/file\n</code></pre> </li> <li> <p>Delete the file from the mount.</p> <pre><code>rm mnt/dir/file -rf\n</code></pre> </li> <li> <p>Checkout inside the trash directory.</p> <pre><code>ls mnt/.trashcan\n</code></pre> </li> </ol> <p>We can find the deleted file inside the trash directory with a timestamp appending on its filename.</p> <p>For example,</p> <pre><code>mount -t glusterfs rh-host:/test /mnt/test\nmkdir /mnt/test/abc\ntouch /mnt/test/abc/file\nrm -f /mnt/test/abc/file\n\nls /mnt/test/abc\n\nls /mnt/test/.trashcan/abc/\n</code></pre> <p>You will see <code>file2014-08-21_123400</code> as the output of the last <code>ls</code> command.</p>"},{"location":"Administrator-Guide/Trash/#points-to-be-remembered","title":"Points to be remembered","text":"<ul> <li>As soon as the volume is started, the trash directory will be created inside the volume and will be visible through the mount. Disabling the trash will not have any impact on its visibility from the mount.</li> <li>Even though deletion of trash-directory is not permitted, currently residing trash contents will be removed on issuing delete on it and only an empty trash-directory exists.</li> </ul>"},{"location":"Administrator-Guide/Trash/#known-issue","title":"Known issue","text":"<p>Since trash translator resides on the server side higher translators like AFR, DHT are unaware of rename and truncate operations being done by this translator which eventually moves the files to trash directory. Unless and until a complete-path-based lookup comes on trashed files, those may not be visible from the mount.</p>"},{"location":"Administrator-Guide/Tuning-Volume-Options/","title":"Tuning Volume Options","text":"<p>You can tune volume options, as needed, while the cluster is online and available.</p> <p>Note</p> <p>It is recommended to set server.allow-insecure option to ON if there are too many bricks in each volume or if there are too many services which have already utilized all the privileged ports in the system. Turning this option ON allows ports to accept/reject messages from insecure ports. So, use this option only if your deployment requires it.</p> <p>Tune volume options using the following command:</p> <p><code># gluster volume set &lt;VOLNAME&gt; &lt;OPT-NAME&gt; &lt;OPT-VALUE&gt;</code></p> <p>For example, to specify the performance cache size for test-volume:</p> <pre><code># gluster volume set test-volume performance.cache-size 256MB\nSet volume successful\n</code></pre> <p>You can view the changed volume options using command:</p> <p><code># gluster volume info</code></p> <p>The following table lists the Volume options along with its description and default value:</p> <p>Note</p> <p>The default options given here are subject to modification at any given time and may not be the same for all versions.</p> Type Option Description Default Value Available Options auth.allow IP addresses of the clients which should be allowed to access the volume. * (allow all) Valid IP address which includes wild card patterns including *, such as 192.168.1.* auth.reject IP addresses of the clients which should be denied to access the volume. NONE (reject none) Valid IP address which includes wild card patterns including *, such as 192.168.2.* Cluster cluster.self-heal-window-size Specifies the maximum number of blocks per file on which self-heal would happen simultaneously. 1 0 - 1024 blocks cluster.data-self-heal-algorithm Specifies the type of self-heal. If you set the option as \"full\", the entire file is copied from source to destinations. If the option is set to \"diff\" the file blocks that are not in sync are copied to destinations. Reset uses a heuristic model. If the file does not exist on one of the subvolumes, or a zero-byte file exists (created by entry self-heal) the entire content has to be copied anyway, so there is no benefit from using the \"diff\" algorithm. If the file size is about the same as page size, the entire file can be read and written with a few operations, which will be faster than \"diff\" which has to read checksums and then read and write. reset full/diff/reset cluster.min-free-disk Specifies the percentage of disk space that must be kept free. Might be useful for non-uniform bricks 10% Percentage of required minimum free disk space cluster.min-free-inodes Specifies when system has only N% of inodes remaining, warnings starts to appear in log files 10% Percentage of required minimum free inodes cluster.stripe-block-size Specifies the size of the stripe unit that will be read from or written to. 128 KB (for all files) size in bytes cluster.self-heal-daemon Allows you to turn-off proactive self-heal on replicated On On/Off cluster.ensure-durability This option makes sure the data/metadata is durable across abrupt shutdown of the brick. On On/Off cluster.lookup-unhashed This option does a lookup through all the sub-volumes, in case a lookup didn\u2019t return any result from the hashed subvolume. If set to OFF, it does not do a lookup on the remaining subvolumes. on auto, yes/no, enable/disable, 1/0, on/off cluster.lookup-optimize This option enables the optimization of -ve lookups, by not doing a lookup on non-hashed subvolumes for files, in case the hashed subvolume does not return any result. This option disregards the lookup-unhashed setting, when enabled. on on/off cluster.randomize-hash-range-by-gfid Allows to use gfid of directory to determine the subvolume from which hash ranges are allocated starting with 0. Note that we still use a directory/file\u2019s name to determine the subvolume to which it hashes off on/off cluster.rebal-throttle Sets the maximum number of parallel file migrations allowed on a node during the rebalance operation. The default value is normal and allows 2 files to be migrated at a time. Lazy will allow only one file to be migrated at a time and aggressive will allow maxof[(((processing units) - 4) / 2), 4] normal lazy/normal/aggressive cluster.background-self-heal-count Specifies the number of per client self-heal jobs that can perform parallel heals in the background. 8 0-256 cluster.heal-timeout Time interval for checking the need to self-heal in self-heal-daemon 600 5-(signed-int) cluster.eager-lock If eager-lock is off, locks release immediately after file operations complete, improving performance for some operations, but reducing access efficiency on on/off cluster.quorum-type If value is \u201cfixed\u201d only allow writes if quorum-count bricks are present. If value is \u201cauto\u201d only allow writes if more than half of bricks, or exactly half including the first brick, are present none none/auto/fixed cluster.quorum-count If quorum-type is \u201cfixed\u201d only allow writes if this many bricks are present. Other quorum types will OVERWRITE this value null 1-(signed-int) cluster.heal-wait-queue-length Specifies the number of heals that can be queued for the parallel background self heal jobs. 128 0-10000 cluster.favorite-child-policy Specifies which policy can be used to automatically resolve split-brains without user intervention. \u201csize\u201d picks the file with the biggest size as the source. \u201cctime\u201d and \u201cmtime\u201d pick the file with the latest ctime and mtime respectively as the source. \u201cmajority\u201d picks a file with identical mtime and size in more than half the number of bricks in the replica. none none/size/ctime/mtime/majority cluster.use-anonymous-inode Setting this option heals directory renames efficiently no no/yes Disperse disperse.eager-lock If eager-lock is on, the lock remains in place either until lock contention is detected, or for 1 second in order to check if there is another request for that file from the same client. If eager-lock is off, locks release immediately after file operations complete, improving performance for some operations, but reducing access efficiency. on on/off disperse.other-eager-lock This option is equivalent to the disperse.eager-lock option but applicable only for non regular files. When multiple clients access a particular directory, disabling disperse.other-eager-lockoption for the volume can improve performance for directory access without compromising performance of I/O's for regular files. off on/off disperse.shd-max-threads Specifies the number of entries that can be self healed in parallel on each disperse subvolume by self-heal daemon. 1 1 - 64 disperse.shd-wait-qlength Specifies the number of entries that must be kept in the dispersed subvolume's queue for self-heal daemon threads to take up as soon as any of the threads are free to heal. This value should be changed based on how much memory self-heal daemon process can use for keeping the next set of entries that need to be healed. 1024 1 - 655536 disprse.eager-lock-timeout Maximum time (in seconds) that a lock on an inode is kept held if no new operations on the inode are received. 1 1-60 disperse.other-eager-lock-timeout It\u2019s equivalent to eager-lock-timeout option but for non regular files. 1 1-60 disperse.background-heals This option can be used to control number of parallel heals running in background. 8 0-256 disperse.heal-wait-qlength This option can be used to control number of heals that can wait 128 0-65536 disperse.read-policy inode-read fops happen only on \u2018k\u2019 number of bricks in n=k+m disperse subvolume. \u2018round-robin\u2019 selects the read subvolume using round-robin algo. \u2018gfid-hash\u2019 selects read subvolume based on hash of the gfid of that file/directory. gfid-hash round-robin/gfid-hash disperse.self-heal-window-size Maximum number blocks(128KB) per file for which self-heal process would be applied simultaneously. 1 1-1024 disperse.optimistic-change-log This option Set/Unset dirty flag for every update fop at the start of the fop. If OFF, this option impacts performance of entry or metadata operations as it will set dirty flag at the start and unset it at the end of ALL update fop. If ON and all the bricks are good, dirty flag will be set at the start only for file fops, For metadata and entry fops dirty flag will not be set at the start This does not impact performance for metadata operations and entry operation but has a very small window to miss marking entry as dirty in case it is required to be healed. on on/off disperse.parallel-writes This controls if writes can be wound in parallel as long as it doesn\u2019t modify same stripes on on/off disperse.stripe-cache This option will keep the last stripe of write fop in memory. If next write falls in this stripe, we need not to read it again from backend and we can save READ fop going over the network. This will improve performance, specially for sequential writes. However, this will also lead to extra memory consumption, maximum (cache size * stripe size) Bytes per open file 4 0-10 disperse.quorum-count This option can be used to define how many successes on the bricks constitute a success to the application. This count should be in the range [disperse-data-count, disperse-count] (inclusive) 0 0-(signedint) disperse.use-anonymous-inode Setting this option heals renames efficiently off on/off Logging diagnostics.brick-log-level Changes the log-level of the bricks INFO DEBUG/WARNING/ERROR/CRITICAL/NONE/TRACE diagnostics.client-log-level Changes the log-level of the clients. INFO DEBUG/WARNING/ERROR/CRITICAL/NONE/TRACE diagnostics.brick-sys-log-level Depending on the value defined for this option, log messages at and above the defined level are generated in the syslog and the brick log files. CRITICAL INFO/WARNING/ERROR/CRITICAL diagnostics.client-sys-log-level Depending on the value defined for this option, log messages at and above the defined level are generated in the syslog and the client log files. CRITICAL INFO/WARNING/ERROR/CRITICAL diagnostics.brick-log-format Allows you to configure the log format to log either with a message id or without one on the brick. with-msg-id no-msg-id/with-msg-id diagnostics.client-log-format Allows you to configure the log format to log either with a message ID or without one on the client. with-msg-id no-msg-id/with-msg-id diagnostics.brick-log-buf-size The maximum number of unique log messages that can be suppressed until the timeout or buffer overflow, whichever occurs first on the bricks. 5 0 and 20 (0 and 20 included) diagnostics.client-log-buf-size The maximum number of unique log messages that can be suppressed until the timeout or buffer overflow, whichever occurs first on the clients. 5 0 and 20 (0 and 20 included) diagnostics.brick-log-flush-timeout The length of time for which the log messages are buffered, before being flushed to the logging infrastructure (gluster or syslog files) on the bricks. 120 30 - 300 seconds (30 and 300 included) diagnostics.client-log-flush-timeout The length of time for which the log messages are buffered, before being flushed to the logging infrastructure (gluster or syslog files) on the clients. 120 30 - 300 seconds (30 and 300 included) Performance *features.trash Enable/disable trash translator off on/off *performance.readdir-ahead Enable/disable readdir-ahead translator in the volume off on/off *performance.read-ahead Enable/disable read-ahead translator in the volume off on/off *performance.io-cache Enable/disable io-cache translator in the volume off on/off performance.quick-read To enable/disable quick-read translator in the volume. on off/on performance.md-cache Enables and disables md-cache translator. off off/on performance.open-behind Enables and disables open-behind translator. on off/on performance.nl-cache Enables and disables nl-cache translator. off off/on performance.stat-prefetch Enables and disables stat-prefetch translator. on off/on performance.client-io-threads Enables and disables client-io-thread translator. on off/on performance.write-behind Enables and disables write-behind translator. on off/on performance.write-behind-window-size Size of the per-file write-behind buffer. 1MB Write-behind cache size performance.io-thread-count The number of threads in IO threads translator. 16 1-64 performance.flush-behind If this option is set ON, instructs write-behind translator to perform flush in background, by returning success (or any errors, if any of previous writes were failed) to application even before flush is sent to backend filesystem. On On/Off performance.cache-max-file-size Sets the maximum file size cached by the io-cache translator. Can use the normal size descriptors of KB, MB, GB,TB or PB (for example, 6GB). Maximum size uint64. 2 ^ 64 -1 bytes size in bytes performance.cache-min-file-size Sets the minimum file size cached by the io-cache translator. Values same as \"max\" above 0B size in bytes performance.cache-refresh-timeout The cached data for a file will be retained till 'cache-refresh-timeout' seconds, after which data re-validation is performed. 1s 0-61 performance.cache-size Size of the read cache. 32 MB size in bytes performance.lazy-open This option requires open-behind to be on. Perform an open in the backend only when a necessary FOP arrives (for example, write on the file descriptor, unlink of the file). When this option is disabled, perform backend open immediately after an unwinding open. Yes Yes/No performance.md-cache-timeout The time period in seconds which controls when metadata cache has to be refreshed. If the age of cache is greater than this time-period, it is refreshed. Every time cache is refreshed, its age is reset to 0. 1 0-600 seconds performance.nfs-strict-write-ordering Specifies whether to prevent later writes from overtaking earlier writes for NFS, even if the writes do not relate to the same files or locations. off on/off performance.nfs.flush-behind Specifies whether the write-behind translator performs flush operations in the background for NFS by returning (false) success to the application before flush file operations are sent to the backend file system. on on/off performance.nfs.strict-o-direct Specifies whether to attempt to minimize the cache effects of I/O for a file on NFS. When this option is enabled and a file descriptor is opened using the O_DIRECT flag, write-back caching is disabled for writes that affect that file descriptor. When this option is disabled, O_DIRECT has no effect on caching. This option is ignored if performance.write-behind is disabled. off on/off performance.nfs.write-behind-trickling-writes Enables and disables trickling-write strategy for the write-behind translator for NFS clients. on off/on performance.nfs.write-behind-window-size Specifies the size of the write-behind buffer for a single file or inode for NFS. 1 MB 512 KB - 1 GB performance.rda-cache-limit The value specified for this option is the maximum size of cache consumed by the readdir-ahead translator. This value is global and the total memory consumption by readdir-ahead is capped by this value, irrespective of the number/size of directories cached. 10MB 0-1GB performance.rda-request-size The value specified for this option will be the size of buffer holding directory entries in readdirp response. 128KB 4KB-128KB performance.resync-failed-syncs-after-fsync If syncing cached writes that were issued before an fsync operation fails, this option configures whether to reattempt the failed sync operations. off on/off performance.strict-o-direct Specifies whether to attempt to minimize the cache effects of I/O for a file. When this option is enabled and a file descriptor is opened using the O_DIRECT flag, write-back caching is disabled for writes that affect that file descriptor. When this option is disabled, O_DIRECT has no effect on caching. This option is ignored if performance.write-behind is disabled. on on/off performance.strict-write-ordering Specifies whether to prevent later writes from overtaking earlier writes, even if the writes do not relate to the same files or locations. on on/off performance.use-anonymous-fd This option requires open-behind to be on. For read operations, use anonymous file descriptor when the original file descriptor is open-behind and not yet opened in the backend. Yes No/Yes performance.write-behind-trickling-writes Enables and disables trickling-write strategy for the write-behind translator for FUSE clients. on off/on performance.write-behind-window-size Specifies the size of the write-behind buffer for a single file or inode. 1MB 512 KB - 1 GB features.read-only Enables you to mount the entire volume as read-only for all the clients (including NFS clients) accessing it. Off On/Off features.quota-deem-statfs When this option is set to on, it takes the quota limits into consideration while estimating the filesystem size. The limit will be treated as the total size instead of the actual size of filesystem. on on/off features.shard Enables or disables sharding on the volume. Affects files created after volume configuration. disable enable/disable features.shard-block-size Specifies the maximum size of file pieces when sharding is enabled. Affects files created after volume configuration. 64MB 4MB-4TB features.uss This option enable/disable User Serviceable Snapshots on the volume. off on/off geo-replication.indexing Use this option to automatically sync the changes in the filesystem from Primary to Secondary. Off On/Off network.frame-timeout The time frame after which the operation has to be declared as dead, if the server does not respond for a particular operation. 1800 (30 mins) 1800 secs network.ping-timeout The time duration for which the client waits to check if the server is responsive. When a ping timeout happens, there is a network disconnect between the client and server. All resources held by server on behalf of the client get cleaned up. When a reconnection happens, all resources will need to be re-acquired before the client can resume its operations on the server. Additionally, the locks will be acquired and the lock tables updated. This reconnect is a very expensive operation and should be avoided. 42 Secs 42 Secs nfs nfs.enable-ino32 For 32-bit nfs clients or applications that do not support 64-bit inode numbers or large files, use this option from the CLI to make Gluster NFS return 32-bit inode numbers instead of 64-bit inode numbers. Off On/Off nfs.volume-access Set the access type for the specified sub-volume. read-write read-write/read-only nfs.trusted-write If there is an UNSTABLE write from the client, STABLE flag will be returned to force the client to not send a COMMIT request. In some environments, combined with a replicated GlusterFS setup, this option can improve write performance. This flag allows users to trust Gluster replication logic to sync data to the disks and recover when required. COMMIT requests if received will be handled in a default manner by fsyncing. STABLE writes are still handled in a sync manner. Off On/Off nfs.trusted-sync All writes and COMMIT requests are treated as async. This implies that no write requests are guaranteed to be on server disks when the write reply is received at the NFS client. Trusted sync includes trusted-write behavior. Off On/Off nfs.export-dir This option can be used to export specified comma separated subdirectories in the volume. The path must be an absolute path. Along with path allowed list of IPs/hostname can be associated with each subdirectory. If provided connection will allowed only from these IPs. Format: \\&lt;dir&gt;[(hostspec[hostspec...])][,...]. Where hostspec can be an IP address, hostname or an IP range in CIDR notation. Note: Care must be taken while configuring this option as invalid entries and/or unreachable DNS servers can introduce unwanted delay in all the mount calls. No sub directory exported. Absolute path with allowed list of IP/hostname nfs.export-volumes Enable/Disable exporting entire volumes, instead if used in conjunction with nfs3.export-dir, can allow setting up only subdirectories as exports. On On/Off nfs.rpc-auth-unix Enable/Disable the AUTH_UNIX authentication type. This option is enabled by default for better interoperability. However, you can disable it if required. On On/Off nfs.rpc-auth-null Enable/Disable the AUTH_NULL authentication type. It is not recommended to change the default value for this option. On On/Off nfs.rpc-auth-allow\\&lt;IP- Addresses&gt; Allow a comma separated list of addresses and/or hostnames to connect to the server. By default, all clients are disallowed. This allows you to define a general rule for all exported volumes. Reject All IP address or Host name nfs.rpc-auth-reject\\&lt;IP- Addresses&gt; Reject a comma separated list of addresses and/or hostnames from connecting to the server. By default, all connections are disallowed. This allows you to define a general rule for all exported volumes. Reject All IP address or Host name nfs.ports-insecure Allow client connections from unprivileged ports. By default only privileged ports are allowed. This is a global setting in case insecure ports are to be enabled for all exports using a single option. Off On/Off nfs.addr-namelookup Turn-off name lookup for incoming client connections using this option. In some setups, the name server can take too long to reply to DNS queries resulting in timeouts of mount requests. Use this option to turn off name lookups during address authentication. Note, turning this off will prevent you from using hostnames in rpc-auth.addr.* filters. On On/Off nfs.register-with-portmap For systems that need to run multiple NFS servers, you need to prevent more than one from registering with portmap service. Use this option to turn off portmap registration for Gluster NFS. On On/Off nfs.port \\&lt;PORT- NUMBER&gt; Use this option on systems that need Gluster NFS to be associated with a non-default port number. NA 38465-38467 nfs.disable Turn-off volume being exported by NFS Off On/Off Server server.allow-insecure Allow client connections from unprivileged ports. By default only privileged ports are allowed. This is a global setting in case insecure ports are to be enabled for all exports using a single option. On On/Off server.statedump-path Location of the state dump file. tmp directory of the brick New directory path server.allow-insecure Allows FUSE-based client connections from unprivileged ports.By default, this is enabled, meaning that ports can accept and reject messages from insecure ports. When disabled, only privileged ports are allowed. on on/off server.anongid Value of the GID used for the anonymous user when root-squash is enabled. When root-squash is enabled, all the requests received from the root GID (that is 0) are changed to have the GID of the anonymous user. 65534 (this UID is also known as nfsnobody) 0 - 4294967295 server.anonuid Value of the UID used for the anonymous user when root-squash is enabled. When root-squash is enabled, all the requests received from the root UID (that is 0) are changed to have the UID of the anonymous user. 65534 (this UID is also known as nfsnobody) 0 - 4294967295 server.event-threads Specifies the number of event threads to execute in parallel. Larger values would help process responses faster, depending on available processing power. 2 1-1024 server.gid-timeout The time period in seconds which controls when cached groups has to expire. This is the cache that contains the groups (GIDs) where a specified user (UID) belongs to. This option is used only when server.manage-gids is enabled. 2 0-4294967295 seconds server.manage-gids Resolve groups on the server-side. By enabling this option, the groups (GIDs) a user (UID) belongs to gets resolved on the server, instead of using the groups that were send in the RPC Call by the client. This option makes it possible to apply permission checks for users that belong to bigger group lists than the protocol supports (approximately 93). off on/off server.root-squash Prevents root users from having root privileges, and instead assigns them the privileges of nfsnobody. This squashes the power of the root users, preventing unauthorized modification of files on the Red Hat Gluster Storage servers. This option is used only for glusterFS NFS protocol. off on/off server.statedump-path Specifies the directory in which the statedumpfiles must be stored. path to directory /var/run/gluster (for a default installation) Storage storage.health-check-interval Number of seconds between health-checks done on the filesystem that is used for the brick(s). Defaults to 30 seconds, set to 0 to disable. tmp directory of the brick New directory path storage.linux-io_uring Enable/Disable io_uring based I/O at the posix xlator on the bricks. Off On/Off storage.fips-mode-rchecksum If enabled, posix_rchecksum uses the FIPS compliant SHA256 checksum, else it uses MD5. on on/ off storage.create-mask Maximum set (upper limit) of permission for the files that will be created. 0777 0000 - 0777 storage.create-directory-mask Maximum set (upper limit) of permission for the directories that will be created. 0777 0000 - 0777 storage.force-create-mode Minimum set (lower limit) of permission for the files that will be created. 0000 0000 - 0777 storage.force-create-directory Minimum set (lower limit) of permission for the directories that will be created. 0000 0000 - 0777 storage.health-check-interval Sets the time interval in seconds for a filesystem health check. You can set it to 0 to disable. 30 seconds 0-4294967295 seconds storage.reserve To reserve storage space at the brick. This option accepts size in form of MB and also in form of percentage. If user has configured the storage.reserve option using size in MB earlier, and then wants to give the size in percentage, it can be done using the same option. Also, the newest set value is considered, if it was in MB before and then if it sent in percentage, the percentage value becomes new value and the older one is over-written 1 (1% of the brick size) 0-100 <p>Note</p> <p>We've found few performance xlators, options marked with * in above table have been causing more performance regression than improving. These xlators should be turned off for volumes.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/","title":"Arbiter volumes and quorum options in gluster","text":"<p>The arbiter volume is a special subset of replica volumes that is aimed at preventing split-brains and providing the same consistency guarantees as a normal replica 3 volume without consuming 3x space.</p> <ul> <li>Arbiter volumes and quorum options in gluster</li> <li>Arbiter configuration</li> <li>Arbiter brick(s) sizing</li> <li>Why Arbiter?</li> <li>Split-brains in replica volumes</li> <li>Server-quorum and some pitfalls</li> <li>Client Quorum</li> <li>Replica 2 and Replica 3 volumes</li> <li>How Arbiter works</li> </ul>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#arbiter-configuration","title":"Arbiter configuration","text":"<p>The syntax for creating the volume is:</p> <pre><code>gluster volume create &lt;VOLNAME&gt;  replica 2 arbiter 1 &lt;NEW-BRICK&gt; ...\n</code></pre> <p>Note: The earlier syntax used to be <code>replica 3 arbiter 1</code> but that was leading to confusions among users about the total no. of data bricks. For the sake of backward compatibility, the old syntax also works. In any case, the implied meaning is that there are 2 data bricks and 1 arbiter brick in a nx(2+1) arbiter volume.</p> <p>For example:</p> <pre><code>gluster volume create testvol replica 2 arbiter 1  server{1..6}:/bricks/brick\n</code></pre> <pre><code>volume create: testvol: success: please start the volume to access data\n</code></pre> <p>This means that for every 3 bricks listed, 1 of them is an arbiter. We have created 6 bricks. With a replica count of three, each 3rd brick in the series will be a replica subvolume. Since we have two sets of 3, this created a distribute subvolume made of up two replica subvolumes.</p> <p>Each replica subvolume is defined to have 1 arbiter out of the 3 bricks. The arbiter bricks are taken from the end of each replica subvolume.</p> <pre><code>gluster volume info\n</code></pre> <pre><code>Volume Name: testvol\nType: Distributed-Replicate\nVolume ID: ae6c4162-38c2-4368-ae5d-6bad141a4119\nStatus: Created\nNumber of Bricks: 2 x (2 + 1) = 6\nTransport-type: tcp\nBricks:\nBrick1: server1:/bricks/brick\nBrick2: server2:/bricks/brick\nBrick3: server3:/bricks/brick (arbiter)\nBrick4: server4:/bricks/brick\nBrick5: server5:/bricks/brick\nBrick6: server6:/bricks/brick (arbiter)\nOptions Reconfigured  :\ntransport.address-family: inet\nperformance.readdir-ahead: on\n</code></pre> <p>The arbiter brick will store only the file/directory names (i.e. the tree structure) and extended attributes (metadata) but not any data. i.e. the file size (as shown by <code>ls -l</code>) will be zero bytes. It will also store other gluster metadata like the <code>.glusterfs</code> folder and its contents.</p> <p>Note: Enabling the arbiter feature automatically configures client-quorum to 'auto'. This setting is not to be changed.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#arbiter-bricks-sizing","title":"Arbiter brick(s) sizing","text":"<p>Since the arbiter brick does not store file data, its disk usage will be considerably smaller than for the other bricks of the replica. The sizing of the brick will depend on how many files you plan to store in the volume. A good estimate will be 4KB times the number of files in the replica. Note that the estimate also depends on the inode space alloted by the underlying filesystem for a given disk size.</p> <p>The <code>maxpct</code> value in XFS for volumes of size 1TB to 50TB is only 5%. If you want to store say 300 million files, 4KB x 300M gives us 1.2TB. 5% of this is around 60GB. Assuming the recommended inode size of 512 bytes, that gives us the ability to store only 60GB/512 ~= 120 million files. So it is better to choose a higher <code>maxpct</code> value (say 25%) while formatting an XFS disk of size greater than 1TB. Refer the man page of <code>mkfs.xfs</code> for details.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#why-arbiter","title":"Why Arbiter?","text":""},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#split-brains-in-replica-volumes","title":"Split-brains in replica volumes","text":"<p>When a file is in split-brain, there is an inconsistency in either data or metadata (permissions, uid/gid, extended attributes etc.) of the file amongst the bricks of a replica and we do not have enough information to authoritatively pick a copy as being pristine and heal to the bad copies, despite all bricks being up and online. For directories, there is also an entry-split brain where a file inside it has different gfids/ file-type (say one is a file and another is a directory of the same name) across the bricks of a replica.</p> <p>This document describes how to resolve files that are in split-brain using gluster cli or the mount point. Almost always, split-brains occur due to network disconnects (where a client temporarily loses connection to the bricks) and very rarely due to the gluster brick processes going down or returning an error.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#server-quorum-and-some-pitfalls","title":"Server-quorum and some pitfalls","text":"<p>This document provides a detailed description of this feature. The volume options for server-quorum are:</p> <p>Option: cluster.server-quorum-ratio Value Description: 0 to 100</p> <p>Option: cluster.server-quorum-type Value Description: none | server If set to server, this option enables the specified volume to participate in the server-side quorum. If set to none, that volume alone is not considered for volume checks.</p> <p>The cluster.server-quorum-ratio is a percentage figure and is cluster wide- i.e. you cannot have different ratio for different volumes in the same trusted pool.</p> <p>For a two-node trusted storage pool, it is important to set this value greater than 50%, so that two nodes separated from each other do not believe they have quorum simultaneously. For a two-node plain replica volume, this would mean both nodes need to be up and running. So there is no notion of HA/failover.</p> <p>There are users who create a <code>replica 2</code> volume from 2 nodes and peer-probe a 'dummy' node without bricks and enable server quorum with a ratio of 51%. This does not prevent files from getting into split-brain. For example, if B1 and B2 are the bricks/nodes of the replica and B3 is the dummy node, we can still end up in split-brain like so:</p> <ol> <li>B1 goes down, B2 and B3 are up. Server-quorum is still. File is modified    by the client.</li> <li>B2 goes down, B1 comes back up. Server-quorum is met. Same file is modified    by the client.</li> <li>We now have different contents for the file in B1 and B2 ==&gt;split-brain.</li> </ol> <p>In author\u2019s opinion, server-quorum is useful if you want to avoid split-brains to the volume(s) configuration across the nodes and not in the I/O path. Unlike in client-quorum where the volume becomes read-only when quorum is lost, loss of server-quorum in a particular node makes glusterd kill the brick processes on that node (for the participating volumes) making even reads impossible.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#client-quorum","title":"Client Quorum","text":"<p>Client-quorum is a feature implemented in AFR to prevent split-brains in the I/O path for replicate/distributed-replicate volumes. By default, if the client-quorum is not met for a particular replica subvol, it becomes unavailable. The other subvols (in a dist-rep volume) will still have R/W access.</p> <p>The following volume set options are used to configure it:</p> <p>Option: cluster.quorum-type Default Value: none Value Description: none|auto|fixed If set to \"fixed\", this option allows writes to a file only if the number of active bricks in that replica set (to which the file belongs) is greater than or equal to the count specified in the 'quorum-count' option. If set to \"auto\", this option allows write to the file only if number of bricks that are up &gt;= ceil (of the total number of bricks that constitute that replica/2). If the number of replicas is even, then there is a further check: If the number of up bricks is exactly equal to n/2, then the first brick must be one of the bricks that are up. If it is more than n/2 then it is not necessary that the first brick is one of the up bricks.</p> <p>Option: cluster.quorum-count Value Description: The number of bricks that must be active in a replica-set to allow writes. This option is used in conjunction with cluster.quorum-type =fixed option to specify the number of bricks to be active to participate in quorum. If the quorum-type is auto then this option has no significance.</p> <p>Earlier, when quorm was not met, the replica subvolume turned read-only. But since glusterfs-3.13 and upwards, the subvolume becomes unavailable, i.e. all the file operations fail with ENOTCONN error instead of becoming EROFS. This means the <code>cluster.quorum-reads</code> volume option is also not supported.</p>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#replica-2-and-replica-3-volumes","title":"Replica 2 and Replica 3 volumes","text":"<p>From the above descriptions, it is clear that client-quorum cannot really be applied to a <code>replica 2</code> volume (without costing HA). If the quorum-type is set to auto, then by the description given earlier, the first brick must always be up, irrespective of the status of the second brick. IOW, if only the second brick is up, the subvol returns ENOTCONN, i.e. no HA. If quorum-type is set to fixed, then the quorum-count has to be two to prevent split-brains (otherwise a write can succeed in brick1, another in brick2 =&gt;split-brain). So for all practical purposes, if you want high availability in a <code>replica 2</code> volume, it is recommended not to enable client-quorum.</p> <p>In a <code>replica 3</code> volume, client-quorum is enabled by default and set to 'auto'. This means 2 bricks need to be up for the write to succeed. Here is how this configuration prevents files from ending up in split-brain:</p> <p>Say B1, B2 and B3 are the bricks:</p> <ol> <li>B3 is down, quorum is met, write happens on file B1 and B2.</li> <li>B3 comes up, B2 is down, quorum is again met, write happens on B1 and B3.</li> <li>B2 comes up, B1 goes down, quorum is met. Now when a write is issued, AFR sees    that B2 and B3's pending xattrs blame each other and therefore the write is not    allowed and is failed with ENOTCONN.</li> </ol>"},{"location":"Administrator-Guide/arbiter-volumes-and-quorum/#how-arbiter-works","title":"How Arbiter works","text":"<p>There are 2 components to the arbiter volume. One is the arbiter xlator that is loaded in the brick process of every 3rd (i.e. the arbiter) brick. The other is the arbitration logic itself that is present in AFR (the replicate xlator) loaded on the clients.</p> <p>The former acts as a sort of 'filter' translator for the FOPS- i.e. it allows entry operations to hit POSIX, blocks certain inode operations like read (unwinds the call with ENOTCONN) and unwinds other inode operations like write, truncate etc. with success without winding it down to POSIX.</p> <p>The latter i.e. the arbitration logic present in AFR takes full file locks when writing to a file, just like in normal replica volumes. The behavior of arbiter volumes in allowing/failing write FOPS in conjunction with client-quorum can be summarized in the below steps:</p> <ul> <li> <p>If all 3 bricks are up (happy case), then there is no issue and the FOPs are allowed.</p> </li> <li> <p>If 2 bricks are up and if one of them is the arbiter (i.e. the 3rd brick) and   it blames the other up brick for a given file, then all write FOPS will fail   with ENOTCONN. This is because, in this scenario, the only true copy is on the   brick that is down. Hence we cannot allow writes until that brick is also up.   If the arbiter doesn't blame the other brick, FOPS will be allowed to proceed.   'Blaming' here is w.r.t the values of AFR changelog extended attributes.</p> </li> <li> <p>If 2 bricks are up and the arbiter is down, then FOPS will be allowed.   When the arbiter comes up, the entry/metadata heals to it happen. Of course data   heals are not needed.</p> </li> <li> <p>If only one brick is up, then client-quorum is not met and the volume returns ENOTCONN.</p> </li> <li> <p>In all cases, if there is only one source before the FOP is initiated   (even if all bricks are up) and if the FOP fails on that source, the   application will receive ENOTCONN. For example, assume that a write failed on B2   and B3, i.e. B1 is the only source. Now if for some reason, the second write   failed on B1 (before there was a chance for selfheal to complete despite all brick   being up), the application would receive failure (ENOTCONN) for that write.</p> </li> </ul> <p>The bricks being up or down described above does not necessarily mean the brick process is offline. It can also mean the mount lost the connection to the brick due to network disconnects etc.</p>"},{"location":"Administrator-Guide/formatting-and-mounting-bricks/","title":"Formatting and Mounting Bricks","text":""},{"location":"Administrator-Guide/formatting-and-mounting-bricks/#formatting-and-mounting-bricks","title":"Formatting and Mounting Bricks","text":""},{"location":"Administrator-Guide/formatting-and-mounting-bricks/#creating-a-thinly-provisioned-logical-volume","title":"Creating a Thinly Provisioned Logical Volume","text":"<p>To create a thinly provisioned logical volume, proceed with the following steps:</p> <ol> <li> <p>Create a physical volume(PV) by using the pvcreate command.     For example:</p> <pre><code>pvcreate --dataalignment 128K /dev/sdb\n</code></pre> <p>Here, /dev/sdb is a storage device. Use the correct dataalignment option based on your device.</p> <p>Note: The device name and the alignment value will vary based on the device you are using.</p> </li> <li> <p>Create a Volume Group (VG) from the PV using the vgcreate command:     For example:</p> <pre><code>vgcreate --physicalextentsize 128K gfs_vg /dev/sdb\n</code></pre> <p>It is recommended that only one VG must be created from one storage device.</p> </li> <li> <p>Create a thin-pool using the following commands:</p> <ol> <li> <p>Create an LV to serve as the metadata device using the following command:</p> <pre><code>lvcreate -L metadev_sz --name metadata_device_name VOLGROUP\n</code></pre> <p>For example:</p> <pre><code>lvcreate -L 16776960K --name gfs_pool_meta gfs_vg\n</code></pre> </li> <li> <p>Create an LV to serve as the data device using the following command:</p> <pre><code>lvcreate -L datadev_sz --name thin_pool VOLGROUP`\n</code></pre> <p>For example:</p> <pre><code>lvcreate -L 536870400K --name gfs_pool gfs_vg\n</code></pre> </li> <li> <p>Create a thin pool from the data LV and the metadata LV using the following command:</p> <pre><code>lvconvert --chunksize STRIPE_WIDTH --thinpool VOLGROUP/thin_pool --poolmetadata VOLGROUP/metadata_device_name\n</code></pre> <p>For example:</p> <pre><code>lvconvert --chunksize 1280K --thinpool gfs_vg/gfs_pool --poolmetadata gfs_vg/gfs_pool_meta\n</code></pre> <p>Note: By default, the newly provisioned chunks in a thin pool are zeroed to prevent data leaking between different block devices.</p> <pre><code>lvchange --zero n VOLGROUP/thin_pool\n</code></pre> <p>For example:</p> <pre><code>lvchange --zero n gfs_vg/gfs_pool\n</code></pre> </li> </ol> </li> <li> <p>Create a thinly provisioned volume from the previously created pool using the lvcreate command:</p> <p>For example:</p> <pre><code>lvcreate -V 1G -T gfs_vg/gfs_pool -n gfs_lv\n</code></pre> <p>It is recommended that only one LV should be created in a thin pool.</p> <p>Format bricks using the supported XFS configuration, mount the bricks, and verify the bricks are mounted correctly.</p> <p>Run <code>mkfs.xfs -f -i size=512 -n size=8192 -d su=128k,sw=10 DEVICE</code> to format the bricks to the supported XFS file system format. Here, DEVICE is the thin LV(here /dev/gfs_vg/gfs_lv). The inode size is set to 512 bytes to accommodate for the extended attributes used by GlusterFS.</p> <p>Run <code>mkdir /mountpoint</code> to create a directory to link the brick to.</p> <p>Add an entry in /etc/fstab:</p> <pre><code>/dev/gfs_vg/gfs_lv    /mountpoint  xfs rw,inode64,noatime,nouuid      1 2\n</code></pre> <p>Run <code>mount /mountpoint</code> to mount the brick.</p> <p>Run the <code>df -h</code> command to verify the brick is successfully mounted:</p> <pre><code># df -h\n/dev/gfs_vg/gfs_lv   16G  1.2G   15G   7% /exp1\n</code></pre> </li> </ol>"},{"location":"Administrator-Guide/io_uring/","title":"io_uring support in gluster","text":"<p>io_uring is an asynchronous I/O interface similar to linux-aio, but aims to be more performant. Refer https://kernel.dk/io_uring.pdf and https://kernel-recipes.org/en/2019/talks/faster-io-through-io_uring for more details.</p> <p>Incorporating io_uring in various layers of gluster is an ongoing activity but beginning with glusterfs-9.0, support has been added to the posix translator via the <code>storage.linux-io_uring</code> volume option. When this option is enabled, the posix translator in the glusterfs brick process (at the server side) will use io_uring calls for reads, writes and fsyncs as opposed to the normal pread/pwrite based syscalls.</p>"},{"location":"Administrator-Guide/io_uring/#example","title":"Example:","text":"<pre><code># gluster volume set testvol storage.linux-io_uring on\nvolume set: success\n\n# gluster volume set testvol storage.linux-io_uring off\nvolume set: success\n</code></pre> <p>This option can be enabled/disabled only when the volume is not running. i.e. you can toggle the option when the volume is <code>Created</code> or is <code>Stopped</code> as indicated in <code>gluster volume status $VOLNAME</code></p>"},{"location":"Administrator-Guide/overview/","title":"Overview","text":""},{"location":"Administrator-Guide/overview/#overview","title":"Overview","text":"<p>The Administration guide covers day to day management tasks as well as advanced configuration methods for your Gluster setup.</p> <p>You can manage your Gluster cluster using the Gluster CLI</p> <p>See the glossary for an explanation of the various terms used in this document.</p>"},{"location":"Administrator-Guide/setting-up-storage/","title":"Setting Up Storage","text":"<p>A volume is a logical collection of bricks where each brick is an export directory on a server in the trusted storage pool. Before creating a volume, you need to set up the bricks that will form the volume.</p> <ul> <li>Brick Naming Conventions</li> <li>Formatting and Mounting Bricks</li> <li>Posix ACLS</li> </ul>"},{"location":"CLI-Reference/cli-main/","title":"Overview","text":""},{"location":"CLI-Reference/cli-main/#gluster-command-line-interface","title":"Gluster Command Line Interface","text":""},{"location":"CLI-Reference/cli-main/#overview","title":"Overview","text":"<p>Use the Gluster CLI to setup and manage your Gluster cluster from a terminal. You can run the Gluster CLI on any Gluster server either by invoking the commands or by running the Gluster CLI in interactive mode. You can also use the gluster command remotely using SSH.</p> <p>The gluster CLI syntax is <code>gluster &lt;command&gt;</code>.</p> <p>To run a command directly:</p> <pre><code>gluster &lt;command&gt;\n</code></pre> <p>For example, to view the status of all peers:</p> <pre><code>gluster peer status\n</code></pre> <p>To run a command in interactive mode, start a gluster shell by typing:</p> <pre><code>gluster\n</code></pre> <p>This will open a gluster command prompt. You now run the command at the prompt.</p> <pre><code>gluster&gt; &lt;command&gt;\n</code></pre> <p>For example, to view the status of all peers,</p> <pre><code>gluster&gt; peer status\n</code></pre>"},{"location":"CLI-Reference/cli-main/#peer-commands","title":"Peer Commands","text":"<p>The peer commands are used to manage the Trusted Server Pool (TSP).</p> Command Syntax Description peer probe peer probe server Add server to the TSP peer detach peer detach server Remove server from the TSP peer status peer status Display the status of all nodes in the TSP pool list pool list List all nodes in the TSP"},{"location":"CLI-Reference/cli-main/#volume-commands","title":"Volume Commands","text":"<p>The volume commands are used to setup and manage Gluster volumes.</p> Command Syntax Description volume create volume create volname  [options] bricks Create a volume called volname using the specified bricks with the configuration specified by options volume start volume start volname  [force] Start volume volname volume stop volume stop volname Stop volume volname volume info volume info [volname] Display volume info for volname if provided, else for all volumes on the TSP volume status volumes status[volname] Display volume status for volname if provided, else for all volumes on the TSP volume list volume list List all volumes in the TSP volume set volume set volname option value Set option to value for volname volume get volume get volname &lt;option|all&gt; Display the value of option (if specified)for volname , or all options otherwise volume add-brick volume add-brick brick-1 ... brick-n Expand volname to include the bricks brick-1 to brick-n volume remove-brick volume remove-brick brick-1 ... brick-n \\&lt;start|stop|status|commit|force&gt; Shrink volname by removing the bricks brick-1 to brick-n . start will trigger a rebalance to migrate data from the removed bricks. stop will stop an ongoing remove-brick operation. force will remove the bricks immediately and any data on them will no longer be accessible from Gluster clients. volume replace-brick volume replace-brick volname old-brick new-brick Replace old-brick of volname with new-brick volume delete volume delete volname Delete volname <p>For additional detail of all the available CLI commands, please refer to <code>man gluster</code> output.</p>"},{"location":"Contributors-Guide/Adding-your-blog/","title":"Adding your gluster blog","text":""},{"location":"Contributors-Guide/Adding-your-blog/#adding-your-blog","title":"Adding your blog","text":"<p>As a developer/user, you have blogged about gluster and want to share the post to Gluster community.</p> <p>OK, you can do that by editing planet-gluster feeds on Github.</p> <p>Please find instructions mentioned in the file and send a pull request.</p> <p>Once approved, all your gluster related posts will appear in planet.gluster.org website.</p>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/","title":"Bug reporting guidelines","text":""},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#before-filing-an-issue","title":"Before filing an issue","text":"<p>If you are finding any issues, these preliminary checks as useful:</p> <ul> <li>Is SELinux enabled? (you can use <code>getenforce</code> to check)</li> <li>Are iptables rules blocking any data traffic? (<code>iptables -L</code> can   help check)</li> <li>Are all the nodes reachable from each other? [ Network problem ]</li> <li> <p>Please search issues   to see if the bug has already been reported</p> <ul> <li>If an issue has been already filed for a particular release and you found the issue in another release, add a comment in issue.</li> </ul> </li> </ul> <p>Anyone can search in github issues, you don't need an account. Searching requires some effort, but helps avoid duplicates, and you may find that your problem has already been solved.</p>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#reporting-an-issue","title":"Reporting An Issue","text":"<ul> <li>You should have an account with github.com</li> <li>Here is the link to file an issue:   Github</li> </ul> <p>Note: Please go through all below sections to understand what information we need to put in a bug. So it will help the developer to root cause and fix it</p>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#required-information","title":"Required Information","text":"<p>You should gather the information below before creating the bug report.</p>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#package-information","title":"Package Information","text":"<ul> <li>Location from which the packages are used</li> <li>Package Info - version of glusterfs package installed</li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#cluster-information","title":"Cluster Information","text":"<ul> <li>Number of nodes in the cluster</li> <li> <p>Hostnames and IPs of the gluster Node [if it is not a security   issue]</p> <ul> <li>Hostname / IP will help developers in understanding &amp; correlating with the logs</li> </ul> </li> <li> <p>Output of <code>gluster peer status</code></p> </li> <li> <p>Node IP, from which the \"x\" operation is done</p> <ul> <li>\"x\" here means any operation that causes the issue</li> </ul> </li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#volume-information","title":"Volume Information","text":"<ul> <li>Number of volumes</li> <li>Volume Names</li> <li>Volume on which the particular issue is seen [ if applicable ]</li> <li>Type of volumes</li> <li>Volume options if available</li> <li>Output of <code>gluster volume info</code></li> <li>Output of <code>gluster volume status</code></li> <li>Get the statedump of the volume with the problem <code>gluster volume statedump &lt;vol-name&gt;</code></li> </ul> <p>This dumps statedump per brick process in <code>/var/run/gluster</code></p> <p>NOTE: Collect statedumps from one gluster Node in a directory.</p> <p>Repeat it in all Nodes containing the bricks of the volume. All the so collected directories could be archived, compressed and attached to bug</p>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#brick-information","title":"Brick Information","text":"<ul> <li> <p>xfs options when a brick partition was done</p> <ul> <li>This could be obtained with this command: <code>xfs_info /dev/mapper/vg1-brick</code></li> </ul> </li> <li> <p>Extended attributes on the bricks</p> <ul> <li>This could be obtained with this command: <code>getfattr -d -m. -ehex /rhs/brick1/b1</code></li> </ul> </li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#client-information","title":"Client Information","text":"<ul> <li>OS Type ( Ubuntu, Fedora, RHEL )</li> <li>OS Version: In case of Linux distro get the following :</li> </ul> <pre><code>uname -r\ncat /etc/issue\n</code></pre> <ul> <li>Fuse or NFS Mount point on the client with output of mount commands</li> <li>Output of <code>df -Th</code> command</li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#tool-information","title":"Tool Information","text":"<ul> <li>If any tools are used for testing, provide the info/version about it</li> <li>if any IO is simulated using a script, provide the script</li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#logs-information","title":"Logs Information","text":"<ul> <li> <p>You can check logs for issues/warnings/errors.</p> <ul> <li>Self-heal logs</li> <li>Rebalance logs</li> <li>Glusterd logs</li> <li>Brick logs</li> <li>NFS logs (if applicable)</li> <li>Samba logs (if applicable)</li> <li>Client mount log</li> </ul> </li> <li> <p>Add the entire logs as attachment, if its very large to paste as a   comment</p> </li> </ul>"},{"location":"Contributors-Guide/Bug-Reporting-Guidelines/#sos-report-for-centosfedora","title":"SOS report for CentOS/Fedora","text":"<ul> <li>Get the sosreport from the involved gluster Node and Client [ in   case of CentOS /Fedora ]</li> <li>Add a meaningful name/IP to the sosreport, by renaming/adding   hostname/ip to the sosreport name</li> </ul>"},{"location":"Contributors-Guide/Bug-Triage/","title":"Issues Triage Guidelines","text":"<ul> <li> <p>Triaging of issues is an important task; when done correctly, it can   reduce the time between reporting an issue and the availability of a   fix enormously.</p> </li> <li> <p>Triager should focus on new issues, and try to define the problem   easily understandable and as accurate as possible. The goal of the   triagers is to reduce the time that developers need to solve the bug   report.</p> </li> <li> <p>A triager is like an assistant that helps with the information   gathering and possibly the debugging of a new bug report. Because a   triager helps preparing a bug before a developer gets involved, it   can be a very nice role for new community members that are   interested in technical aspects of the software.</p> </li> <li> <p>Triagers will stumble upon many different kind of issues, ranging   from reports about spelling mistakes, or unclear log messages to   memory leaks causing crashes or performance issues in environments   with several hundred storage servers.</p> </li> </ul> <p>Nobody expects that triagers can prepare all bug reports. Therefore most developers will be able to assist the triagers, answer questions and suggest approaches to debug and data to gather. Over time, triagers get more experienced and will rely less on developers.</p> <p>Issue triage can be summarized as below points:</p> <ul> <li>Is the issue a bug? an enhancement request? or a question? Assign the relevant label.</li> <li>Is there enough information in the issue description?</li> <li>Is it a duplicate issue?</li> <li>Is it assigned to correct component of GlusterFS?</li> <li>Is the bug summary is correct?</li> <li>Assigning issue or Adding people's github handle in the comment, so they get notified.</li> </ul> <p>The detailed discussion about the above points are below.</p>"},{"location":"Contributors-Guide/Bug-Triage/#is-there-enough-information","title":"Is there enough information?","text":"<p>It's hard to generalize what makes a good report. For \"average\" reporters is definitely often helpful to have good steps to reproduce, GlusterFS software version , and information about the test/production environment, Linux/GNU distribution.</p> <p>If the reporter is a developer, steps to reproduce can sometimes be omitted as context is obvious. However, this can create a problem for contributors that need to find their way, hence it is strongly advised to list the steps to reproduce an issue.</p> <p>Other tips:</p> <ul> <li> <p>There should be only one issue per report. Try not to mix related or   similar looking bugs per report.</p> </li> <li> <p>It should be possible to call the described problem fixed at some   point. \"Improve the documentation\" or \"It runs slow\" could never be   called fixed, while \"Documentation should cover the topic Embedding\"   or \"The page at http://en.wikipedia.org/wiki/Example should load   in less than five seconds\" would have a criterion. A good summary of   the bug will also help others in finding existing bugs and prevent   filing of duplicates.</p> </li> <li> <p>If the bug is a graphical problem, you may want to ask for a   screenshot to attach to the bug report. Make sure to ask that the   screenshot should not contain any confidential information.</p> </li> </ul>"},{"location":"Contributors-Guide/Bug-Triage/#is-it-a-duplicate","title":"Is it a duplicate?","text":"<p>If you think that you have found a duplicate but you are not totally sure, just add a comment like \"This issue looks related to issue #NNN\" (and replace NNN by issue-id) so somebody else can take a look and help judging.</p>"},{"location":"Contributors-Guide/Bug-Triage/#is-it-assigned-with-correct-label","title":"Is it assigned with correct label?","text":"<p>Go through the labels and assign the appropriate label</p>"},{"location":"Contributors-Guide/Bug-Triage/#are-the-fields-correct","title":"Are the fields correct?","text":""},{"location":"Contributors-Guide/Bug-Triage/#description","title":"Description","text":"<p>Sometimes the description does not summarize the bug itself well. You may want to update the bug summary to make the report distinguishable. A good title may contain:</p> <ul> <li>A brief explanation of the root cause (if it was found)</li> <li>Some of the symptoms people are experiencing</li> </ul>"},{"location":"Contributors-Guide/Bug-Triage/#assigning-issue-or-adding-peoples-github-handle-in-the-comment","title":"Assigning issue or Adding people's github handle in the comment","text":"<p>Normally, developers and potential assignees of an area are already watching all the issues by default, but sometimes reports describe general issues. Only if you know developers who work in the area covered by the issue, and if you know that these developers accept getting CCed or assigned to certain reports, you can mention in comment or even assign the bug report to her/him.</p> <p>To get an idea who works in which area, check to know component owners, you can check the \"MAINTAINERS\" file in root of glusterfs code directory (see Simplified dev workflow)</p>"},{"location":"Contributors-Guide/Bug-Triage/#bugs-present-in-multiple-versions","title":"Bugs present in multiple Versions","text":"<p>During triaging you might come across a particular bug which is present across multiple version of GlusterFS. Add that in comment.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/","title":"Release Process for GlusterFS","text":"<p>The GlusterFS release process aims to provide regular, stable releases, with the ability to also ship new features quickly, while also attempting to reduce the complexity for release maintainers.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#glusterfs-releases","title":"GlusterFS releases","text":"<p>GlusterFS Major releases happen once every 4-6 months. Check Release Schedule for more information on the schedule for major releases. Minor releases happen every month for corresponding branch of major release. Each major release is supported till we have N+2 version is made available.</p> <p>Major releases don't guarantee complete backwards compatability with the previous major release.</p> <p>Minor releases will have guaranteed backwards compatibilty with earlier minor releases of the same branch.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#glusterfs-major-release","title":"GlusterFS major release","text":"<p>Each GlusterFS major release has a 4-6 month release window, in which changes get merged. This window is split into two phases.</p> <ol> <li>A Open phase, where all changes get merged</li> <li>A Stability phase, where only changes that stabilize the release get merged.</li> </ol> <p>The first 2-4 months of a release window will be the Open phase, and the last month will be the stability phase.</p> <p>The release engineer (or team doing the release) is responsible for messaging.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#open-phase","title":"Open phase","text":"<p>Any changes are accepted during this phase. New features that are introduced in this phase, need to be capable of being selectively built. All changes in the master branch are automatically incuded in the next release.</p> <p>All changes will be accepted during the Open phase. The changes have a few requirements,</p> <ul> <li>a change fixing a bug SHOULD have public test case</li> <li>a change introducing a new feature MUST have a disable switch that can disable the feature during a build</li> </ul>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#stability-phase","title":"Stability phase","text":"<p>This phase is used to stabilize any new features introduced in the open phase, or general bug fixes for already existing features.</p> <p>A new <code>release-&lt;version&gt;</code> branch is created at the beginning of this phase. All changes need to be sent to the master branch before getting backported to the new release branch.</p> <p>No new features will be merged in this phase. At the end of this phase, any new feature introduced that hasn't been declared stable will be disabled, if possible removed, to prevent confusion and set clear expectations towards users and developers.</p> <p>Patches accepted in the Stability phase have the following requirements:</p> <ul> <li>a change MUST fix an issue that users have reported or are very likely to hit</li> <li>each change SHOULD have a public test-case (.t or DiSTAF)</li> <li>a change MUST NOT add a new FOP</li> <li>a change MUST NOT add a new xlator</li> <li>a change SHOULD NOT add a new volume option, unless a public discussion was kept and several maintainers agree that this is the only right approach</li> <li>a change MAY add new values for existing volume options, these need to be documented in the release notes and be marked as a 'minor feature enhancement' or similar</li> <li>it is NOT RECOMMENDED to modify the contents of existing log messages, automation and log parsers can depend on the phrasing</li> <li>a change SHOULD NOT have more than approx. 100 lines changed, additional public discussion and agreement among maintainers is required to get big changes approved</li> <li>a change SHOULD NOT modify existing structures or parameters that get sent over the network, unless a public discussion was kept and several maintainers agree that this is the only right approach</li> <li>existing structures or parameters MAY get extended with additional values (i.e. new flags in a bitmap/mask) if the extensions are optional and do not affect older/newer client/server combinations</li> </ul> <p>Patches that do not satisfy the above requirements can still be submitted for review, but cannot be merged.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#release-procedure","title":"Release procedure","text":"<p>This procedure is followed by a release maintainer/manager, to perform the actual release.</p> <p>The release procedure for both major releases and minor releases is nearly the same.</p> <p>The procedure for the major releases starts at the beginning of the Stability phase, and for the minor release at the start of the release window.</p> <p>TODO: Add the release verification procedure</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#release-steps","title":"Release steps","text":"<p>The release-manager needs to follow the following steps, to actually perform the release once ready.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#create-tarball","title":"Create tarball","text":"<ol> <li>Add the release-notes to the docs/release-notes/ directory in the sources</li> <li>after merging the release-notes, create a tag like v3.6.2</li> <li>push the tag to git.gluster.org</li> <li>create the tarball with the release job in Jenkins</li> </ol>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#notify-packagers","title":"Notify packagers","text":"<p>Notify the packagers that we need packages created. Provide the link to the source tarball from the Jenkins release job to the packagers mailinglist. A list of the people involved in the package maintenance for the different distributions is in the <code>MAINTAINERS</code> file in the sources, all of them should be subscribed to the packagers mailinglist.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#create-a-new-tracker-bug-for-the-next-release","title":"Create a new Tracker Bug for the next release","text":"<p>The tracker bugs are used as guidance for blocker bugs and should get created when a release is made. To create one</p> <ul> <li>Create a new milestone</li> <li>base the contents on open issues, like the one for glusterfs-8</li> <li>issues that were not fixed in previous release, but in milestone should be moved to the new milestone.</li> </ul>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#create-release-announcement","title":"Create Release Announcement","text":"<p>(Major releases) The Release Announcement is based off the release notes. This needs to indicate:</p> <ul> <li>What this release's overall focus is</li> <li>Which versions will stop receiving updates as of this release</li> <li>Links to the direct download folder</li> <li>Feature set</li> </ul> <p>Best practice as of version-8 is to create a collaborative version of the release notes that both the release manager and community lead work on together, and the release manager posts to the mailing lists (gluster-users@, gluster-devel@, announce@).</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#create-upgrade-guide","title":"Create Upgrade Guide","text":"<p>(Major releases) If required, as in the case of a major release, an upgrade guide needs to be available at the same time as the release. This document should go under the Upgrade Guide section of the glusterdocs repository.</p>"},{"location":"Contributors-Guide/GlusterFS-Release-process/#send-release-announcement","title":"Send Release Announcement","text":"<p>Once the Fedora/EL RPMs are ready (and any others that are ready by then), send the release announcement:</p> <ul> <li> <p>Gluster Mailing lists</p> <ul> <li>gluster-announce</li> <li>gluster-devel</li> <li>gluster-users</li> </ul> </li> <li> <p>Gluster Blog   The blog will automatically post to both Facebook and Twitter. Be careful with this!</p> <ul> <li>Gluster Twitter account</li> <li>Gluster Facebook page</li> </ul> </li> <li> <p>Gluster LinkedIn group</p> </li> </ul>"},{"location":"Contributors-Guide/Guidelines-For-Maintainers/","title":"Guidelines For Maintainers","text":""},{"location":"Contributors-Guide/Guidelines-For-Maintainers/#guidelines-for-maintainers","title":"Guidelines For Maintainers","text":"<p>GlusterFS has maintainers, sub-maintainers and release maintainers to manage the project's codebase. Sub-maintainers are the owners for specific areas/components of the source tree. Maintainers operate across all components in the source tree.Release maintainers are the owners for various release branches (release-x.y) present in the GlusterFS repository.</p> <p>In the guidelines below, release maintainers and sub-maintainers are also implied when there is a reference to maintainers unless it is explicitly called out.</p>"},{"location":"Contributors-Guide/Guidelines-For-Maintainers/#guidelines-that-maintainers-are-expected-to-adhere-to","title":"Guidelines that Maintainers are expected to adhere to","text":"<ol> <li> <p>Ensure qualitative and timely management of patches sent for review.</p> </li> <li> <p>For merging patches into the repository, it is expected of maintainers to:</p> <ul> <li>Merge patches of owned components only.</li> <li>Seek approvals from all maintainers before merging a patchset spanning   multiple components.</li> <li>Ensure that regression tests pass for all patches before merging.</li> <li>Ensure that regression tests accompany all patch submissions.</li> <li>Ensure the related Bug or GitHub Issue has sufficient details about the   cause of the problem, or description of the introduction for the change.</li> <li>Ensure that documentation is updated for a noticeable change in user   perceivable behavior or design.</li> <li>Encourage code unit tests from patch submitters to improve the overall   quality of the codebase.</li> <li>Not merge patches written by themselves until there is a +2 Code Review   vote by other reviewers.</li> </ul> </li> <li> <p>The responsibility of merging a patch into a release branch in normal     circumstances will be that of the release maintainer's. Only in exceptional     situations, maintainers &amp; sub-maintainers will merge patches into a release     branch.</p> </li> <li> <p>Release maintainers will ensure approval from appropriate maintainers before     merging a patch into a release branch.</p> </li> <li> <p>Maintainers have a responsibility to the community, it is expected of maintainers to:</p> <ul> <li>Facilitate the community in all aspects.</li> <li>Be very active and visible in the community.</li> <li>Be objective and consider the larger interests of the community ahead of   individual interests.</li> <li>Be receptive to user feedback.</li> <li>Address concerns &amp; issues affecting users.</li> <li>Lead by example.</li> </ul> </li> </ol>"},{"location":"Contributors-Guide/Guidelines-For-Maintainers/#queries-on-guidelines","title":"Queries on Guidelines","text":"<p>Any questions or comments regarding these guidelines can be routed to gluster-devel or slack channel.</p>"},{"location":"Contributors-Guide/Guidelines-For-Maintainers/#patches-in-github","title":"Patches in Github","text":"<p>Github can be used to list patches that need reviews and/or can get merged from Pull Requests</p>"},{"location":"Contributors-Guide/Index/","title":"Workflow Guide","text":""},{"location":"Contributors-Guide/Index/#bug-handling","title":"Bug Handling","text":"<ul> <li>Bug reporting guidelines -   Guideline for reporting a bug in GlusterFS</li> <li>Bug triage guidelines - Guideline on how to   triage bugs for GlusterFS</li> </ul>"},{"location":"Contributors-Guide/Index/#release-process","title":"Release Process","text":"<ul> <li>GlusterFS Release process -   Our release process / checklist</li> </ul>"},{"location":"Contributors-Guide/Index/#patch-acceptance","title":"Patch Acceptance","text":"<ul> <li>The Guidelines For Maintainers explains when   maintainers can merge patches.</li> </ul>"},{"location":"Contributors-Guide/Index/#blogging-about-gluster","title":"Blogging about gluster","text":"<ul> <li>The Adding your gluster blog explains how to add your   gluster blog to Community blogger.</li> </ul>"},{"location":"Developer-guide/Backport-Guidelines/","title":"Backport Guidelines","text":"<p>In GlusterFS project, as a policy, any new change, bug fix, etc., are to be fixed in 'devel' branch before release branches. When a bug is fixed in the devel branch, it might be desirable or necessary in release branch.</p> <p>This page describes the policy GlusterFS has regarding the backports. As a user, or contributor, being aware of this policy would help you to understand how to request for backport from community.</p>"},{"location":"Developer-guide/Backport-Guidelines/#policy","title":"Policy","text":"<ul> <li>No feature from devel would be backported to the release branch</li> <li>CVE ie., security vulnerability (listed on the CVE database)   reported in the existing releases would be backported, after getting fixed   in devel branch.</li> <li>Only topics which bring about data loss or, unavailability would be   backported to the release.</li> <li>For any other issues, the project recommends that the installation be   upgraded to a newer release where the specific bug has been addressed.</li> <li>Gluster provides 'rolling' upgrade support, i.e., one can upgrade their     server version without stopping the application I/O, so we recommend migrating     to higher version.</li> </ul>"},{"location":"Developer-guide/Backport-Guidelines/#things-to-pay-attention-to-while-backporting-a-patch","title":"Things to pay attention to while backporting a patch.","text":"<p>If your patch meets the criteria above, or you are a user, who prefer to have a fix backported, because your current setup is facing issues, below are the steps you need to take care to submit a patch on release branch.</p> <ul> <li>The patch should have same 'Change-Id'.</li> </ul>"},{"location":"Developer-guide/Backport-Guidelines/#how-to-contact-release-owners","title":"How to contact release owners?","text":"<p>All release owners are part of 'gluster-devel@gluster.org' mailing list. Please write your expectation from next release there, so we can take that to consideration while making the release.</p>"},{"location":"Developer-guide/Building-GlusterFS/","title":"Building GlusterFS","text":"<p>This page describes how to build and install GlusterFS.</p>"},{"location":"Developer-guide/Building-GlusterFS/#build-requirements","title":"Build Requirements","text":"<p>The following packages are required for building GlusterFS,</p> <ul> <li> <p>GNU Autotools</p> <ul> <li>Automake</li> <li>Autoconf</li> <li>Libtool</li> </ul> </li> <li> <p>lex (generally flex)</p> </li> <li>GNU Bison</li> <li>OpenSSL</li> <li>libxml2</li> <li>Python 2.x</li> <li>libaio</li> <li>libibverbs</li> <li>librdmacm</li> <li>readline</li> <li>lvm2</li> <li>glib2</li> <li>liburcu</li> <li>cmocka</li> <li>libacl</li> <li>sqlite</li> <li>fuse-devel</li> <li>liburing-devel</li> </ul>"},{"location":"Developer-guide/Building-GlusterFS/#fedora","title":"Fedora","text":"<p>The following dnf command installs all the build requirements for Fedora,</p> <pre><code>dnf install automake autoconf libtool flex bison openssl-devel  \\\n  libxml2-devel python-devel libaio-devel libibverbs-devel      \\\n  librdmacm-devel readline-devel lvm2-devel glib2-devel         \\\n  userspace-rcu-devel libcmocka-devel libacl-devel sqlite-devel \\\n  fuse-devel redhat-rpm-config rpcgen libtirpc-devel make       \\\n  libuuid-devel liburing-devel gperftools libcurl-devel\n</code></pre>"},{"location":"Developer-guide/Building-GlusterFS/#ubuntu","title":"Ubuntu","text":"<p>The following apt-get command will install all the build requirements on Ubuntu,</p> <pre><code>sudo apt-get install make automake autoconf libtool flex bison  \\\n  pkg-config libssl-dev libxml2-dev python-dev libaio-dev       \\\n  libibverbs-dev librdmacm-dev libreadline-dev liblvm2-dev      \\\n  libglib2.0-dev liburcu-dev libcmocka-dev libsqlite3-dev       \\\n  libacl1-dev liburing-dev google-perftools\n</code></pre>"},{"location":"Developer-guide/Building-GlusterFS/#centos-enterprise-linux-v7","title":"CentOS / Enterprise Linux v7","text":"<p>The following yum command installs the build requirements for CentOS / Enterprise Linux 7,</p> <pre><code>yum install autoconf automake bison cmockery2-devel dos2unix flex   \\\n  fuse-devel glib2-devel libacl-devel libaio-devel libattr-devel    \\\n  libcurl-devel libibverbs-devel librdmacm-devel libtirpc-devel     \\\n  libtool libxml2-devel lvm2-devel make openssl-devel pkgconfig     \\\n  pyliblzma python-devel python-eventlet python-netifaces           \\\n  python-paste-deploy python-simplejson python-sphinx python-webob  \\\n  pyxattr readline-devel rpm-build sqlite-devel systemtap-sdt-devel \\\n  tar userspace-rcu-devel\n</code></pre> <p>Note: You will need to enable the CentOS SIG repos in order to install userspace-rcu-devel package For details check https://wiki.centos.org/SpecialInterestGroup/Storage</p>"},{"location":"Developer-guide/Building-GlusterFS/#enable-repositories-for-centos","title":"Enable repositories for CentOS","text":"<p>The following yum command enables needed repositories providing the build requirements:</p> <p>CentOS Stream 8:</p> <pre><code>yum-config-manager --enable powertools --enable devel\n\n</code></pre> <p>CentOS Stream 9:</p> <pre><code>yum-config-manager --enable crb --enable devel\n\n</code></pre>"},{"location":"Developer-guide/Building-GlusterFS/#centos-enterprise-linux-v8","title":"CentOS / Enterprise Linux v8","text":"<p>The following yum command installs the build requirements for CentOS / Enterprise Linux 8,</p> <pre><code>yum install autoconf automake bison dos2unix flex fuse-devel glib2-devel   \\\n  libacl-devel libaio-devel libattr-devel libcurl-devel libibverbs-devel   \\\n  librdmacm-devel libtirpc-devel libuuid-devel libtool libxml2-devel       \\\n  lvm2-devel make openssl-devel pkgconfig xz-devel  python3-devel          \\\n  python3-netifaces python3-paste-deploy python3-simplejson python3-sphinx \\\n  python3-webob python3-pyxattr readline-devel rpm-build sqlite-devel      \\\n  systemtap-sdt-devel tar userspace-rcu-devel rpcgen liburing-devel\n</code></pre>"},{"location":"Developer-guide/Building-GlusterFS/#building-from-source","title":"Building from Source","text":"<p>This section describes how to build GlusterFS from source. It is assumed you have a copy of the GlusterFS source (either from a released tarball or a git clone). All the commands below are to be run with the source directory as the working directory.</p>"},{"location":"Developer-guide/Building-GlusterFS/#configuring-for-building","title":"Configuring for building","text":"<p>Run the below commands once for configuring and setting up the build process.</p> <p>Run autogen to generate the configure script.</p> <pre><code>./autogen.sh\n</code></pre> <p>Once autogen completes successfully a configure script is generated. Run the configure script to generate the makefiles.</p> <pre><code>./configure\n</code></pre> <p>For CentOS 7, use:</p> <pre><code>./configure --without-libtirpc\n</code></pre> <p>If the above build requirements have been installed, running the configure script should give the below configure summary,</p> <pre><code>GlusterFS configure summary\n===========================\nFUSE client          : yes\nInfiniband verbs     : yes\nepoll IO multiplex   : yes\nargp-standalone      : no\nfusermount           : yes\nreadline             : yes\ngeoreplication       : yes\nLinux-AIO            : yes\nEnable Debug         : no\nBlock Device xlator  : yes\nglupy                : yes\nUse syslog           : yes\nXML output           : yes\nEncryption xlator    : yes\nUnit Tests       : no\nTrack priv ports     : yes\nPOSIX ACLs           : yes\nData Classification  : yes\nSELinux features     : yes\nfirewalld-config     : no\nExperimental xlators : yes\nEvents           : yes\nEC dynamic support   : x64 sse avx\nUse memory pools     : yes\nNanosecond m/atimes  : yes\nLegacy gNFS server   : no\n</code></pre> <p>During development it is good to enable a debug build. To do this run configure with a '--enable-debug' flag.</p> <pre><code>./configure --enable-debug\n</code></pre> <p>Further configuration flags can be found by running configure with a '--help' flag,</p> <pre><code>./configure --help\n</code></pre> <p>Please note to enable gNFS use the following flag</p> <pre><code>./configure --enable-gnfs\n</code></pre> <p>If you are looking at contributing by fixing some of the memory issues, use <code>--enable-asan</code> option</p> <pre><code>./configure --enable-asan\n</code></pre> <p>The above option will build with <code>-fsanitize=address -fno-omit-frame-pointer</code> options and uses the libasan.so shared library, so that needs to be available.</p> <p><code>io_uring</code> is introduced on Linux kernel version 5.1. GlusterFS also needs the user space liburing helper library. If these are not available for your machine or if you wish to build GlusterFS without io_uring support, use <code>--disable-linux-io_uring</code> option</p> <pre><code>./configure --disable-linux-io_uring\n</code></pre>"},{"location":"Developer-guide/Building-GlusterFS/#building","title":"Building","text":"<p>Once configured, GlusterFS can be built with a simple make command.</p> <pre><code>make\n</code></pre> <p>To speed up the build process on a multicore machine, add a '-jN' flag, where N is the number of parallel jobs.</p>"},{"location":"Developer-guide/Building-GlusterFS/#installing","title":"Installing","text":"<p>Run 'make install' to install GlusterFS. By default, GlusterFS will be installed into '/usr/local' prefix. To change the install prefix, give the appropriate option to configure. If installing into the default prefix, you might need to use 'sudo' or 'su -c' to install.</p> <pre><code>sudo make install\n</code></pre> <p>NOTE: glusterfs can be installed on any target path. However, the <code>mount.glusterfs</code> script has to be in <code>/sbin/mount.glusterfs</code> for mounting via command <code>mount -t glusterfs</code> to work. See -t section in man 8 mount for more details.</p>"},{"location":"Developer-guide/Building-GlusterFS/#running-glusterfs","title":"Running GlusterFS","text":"<p>GlusterFS can be only run as root, so the following commands will need to be run as root. If you've installed into the default '/usr/local' prefix, add '/usr/local/sbin' and '/usr/local/bin' to your PATH before running the below commands.</p> <p>A source install will generally not install any init scripts. So you will need to start glusterd manually. To manually start glusterd just run,</p> <pre><code>systemctl daemon-reload\nsystemctl start glusterd\n</code></pre> <p>This will start glusterd and fork it into the background as a daemon process. You now run 'gluster' commands and make use of GlusterFS.</p>"},{"location":"Developer-guide/Building-GlusterFS/#building-packages","title":"Building packages","text":""},{"location":"Developer-guide/Building-GlusterFS/#building-rpms","title":"Building RPMs","text":"<p>Building RPMs is really simple. On a RPM based system, for eg. Fedora, get the source and do the configuration steps as shown in the 'Building from Source' section. After the configuration step, run the following steps to build RPMs,</p> <pre><code>cd extras/LinuxRPM\nmake glusterrpms\n</code></pre> <p>This will create rpms from the source in 'extras/LinuxRPM'. (Note: You will need to install the rpmbuild requirements including rpmbuild and mock) For Fedora / CentOS / Enterprise Linux 8 the dependencies can be installed via:</p> <pre><code>yum install mock rpm-build  selinux-policy-devel\n</code></pre>"},{"location":"Developer-guide/Developers-Index/","title":"Developers","text":""},{"location":"Developer-guide/Developers-Index/#contributing-to-the-gluster-community","title":"Contributing to the Gluster community","text":"<p>Are you itching to send in patches and participate as a developer in the Gluster community? Here are a number of starting points for getting involved. All you need is your 'github' account to be handy.</p> <p>Remember that, Gluster community has multiple projects, each of which has its own way of handling PRs and patches. Decide on which project you want to contribute. Below documents are mostly about 'GlusterFS' project, which is the core of Gluster Community.</p>"},{"location":"Developer-guide/Developers-Index/#workflow","title":"Workflow","text":"<ul> <li> <p>Simplified Developer Workflow</p> <ul> <li>A simpler and faster intro to developing with GlusterFS, than the document below</li> </ul> </li> <li> <p>Developer Workflow</p> <ul> <li>Covers detail about requirements from a patch; tools and toolkits used by developers.     This is recommended reading in order to begin contributions to the project.</li> </ul> </li> <li> <p>GD2 Developer Workflow</p> <ul> <li>Helps in on-boarding developers to contribute in GlusterD2 project.</li> </ul> </li> </ul>"},{"location":"Developer-guide/Developers-Index/#compiling-gluster","title":"Compiling Gluster","text":"<ul> <li>Building GlusterFS - How to compile   Gluster from source code.</li> </ul>"},{"location":"Developer-guide/Developers-Index/#developing","title":"Developing","text":"<ul> <li>Projects - Ideas for projects you could   create</li> <li> <p>Fixing issues reported by tools for static code   analysis</p> <ul> <li>This is a good starting point for developers to fix bugs in GlusterFS project.</li> </ul> </li> </ul>"},{"location":"Developer-guide/Developers-Index/#releases-and-backports","title":"Releases and Backports","text":"<ul> <li>Backport Guidelines describe the steps that branches too.</li> </ul> <p>Some more GlusterFS Developer documentation can be found in glusterfs documentation directory</p>"},{"location":"Developer-guide/Development-Workflow/","title":"Development workflow of Gluster","text":"<p>This document provides a detailed overview of the development model followed by the GlusterFS project. For a simpler overview visit Simplified development workflow.</p>"},{"location":"Developer-guide/Development-Workflow/#basics","title":"Basics","text":"<p>The GlusterFS development model largely revolves around the features and functionality provided by Git version control system, Github and Jenkins continuous integration system. It is a primer for a contributor to the project.</p>"},{"location":"Developer-guide/Development-Workflow/#git-and-github","title":"Git and Github","text":"<p>Git is an extremely flexible, distributed version control system. GlusterFS's main repository is at Git and at GitHub. A good introduction to Git can be found at http://www-cs-students.stanford.edu/~blynn/gitmagic/.</p>"},{"location":"Developer-guide/Development-Workflow/#jenkins","title":"Jenkins","text":"<p>Jenkins is a Continuous Integration build system. Jenkins is hosted at http://build.gluster.org. Jenkins is configured to work with Github by setting up hooks. Every \"Change\" which is pushed to Github is automatically picked up by Jenkins, built and smoke tested. The output of all builds and tests can be viewed at http://build.gluster.org/job/smoke/. Jenkins is also set up with a 'regression' job which is designed to execute test scripts provided as part of the code change.</p>"},{"location":"Developer-guide/Development-Workflow/#preparatory-setup","title":"Preparatory Setup","text":"<p>Here is a list of initial one-time steps before you can start hacking on code.</p>"},{"location":"Developer-guide/Development-Workflow/#fork-repository","title":"Fork Repository","text":"<p>Fork GlusterFS repository</p>"},{"location":"Developer-guide/Development-Workflow/#clone-a-working-tree","title":"Clone a working tree","text":"<p>Get yourself a working tree by cloning the development repository from</p> <pre><code>git clone git@github.com:${username}/glusterfs.git\ncd glusterfs/\ngit remote add upstream git@github.com:gluster/glusterfs.git\n</code></pre>"},{"location":"Developer-guide/Development-Workflow/#preferred-email-and-set-username","title":"Preferred email and set username","text":"<p>On the first login, add your git/work email to your identity. You will have to click on the URL which is sent to your email and set up a proper Full Name. Select yourself a username. Make sure you set your git/work email as your preferred email. This should be the email address from which all your code commits are associated.</p>"},{"location":"Developer-guide/Development-Workflow/#watch-glusterfs","title":"Watch glusterfs","text":"<p>In Github, watch the 'glusterfs' repository. Tick on suitable (All activity, Ignore, participating, or custom) type of notifications to get alerts.</p>"},{"location":"Developer-guide/Development-Workflow/#email-filters","title":"Email filters","text":"<p>Set up a filter rule in your mail client to tag or classify emails with the header</p> <pre><code>list: &lt;glusterfs.gluster.github.com&gt;\n</code></pre> <p>as mails originating from the github system.</p>"},{"location":"Developer-guide/Development-Workflow/#development-other-flows","title":"Development &amp; Other flows","text":""},{"location":"Developer-guide/Development-Workflow/#issue","title":"Issue","text":"<ul> <li>Make sure there is an issue filed for the task you are working on.</li> <li>If it is not filed, open the issue with all the description.</li> <li>If it is a bug fix, add label \"Type:Bug\".</li> <li>If it is an RFC, provide all the documentation, and request for \"DocApproved\", and \"SpecApproved\" label.</li> </ul>"},{"location":"Developer-guide/Development-Workflow/#code","title":"Code","text":"<ul> <li>Start coding</li> <li>Make sure clang-format is installed and is run on the patch.</li> </ul>"},{"location":"Developer-guide/Development-Workflow/#keep-up-to-date","title":"Keep up-to-date","text":"<ul> <li>GlusterFS is a large project with many developers, so there would be one or the other patch everyday.</li> <li>It is critical for developer to be up-to-date with devel repo to be Conflict-Free when PR is opened.</li> <li>Git provides many options to keep up-to-date, below is one of them</li> </ul> <pre><code>git fetch upstream\ngit rebase upstream/devel\n</code></pre>"},{"location":"Developer-guide/Development-Workflow/#branching-policy","title":"Branching policy","text":"<p>This section describes both, the branching policies on the public repo as well as the suggested best-practice for local branching</p>"},{"location":"Developer-guide/Development-Workflow/#develrelease-branches","title":"Devel/release branches","text":"<p>In glusterfs, the 'devel' branch is the forward development branch. This is where new features come in first. In fact this is where almost every change (commit) comes in first. The devel branch is always kept in a buildable state and smoke tests pass.</p> <p>Release trains (3.1.z, 3.2.z,..., 8.y, 9.y) each have a branch originating from devel. Code freeze of each new release train is marked by the creation of the <code>release-x.y</code> branch. At this point, no new features are added to the release-x.y branch. All fixes and commits first get into devel. From there, only bug fixes get backported to the relevant release branches. From the release-x.y branch, actual release code snapshots (e.g. glusterfs-3.2.2 etc.) are tagged (git annotated tag with 'git tag -a') shipped as a tarball.</p>"},{"location":"Developer-guide/Development-Workflow/#personal-per-task-branches","title":"Personal per-task branches","text":"<p>As a best practice, it is recommended you perform all code changes for a task in a local branch in your working tree. The local branch should be created from the upstream branch to which you intend to submit the change. The name of the branch on your personal fork can start with issueNNNN, followed by anything of your choice. If you are submitting changes to the devel branch, first create a local task branch like this -</p> <pre><code># git checkout -b issueNNNN upstream/main\n... &lt;hack, commit&gt;\n</code></pre>"},{"location":"Developer-guide/Development-Workflow/#building","title":"Building","text":""},{"location":"Developer-guide/Development-Workflow/#environment-setup","title":"Environment Setup","text":"<p>For details about the required packages for the build environment refer : Building GlusterFS</p>"},{"location":"Developer-guide/Development-Workflow/#creating-build-environment","title":"Creating build environment","text":"<p>Once the required packages are installed for your appropiate system, generate the build configuration:</p> <pre><code>./autogen.sh\n./configure --enable-fusermount\n</code></pre>"},{"location":"Developer-guide/Development-Workflow/#build-and-install","title":"Build and install","text":"<pre><code>make &amp;&amp; make install\n</code></pre>"},{"location":"Developer-guide/Development-Workflow/#commit-policy-pr-description","title":"Commit policy / PR description","text":"<p>Typically you would have a local branch per task. You will need to sign-off your commit (git commit -s) before sending the patch for review. By signing off your patch, you agree to the terms listed under the \"Developer's Certificate of Origin\" section in the CONTRIBUTING file available in the repository root.</p> <p>Provide a meaningful commit message. Your commit message should be in the following format</p> <ul> <li>A short one-line title of format 'component: title', describing what the patch accomplishes</li> <li>An empty line following the subject</li> <li>Situation necessitating the patch</li> <li>Description of the code changes</li> <li>Reason for doing it this way (compared to others)</li> <li>Description of test cases</li> <li>When you open a PR, having a reference Issue for the commit is mandatory in GlusterFS.</li> <li>Commit message can have, either Fixes: #NNNN or Updates: #NNNN in a separate line in the commit message.   Here, NNNN is the Issue ID in glusterfs repository.</li> <li>Each commit needs the author to have the 'Signed-off-by: Name ' line.   Can do this by -s option for git commit. <li>If the PR is not ready for review, apply the label work-in-progress.   Check the availability of \"Draft PR\" is present for you, if yes, use that instead.</li>"},{"location":"Developer-guide/Development-Workflow/#push-the-change","title":"Push the change","text":"<p>After doing the local commit, it is time to submit the code for review. There is a script available inside glusterfs.git called rfc.sh. It is recommended you keep pushing to your repo every day, so you don't loose any work. You can submit your changes for review by simply executing</p> <pre><code>./rfc.sh\n</code></pre> <p>or</p> <pre><code>git push origin HEAD:issueNNN\n</code></pre> <p>This script rfc.sh does the following:</p> <ul> <li>The first time it is executed, it downloads a git hook from   http://review.gluster.org/tools/hooks/commit-msg and sets it up   locally to generate a Change-Id: tag in your commit message (if it   was not already generated.)</li> <li>Rebase your commit against the latest upstream HEAD. This rebase   also causes your commits to undergo massaging from the just   downloaded commit-msg hook.</li> <li>Prompt for a Reference Id for each commit (if it was not already provided)   and include it as a \"fixes: #n\" tag in the commit log. You can just hit    at this prompt if your submission is purely for review   purposes. <li>Push the changes for review. On a successful push, you will see a URL pointing to   the change in Pull requests section.</li>"},{"location":"Developer-guide/Development-Workflow/#test-cases-and-verification","title":"Test cases and Verification","text":""},{"location":"Developer-guide/Development-Workflow/#auto-triggered-tests","title":"Auto-triggered tests","text":"<p>The integration between Jenkins and Github triggers an event in Jenkins on every push of changes, to pick up the change and run build and smoke test on it. Part of the workflow is to aggregate and execute pre-commit test cases that accompany patches, cumulatively for every new patch. This guarantees that tests that are working till the present are not broken with the new patch. This is so that code changes and accompanying test cases are reviewed together. Once you upload the patch -</p> <ol> <li> <p>All the required smoke tests would be auto-triggered. You can retrigger    the smoke tests using \"/recheck smoke\" as comment. Passing the automated    smoke test is a necessary condition but not sufficient.</p> </li> <li> <p>The regression tests would be triggered by a comment \"/run regression\"    from developers in the @gluster organization once smoke test is passed.</p> </li> </ol> <p>If smoke/regression fails, it is a good reason to skip code review till a fixed change is pushed later. You can click on the build URL automatically to inspect the reason for auto verification failure. In the Jenkins job page, you can click on the 'Console Output' link to see the exact point of failure.</p> <p>All code changes which are not trivial (typo fixes, code comment changes) must be accompanied with either a new test case script or extend/modify an existing test case script. It is important to review the test case in conjunction with the code change to analyze whether the code change is actually verified by the test case.</p> <p>Regression tests (i.e, execution of all test cases accumulated with every commit) is not automatically triggered as the test cases can be extensive and is quite expensive to execute for every change submission in the review/resubmit cycle. Passing the regression test is a necessary condition for merge along with code review points.</p> <p>To check and run all regression tests locally, run the below script from glusterfs root directory.</p> <pre><code>./run-tests.sh\n</code></pre> <p>To run a single regression test locally, run the below command.</p> <pre><code>prove -vf &lt;path_to_the_file&gt;\n</code></pre> <p>NOTE: The testing framework needs perl-Test-Harness package to be installed. Ask for help as comment in PR if you have any questions about the process!</p> <p>It is important to note that Jenkins verification is only a generic verification of high-level tests. More concentrated testing effort for the patch is necessary with manual verification.</p>"},{"location":"Developer-guide/Development-Workflow/#glusto-test-framework","title":"Glusto test framework","text":"<p>For any new feature that is posted for review, there should be accompanying set of tests in glusto-tests. These tests will be run nightly and/or before release to determine the health of the feature. Please go through glusto-tests project to understand more information on how to write and execute the tests in glusto.</p> <ol> <li> <p>Extend/Modify old test cases in existing scripts - This is typically    when present behavior (default values etc.) of code is changed.</p> </li> <li> <p>No test cases - This is typically when a code change is trivial    (e.g. fixing typos in output strings, code comments).</p> </li> <li> <p>Only test case and no code change - This is typically when we are    adding test cases to old code (already existing before this regression    test policy was enforced). More details on how to work with test case    scripts can be found in tests/README.</p> </li> </ol>"},{"location":"Developer-guide/Development-Workflow/#reviewing-commenting","title":"Reviewing / Commenting","text":"<p>Code review with Github is relatively easy compared to other available tools. Each change is presented as multiple files and each file can be reviewed in Side-by-Side mode. While reviewing it is possible to comment on each line by clicking on '+' icon and writing in your comments in the text box. Such in-line comments are saved as drafts, till you finally publish them by Starting a Review.</p>"},{"location":"Developer-guide/Development-Workflow/#incorporate-rfcsh-reverify","title":"Incorporate, rfc.sh, Reverify","text":"<p>Code review comments are notified via email. After incorporating the changes in code, you can mark each of the inline comments as 'done' (optional). After all the changes to your local files, create new commits in the same branch with -</p> <pre><code>git commit -a -s\n</code></pre> <p>Push the commit by executing rfc.sh. If your previous push was an \"rfc\" push (i.e, without a Issue Id) you will be prompted for a Issue Id again. You can re-push an rfc change without any other code change too by giving a Issue Id.</p> <p>On the new push, Jenkins will re-verify the new change (independent of what the verification result was for the previous push).</p> <p>It is the Change-Id line in the commit log (which does not change) that associates the new push as an update for the old push (even though they had different commit ids) under the same Change.</p> <p>If further changes are found necessary, changes can be requested or comments can be made on the new patch as well, and the same cycle repeats.</p> <p>If no further changes are necessary, the reviewer can approve the patch.</p>"},{"location":"Developer-guide/Development-Workflow/#submission-qualifiers","title":"Submission Qualifiers","text":"<p>GlusterFS project follows 'Squash and Merge' method.</p> <ul> <li>This is mainly to preserve the historic Gerrit method of one patch in git log for one URL link.</li> <li>This also makes every merge a complete patch, which has passed all tests.</li> </ul> <p>For a change to get merged, there are two qualifiers that are enforced by the Github system. They are -</p> <ol> <li>A change should have at approver flag from Reviewers</li> <li>A change should have passed smoke and regression tests.</li> </ol> <p>The project maintainer will merge the changes once a patch meets these qualifiers. If you feel there is delay, feel free to add a comment, discuss the same in Slack channel, or send email.</p>"},{"location":"Developer-guide/Development-Workflow/#submission-disqualifiers","title":"Submission Disqualifiers","text":"<ul> <li>+2 : is equivalent to \"Approve\" from the people in the maintainer's group.</li> <li>+1 : can be given by a maintainer/reviewer by explicitly stating that in the comment.</li> <li>-1 : provide details on required changes and pick \"Request Changes\" while submitting your review.</li> <li>-2 : done by adding the DO-NOT-MERGE label.</li> </ul> <p>Any further discussions can happen as comments in the PR.</p>"},{"location":"Developer-guide/Easy-Fix-Bugs/","title":"Easy Fix Bugs","text":"<p>Fixing easy issues is an excellent method to start contributing patches to Gluster.</p> <p>Sometimes an Easy Fix issue has a patch attached. In those cases, the Patch keyword has been added to the bug. These bugs can be used by new contributors that would like to verify their workflow. Bug 1099645 is one example of those.</p> <p>All such issues can be found here</p>"},{"location":"Developer-guide/Easy-Fix-Bugs/#guidelines-for-new-comers","title":"Guidelines for new comers","text":"<ul> <li>While trying to write a patch, do not hesitate to ask questions.</li> <li>If something in the documentation is unclear, we do need to know so   that we can improve it.</li> <li>There are no stupid questions, and it's more stupid to not ask   questions that others can easily answer. Always assume that if you   have a question, someone else would like to hear the answer too.</li> </ul> <p>Reach out to the developers in #gluster on Gluster Slack channel, or on one of the mailing lists, try to keep the discussions public so that anyone can learn from it.</p>"},{"location":"Developer-guide/Fixing-issues-reported-by-tools-for-static-code-analysis/","title":"Fixing issues reported by tools for static code analysis","text":""},{"location":"Developer-guide/Fixing-issues-reported-by-tools-for-static-code-analysis/#static-code-analysis-tools","title":"Static Code Analysis Tools","text":"<p>Bug fixes for issues reported by Static Code Analysis Tools should follow Development Work Flow</p>"},{"location":"Developer-guide/Fixing-issues-reported-by-tools-for-static-code-analysis/#coverity","title":"Coverity","text":"<p>GlusterFS is part of Coverity's scan program.</p> <ul> <li>To see Coverity issues you have to be a member of the GlusterFS   project in Coverity scan website.</li> <li>Here is the link to Coverity scan website</li> <li>Go to above link and subscribe to GlusterFS project (as   contributor). It will send a request to Admin for including you in   the Project.</li> <li>Once admins for the GlusterFS Coverity scan approve your request,   you will be able to see the defects raised by Coverity.</li> <li>Issue #1060   can be used as a umbrella bug for Coverity issues in master   branch unless you are trying to fix a specific issue.</li> <li>When you decide to work on some issue, please assign it to your name   in the same Coverity website. So that we don't step on each others   work.</li> <li>When marking a bug intentional in Coverity scan website, please put   an explanation for the same. So that it will help others to   understand the reasoning behind it.</li> </ul> <p>If you have more questions please send it to gluster-devel mailing list</p>"},{"location":"Developer-guide/Fixing-issues-reported-by-tools-for-static-code-analysis/#cpp-check","title":"CPP Check","text":"<p>Cppcheck is available in Fedora and EL's EPEL repo</p> <ul> <li> <p>Install Cppcheck</p> <pre><code>dnf install cppcheck\n</code></pre> </li> <li> <p>Clone GlusterFS code</p> <pre><code>git clone https://github.com/gluster/glusterfs\n</code></pre> </li> <li> <p>Run Cpp check</p> <pre><code>cppcheck glusterfs/ 2&gt;cppcheck.log\n</code></pre> </li> </ul>"},{"location":"Developer-guide/Fixing-issues-reported-by-tools-for-static-code-analysis/#clang-scan-daily-runs","title":"Clang-Scan Daily Runs","text":"<p>We have daily runs of static source code analysis tool clang-scan on the glusterfs sources. There are daily analyses of the master and on currently supported branches.</p> <p>Results are posted at https://build.gluster.org/job/clang-scan/lastBuild/clangScanBuildBugs/</p> <p>Issue #1000 can be used as a umbrella bug for Clang issues in master branch unless you are trying to fix a specific issue.</p>"},{"location":"Developer-guide/Projects/","title":"Projects","text":"<p>This page contains a list of project ideas which will be suitable for students (for GSOC, internship etc.)</p>"},{"location":"Developer-guide/Projects/#projectsfeatures-which-needs-contributors","title":"Projects/Features which needs contributors","text":""},{"location":"Developer-guide/Projects/#rio","title":"RIO","text":"<p>Issue: https://github.com/gluster/glusterfs/issues/243</p> <p>This is a new distribution logic, which can scale Gluster to 1000s of nodes.</p>"},{"location":"Developer-guide/Projects/#composition-xlator-for-small-files","title":"Composition xlator for small files","text":"<p>Merge small files into a designated large file using our own custom semantics. This can improve our small file performance.</p>"},{"location":"Developer-guide/Projects/#path-based-geo-replication","title":"Path based geo-replication","text":"<p>Issue: https://github.com/gluster/glusterfs/issues/460</p> <p>This would allow remote volume to be of different type (NFS/S3 etc etc) too.</p>"},{"location":"Developer-guide/Projects/#project-quota-support","title":"Project Quota support","text":"<p>Issue: https://github.com/gluster/glusterfs/issues/184</p> <p>This will make Gluster's Quota faster, and also provide desired behavior.</p>"},{"location":"Developer-guide/Projects/#cluster-testing-framework-based-on-gluster-tester","title":"Cluster testing framework based on gluster-tester","text":"<p>Repo: https://github.com/aravindavk/gluster-tester</p> <p>Build a cluster using docker images (or VMs). Write a tool which would extend current gluster testing's .t format to take NODE as an addition parameter to run command. This would make upgrade and downgrade testing very easy and feasible.</p>"},{"location":"Developer-guide/Projects/#network-layer-changes","title":"Network layer changes","text":"<p>Issue: https://github.com/gluster/glusterfs/issues/391</p> <p>There is many improvements we can do in this area</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/","title":"Simplified development workflow for GlusterFS","text":"<p>This page gives a simplified model of the development workflow used by the GlusterFS project. This will give the steps required to get a patch accepted into the GlusterFS source.</p> <p>Visit Development Work Flow a more detailed description of the workflow.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#initial-preparation","title":"Initial preparation","text":"<p>The GlusterFS development workflow revolves around GitHub and Jenkins. Using these both tools requires some initial preparation.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#get-the-source","title":"Get the source","text":"<p>Git clone the GlusterFS source using</p> <pre><code>git clone git@github.com:${username}/glusterfs.git\ncd glusterfs/\ngit remote add upstream git@github.com:gluster/glusterfs.git\n</code></pre> <p>This will clone the GlusterFS source into a subdirectory named glusterfs with the devel branch checked out.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#dev-system-setup","title":"Dev system setup","text":"<p>You should install and setup Git on your development system. Use your distribution specific package manger to install git. After installation configure git. At the minimum, set a git user email. To set the email do,</p> <pre><code>git config --global user.name &lt;name&gt;\ngit config --global user.email &lt;email address&gt;\n</code></pre> <p>Next, install the build requirements for GlusterFS. Refer Building GlusterFS - Build Requirements for the actual requirements.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#actual-development","title":"Actual development","text":"<p>The commands in this section are to be run inside the glusterfs source directory.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#create-a-development-branch","title":"Create a development branch","text":"<p>It is recommended to use separate local development branches for each change you want to contribute to GlusterFS. To create a development branch, first checkout the upstream branch you want to work on and update it. More details on the upstream branching model for GlusterFS can be found at Development Work Flow - Branching_policy. For example if you want to develop on the devel branch,</p> <pre><code>git checkout devel\ngit pull\n</code></pre> <p>Now, create a new branch from devel and switch to the new branch. It is recommended to have descriptive branch names. Do,</p> <pre><code>git branch issueNNNN\ngit checkout issueNNNN\n</code></pre> <p>or,</p> <pre><code>git checkout -b issueNNNN upstream/main\n</code></pre> <p>to do both in one command. Here, NNNN is the Issue ID in glusterfs repository.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#hack","title":"Hack","text":"<p>Once you've switched to the development branch, you can perform the actual code changes. Build and test to see if your changes work.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#tests","title":"Tests","text":"<p>Unless your changes are very minor and trivial, you should also add a test for your change. Tests are used to ensure that the changes you did are not broken inadvertently. More details on tests can be found at Development Workflow - Test cases and Development Workflow - Regression tests and test cases.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#regression-test","title":"Regression test","text":"<p>Once your change is working, locally you can run the regression test suite to make sure you haven't broken anything. The regression test suite requires a working GlusterFS installation and needs to be run as root. To run the regression test suite, do</p> <pre><code>make install\n./run-tests.sh\n</code></pre> <p>or, After uploading the patch The regression tests would be triggered by a comment \"/run regression\" from developers in the @gluster organization.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#commit-your-changes","title":"Commit your changes","text":"<p>If you haven't broken anything, you can now commit your changes. First identify the files that you modified/added/deleted using git-status and stage these files.</p> <pre><code>git status\ngit add &lt;list of modified files&gt;\n</code></pre> <p>Now, commit these changes using</p> <pre><code>git commit -s\n</code></pre> <p>Provide a meaningful commit message. The commit message policy is described at Development Work Flow - Commit policy. It is essential that you commit with the '-s' option, which will sign-off the commit with your configured email.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#submit-for-review","title":"Submit for review","text":"<p>To submit your change for review, run the rfc.sh script,</p> <pre><code>./rfc.sh\n</code></pre> <p>or</p> <pre><code>git push origin HEAD:issueNNN\n</code></pre> <p>More details on the rfc.sh script are available at Development Work Flow - rfc.sh.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#review-process","title":"Review process","text":"<p>Your change will now be reviewed by the GlusterFS maintainers and component owners. You can follow and take part in the review process on the change at the review url. The review process involves several steps.</p> <p>To know component owners , you can check the \"MAINTAINERS\" file in root of glusterfs code directory</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#automated-verification","title":"Automated verification","text":"<p>Every change submitted to github triggers an initial automated verification on jenkins known as smoke tests. The automated verification ensures that your change doesn't break the build and has an associated bug-id. Developers get a chance to retrigger the smoke tests using \"/recheck smoke\" as comment.</p> <p>More details can be found at Development Work Flow - Auto verification.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#formal-review","title":"Formal review","text":"<p>Once the auto verification is successful, the component owners will perform a formal review. If they are okay with your change, they will give a positive review. If not they will give a negative review and add comments on the reasons.</p> <p>More information regarding the review qualifiers and disqualifiers is available at Development Work Flow - Submission Qualifiers and Development Work Flow - Submission Disqualifiers.</p> <p>If your change gets a negative review, you will need to address the comments and resubmit your change.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#resubmission","title":"Resubmission","text":"<p>Switch to your development branch and make new changes to address the review comments. Build and test to see if the new changes are working.</p> <p>Stage your changes and commit your new changes in new commits using,</p> <pre><code>git commit -a -s\n</code></pre> <p>Now you can resubmit the commit for review using the rfc.sh script or git push.</p> <p>The formal review process could take a long time. To increase chances for a speedy review, you can add the component owners as reviewers on the pull request. This will ensure they notice the change. The list of component owners can be found in the MAINTAINERS file present in the GlusterFS source</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#verification","title":"Verification","text":"<p>After a component owner has given a positive review, a developer will run the regression test suite on your change to verify that your change works and hasn't broken anything. This verification is done with the help of jenkins.</p> <p>If the verification fails, you will need to make necessary changes and resubmit an updated commit for review.</p>"},{"location":"Developer-guide/Simplified-Development-Workflow/#acceptance","title":"Acceptance","text":"<p>After successful verification, a maintainer will Squash and merge your change into the upstream GlusterFS source. Your change will now be available in the upstream git repo for everyone to use.</p>"},{"location":"Developer-guide/compiling-rpms/","title":"Compiling RPMS","text":""},{"location":"Developer-guide/compiling-rpms/#how-to-compile-glusterfs-rpms-from-git-source-for-rhelcentos-and-fedora","title":"How to compile GlusterFS RPMs from git source, for RHEL/CentOS, and Fedora","text":"<p>Creating rpm's of GlusterFS from git source is fairly easy, once you know the steps.</p> <p>RPMs can be compiled on at least the following OS's:</p> <ul> <li>Red Hat Enterprise Linux 5, 6 (&amp; 7 when available)</li> <li>CentOS 5, 6, 7 and 8</li> <li>Fedora 16-20</li> </ul> <p>Specific instructions for compiling are below. If you're using:</p> <ul> <li>Fedora 16-20 - Follow the Fedora steps, then do all of the Common steps.</li> <li>CentOS 5.x - Follow the CentOS 5.x steps, then do all of the Common steps</li> <li>CentOS 6.x - Follow the CentOS 6.x steps, then do all of the Common steps.</li> <li>CentOS 8.x - Follow the CentOS 8.x steps, then follow from step 2 in the Common steps.</li> <li>RHEL 6.x - Follow the RHEL 6.x steps, then do all of the Common steps.</li> </ul> <p>Note - these instructions have been explicitly tested on all of CentOS 5.10, RHEL 6.4, CentOS 6.4+, CentOS 8.4, and Fedora 16-20. Other releases of RHEL/CentOS and Fedora may work too but haven't been tested. Please update this page appropriately if you do so. :)</p>"},{"location":"Developer-guide/compiling-rpms/#preparation-steps-for-fedora-16-20-only","title":"Preparation steps for Fedora 16-20 (only)","text":"<ol> <li> <p>Install gcc, the python development headers, and python setuptools:</p> <pre><code>sudo yum -y install gcc python-devel python-setuptools\n</code></pre> </li> <li> <p>If you're compiling GlusterFS version 3.4, then install python-swiftclient. Other GlusterFS versions don't need it:</p> <pre><code>sudo easy_install simplejson python-swiftclient\n</code></pre> </li> </ol> <p>Now follow through with the Common Steps part below.</p>"},{"location":"Developer-guide/compiling-rpms/#preparation-steps-for-centos-5x-only","title":"Preparation steps for CentOS 5.x (only)","text":"<p>You'll need EPEL installed first and some CentOS-specific packages. The commands below will get that done for you. After that, follow through the \"Common steps\" section.</p> <ol> <li> <p>Install EPEL first:</p> <pre><code>curl -OL http://download.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm\nsudo yum -y install epel-release-5-4.noarch.rpm --nogpgcheck\n</code></pre> </li> <li> <p>Install the packages required only on CentOS 5.x:</p> <pre><code>sudo yum -y install buildsys-macros gcc ncurses-devel \\\n  python-ctypes python-sphinx10 redhat-rpm-config\n</code></pre> </li> </ol> <p>Now follow through with the Common Steps part below.</p>"},{"location":"Developer-guide/compiling-rpms/#preparation-steps-for-centos-6x-only","title":"Preparation steps for CentOS 6.x (only)","text":"<p>You'll need EPEL installed first and some CentOS-specific packages. The commands below will get that done for you. After that, follow through the \"Common steps\" section.</p> <ol> <li> <p>Install EPEL first:</p> <pre><code>sudo yum -y install http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n</code></pre> </li> <li> <p>Install the packages required only on CentOS:</p> <pre><code>sudo yum -y install python-webob1.0 python-paste-deploy1.5 python-sphinx10 redhat-rpm-config\n</code></pre> </li> </ol> <p>Now follow through with the Common Steps part below.</p>"},{"location":"Developer-guide/compiling-rpms/#preparation-steps-for-centos-8x-only","title":"Preparation steps for CentOS 8.x (only)","text":"<p>You'll need EPEL installed and then the powertools package enabled.</p> <ol> <li> <p>Install EPEL first:</p> <pre><code>sudo rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n</code></pre> </li> <li> <p>Enable the PowerTools repo and install CentOS 8.x specific packages for building the rpms.</p> <pre><code>sudo yum --enablerepo=PowerTools install automake autoconf libtool flex bison openssl-devel \\\n  libxml2-devel libaio-devel libibverbs-devel librdmacm-devel readline-devel lvm2-devel \\\n  glib2-devel userspace-rcu-devel libcmocka-devel libacl-devel sqlite-devel fuse-devel \\\n  redhat-rpm-config rpcgen libtirpc-devel make python3-devel rsync libuuid-devel \\\n  rpm-build dbench perl-Test-Harness attr libcurl-devel selinux-policy-devel -y\n</code></pre> </li> </ol> <p>Now follow through from Point 2 in the Common Steps part below.</p>"},{"location":"Developer-guide/compiling-rpms/#preparation-steps-for-rhel-6x-only","title":"Preparation steps for RHEL 6.x (only)","text":"<p>You'll need EPEL installed first and some RHEL specific packages. The 2 commands below will get that done for you. After that, follow through the \"Common steps\" section.</p> <ol> <li> <p>Install EPEL first:</p> <pre><code>sudo yum -y install http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n</code></pre> </li> <li> <p>Install the packages required only on RHEL:</p> <pre><code>sudo yum -y --enablerepo=rhel-6-server-optional-rpms install python-webob1.0 \\\n  python-paste-deploy1.5 python-sphinx10 redhat-rpm-config\n</code></pre> </li> </ol> <p>Now follow through with the Common Steps part below.</p>"},{"location":"Developer-guide/compiling-rpms/#common-steps","title":"Common Steps","text":"<p>These steps are for both Fedora and RHEL/CentOS. At the end you'll have the complete set of GlusterFS RPMs for your platform, ready to be installed.</p> <p>NOTES for step 1 below:</p> <ul> <li>If you're on RHEL/CentOS 5.x and get a message about lvm2-devel not being available, it's ok. You can ignore it. :)</li> <li>If you're on RHEL/CentOS 6.x and get any messages about python-eventlet, python-netifaces, python-sphinx and/or pyxattr not being available, it's ok. You can ignore them. :)</li> <li>If you're on CentOS 8.x, you can skip step 1 and start from step 2. Also, for CentOS 8.x, the steps have been   tested for the master branch. It is unknown if it would work for older branches.</li> </ul> <p></p> <ol> <li> <p>Install the needed packages</p> <pre><code>sudo yum -y --disablerepo=rhs* --enablerepo=*optional-rpms install git autoconf \\\n  automake bison dos2unix flex fuse-devel glib2-devel libaio-devel \\\n  libattr-devel libibverbs-devel librdmacm-devel libtool libxml2-devel lvm2-devel make \\\n  openssl-devel pkgconfig pyliblzma python-devel python-eventlet python-netifaces \\\n  python-paste-deploy python-simplejson python-sphinx python-webob pyxattr readline-devel \\\n  rpm-build systemtap-sdt-devel tar libcmocka-devel\n</code></pre> </li> <li> <p>Clone the GlusterFS git repository</p> <pre><code>git clone git://git.gluster.org/glusterfs\ncd glusterfs\n</code></pre> </li> <li> <p>Choose which branch to compile</p> <p>If you want to compile the latest development code, you can skip this step and go on to the next one. :)</p> <p>If instead, you want to compile the code for a specific release of GlusterFS (such as v3.4), get the list of release names here:</p> <pre><code># git branch -a | grep release\nremotes/origin/release-2.0\nremotes/origin/release-3.0\nremotes/origin/release-3.1\nremotes/origin/release-3.2\nremotes/origin/release-3.3\nremotes/origin/release-3.4\nremotes/origin/release-3.5\n</code></pre> <p>Then switch to the correct release using the git \"checkout\" command, and the name of the release after the \"remotes/origin/\" bit from the list above:</p> <pre><code>git checkout release-3.4\n</code></pre> <p>NOTE - The CentOS 5.x instructions have only been tested for the master branch in GlusterFS git. It is unknown (yet) if they work for branches older than release-3.5.</p> <p>If you are compiling the latest development code you can skip steps 4 and 5. Instead, you can run the below command and you will get the RPMs.</p> <pre><code>extras/LinuxRPM/make_glusterrpms\n</code></pre> </li> <li> <p>Configure and compile GlusterFS</p> <p>Now you're ready to compile Gluster:</p> <pre><code>./autogen.sh\n./configure --enable-fusermount\nmake dist\n</code></pre> </li> <li> <p>Create the GlusterFS RPMs</p> <pre><code>cd extras/LinuxRPM\nmake glusterrpms\n</code></pre> <p>That should complete with no errors, leaving you with a directory containing the RPMs.</p> <pre><code># ls -l *rpm\n-rw-rw-r-- 1 jc jc 3966111 Mar  2 12:15 glusterfs-3git-1.el5.centos.src.rpm\n-rw-rw-r-- 1 jc jc 1548890 Mar  2 12:17 glusterfs-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc   66680 Mar  2 12:17 glusterfs-api-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc   20399 Mar  2 12:17 glusterfs-api-devel-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  123806 Mar  2 12:17 glusterfs-cli-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc 7850357 Mar  2 12:17 glusterfs-debuginfo-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  112677 Mar  2 12:17 glusterfs-devel-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  100410 Mar  2 12:17 glusterfs-fuse-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  187221 Mar  2 12:17 glusterfs-geo-replication-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  299171 Mar  2 12:17 glusterfs-libs-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc   44943 Mar  2 12:17 glusterfs-rdma-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  123065 Mar  2 12:17 glusterfs-regression-tests-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc   16224 Mar  2 12:17 glusterfs-resource-agents-3git-1.el5.centos.x86_64.rpm\n-rw-rw-r-- 1 jc jc  654043 Mar  2 12:17 glusterfs-server-3git-1.el5.centos.x86_64.rpm\n</code></pre> </li> </ol>"},{"location":"Developer-guide/coredump-on-customer-setup/","title":"Get core dump on a customer set up without killing the process","text":""},{"location":"Developer-guide/coredump-on-customer-setup/#why-do-we-need-this","title":"Why do we need this?","text":"<p>Finding the root cause of an issue that occurred in the customer/production setup is a challenging task. Most of the time we cannot replicate/setup the environment and scenario which is leading to the issue on our test setup. In such cases, we got to grab most of the information from the system where the problem has occurred.</p>"},{"location":"Developer-guide/coredump-on-customer-setup/#what-information-we-look-for-and-also-useful","title":"What information we look for and also useful?","text":"<p>The information like a core dump is very helpful to catch the root cause of an issue by adding ASSERT() in the code at the places where we feel something is wrong and install the custom build on the affected setup. But the issue is ASSERT() would kill the process and produce the core dump.</p>"},{"location":"Developer-guide/coredump-on-customer-setup/#is-it-a-good-idea-to-do-assert-on-customer-setup","title":"Is it a good idea to do ASSERT() on customer setup?","text":"<p>Remember we are seeking help from customer setup, they unlikely agree to kill the process and produce the core dump for us to root cause it. It affects the customer\u2019s business and nobody agrees with this proposal.</p>"},{"location":"Developer-guide/coredump-on-customer-setup/#what-if-we-have-a-way-to-produce-a-core-dump-without-a-kill","title":"What if we have a way to produce a core dump without a kill?","text":"<p>Yes, Glusterfs provides a way to do this. Gluster has customized ASSERT() i.e GF_ASSERT() in place which helps in producing the core dump without killing the associated process and also provides a script which can be run on the customer set up that produces the core dump without harming the running process (This presumes we already have GF_ASSERT() at the expected place in the current build running on customer setup. If not, we need to install custom build on that setup by adding GF_ASSERT()).</p>"},{"location":"Developer-guide/coredump-on-customer-setup/#is-gf_assert-newly-introduced-in-gluster-code","title":"Is GF_ASSERT() newly introduced in Gluster code?","text":"<p>No. GF_ASSERT() is already there in the codebase before this improvement. In the debug build, GF_ASSERT() kills the process and produces the core dump but in the production build, it just logs the error and moves on. What we have done is we just changed the implementation of the code and now in production build also we get the core dump but the process won\u2019t be killed. The code places where GF_ASSERT() is not covered, please add it as per the requirement.</p>"},{"location":"Developer-guide/coredump-on-customer-setup/#here-are-the-steps-to-achieve-the-goal","title":"Here are the steps to achieve the goal:","text":"<ul> <li>Add GF_ASSERT() in the Gluster code path where you expect something wrong is happening.</li> <li>Build the Gluster code, install and mount the Gluster volume (For detailed steps refer: Gluster quick start guide).</li> <li>Now, in the other terminal, run the gfcore.py script   <code># ./extras/debug/gfcore.py $PID 1 /tmp/</code> (PID of the gluster process you are interested in, got it by <code>ps -ef | grep gluster</code>   in the previous step. For more details, check <code># ./extras/debug/gfcore.py --help</code>)</li> <li>Hit the code path where you have introduced GF_ASSERT(). If GF_ASSERT() is in fuse_write() path, you can hit the code   path by writing on to a file present under Gluster moun. Ex: <code># dd if=/dev/zero of=/mnt/glustrefs/abcd bs=1M count=1</code>   where <code>/mnt/glusterfs</code> is the gluster mount</li> <li>Go to the terminal where the gdb is running (step 3) and observe that the gdb process is terminated</li> <li>Go to the directory where the core-dump is produced. Default would be present working directory.</li> <li>Access the core dump using gdb Ex: <code># gdb -ex \"core-file $GFCORE_FILE\" $GLUSTER_BINARY</code>   (1st arg would be core file name and 2nd arg is o/p of file command in the previous step)</li> <li>Observe that the Gluster process is unaffected by checking its process state. Check pid status using <code>ps -ef | grep gluster</code></li> </ul> <p>Thanks, Xavi Hernandez(jahernan@redhat.com) for the idea. This will ease many Gluster developer's/maintainer\u2019s life.</p>"},{"location":"GlusterFS-Tools/","title":"GlusterFS Tools List","text":""},{"location":"GlusterFS-Tools/#glusterfs-tools","title":"GlusterFS Tools","text":"<ul> <li>glusterfind</li> <li>gfind missing files</li> </ul>"},{"location":"GlusterFS-Tools/gfind-missing-files/","title":"gfind missing files","text":""},{"location":"GlusterFS-Tools/gfind-missing-files/#introduction","title":"Introduction","text":"<p>The tool gfind_missing_files.sh can be used to find the missing files in a GlusterFS geo-replicated secondary volume. The tool uses a multi-threaded crawler operating on the backend .glusterfs of a brickpath which is passed as one of the parameters to the tool. It does a stat on each entry in the secondary volume mount to check for the presence of a file. The tool uses the aux-gfid-mount thereby avoiding path conversions and potentially saving time.</p> <p>This tool should be run on every node and each brickpath in a geo-replicated primary volume to find the missing files on the secondary volume.</p> <p>The script gfind_missing_files.sh is a wrapper script that in turn uses the gcrawler binary to do the backend crawling. The script detects the gfids of the missing files and runs the gfid-to-path conversion script to list out the missing files with their full pathnames.</p>"},{"location":"GlusterFS-Tools/gfind-missing-files/#usage","title":"Usage","text":"<pre><code>bash gfind_missing_files.sh &lt;BRICK_PATH&gt; &lt;SECONDARY_HOST&gt; &lt;SECONDARY_VOL&gt; &lt;OUTFILE&gt;\n            BRICK_PATH     -   Full path of the brick\n            SECONDARY_HOST -   Hostname of gluster volume\n            SECONDARY_VOL  -   Gluster volume name\n            OUTFILE        -    Output file which contains gfids of the missing files\n</code></pre> <p>The gfid-to-path conversion uses a quicker algorithm for converting gfids to paths and it is possible that in some cases all missing gfids may not be converted to their respective paths.</p>"},{"location":"GlusterFS-Tools/gfind-missing-files/#example-output126733-missing-files","title":"Example output(126733 missing files)","text":"<pre><code># ionice -c 2 -n 7 ./gfind_missing_files.sh /bricks/m3 acdc secondary-vol ~/test_results/m3-4.txt\nCalling crawler...\nCrawl Complete.\ngfids of skipped files are available in the file /root/test_results/m3-4.txt\nStarting gfid to path conversion\nPath names of skipped files are available in the file /root/test_results/m3-4.txt_pathnames\nWARNING: Unable to convert some GFIDs to Paths, GFIDs logged to /root/test_results/m3-4.txt_gfids\nUse bash gfid_to_path.sh &lt;brick-path&gt; /root/test_results/m3-4.txt_gfids to convert those GFIDs to Path\nTotal Missing File Count : 126733\n</code></pre> <p>In such cases, an additional step is needed to convert those gfids to paths. This can be used as shown below:</p> <pre><code>bash gfid_to_path.sh &lt;BRICK_PATH&gt; &lt;GFID_FILE&gt;\n             BRICK_PATH - Full path of the brick.\n             GFID_FILE  - OUTFILE_gfids got from gfind_missing_files.sh\n</code></pre>"},{"location":"GlusterFS-Tools/gfind-missing-files/#things-to-keep-in-mind-when-running-the-tool","title":"Things to keep in mind when running the tool","text":"<ol> <li> <p>Running this tool can result in a crawl of the backend filesystem at each     brick which can be intensive. To ensure there is no impact on ongoing I/O on     RHS volumes, we recommend that this tool be run at a low I/O scheduling class     (best-effort) and priority.</p> <pre><code> ionice -c 2 -p &lt;pid of gfind_missing_files.sh&gt;\n</code></pre> </li> <li> <p>We do not recommend interrupting the tool when it is running     (e.g. by doing CTRL^C). It is better to wait for the tool to finish     execution. In case it is interrupted, manually unmount the Slave Volume.</p> <pre><code> umount &lt;MOUNT_POINT&gt;\n</code></pre> </li> </ol>"},{"location":"GlusterFS-Tools/glusterfind/","title":"glusterfind - A tool to find Modified files/dirs","text":"<p>A tool which helps to get full/incremental list of files/dirs from GlusterFS Volume using Changelog/Find. In Gluster volumes, detecting the modified files is challenging. Readdir on a directory leads to multiple network calls since files in a directory are distributed across nodes.</p> <p>This tool should be run in one of the node, which will get Volume info and gets the list of nodes and brick paths. For each brick, it spawns the process and runs crawler command in respective node. Crawler will be run in brick FS(xfs, ext4 etc) and not in Gluster Mount. Crawler generates output file with the list of files modified after last run or after the session creation.</p>"},{"location":"GlusterFS-Tools/glusterfind/#session-management","title":"Session Management","text":"<p>Create a glusterfind session to remember the time when last sync or processing complete. For example, your backup application runs every day and gets incremental results on each run. The tool maintains session in <code>$GLUSTERD_WORKDIR/glusterfind/</code>, for each session it creates and directory and creates a sub directory with Volume name. (Default working directory is /var/lib/glusterd, in some systems this location may change. To find Working dir location run</p> <pre><code>grep working-directory /etc/glusterfs/glusterd.vol\n</code></pre> <p>or</p> <pre><code>grep working-directory /usr/local/etc/glusterfs/glusterd.vol\n</code></pre> <p>if you installed from the source.</p> <p>For example, if the session name is \"backup\" and volume name is \"datavol\", then the tool creates <code>$GLUSTERD_WORKDIR/glusterfind/backup/datavol</code>. Now onwards we refer this directory as <code>$SESSION_DIR</code>.</p> <pre><code>create =&gt; pre =&gt; post =&gt; [delete]\n</code></pre> <p>Once the session is created, we can run the tool with two steps Pre and Post. To collect the list of modified files after the create time or last run time, we need to call pre command. Pre command finds the modified files and generates output file. Consumer can check the exit code of pre command and start processing those files. As a post processing step run the post command to update the session time as per latest run.</p> <p>For example, backup utility runs Pre command and gets the list of files/directories changed. Sync those files to backup target and inform to glusterfind by calling Post command.</p> <p>At the end of Pre command, <code>$SESSION_DIR/status.pre</code> status file will get created. Pre status file stores the time when current crawl is started, and get all the files/dirs modified till that time. Once Post is called, <code>$SESSION_DIR/status.pre</code> will be renamed to <code>$SESSION_DIR/status</code>. content of this file will be used as start time for the next crawl.</p> <p>During Pre, we can force the tool to do full find instead of incremental find. Tool uses <code>find</code> command in brick backend to get list of files/dirs.</p> <p>When <code>glusterfind create</code>, in that node it generates ssh key($GLUSTERD_WORKDIR/glusterfind.secret.pem) and distributes to all Peers via Glusterd. Once ssh key is distributed in Trusted pool, tool can run ssh commands and copy files from other Volume nodes.</p> <p>When <code>glusterfind pre</code> is run, it internally runs <code>gluster volume info</code> to get list of nodes and respective brick paths. For each brick, it calls respective node agents via ssh to find the modified files/dirs which are local them. Once each node agents generates output file, glusterfind collects all the files via scp and merges it into given output file.</p> <p>When <code>glusterfind post</code> is run, it renames <code>$SESSION_DIR/status.pre</code> file to <code>$SESSION_DIR/status</code>.</p>"},{"location":"GlusterFS-Tools/glusterfind/#changelog-mode-and-gfid-to-path-conversion","title":"Changelog Mode and GFID to Path conversion","text":"<p>Incremental find uses Changelogs to get the list of GFIDs modified/created. Any application expects file path instead of GFID. Their is no standard/easy way to convert from GFID to Path.</p> <p>If we set build-pgfid option in Volume GlusterFS starts recording each files parent directory GFID as xattr in file on any ENTRY fop.</p> <pre><code>trusted.pgfid.&lt;GFID&gt;=NUM_LINKS\n</code></pre> <p>To convert from GFID to path, we can mount Volume with aux-gfid-mount option, and get Path information by a getfattr query.</p> <pre><code>getfattr -n glusterfs.ancestry.path -e text /mnt/datavol/.gfid/&lt;GFID&gt;\n</code></pre> <p>This approach is slow, for a requested file gets parent GFID via xattr and reads that directory to gets the file which is having same inode number as of GFID file. To improve the performance, glusterfind uses build-pgfid option, but instead of using getfattr on mount it gets the details from brick backend. glusterfind collects all parent GFIDs at once and starts crawling each directory. Instead of processing one GFID to Path conversion, it gets inode numbers of all input GFIDs and filter while reading parent directory.</p> <p>Above method is fast compared to <code>find -samefile</code> since it crawls only required directories to find files with same inode number as GFID file. But pgfid information only available when a lookup is made or any ENTRY fop to a file after enabling build-pgfid. The files created before build-pgfid enable will not get converted to path from GFID with this approach.</p> <p>Tool collects the list of GFIDs failed to convert with above method and does a full crawl to convert it to path. Find command is used to crawl entire namespace. Instead of calling find command for every GFID, glusterfind uses an efficient way to convert all GFID to path with single call to <code>find</code> command.</p>"},{"location":"GlusterFS-Tools/glusterfind/#usage","title":"Usage","text":""},{"location":"GlusterFS-Tools/glusterfind/#create-the-session","title":"Create the session","text":"<pre><code>glusterfind create SESSION_NAME VOLNAME [--force]\nglusterfind create --help\n</code></pre> <p>Where, SESSION_NAME is any name without space to identify when run second time. When a node is added to Volume then the tool expects ssh keys to be copied to new node(s) also. Run Create command with <code>--force</code> to distribute keys again.</p> <p>Examples,</p> <pre><code># glusterfind create --help\n# glusterfind create backup datavol\n# glusterfind create antivirus_scanner datavol\n# glusterfind create backup datavol --force\n</code></pre>"},{"location":"GlusterFS-Tools/glusterfind/#pre-command","title":"Pre Command","text":"<pre><code>glusterfind pre SESSION_NAME VOLUME_NAME OUTFILE\nglusterfind pre --help\n</code></pre> <p>We need not specify Volume name since session already has the details. List of files will be populated in OUTFILE.</p> <p>To trigger the full find, call the pre command with <code>--full</code> argument. Multiple crawlers are available for incremental find, we can choose crawl type with <code>--crawl</code> argument.</p> <p>Examples,</p> <pre><code># glusterfind pre backup datavol /root/backup.txt\n# glusterfind pre backup datavol /root/backup.txt --full\n\n# # Changelog based crawler, works only for incremental\n# glusterfind pre backup datavol /root/backup.txt --crawler=changelog\n\n# # Find based crawler, works for both full and incremental\n# glusterfind pre backup datavol /root/backup.txt --crawler=brickfind\n</code></pre> <p>Output file contains list of files/dirs relative to the Volume mount, if we need to prefix with any path to have absolute path then,</p> <pre><code>glusterfind pre backup datavol /root/backup.txt --file-prefix=/mnt/datavol/\n</code></pre>"},{"location":"GlusterFS-Tools/glusterfind/#list-command","title":"List Command","text":"<p>To get the list of sessions and respective session time,</p> <pre><code>glusterfind list [--session SESSION_NAME] [--volume VOLUME_NAME]\n</code></pre> <p>Examples,</p> <pre><code># glusterfind list\n# glusterfind list --session backup\n</code></pre> <p>Example output,</p> <pre><code>SESSION                   VOLUME                    SESSION TIME\n---------------------------------------------------------------------------\nbackup                    datavol                   2015-03-04 17:35:34\n</code></pre>"},{"location":"GlusterFS-Tools/glusterfind/#post-command","title":"Post Command","text":"<pre><code>glusterfind post SESSION_NAME VOLUME_NAME\n</code></pre> <p>Examples,</p> <pre><code>glusterfind post backup datavol\n</code></pre>"},{"location":"GlusterFS-Tools/glusterfind/#delete-command","title":"Delete Command","text":"<pre><code>glusterfind delete SESSION_NAME VOLUME_NAME\n</code></pre> <p>Examples,</p> <pre><code>glusterfind delete backup datavol\n</code></pre>"},{"location":"GlusterFS-Tools/glusterfind/#adding-more-crawlers","title":"Adding more Crawlers","text":"<p>Adding more crawlers is very simple, Add an entry in <code>$GLUSTERD_WORKDIR/glusterfind.conf</code>. glusterfind can choose your crawler using <code>--crawl</code> argument.</p> <pre><code>[crawlers]\nchangelog=/usr/libexec/glusterfs/glusterfind/changelog.py\nbrickfind=/usr/libexec/glusterfs/glusterfind/brickfind.py\n</code></pre> <p>For example, if you have a multithreaded brick crawler, say <code>parallelbrickcrawl</code> add it to the conf file.</p> <pre><code>[crawlers]\nchangelog=/usr/libexec/glusterfs/glusterfind/changelog.py\nbrickfind=/usr/libexec/glusterfs/glusterfind/brickfind.py\nparallelbrickcrawl=/root/parallelbrickcrawl\n</code></pre> <p>Custom crawler can be executable script/binary which accepts volume name, brick path, output_file and start time(and optional debug flag)</p> <p>For example,</p> <pre><code>/root/parallelbrickcrawl SESSION_NAME VOLUME BRICK_PATH OUTFILE START_TIME [--debug]\n</code></pre> <p>Where <code>START_TIME</code> is in unix epoch format, <code>START_TIME</code> will be zero for full find.</p>"},{"location":"GlusterFS-Tools/glusterfind/#known-issues","title":"Known Issues","text":"<ol> <li>Deleted files will not get listed, since we can't convert GFID to Path if file/dir is deleted.</li> <li>Only new name will get listed if Renamed.</li> <li>All hardlinks will get listed.</li> </ol>"},{"location":"Install-Guide/Common-criteria/","title":"Common Criteria","text":""},{"location":"Install-Guide/Common-criteria/#getting-started","title":"Getting Started","text":"<p>This tutorial will cover different options for getting a Gluster cluster up and running. Here is a rundown of the steps we need to do.</p> <p>To start, we will go over some common things you will need to know for setting up Gluster.</p> <p>Next, choose the method you want to use to set up your first cluster:</p> <ul> <li>Within a virtual machine</li> <li>To bare metal servers</li> <li>To EC2 instances in Amazon</li> </ul> <p>Finally, we will install Gluster, create a few volumes, and test using them.</p>"},{"location":"Install-Guide/Common-criteria/#general-setup-principles","title":"General Setup Principles","text":"<p>No matter where you will be installing Gluster, it helps to understand a few key concepts on what the moving parts are.</p> <p>First, it is important to understand that GlusterFS isn\u2019t really a filesystem in and of itself. It concatenates existing filesystems into one (or more) big chunks so that data being written into or read out of Gluster gets distributed across multiple hosts simultaneously. This means that you can use space from any host that you have available. Typically, XFS is recommended but it can be used with other filesystems as well. Most commonly EXT4 is used when XFS isn\u2019t, but you can (and many, many people do) use another filesystem that suits you.</p> <p>Now that we understand that, we can define a few of the common terms used in Gluster.</p> <ul> <li>A trusted pool refers collectively to the hosts in a given   Gluster Cluster.</li> <li>A node or \u201cserver\u201d refers to any server that is part of a   trusted pool. In general, this assumes all nodes are in the same   trusted pool.</li> <li>A brick is used to refer to any device (really this means   filesystem) that is being used for Gluster storage.</li> <li>An export refers to the mount path of the brick(s) on a given   server, for example, /export/brick1</li> <li>The term Global Namespace is a fancy way of saying a Gluster   volume</li> <li>A Gluster volume is a collection of one or more bricks (of   course, typically this is two or more). This is analogous to   /etc/exports entries for NFS.</li> <li>GNFS and kNFS. GNFS is how we refer to our inline NFS   server. kNFS stands for kernel NFS, or, as most people would say,   just plain NFS. Most often, you will want kNFS services disabled on   the Gluster nodes. Gluster NFS doesn't take any additional   configuration and works just like you would expect with NFSv3. It is   possible to configure Gluster and NFS to live in harmony if you want   to.</li> </ul> <p>Other notes:</p> <ul> <li>For this test, if you do not have DNS set up, you can get away with   using /etc/hosts entries for the two nodes. However, when you move   from this basic setup to using Gluster in production, correct DNS   entries (forward and reverse) and NTP are essential.</li> <li>When you install the Operating System, do not format the Gluster   storage disks! We will use specific settings with the mkfs command   later on when we set up Gluster. If you are testing with a single   disk (not recommended), make sure to carve out a free partition or   two to be used by Gluster later, so that you can format or reformat   at will during your testing.</li> <li>Firewalls are great, except when they aren\u2019t. For storage servers,   being able to operate in a trusted environment without firewalls can   mean huge gains in performance, and is recommended. In case you absolutely   need to set up a firewall, have a look at   Setting up clients for   information on the ports used.</li> </ul> <p>Click here to get started</p>"},{"location":"Install-Guide/Community-Packages/","title":"Community Packages","text":""},{"location":"Install-Guide/Community-Packages/#community-packages","title":"Community Packages","text":""},{"location":"Install-Guide/Community-Packages/#glusterfs","title":"GlusterFS","text":"<p>Tentative plans for community convenience packages.</p> <p>A yes means packages are (or will be) provided in the respective repository. A no means no plans to build new updates. Existing packages will remain in the repos. The following GlusterFS versions have reached EOL[1]: 8, 7, 6 and earlier.</p> 11 10 CentOS Storage SIG[2] Stream 8 yes yes Stream 9 yes yes Fedora[3] F37 yes yes\u00b9 F38 yes\u00b9 yes F39(rawhide) yes\u00b9 yes Debian[3] Buster/10 yes yes Bullseye/11 yes yes Bookworm/12 yes yes Trixie/13(sid) yes no Ubuntu Launchpad[4] Bionic/18.04 yes yes Focal/20.04 yes yes Jammy/22.04 yes yes Kinetic/22.10 yes yes Lunar/23.04 yes yes Mantic/23.10 yes no OpenSUSE Build Service[5] Leap15.4 yes yes SLES15SP4 yes yes Tumbleweed yes yes <p>NOTE - We are not building Debian arm packages due to resource constraints for a while now. There will be only amd64 packages present on download.gluster.org</p>"},{"location":"Install-Guide/Community-Packages/#related-packages","title":"Related Packages","text":"glusterfs-selinux gdeploy gluster-block glusterfs-coreutils nfs-ganesha Samba CentOS Storage SIG[2] Stream 8 yes tbd yes yes yes yes Stream 9 yes tbd yes yes yes yes Fedora[3] F37 yes yes yes yes yes ? F38 yes yes yes yes yes ? F39(rawhide) yes yes yes yes yes ? Debian[3] Buster/10 n/a no no yes yes ? Bullseye/11 n/a no no yes yes ? Bookworm/12 n/a no no yes yes ? Trixie/13(sid) n/a no no yes yes ? Ubuntu Launchpad[4] Bionic/18.04 n/a no no yes yes ? Focal/20.04 n/a no no yes yes ? Jammy/22.04 n/a no no yes yes ? Kinetic/22.10 n/a no no yes yes ? Lunar/23.04 n/a no no yes yes ? Mantic/23.10 n/a no no yes yes ? OpenSUSE Build Service[5] Leap15.4 n/a yes yes yes yes ? SLES15SP4 n/a yes yes yes yes ? Tumbleweed n/a yes yes yes yes ? <p>[1] https://www.gluster.org/release-schedule/ [2] https://wiki.centos.org/SpecialInterestGroup/Storage [3] https://download.gluster.org/pub/gluster/glusterfs [4] https://launchpad.net/~gluster [5] http://download.opensuse.org/repositories/home:/glusterfs:/</p> <p>\u00b9 Fedora Updates, UpdatesTesting, or Rawhide repository. Use dnf to install.</p>"},{"location":"Install-Guide/Configure/","title":"Configure","text":""},{"location":"Install-Guide/Configure/#configure-firewall","title":"Configure Firewall","text":"<p>For the Gluster to communicate within a cluster either the firewalls have to be turned off or enable communication for each server.</p> <pre><code>iptables -I INPUT -p all -s `&lt;ip-address&gt;` -j ACCEPT\n</code></pre>"},{"location":"Install-Guide/Configure/#configure-the-trusted-pool","title":"Configure the trusted pool","text":"<p>Remember that the trusted pool is the term used to define a cluster of nodes in Gluster. Choose a server to be your \u201cprimary\u201d server. This is just to keep things simple, you will generally want to run all commands from this tutorial. Keep in mind, running many Gluster specific commands (like <code>gluster volume create</code>) on one server in the cluster will execute the same command on all other servers.</p> <p>Replace <code>nodename</code> with hostname of the other server in the cluster, or IP address if you don\u2019t have DNS or <code>/etc/hosts</code> entries. Let say we want to connect to <code>node02</code>:</p> <pre><code>gluster peer probe node02\n</code></pre> <p>Notice that running <code>gluster peer status</code> from the second node shows that the first node has already been added.</p>"},{"location":"Install-Guide/Configure/#partition-the-disk","title":"Partition the disk","text":"<p>Assuming you have an empty disk at <code>/dev/sdb</code>: (You can check the partitions on your system using <code>fdisk -l</code>)</p> <pre><code>fdisk /dev/sdb\n</code></pre> <p>And then create a single XFS partition using fdisk</p>"},{"location":"Install-Guide/Configure/#format-the-partition","title":"Format the partition","text":"<pre><code>mkfs.xfs -i size=512 /dev/sdb1\n</code></pre>"},{"location":"Install-Guide/Configure/#add-an-entry-to-etcfstab","title":"Add an entry to /etc/fstab","text":"<pre><code>echo \"/dev/sdb1 /export/sdb1 xfs defaults 0 0\"  &gt;&gt; /etc/fstab\n</code></pre>"},{"location":"Install-Guide/Configure/#mount-the-partition-as-a-gluster-brick","title":"Mount the partition as a Gluster \"brick\"","text":"<pre><code>mkdir -p /export/sdb1 &amp;&amp; mount -a &amp;&amp; mkdir -p /export/sdb1/brick\n</code></pre>"},{"location":"Install-Guide/Configure/#set-up-a-gluster-volume","title":"Set up a Gluster volume","text":"<p>The most basic Gluster volume type is a \u201cDistribute only\u201d volume (also referred to as a \u201cpure DHT\u201d volume if you want to impress the folks at the water cooler). This type of volume simply distributes the data evenly across the available bricks in a volume. So, if I write 100 files, on average, fifty will end up on one server, and fifty will end up on another. This is faster than a \u201creplicated\u201d volume, but isn\u2019t as popular since it doesn\u2019t give you two of the most sought after features of Gluster \u2014 multiple copies of the data, and automatic failover if something goes wrong.</p> <p>To set up a replicated volume:</p> <pre><code>gluster volume create gv0 replica 3 node01.mydomain.net:/export/sdb1/brick \\\n  node02.mydomain.net:/export/sdb1/brick                                   \\\n  node03.mydomain.net:/export/sdb1/brick\n</code></pre> <p>Breaking this down into pieces:</p> <ul> <li>the first part says to create a gluster volume named gv0   (the name is arbitrary, <code>gv0</code> was chosen simply because   it\u2019s less typing than <code>gluster_volume_0</code>).</li> <li>make the volume a replica volume</li> <li>keep a copy of the data on at least 3 bricks at any given time.   Since we only have three bricks total, this   means each server will house a copy of the data.</li> <li>we specify which nodes to use, and which bricks on those nodes. The order here is   important when you have more bricks.</li> </ul> <p>It is possible (as of the most current release as of this writing, Gluster 3.3) to specify the bricks in such a way that you would make both copies of the data reside on a single node. This would make for an embarrassing explanation to your boss when your bulletproof, completely redundant, always on super cluster comes to a grinding halt when a single point of failure occurs.</p> <p>Now, we can check to make sure things are working as expected:</p> <pre><code>gluster volume info\n</code></pre> <p>And you should see results similar to the following:</p> <pre><code>Volume Name: gv0\nType: Replicate\nVolume ID: 8bc3e96b-a1b6-457d-8f7a-a91d1d4dc019\nStatus: Created\nNumber of Bricks: 1 x 3 = 3\nTransport-type: tcp\nBricks:\nBrick1: node01.yourdomain.net:/export/sdb1/brick\nBrick2: node02.yourdomain.net:/export/sdb1/brick\nBrick3: node03.yourdomain.net:/export/sdb1/brick\n</code></pre> <p>This shows us essentially what we just specified during the volume creation. The one key output worth noticing is <code>Status</code>. A status of <code>Created</code> means that the volume has been created, but hasn\u2019t yet been started, which would cause any attempt to mount the volume fail.</p> <p>Now, we should start the volume before we try to mount it.</p> <pre><code>gluster volume start gv0\n</code></pre>"},{"location":"Install-Guide/Install/","title":"Install","text":""},{"location":"Install-Guide/Install/#installing-gluster","title":"Installing Gluster","text":"<p>For RPM based distributions, if you will be using InfiniBand, add the glusterfs RDMA package to the installations. For RPM based systems, yum/dnf is used as the install method in order to satisfy external depencies such as compat-readline5</p>"},{"location":"Install-Guide/Install/#community-packages","title":"Community Packages","text":"<p>Packages are provided according to this table.</p>"},{"location":"Install-Guide/Install/#for-debian","title":"For Debian","text":"<p>Add the GPG key to apt:</p> <pre><code>wget -O - https://download.gluster.org/pub/gluster/glusterfs/9/rsa.pub | apt-key add -\n</code></pre> <p>If the rsa.pub is not available at the above location, please look here https://download.gluster.org/pub/gluster/glusterfs/7/rsa.pub and add the GPG key to apt:</p> <pre><code>wget -O - https://download.gluster.org/pub/gluster/glusterfs/7/rsa.pub | apt-key add -\n</code></pre> <p>Add the source:</p> <pre><code>DEBID=$(grep 'VERSION_ID=' /etc/os-release | cut -d '=' -f 2 | tr -d '\"')\nDEBVER=$(grep 'VERSION=' /etc/os-release | grep -Eo '[a-z]+')\nDEBARCH=$(dpkg --print-architecture)\necho deb https://download.gluster.org/pub/gluster/glusterfs/LATEST/Debian/${DEBID}/${DEBARCH}/apt ${DEBVER} main &gt; /etc/apt/sources.list.d/gluster.list\n</code></pre> <p>Update package list:</p> <pre><code>apt update\n</code></pre> <p>Install:</p> <pre><code>apt install glusterfs-server\n</code></pre>"},{"location":"Install-Guide/Install/#for-ubuntu","title":"For Ubuntu","text":"<p>Install software-properties-common:</p> <pre><code>apt install software-properties-common\n</code></pre> <p>Then add the community GlusterFS PPA:</p> <pre><code>add-apt-repository ppa:gluster/glusterfs-7\napt update\n</code></pre> <p>Finally, install the packages:</p> <pre><code>apt install glusterfs-server\n</code></pre> <p>Note: Packages exist for Ubuntu 16.04 LTS, 18.04 LTS, 20.04 LTS, 20.10, 21.04</p>"},{"location":"Install-Guide/Install/#for-red-hatcentos","title":"For Red Hat/CentOS","text":"<p>RPMs for CentOS and other RHEL clones are available from the CentOS Storage SIG mirrors.</p> <p>For more installation details refer Gluster Quick start guide from CentOS Storage SIG.</p>"},{"location":"Install-Guide/Install/#for-fedora","title":"For Fedora","text":"<p>Install the Gluster packages:</p> <pre><code>dnf install glusterfs-server\n</code></pre> <p>Once you are finished installing, you can move on to configuration section.</p>"},{"location":"Install-Guide/Install/#for-arch-linux","title":"For Arch Linux","text":"<p>Install the Gluster package:</p> <pre><code>pacman -S glusterfs\n</code></pre>"},{"location":"Install-Guide/Overview/","title":"Overview","text":""},{"location":"Install-Guide/Overview/#purpose","title":"Purpose","text":"<p>The Install Guide (IG) is aimed at providing the sequence of steps needed for setting up Gluster. It contains a reasonable degree of detail which helps an administrator to understand the terminology, the choices and how to configure the deployment to the storage needs of their application workload. The Quick Start Guide (QSG) is designed to get a deployment with default choices and is aimed at those who want to spend less time to get to a deployment.</p> <p>After you deploy Gluster by following these steps, we recommend that you read the Gluster Admin Guide to learn how to administer Gluster and how to select a volume type that fits your needs. Also, be sure to enlist the help of the Gluster community via the IRC or, Slack channels (see https://www.gluster.org/community/) or Q&amp;A section.</p>"},{"location":"Install-Guide/Overview/#overview_1","title":"Overview","text":"<p>Before we begin, let\u2019s talk about what Gluster is, address a few myths and misconceptions, and define a few terms. This will help you to avoid some of the common issues that others encounter as they start their journey with Gluster.</p>"},{"location":"Install-Guide/Overview/#what-is-gluster","title":"What is Gluster","text":"<p>Gluster is a distributed scale-out filesystem that allows rapid provisioning of additional storage based on your storage consumption needs. It incorporates automatic failover as a primary feature. All of this is accomplished without a centralized metadata server.</p>"},{"location":"Install-Guide/Overview/#what-is-gluster-without-making-me-learn-an-extra-glossary-of-terminology","title":"What is Gluster without making me learn an extra glossary of terminology?","text":"<ul> <li>Gluster is an easy way to provision your own storage backend NAS   using almost any hardware you choose.</li> <li>You can add as much as you want to start with, and if you need more   later, adding more takes just a few steps.</li> <li>You can configure failover automatically, so that if a server goes   down, you don\u2019t lose access to the data. No manual steps are   required for failover. When you fix the server that failed and bring   it back online, you don\u2019t have to do anything to get the data back   except wait. In the meantime, the most current copy of your data   keeps getting served from the node that was still running.</li> <li>You can build a clustered filesystem in a matter of minutes\u2026 it is   trivially easy for basic setups</li> <li>It takes advantage of what we refer to as \u201ccommodity hardware\u201d,   which means, we run on just about any hardware you can think of,   from that stack of decomm\u2019s and gigabit switches in the corner no   one can figure out what to do with (how many license servers do you   really need, after all?), to that dream array you were speccing out   online. Don\u2019t worry, I won\u2019t tell your boss.</li> <li>It takes advantage of commodity software too. No need to mess with   kernels or fine tune the OS to a tee. We run on top of most unix   filesystems, with XFS and ext4 being the most popular choices. We do   have some recommendations for more heavily utilized arrays, but   these are simple to implement and you probably have some of these   configured already anyway.</li> <li>Gluster data can be accessed from just about anywhere \u2013 You can use   traditional NFS, SMB/CIFS for Windows clients, or our own native   GlusterFS (a few additional packages are needed on the client   machines for this, but as you will see, they are quite small).</li> <li>There are even more advanced features than this, but for now we will   focus on the basics.</li> <li>It\u2019s not just a toy. Gluster is enterprise-ready, and commercial   support is available if you need it. It is used in some of the most   taxing environments like media serving, natural resource   exploration, medical imaging, and even as a filesystem for Big Data.</li> </ul>"},{"location":"Install-Guide/Overview/#is-gluster-going-to-work-for-me-and-what-i-need-it-to-do","title":"Is Gluster going to work for me and what I need it to do?","text":"<p>Most likely, yes. People use Gluster for storage needs of a variety of application workloads. You are encouraged to ask around in our IRC or, Slack channels or Q&amp;A forums to see if anyone has tried something similar. That being said, there are a few places where Gluster is going to need more consideration than others.</p> <ul> <li>Accessing Gluster from SMB/CIFS is often going to be slow by most   people\u2019s standards. If you only moderate access by users, then it most   likely won\u2019t be an issue for you. On the other hand, adding enough   Gluster servers into the mix, some people have seen better performance   with us than other solutions due to the scale out nature of the   technology</li> <li>Gluster is traditionally better when using file sizes of at least 16KB   (with a sweet spot around 128KB or so).</li> </ul>"},{"location":"Install-Guide/Overview/#what-is-the-cost-and-complexity-required-to-set-up-cluster","title":"What is the cost and complexity required to set up cluster?","text":"<p>Question: How many billions of dollars is it going to cost to setup a cluster? Don\u2019t I need redundant networking, super fast SSD\u2019s, technology from Alpha Centauri delivered by men in black, etc\u2026?</p> <p>I have never seen anyone spend even close to a billion, unless they got the rust proof coating on the servers. You don\u2019t seem like the type that would get bamboozled like that, so have no fear. For the purpose of this tutorial, if your laptop can run two VM\u2019s with 1GB of memory each, you can get started testing and the only thing you are going to pay for is coffee (assuming the coffee shop doesn\u2019t make you pay them back for the electricity to power your laptop).</p> <p>If you want to test on bare metal, since Gluster is built with commodity hardware in mind, and because there is no centralized meta-data server, a very simple cluster can be deployed with two basic servers (2 CPU\u2019s, 4GB of RAM each, 1 Gigabit network). This is sufficient to have a nice file share or a place to put some nightly backups. Gluster is deployed successfully on all kinds of disks, from the lowliest 5200 RPM SATA to mightiest 1.21 gigawatt SSD\u2019s. The more performance you need, the more consideration you will want to put into how much hardware to buy, but the great thing about Gluster is that you can start small, and add on as your needs grow.</p>"},{"location":"Install-Guide/Overview/#ok-but-if-i-add-servers-on-later-dont-they-have-to-be-exactly-the-same","title":"OK, but if I add servers on later, don\u2019t they have to be exactly the same?","text":"<p>In a perfect world, sure. Having the hardware be the same means less troubleshooting when the fires start popping up. But plenty of people deploy Gluster on mix and match hardware, and successfully.</p> <p>Get started by checking some Common Criteria</p>"},{"location":"Install-Guide/Setup-Bare-metal/","title":"Setup Bare Metal","text":"<p>Note: You only need one of the three setup methods!</p>"},{"location":"Install-Guide/Setup-Bare-metal/#setup-method-2-setting-up-on-physical-servers","title":"Setup, Method 2 \u2013 Setting up on physical servers","text":"<p>To set up Gluster on physical servers, we recommend two servers of very modest specifications (2 CPUs, 2GB of RAM, 1GBE). Since we are dealing with physical hardware here, keep in mind, what we are showing here is for testing purposes. In the end, remember that forces beyond your control (aka, your bosses\u2019 boss...) can force you to take that the \u201cjust for a quick test\u201d environment right into production, despite your kicking and screaming against it. To prevent this, it can be a good idea to deploy your test environment as much as possible the same way you would to a production environment (in case it becomes one, as mentioned above). That being said, here is a reminder of some of the best practices we mentioned before:</p> <ul> <li>Make sure DNS and NTP are setup, correct, and working</li> <li>If you have access to a backend storage network, use it! 10GBE or   InfiniBand are great if you have access to them, but even a 1GBE   backbone can help you get the most out of your deployment. Make sure   that the interfaces you are going to use are also in DNS since we   will be using the hostnames when we deploy Gluster</li> <li>When it comes to disks, the more the merrier. Although you could   technically fake things out with a single disk, there would be   performance issues as soon as you tried to do any real work on the   servers</li> </ul> <p>With the explosion of commodity hardware, you don\u2019t need to be a hardware expert these days to deploy a server. Although this is generally a good thing, it also means that paying attention to some important, performance-impacting BIOS settings is commonly ignored. Several points that might cause issues when if you're unaware of them:</p> <ul> <li>Most manufacturers enable power saving mode by default. This is a   great idea for servers that do not have high-performance   requirements. For the average storage server, the performance-impact   of the power savings is not a reasonable tradeoff</li> <li>Newer motherboards and processors have lots of nifty features!   Enhancements in virtualization, newer ways of doing predictive   algorithms and NUMA are just a few to mention. To be safe, many   manufactures ship hardware with settings meant to work with as   massive a variety of workloads and configurations as they have   customers. One issue you could face is when you set up that blazing-fast   10GBE card you were so thrilled about installing? In many   cases, it would end up being crippled by a default 1x speed put in   place on the PCI-E bus by the motherboard.</li> </ul> <p>Thankfully, most manufacturers show all the BIOS settings, including the defaults, right in the manual. It only takes a few minutes to download, and you don\u2019t even have to power off the server unless you need to make changes. More and more boards include the functionality to make changes in the BIOS on the fly without even powering the box off. One word of caution of course, is don\u2019t go too crazy. Fretting over each tiny little detail and setting is usually not worth the time, and the more changes you make, the more you need to document and implement later. Try to find the happy balance between time spent managing the hardware (which ideally should be as close to zero after you setup initially) and the expected gains you get back from it.</p> <p>Finally, remember that some hardware really is better than others. Without pointing fingers anywhere specifically, it is often true that onboard components are not as robust as add-ons. As a general rule, you can safely delegate the onboard hardware to things like management network for the NIC\u2019s, and for installing the OS onto a SATA drive. At least twice a year you should check the manufacturer's website for bulletins about your hardware. Critical performance issues are often resolved with a simple driver or firmware update. As often as not, these updates affect the two most critical pieces of hardware on a machine you want to use for networked storage - the RAID controller and the NIC's.</p> <p>Once you have set up the servers and installed the OS, you are ready to move on to the install section.</p>"},{"location":"Install-Guide/Setup-aws/","title":"Setup AWS","text":"<p>Note: You only need one of the three setup methods!</p>"},{"location":"Install-Guide/Setup-aws/#setup-method-3-deploying-in-aws","title":"Setup, Method 3 \u2013 Deploying in AWS","text":"<p>Deploying in Amazon can be one of the fastest ways to get up and running with Gluster. Of course, most of what we cover here will work with other cloud platforms.</p> <ul> <li>Deploy at least two instances. For testing, you can use micro   instances (I even go as far as using spot instances in most cases).   Debates rage on what size instance to use in production, and there   is really no correct answer. As with most things, the real answer is   \u201cwhatever works for you\u201d, where the trade-offs between cost and   performance are balanced in a continual dance of trying to make your   project successful while making sure there is enough money left over   in the budget for you to get that sweet new ping pong table in the   break room.</li> <li>For cloud platforms, your data is wide open right from the start. As   such, you shouldn\u2019t allow open access to all ports in your security   groups if you plan to put a single piece of even the least valuable   information on the test instances. By least valuable, I mean \u201cCash   value of this coupon is 1/100th of 1 cent\u201d kind of least valuable.   Don\u2019t be the next one to end up as a breaking news flash on the   latest inconsiderate company to allow their data to fall into the   hands of the baddies. See Step 2 for the minimum ports you will need   open to use Gluster</li> <li>You can use the free \u201cephemeral\u201d storage for the Gluster bricks   during testing, but make sure to use some form of protection against   data loss when you move to production. Typically this means EBS   backed volumes or using S3 to periodically back up your data bricks.</li> </ul> <p>Other notes:</p> <ul> <li>In production, it is recommended to replicate your VM\u2019s across   multiple zones. For purpose of this tutorial, it is overkill, but if   anyone is interested in this please let us know since we are always   looking to write articles on the most requested features and   questions.</li> <li>Using EBS volumes and Elastic IPs are also recommended in   production. For testing, you can safely ignore these as long as you   are aware that the data could be lost at any moment, so make sure   your test deployment is just that, testing only.</li> <li>Performance can fluctuate wildly in a cloud environment. If   performance issues are seen, there are several possible strategies,   but keep in mind that this is the perfect place to take advantage of   the scale-out capability of Gluster. While it is not true in all   cases that deploying more instances will necessarily result in a   \u201cfaster\u201d cluster, in general, you will see that adding more nodes   means more performance for the cluster overall.</li> <li>If a node reboots, you will typically need to do some extra work to   get Gluster running again using the default EC2 configuration. If a   node is shut down, it can mean absolute loss of the node (depending   on how you set things up). This is well beyond the scope of this   document but is discussed in any number of AWS-related forums and   posts. Since I found out the hard way myself (oh, so you read the   manual every time?!), I thought it worth at least mentioning.</li> </ul> <p>Once you have both instances up, you can proceed to the install page.</p>"},{"location":"Install-Guide/Setup-virt/","title":"Setup on Virtual Machine","text":"<p>Note: You only need one of the three setup methods!</p>"},{"location":"Install-Guide/Setup-virt/#setup-method-1-setting-up-in-virtual-machines","title":"Setup, Method 1 \u2013 Setting up in virtual machines","text":"<p>As we just mentioned, to set up Gluster using virtual machines, you will need at least two virtual machines with at least 1GB of RAM each. You may be able to test with less but most users will find it too slow for their tastes. The particular virtualization product you use is a matter of choice. Common platforms include Xen, VMware ESX and Workstation, VirtualBox, and KVM. For purpose of this article, all steps assume KVM but the concepts are expected to be simple to translate to other platforms as well. The article assumes you know the particulars of how to create a virtual machine and have installed a 64 bit linux distribution already.</p> <p>Create or clone two VM\u2019s, with the following setup on each:</p> <ul> <li>2 disks using the VirtIO driver, one for the base OS and one that we   will use as a Gluster \u201cbrick\u201d. You can add more later to try testing   some more advanced configurations, but for now let\u2019s keep it simple.</li> </ul> <p>Note: If you have ample space available, consider allocating all the disk space at once.</p> <ul> <li>2 NIC\u2019s using VirtIO driver. The second NIC is not strictly   required, but can be used to demonstrate setting up a separate   network for storage and management traffic.</li> </ul> <p>Note: Attach each NIC to a separate network.</p> <p>Other notes: Make sure that if you clone the VM, that Gluster has not already been installed. Gluster generates a UUID to \u201cfingerprint\u201d each system, so cloning a previously deployed system will result in errors later on.</p> <p>Once these are prepared, you are ready to move on to the install section.</p>"},{"location":"Ops-Guide/Overview/","title":"Overview","text":"<p>Over the years the infrastructure and services consumed by the Gluster.org community have grown organically. There have been instances of design and planning but the growth has mostly been ad-hoc and need-based.</p> <p>Central to the plan of revitalizing the Gluster.org community is the ability to provide well-maintained infrastructure services with predictable uptimes and resilience. We're migrating the existing services into the Community Cage. The implied objective is that the transition would open up ways and means of the formation of a loose coalition among Infrastructure Administrators who provide expertise and guidance to the community projects within the OSAS team.</p> <p>A small group of Gluster.org community members was asked to assess the current utilization and propose a planned growth. The ad-hoc nature of the existing infrastructure impedes the development of a proposal based on standardized methods of extrapolation. A part of the projection is based on a combination of patterns and heuristics - problems that have been observed and how mitigation strategies have enabled the community to continue to consume the services available.</p> <p>The guiding principle for the assessment has been the need to migrate services to \"Software-as-a-Service\" models and providers wherever applicable and deemed fit. To illustrate this specific directive - the documentation/docs aspect of Gluster.org has been continuously migrating artifacts to readthedocs.org while focusing on simple integration with the website. The website itself has been put within the Gluster.org Github.com account to enable ease of maintenance and sustainability.</p> <p>For more details look at the full Tools List.</p>"},{"location":"Ops-Guide/Tools/","title":"Tools","text":""},{"location":"Ops-Guide/Tools/#tools-we-use","title":"Tools We Use","text":"Service/Tool Purpose Hosted At Github Code Review Github Jenkins CI, build-verification-test Temporary Racks Backups Website, Gerrit and Jenkins backup Rackspace Docs Documentation content mkdocs.org download.gluster.org Official download site of the binaries Rackspace Mailman Lists mailman Rackspace www.gluster.org Web asset Rackspace"},{"location":"Ops-Guide/Tools/#notes","title":"Notes","text":"<ul> <li>download.gluster.org: Resiliency is important for availability and metrics.   Since it's official download, access need to restricted as much as possible.   Few developers building the community packages have access. If anyone requires   access can raise an issue at gluster/project-infrastructure   with valid reason</li> <li>Mailman: Should be migrated to a separate host. Should be made more redundant   (ie, more than 1 MX).</li> <li>www.gluster.org: Framework, Artifacts now exist under gluster.github.com. Has   various legacy installation of software (mediawiki, etc ), being cleaned as   we find them.</li> </ul>"},{"location":"Quick-Start-Guide/Architecture/","title":"Architecture","text":"<p>A gluster volume is a collection of servers belonging to a Trusted Storage Pool. A management daemon (glusterd) runs on each server and manages a brick process (glusterfsd) which in turn exports the underlying on disk storage (XFS filesystem). The client process mounts the volume and exposes the storage from all the bricks as a single unified storage namespace to the applications accessing it. The client and brick processes' stacks have various translators loaded in them. I/O from the application is routed to different bricks via these translators.</p>"},{"location":"Quick-Start-Guide/Architecture/#types-of-volumes","title":"Types of Volumes","text":"<p>Gluster file system supports different types of volumes based on the requirements. Some volumes are good for scaling storage size, some for improving performance and some for both.</p> <p>1.Distributed Glusterfs Volume - This is the type of volume which is created by default if no volume type is specified. Here, files are distributed across various bricks in the volume. So file1 may be stored only in brick1 or brick2 but not on both. Hence there is no data redundancy. The purpose for such a storage volume is to easily &amp; cheaply scale the volume size. However this also means that a brick failure will lead to complete loss of data and one must rely on the underlying hardware for data loss protection.</p> <p></p> <p>Create a Distributed Volume</p> <pre><code>gluster volume create NEW-VOLNAME [transport [tcp | rdma | tcp,rdma]] NEW-BRICK...\n</code></pre> <p>For example to create a distributed volume with four storage servers using TCP.</p> <pre><code>gluster volume create test-volume server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4\n</code></pre> <pre><code>volume create: test-volume: success: please start the volume to access data\n</code></pre> <p>To display the volume info:</p> <pre><code>gluster volume info\n</code></pre> <pre><code>Volume Name: test-volume\nType: Distribute\nStatus: Created\nNumber of Bricks: 4\nTransport-type: tcp\nBricks:\nBrick1: server1:/exp1\nBrick2: server2:/exp2\nBrick3: server3:/exp3\nBrick4: server4:/exp4\n</code></pre> <p>2.Replicated Glusterfs Volume - In this volume we overcome the risk of data loss which is present in the distributed volume. Here exact copies of the data are maintained on all bricks. The number of replicas in the volume can be decided by client while creating the volume. So we need to have at least two bricks to create a volume with 2 replicas or a minimum of three bricks to create a volume of 3 replicas. One major advantage of such a volume is that even if one brick fails the data can still be accessed from its replicated bricks. Such a volume is used for better reliability and data redundancy.</p> <p></p> <p>Create a Replicated Volume</p> <pre><code>gluster volume create NEW-VOLNAME [replica COUNT] [transport [tcp |rdma | tcp,rdma]] NEW-BRICK...\n</code></pre> <p>For example, to create a replicated volume with three storage servers:</p> <pre><code>gluster volume create test-volume replica 3 transport tcp \\\n      server1:/exp1 server2:/exp2 server3:/exp3\n</code></pre> <pre><code>volume create: test-volume: success: please start the volume to access data\n</code></pre> <p>3.Distributed Replicated Glusterfs Volume - In this volume files are distributed across replicated sets of bricks. The number of bricks must be a multiple of the replica count. Also the order in which we specify the bricks is important since adjacent bricks become replicas of each other. This type of volume is used when high availability of data due to redundancy and scaling storage is required. So if there were eight bricks and replica count 2 then the first two bricks become replicas of each other then the next two and so on. This volume is denoted as 4x2. Similarly if there were eight bricks and replica count 4 then four bricks become replica of each other and we denote this volume as 2x4 volume.</p> <p></p> <p>Create the distributed replicated volume:</p> <pre><code>gluster volume create NEW-VOLNAME [replica COUNT] [transport [tcp | rdma | tcp,rdma]] NEW-BRICK...\n</code></pre> <p>For example, six node distributed replicated volume with a three-way mirror:</p> <pre><code>gluster volume create test-volume replica 3 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6\n</code></pre> <pre><code>volume create: test-volume: success: please start the volume to access data\n</code></pre> <p>4.Dispersed Glusterfs Volume - Dispersed volumes are based on erasure codes. It stripes the encoded data of files, with some redundancy added, across multiple bricks in the volume. You can use dispersed volumes to have a configurable level of reliability with minimum space waste. The number of redundant bricks in the volume can be decided by clients while creating the volume. Redundant bricks determines how many bricks can be lost without interrupting the operation of the volume.</p> <p> Create a dispersed volume:</p> <pre><code>gluster volume create test-volume [disperse [&lt;COUNT&gt;]] [disperse-data &lt;COUNT&gt;] [redundancy &lt;COUNT&gt;] [transport tcp | rdma | tcp,rdma] &lt;NEW-BRICK&gt;\n</code></pre> <p>For example, three node dispersed volume with level of redundancy 1, (2 + 1):</p> <pre><code>gluster volume create test-volume disperse 3 redundancy 1 server1:/exp1 server2:/exp2 server3:/exp3\n</code></pre> <pre><code>volume create: test-volume: success: please start the volume to access data\n</code></pre> <p>5.Distributed Dispersed Glusterfs Volume - Distributed dispersed volumes are the equivalent to distributed replicated volumes, but using dispersed subvolumes instead of replicated ones. The number of bricks must be a multiple of the 1st subvol. The purpose for such a volume is to easily scale the volume size and distribute the load across various bricks.</p> <p> Create a distributed dispersed volume:</p> <pre><code>gluster volume create [disperse [&lt;COUNT&gt;]] [disperse-data &lt;COUNT&gt;] [redundancy &lt;COUNT&gt;] [transport tcp | rdma | tcp,rdma] &lt;NEW-BRICK&gt;\n</code></pre> <p>For example, six node distributed dispersed volume with level of redundancy 1, 2 x (2 + 1) = 6:</p> <pre><code>gluster volume create test-volume disperse 3 redundancy 1 server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6\n</code></pre> <pre><code>volume create: test-volume: success: please start the volume to access data\n</code></pre> <p>Note:</p> <ul> <li> <p>A dispersed volume can be created by specifying the number of bricks in a   disperse set, by specifying the number of redundancy bricks, or both.</p> </li> <li> <p>If disperse is not specified, or the <code>&lt;COUNT&gt;</code> is missing, the   entire volume will be treated as a single disperse set composed by all   bricks enumerated in the command line.</p> </li> <li> <p>If redundancy is not specified, it is computed automatically to be the   optimal value. If this value does not exist, it's assumed to be '1' and a   warning message is shown:</p> <p># gluster volume create test-volume disperse 4 server{1..4}:/bricks/test-volume</p> <p>There isn't an optimal redundancy value for this configuration. Do you want to create the volume with redundancy 1 ? (y/n)</p> </li> <li> <p>In all cases where redundancy is automatically computed and it's not equal to '1', a warning message is displayed:</p> <p># gluster volume create test-volume disperse 6 server{1..6}:/bricks/test-volume</p> <p>The optimal redundancy for this configuration is 2. Do you want to create the volume with this value ? (y/n)</p> </li> <li> <p>redundancy must be greater than 0, and the total number of bricks must   be greater than 2 * redundancy. This means that a dispersed volume must   have a minimum of 3 bricks.</p> </li> </ul>"},{"location":"Quick-Start-Guide/Architecture/#fuse","title":"FUSE","text":"<p>GlusterFS is a userspace filesystem. The GluserFS developers opted for this approach in order to avoid the need to have modules in the Linux kernel.</p> <p>As it is a userspace filesystem, to interact with kernel VFS, GlusterFS makes use of FUSE (File System in Userspace). For a long time, implementation of a userspace filesystem was considered impossible. FUSE was developed as a solution for this. FUSE is a kernel module that supports interaction between kernel VFS and non-privileged user applications and it has an API that can be accessed from userspace. Using this API, any type of filesystem can be written using almost any language you prefer as there are many bindings between FUSE and other languages.</p> <p></p> <p>Structural diagram of FUSE.</p> <p>This shows a filesystem \"hello world\" that is compiled to create a binary \"hello\". It is executed with a filesystem mount point /tmp/fuse. Then the user issues a command ls -l on the mount point /tmp/fuse. This command reaches VFS via glibc and since the mount /tmp/fuse corresponds to a FUSE based filesystem, VFS passes it over to FUSE module. The FUSE kernel module contacts the actual filesystem binary \"hello\" after passing through glibc and FUSE library in userspace(libfuse). The result is returned by the \"hello\" through the same path and reaches the ls -l command.</p> <p>The communication between FUSE kernel module and the FUSE library(libfuse) is via a special file descriptor which is obtained by opening /dev/fuse. This file can be opened multiple times, and the obtained file descriptor is passed to the mount syscall, to match up the descriptor with the mounted filesystem.</p> <ul> <li>More about userspace   filesystems</li> <li>FUSE reference</li> </ul>"},{"location":"Quick-Start-Guide/Architecture/#translators","title":"Translators","text":"<p>Translating \u201ctranslators\u201d:</p> <ul> <li>A translator converts requests from users into requests for storage.</li> </ul> <p>*One to one, one to many, one to zero (e.g. caching)</p> <p></p> <ul> <li>A translator can modify requests on the way through :</li> </ul> <p>convert one request type to another ( during the request transfer amongst the translators)   modify paths, flags, even data (e.g. encryption)</p> <ul> <li> <p>Translators can intercept or block the requests. (e.g. access   control)</p> </li> <li> <p>Or spawn new requests (e.g. pre-fetch)</p> </li> </ul> <p>How Do Translators Work?</p> <ul> <li>Shared Objects</li> <li>Dynamically loaded according to 'volfile'</li> </ul> <p>dlopen/dlsync   setup pointers to parents / children   call init (constructor)   call IO functions through fops.</p> <ul> <li>Conventions for validating/ passing options, etc.</li> <li>The configuration of translators (since GlusterFS 3.1) is managed   through the gluster command line interface (cli), so you don't need   to know in what order to graph the translators together.</li> </ul>"},{"location":"Quick-Start-Guide/Architecture/#types-of-translators","title":"Types of Translators","text":"<p>List of known translators with their current status.</p> Translator Type Functional Purpose Storage Lowest level translator, stores and accesses data from local file system. Debug Provide interface and statistics for errors and debugging. Cluster Handle distribution and replication of data as it relates to writing to and reading from bricks &amp; nodes. Encryption Extension translators for on-the-fly encryption/decryption of stored data. Protocol Extension translators for client/server communication protocols. Performance Tuning translators to adjust for workload and I/O profiles. Bindings Add extensibility, e.g. The Python interface written by Jeff Darcy to extend API interaction with GlusterFS. System System access translators, e.g. Interfacing with file system access control. Scheduler I/O schedulers that determine how to distribute new write operations across clustered systems. Features Add additional features such as Quotas, Filters, Locks, etc. <p>The default / general hierarchy of translators in vol files :</p> <p></p> <p>All the translators hooked together to perform a function is called a graph. The left-set of translators comprises of Client-stack.The right-set of translators comprises of Server-stack.</p> <p>The glusterfs translators can be sub-divided into many categories, but two important categories are - Cluster and Performance translators :</p> <p>One of the most important and the first translator the data/request has to go through is fuse translator which falls under the category of Mount Translators.</p> <ol> <li> <p>Cluster Translators:</p> <ul> <li>DHT(Distributed Hash Table)</li> <li>AFR(Automatic File Replication)</li> </ul> </li> <li> <p>Performance Translators:</p> <ul> <li>io-cache</li> <li>io-threads</li> <li>md-cache</li> <li>O-B (open behind)</li> <li>QR (quick read)</li> <li>r-a (read-ahead)</li> <li>w-b (write-behind)</li> </ul> </li> </ol> <p>Other Feature Translators include:</p> <ul> <li>changelog</li> <li>locks - GlusterFS has locks translator which provides the following internal locking operations   called <code>inodelk</code>, <code>entrylk</code>,   which are used by afr to achieve synchronization of operations on files or directories that conflict with each other.</li> <li>marker</li> <li>quota</li> </ul> <p>Debug Translators</p> <ul> <li>trace - To trace the error logs generated during the communication amongst the translators.</li> <li>io-stats</li> </ul>"},{"location":"Quick-Start-Guide/Architecture/#dhtdistributed-hash-table-translator","title":"DHT(Distributed Hash Table) Translator","text":"<p>What is DHT?</p> <p>DHT is the real core of how GlusterFS aggregates capacity and performance across multiple servers. Its responsibility is to place each file on exactly one of its subvolumes \u2013 unlike either replication (which places copies on all of its subvolumes) or striping (which places pieces onto all of its subvolumes). It\u2019s a routing function, not splitting or copying.</p> <p>How DHT works?</p> <p>The basic method used in DHT is consistent hashing. Each subvolume (brick) is assigned a range within a 32-bit hash space, covering the entire range with no holes or overlaps. Then each file is also assigned a value in that same space, by hashing its name. Exactly one brick will have an assigned range including the file\u2019s hash value, and so the file \u201cshould\u201d be on that brick. However, there are many cases where that won\u2019t be the case, such as when the set of bricks (and therefore the range assignment of ranges) has changed since the file was created, or when a brick is nearly full. Much of the complexity in DHT involves these special cases, which we\u2019ll discuss in a moment.</p> <p>When you open() a file, the distribute translator is giving one piece of information to find your file, the file-name. To determine where that file is, the translator runs the file-name through a hashing algorithm in order to turn that file-name into a number.</p> <p>A few Observations of DHT hash-values assignment:</p> <ol> <li>The assignment of hash ranges to bricks is determined by extended     attributes stored on directories, hence distribution is     directory-specific.</li> <li>Consistent hashing is usually thought of as hashing around a circle,     but in GlusterFS it\u2019s more linear. There\u2019s no need to \u201cwrap around\u201d     at zero, because there\u2019s always a break (between one brick\u2019s range     and another\u2019s) at zero.</li> <li>If a brick is missing, there will be a hole in the hash space. Even     worse, if hash ranges are reassigned while a brick is offline, some     of the new ranges might overlap with the (now out of date) range     stored on that brick, creating a bit of confusion about where files     should be.</li> </ol>"},{"location":"Quick-Start-Guide/Architecture/#afrautomatic-file-replication-translator","title":"AFR(Automatic File Replication) Translator","text":"<p>The Automatic File Replication (AFR) translator in GlusterFS makes use of the extended attributes to keep track of the file operations.It is responsible for replicating the data across the bricks.</p>"},{"location":"Quick-Start-Guide/Architecture/#responsibilities-of-afr","title":"Responsibilities of AFR","text":"<p>Its responsibilities include the following:</p> <ol> <li>Maintain replication consistency (i.e. Data on both the bricks     should be same, even in the cases where there are operations     happening on same file/directory in parallel from multiple     applications/mount points as long as all the bricks in replica set     are up).</li> <li>Provide a way of recovering data in case of failures as long as     there is at least one brick which has the correct data.</li> <li>Serve fresh data for read/stat/readdir etc.</li> </ol>"},{"location":"Quick-Start-Guide/Architecture/#geo-replication","title":"Geo-Replication","text":"<p>Geo-replication provides asynchronous replication of data across geographically distinct locations and was introduced in Glusterfs 3.2. It mainly works across WAN and is used to replicate the entire volume unlike AFR which is intra-cluster replication. This is mainly useful for backup of entire data for disaster recovery.</p> <p>Geo-replication uses a primary-secondary model, whereby replication occurs between a Primary and a Secondary, both of which should be GlusterFS volumes. Geo-replication provides an incremental replication service over Local Area Networks (LANs), Wide Area Network (WANs), and across the Internet.</p> <p>Geo-replication over LAN</p> <p>You can configure Geo-replication to mirror data over a Local Area Network.</p> <p></p> <p>Geo-replication over WAN</p> <p>You can configure Geo-replication to replicate data over a Wide Area Network.</p> <p></p> <p>Geo-replication over Internet</p> <p>You can configure Geo-replication to mirror data over the Internet.</p> <p></p> <p>Multi-site cascading Geo-replication</p> <p>You can configure Geo-replication to mirror data in a cascading fashion across multiple sites.</p> <p></p> <p>There are mainly two aspects while asynchronously replicating data:</p> <p>1.Change detection - These include file-operation necessary details. There are two methods to sync the detected changes:</p> <p>i. Changelogs - Changelog is a translator which records necessary details for the fops that occur. The changes can be written in binary format or ASCII. There are three category with each category represented by a specific changelog format. All three types of categories are recorded in a single changelog file.</p> <p>Entry - create(), mkdir(), mknod(), symlink(), link(), rename(), unlink(), rmdir()</p> <p>Data - write(), writev(), truncate(), ftruncate()</p> <p>Meta - setattr(), fsetattr(), setxattr(), fsetxattr(), removexattr(), fremovexattr()</p> <p>In order to record the type of operation and entity underwent, a type identifier is used. Normally, the entity on which the operation is performed would be identified by the pathname, but we choose to use GlusterFS internal file identifier (GFID) instead (as GlusterFS supports GFID based backend and the pathname field may not always be valid and other reasons which are out of scope of this document). Therefore, the format of the record for the three types of operation can be summarized as follows:</p> <p>Entry - GFID + FOP + MODE + UID + GID + PARGFID/BNAME [PARGFID/BNAME]</p> <p>Meta - GFID of the file</p> <p>Data - GFID of the file</p> <p>GFID's are analogous to inodes. Data and Meta fops record the GFID of the entity on which the operation was performed, thereby recording that there was a data/metadata change on the inode. Entry fops record at the minimum a set of six or seven records (depending on the type of operation), that is sufficient to identify what type of operation the entity underwent. Normally this record includes the GFID of the entity, the type of file operation (which is an integer [an enumerated value which is used in Glusterfs]) and the parent GFID and the basename (analogous to parent inode and basename).</p> <p>Changelog file is rolled over after a specific time interval. We then perform processing operations on the file like converting it to understandable/human readable format, keeping private copy of the changelog etc. The library then consumes these logs and serves application requests.</p> <p>ii. Xsync - Marker translator maintains an extended attribute \u201cxtime\u201d for each file and directory. Whenever any update happens it would update the xtime attribute of that file and all its ancestors. So the change is propagated from the node (where the change has occurred) all the way to the root.</p> <p></p> <p>Consider the above directory tree structure. At time T1 the primary and secondary were in sync each other.</p> <p></p> <p>At time T2 a new file File2 was created. This will trigger the xtime marking (where xtime is the current timestamp) from File2 upto to the root, i.e, the xtime of File2, Dir3, Dir1 and finally Dir0 all will be updated.</p> <p>Geo-replication daemon crawls the file system based on the condition that xtime(primary) &gt; xtime(secondary). Hence in our example it would crawl only the left part of the directory structure since the right part of the directory structure still has equal timestamp. Although the crawling algorithm is fast we still need to crawl a good part of the directory structure.</p> <p>2.Replication - We use rsync for data replication. Rsync is an external utility which will calculate the diff of the two files and sends this difference from source to sync.</p>"},{"location":"Quick-Start-Guide/Architecture/#overall-working-of-glusterfs","title":"Overall working of GlusterFS","text":"<p>As soon as GlusterFS is installed in a server node, a gluster management daemon(glusterd) binary will be created. This daemon should be running in all participating nodes in the cluster. After starting glusterd, a trusted server pool(TSP) can be created consisting of all storage server nodes (TSP can contain even a single node). Now bricks which are the basic units of storage can be created as export directories in these servers. Any number of bricks from this TSP can be clubbed together to form a volume.</p> <p>Once a volume is created, a glusterfsd process starts running in each of the participating brick. Along with this, configuration files known as vol files will be generated inside /var/lib/glusterd/vols/. There will be configuration files corresponding to each brick in the volume. This will contain all the details about that particular brick. Configuration file required by a client process will also be created. Now our filesystem is ready to use. We can mount this volume on a client machine very easily as follows and use it like we use a local storage:</p> <p>mount.glusterfs\u00a0<code>&lt;IP or hostname&gt;</code>:<code>&lt;volume_name&gt;</code> <code>&lt;mount_point&gt;</code></p> <p>IP or hostname can be that of any node in the trusted server pool in which the required volume is created.</p> <p>When we mount the volume in the client, the client glusterfs process communicates with the servers\u2019 glusterd process. Server glusterd process sends a configuration file (vol file) containing the list of client translators and another containing the information of each brick in the volume with the help of which the client glusterfs process can now directly communicate with each brick\u2019s glusterfsd process. The setup is now complete and the volume is now ready for client's service.</p> <p></p> <p>When a system call (File operation or Fop) is issued by client in the mounted filesystem, the VFS (identifying the type of filesystem to be glusterfs) will send the request to the FUSE kernel module. The FUSE kernel module will in turn send it to the GlusterFS in the userspace of the client node via /dev/fuse (this has been described in FUSE section). The GlusterFS process on the client consists of a stack of translators called the client translators which are defined in the configuration file(vol file) sent by the storage server glusterd process. The first among these translators being the FUSE translator which consists of the FUSE library(libfuse). Each translator has got functions corresponding to each file operation or fop supported by glusterfs. The request will hit the corresponding function in each of the translators. Main client translators include:</p> <ul> <li>FUSE translator</li> <li>DHT translator- DHT translator maps the request to the correct brick   that contains the file or directory required.</li> <li>AFR translator- It receives the request from the previous translator   and if the volume type is replicate, it duplicates the request and   passes it on to the Protocol client translators of the replicas.</li> <li>Protocol Client translator- Protocol Client translator is the last   in the client translator stack. This translator is divided into   multiple threads, one for each brick in the volume. This will   directly communicate with the glusterfsd of each brick.</li> </ul> <p>In the storage server node that contains the brick in need, the request again goes through a series of translators known as server translators, main ones being:</p> <ul> <li>Protocol server translator</li> <li>POSIX translator</li> </ul> <p>The request will finally reach VFS and then will communicate with the underlying native filesystem. The response will retrace the same path.</p>"},{"location":"Quick-Start-Guide/Quickstart/","title":"Quick Start Guide","text":""},{"location":"Quick-Start-Guide/Quickstart/#installing-glusterfs-a-quick-start-guide","title":"Installing GlusterFS - a Quick Start Guide","text":""},{"location":"Quick-Start-Guide/Quickstart/#purpose-of-this-document","title":"Purpose of this document","text":"<p>This document is intended to provide a step-by-step guide to setting up GlusterFS for the first time with minimum degree of complexity. For the purposes of this guide, it is required to use Fedora 30 (or, higher, see https://fedoraproject.org/wiki/End_of_life) virtual machine instances.</p> <p>After you deploy GlusterFS by following these steps, we recommend that you read the GlusterFS Admin Guide to how to select a volume type that fits your needs and administer GlusterFS. The GlusterFS Install Guide provides a more detailed explanation of the steps we show in this Quick Start Guide.</p> <p>If you would like a more detailed walkthrough with instructions for installing using different methods (in local virtual machines, EC2 and baremetal) and different distributions, then have a look at the Install guide.</p>"},{"location":"Quick-Start-Guide/Quickstart/#using-ansible-to-deploy-and-manage-glusterfs","title":"Using Ansible to deploy and manage GlusterFS","text":"<p>If you are already an Ansible user, and are more comfortable with setting up distributed systems with Ansible, we recommend you to skip all these and move over to gluster-ansible repository, which gives most of the details to get the systems running faster.</p>"},{"location":"Quick-Start-Guide/Quickstart/#automatically-deploying-glusterfs-with-puppet-glustervagrant","title":"Automatically deploying GlusterFS with Puppet-Gluster+Vagrant","text":"<p>To deploy GlusterFS using scripted methods, please read this article.</p>"},{"location":"Quick-Start-Guide/Quickstart/#step-1-have-at-least-three-nodes","title":"Step 1 \u2013 Have at least three nodes","text":"<ul> <li>Fedora 30 (or later) on 3 nodes named \"server1\", \"server2\" and \"server3\"</li> <li>A working network connection</li> <li>At least two virtual disks, one for the OS installation, and one to be   used to serve GlusterFS storage (sdb), on each of these VMs. This will   emulate a real-world deployment, where you would want to separate   GlusterFS storage from the OS install.</li> <li>Setup NTP on each of these servers to get the proper functioning of   many applications on top of filesystem. This is an important requirement</li> </ul> <p>Note: GlusterFS stores its dynamically generated configuration files at <code>/var/lib/glusterd</code>. If at any point in time GlusterFS is unable to write to these files (for example, when the backing filesystem is full), it will at minimum cause erratic behavior for your system; or worse, take your system offline completely. It is recommended to create separate partitions for directories such as <code>/var/log</code> to reduce the chances of this happening.</p>"},{"location":"Quick-Start-Guide/Quickstart/#step-2-format-and-mount-the-bricks","title":"Step 2 - Format and mount the bricks","text":"<p>Perform this step on all the nodes, \"server{1,2,3}\"</p> <p>Note: We are going to use the XFS filesystem for the backend bricks. But Gluster is designed to work on top of any filesystem, which supports extended attributes.</p> <p>The following examples assume that the brick will be residing on /dev/sdb1.</p> <pre><code>mkfs.xfs -i size=512 /dev/sdb1\nmkdir -p /data/brick1\necho '/dev/sdb1 /data/brick1 xfs defaults 1 2' &gt;&gt; /etc/fstab\nmount -a &amp;&amp; mount\n</code></pre> <p>You should now see sdb1 mounted at /data/brick1</p>"},{"location":"Quick-Start-Guide/Quickstart/#step-3-installing-glusterfs","title":"Step 3 - Installing GlusterFS","text":"<p>Install the software</p> <pre><code>yum install glusterfs-server\n</code></pre> <p>Start the GlusterFS management daemon:</p> <pre><code>service glusterd start\n</code></pre> <p>Check the status of the daemon:</p> <pre><code>service glusterd status\n</code></pre> <p>You should see something like this:</p> <pre><code>glusterd.service - LSB: glusterfs server\n       Loaded: loaded (/etc/rc.d/init.d/glusterd)\n   Active: active (running) since Mon, 13 Aug 2012 13:02:11 -0700; 2s ago\n   Process: 19254 ExecStart=/etc/rc.d/init.d/glusterd start (code=exited, status=0/SUCCESS)\n   CGroup: name=systemd:/system/glusterd.service\n       \u251c 19260 /usr/sbin/glusterd -p /run/glusterd.pid\n       \u251c 19304 /usr/sbin/glusterfsd --xlator-option georep-server.listen-port=24009 -s localhost...\n       \u2514 19309 /usr/sbin/glusterfs -f /var/lib/glusterd/nfs/nfs-server.vol -p /var/lib/glusterd/...\n</code></pre>"},{"location":"Quick-Start-Guide/Quickstart/#step-4-configure-the-firewall","title":"Step 4 - Configure the firewall","text":"<p>The gluster processes on the nodes need to be able to communicate with each other. To simplify this setup, configure the firewall on each node to accept all traffic from the other node.</p> <pre><code>iptables -I INPUT -p all -s &lt;ip-address&gt; -j ACCEPT\n</code></pre> <p>where ip-address is the address of the other node.</p>"},{"location":"Quick-Start-Guide/Quickstart/#step-5-configure-the-trusted-pool","title":"Step 5 - Configure the trusted pool","text":"<p>From \"server1\"</p> <pre><code>gluster peer probe server2\ngluster peer probe server3\n</code></pre> <p>Note: When using hostnames, the first server i.e, <code>server1</code> needs to be probed from one other server to set its hostname. Reason being when the other server i.e, <code>server2</code> is probed from <code>server1</code> it may happen that the hosts are configured in a way that the IP Address of the server is transmitted on probing. So in order to use the hostnames in the cluster, it is advised to probe back the <code>server1</code> from <code>server2</code>, <code>server3</code> or upto nth server based on the cluster size.</p> <p>From \"server2\"</p> <pre><code>gluster peer probe server1\n</code></pre> <p>Note: Once this pool has been established, only trusted members may probe new servers into the pool. A new server cannot probe the pool, it must be probed from the pool.</p> <p>Check the peer status on server1</p> <pre><code>gluster peer status\n</code></pre> <p>You should see something like this (the UUID will differ)</p> <pre><code>Number of Peers: 2\n\nHostname: server2\nUuid: f0e7b138-4874-4bc0-ab91-54f20c7068b4\nState: Peer in Cluster (Connected)\n\nHostname: server3\nUuid: f0e7b138-4532-4bc0-ab91-54f20c701241\nState: Peer in Cluster (Connected)\n</code></pre>"},{"location":"Quick-Start-Guide/Quickstart/#step-6-set-up-a-glusterfs-volume","title":"Step 6 - Set up a GlusterFS volume","text":"<p>On all servers:</p> <pre><code>mkdir -p /data/brick1/gv0\n</code></pre> <p>From any single server:</p> <pre><code>gluster volume create gv0 replica 3 server1:/data/brick1/gv0 server2:/data/brick1/gv0 server3:/data/brick1/gv0\n</code></pre> <p>On successful operation, you should see something like:</p> <pre><code>volume create: gv0: success: please start the volume to access data\n</code></pre> <p>Then start the newly created volume:</p> <pre><code>gluster volume start gv0\n</code></pre> <p>You should see something like:</p> <pre><code>volume start: gv0: success\n</code></pre> <p>Confirm that the volume shows \"Started\":</p> <pre><code>gluster volume info\n</code></pre> <p>You should see something like this (the Volume ID will differ):</p> <pre><code>Volume Name: gv0\nType: Replicate\nVolume ID: f25cc3d8-631f-41bd-96e1-3e22a4c6f71f\nStatus: Started\nSnapshot Count: 0\nNumber of Bricks: 1 x 3 = 3\nTransport-type: tcp\nBricks:\nBrick1: server1:/data/brick1/gv0\nBrick2: server2:/data/brick1/gv0\nBrick3: server3:/data/brick1/gv0\nOptions Reconfigured:\ntransport.address-family: inet\n</code></pre> <p>Note: If the volume does not show \"Started\", the files under <code>/var/log/glusterfs/glusterd.log</code> should be checked in order to debug and diagnose the situation. These logs can be looked at on one or, all the servers configured.</p>"},{"location":"Quick-Start-Guide/Quickstart/#step-7-testing-the-glusterfs-volume","title":"Step 7 - Testing the GlusterFS volume","text":"<p>For this step, we will use one of the servers to mount the volume. Typically, you would do this from an external machine, known as a \"client\". Since using this method would require additional packages to be installed on the client machine, we will use one of the servers as a simple place to test first , as if it were that \"client\".</p> <pre><code>mkdir /mnt/gluster-test\nmount -t glusterfs server1:/gv0 /mnt/gluster-test\nfor i in `seq -w 1 100`; do cp -rp /var/log/messages /mnt/gluster-test/copy-test-$i; done\n</code></pre> <p>First, check the client mount point:</p> <pre><code>ls -lA /mnt/gluster-test/copy* | wc -l\n</code></pre> <p>You should see 100 files returned. Next, check the GlusterFS brick mount points on each server:</p> <pre><code>ls -lA /data/brick1/gv0/copy*\n</code></pre> <p>You should see 100 files on each server using the method we listed here. Without replication, in a distribute only volume (not detailed here), you should see about 33 files on each one.</p>"},{"location":"Troubleshooting/","title":"Index","text":""},{"location":"Troubleshooting/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>This guide describes some commonly seen issues and steps to recover from them. If that doesn\u2019t help, reach out to the Gluster community, in which case the guide also describes what information needs to be provided in order to debug the issue. At minimum, we need the version of gluster running and the output of <code>gluster volume info</code>.</p>"},{"location":"Troubleshooting/#where-do-i-start","title":"Where Do I Start?","text":"<p>Is the issue already listed in the component specific troubleshooting sections?</p> <ul> <li>CLI and Glusterd Issues</li> <li>Heal related issues</li> <li>Resolving Split brains</li> <li>Geo-replication Issues</li> <li>Gluster NFS Issues</li> <li>File Locks</li> </ul> <p>If that didn't help, here is how to debug further.</p> <p>Identifying the problem and getting the necessary information to diagnose it is the first step in troubleshooting your Gluster setup. As Gluster operations involve interactions between multiple processes, this can involve multiple steps.</p>"},{"location":"Troubleshooting/#what-happened","title":"What Happened?","text":"<ul> <li>An operation failed</li> <li>High Memory Usage</li> <li>A Gluster process crashed</li> </ul>"},{"location":"Troubleshooting/gfid-to-path/","title":"Convert GFID to Path","text":"<p>GlusterFS internal file identifier (GFID) is a uuid that is unique to each file across the entire cluster. This is analogous to inode number in a normal filesystem. The GFID of a file is stored in its xattr named <code>trusted.gfid</code>.</p>"},{"location":"Troubleshooting/gfid-to-path/#special-mount-using-gfid-access-translator","title":"Special mount using gfid-access translator:","text":"<pre><code>mount -t glusterfs -o aux-gfid-mount vm1:test /mnt/testvol\n</code></pre> <p>Assuming, you have <code>GFID</code> of a file from changelog (or somewhere else). For trying this out, you can get <code>GFID</code> of a file from mountpoint:</p> <pre><code>getfattr -n glusterfs.gfid.string /mnt/testvol/dir/file\n</code></pre>"},{"location":"Troubleshooting/gfid-to-path/#get-file-path-from-gfid-method-1","title":"Get file path from GFID (Method 1):","text":"<p>(Lists hardlinks delimited by <code>:</code>, returns path as seen from mountpoint)</p>"},{"location":"Troubleshooting/gfid-to-path/#turn-on-build-pgfid-option","title":"Turn on build-pgfid option","text":"<pre><code>gluster volume set test build-pgfid on\n</code></pre> <p>Read virtual xattr <code>glusterfs.ancestry.path</code> which contains the file path</p> <pre><code>getfattr -n glusterfs.ancestry.path -e text /mnt/testvol/.gfid/&lt;GFID&gt;\n</code></pre> <p>Example:</p> <pre><code>[root@vm1 glusterfs]# ls -il /mnt/testvol/dir/\ntotal 1\n10610563327990022372 -rw-r--r--. 2 root root 3 Jul 17 18:05 file\n10610563327990022372 -rw-r--r--. 2 root root 3 Jul 17 18:05 file3\n\n[root@vm1 glusterfs]# getfattr -n glusterfs.gfid.string /mnt/testvol/dir/file\ngetfattr: Removing leading '/' from absolute path names\n# file: mnt/testvol/dir/file\nglusterfs.gfid.string=\"11118443-1894-4273-9340-4b212fa1c0e4\"\n\n[root@vm1 glusterfs]# getfattr -n glusterfs.ancestry.path -e text /mnt/testvol/.gfid/11118443-1894-4273-9340-4b212fa1c0e4\ngetfattr: Removing leading '/' from absolute path names\n# file: mnt/testvol/.gfid/11118443-1894-4273-9340-4b212fa1c0e4\nglusterfs.ancestry.path=\"/dir/file:/dir/file3\"\n</code></pre>"},{"location":"Troubleshooting/gfid-to-path/#get-file-path-from-gfid-method-2","title":"Get file path from GFID (Method 2):","text":"<p>(Does not list all hardlinks, returns backend brick path)</p> <pre><code>getfattr -n trusted.glusterfs.pathinfo -e text /mnt/testvol/.gfid/&lt;GFID&gt;\n</code></pre> <p>Example:</p> <pre><code>[root@vm1 glusterfs]# getfattr -n trusted.glusterfs.pathinfo -e text /mnt/testvol/.gfid/11118443-1894-4273-9340-4b212fa1c0e4\ngetfattr: Removing leading '/' from absolute path names\n# file: mnt/testvol/.gfid/11118443-1894-4273-9340-4b212fa1c0e4\ntrusted.glusterfs.pathinfo=\"(&lt;DISTRIBUTE:test-dht&gt; &lt;POSIX(/mnt/brick-test/b):vm1:/mnt/brick-test/b/dir//file3&gt;)\"\n</code></pre>"},{"location":"Troubleshooting/gfid-to-path/#references-and-links","title":"References and links:","text":"<p>posix: placeholders for GFID to path conversion</p>"},{"location":"Troubleshooting/gluster-crash/","title":"Debugging a Crash","text":"<p>To find out why a Gluster process terminated abruptly, we need the following:</p> <ul> <li>A coredump of the process that crashed</li> <li>The exact version of Gluster that is running</li> <li>The Gluster log files</li> <li>the output of <code>gluster volume info</code></li> <li>Steps to reproduce the crash if available</li> </ul> <p>Contact the community with this information or open an issue</p>"},{"location":"Troubleshooting/resolving-splitbrain/","title":"Heal info and split-brain resolution","text":"<p>This document explains the heal info command available in gluster for monitoring pending heals in replicate volumes and the methods available to resolve split-brains.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#types-of-split-brains","title":"Types of Split-Brains:","text":"<p>A file is said to be in split-brain when Gluster AFR cannot determine which copy in the replica is the correct one.</p> <p>There are three types of split-brains:</p> <ul> <li>Data split-brain: The data in the file differs on the bricks in the replica set</li> <li>Metadata split-brain: The metadata differs on the bricks</li> <li>Entry split-brain: The GFID of the file is different on the bricks in the replica or the type of the file is different on the bricks in the replica. Type-mismatch cannot be healed using any of the split-brain resolution methods while gfid split-brains can be.</li> </ul>"},{"location":"Troubleshooting/resolving-splitbrain/#1-volume-heal-info","title":"1) Volume heal info:","text":"<p>Usage: <code>gluster volume heal &lt;VOLNAME&gt; info</code></p> <p>This lists all the files that require healing (and will be processed by the self-heal daemon). It prints either their path or their GFID.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#interpreting-the-output","title":"Interpreting the output","text":"<p>All the files listed in the output of this command need to be healed. The files listed may also be accompanied by the following tags:</p> <p>a) 'Is in split-brain' A file in data or metadata split-brain will be listed with \" - Is in split-brain\" appended after its path/GFID. E.g. \"/file4\" in the output provided below. However, for a file in GFID split-brain, the parent directory of the file is shown to be in split-brain and the file itself is shown to be needing healing, e.g. \"/dir\" in the output provided below is in split-brain because of GFID split-brain of file \"/dir/a\". Files in split-brain cannot be healed without resolving the split-brain.</p> <p>b) 'Is possibly undergoing heal' When the heal info command is run, it (or to be more specific, the 'glfsheal' binary that is executed when you run the command) takes locks on each file to find if it needs healing. However, if the self-heal daemon had already started healing the file, it would have taken locks which glfsheal wouldn't be able to acquire. In such a case, it could print this message. Another possible case could be multiple glfsheal processes running simultaneously (e.g. multiple users ran a heal info command at the same time) and competing for same lock.</p> <p>The following is an example of heal info command's output.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example","title":"Example","text":"<p>Consider a replica volume \"test\" with two bricks b1 and b2; self-heal daemon off, mounted at /mnt.</p> <pre><code># gluster volume heal test info\nBrick \\&lt;hostname:brickpath-b1&gt;\n&lt;gfid:aaca219f-0e25-4576-8689-3bfd93ca70c2&gt; - Is in split-brain\n&lt;gfid:39f301ae-4038-48c2-a889-7dac143e82dd&gt; - Is in split-brain\n&lt;gfid:c3c94de2-232d-4083-b534-5da17fc476ac&gt; - Is in split-brain\n&lt;gfid:6dc78b20-7eb6-49a3-8edb-087b90142246&gt;\n\nNumber of entries: 4\n\nBrick &lt;hostname:brickpath-b2&gt;\n/dir/file2\n/dir/file1 - Is in split-brain\n/dir - Is in split-brain\n/dir/file3\n/file4 - Is in split-brain\n/dir/a\n\n\nNumber of entries: 6\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#analysis-of-the-output","title":"Analysis of the output","text":"<p>It can be seen that</p> <p>A) from brick b1, four entries need healing:</p> <ul> <li>file with gfid:6dc78b20-7eb6-49a3-8edb-087b90142246 needs healing</li> <li>\"aaca219f-0e25-4576-8689-3bfd93ca70c2\", \"39f301ae-4038-48c2-a889-7dac143e82dd\" and \"c3c94de2-232d-4083-b534-5da17fc476ac\" are in split-brain</li> </ul> <p>B) from brick b2 six entries need healing-</p> <ul> <li>\"a\", \"file2\" and \"file3\" need healing</li> <li>\"file1\", \"file4\" &amp; \"/dir\" are in split-brain</li> </ul>"},{"location":"Troubleshooting/resolving-splitbrain/#2-volume-heal-info-split-brain","title":"2. Volume heal info split-brain","text":"<p>Usage: <code>gluster volume heal &lt;VOLNAME&gt; info split-brain</code> This command only shows the list of files that are in split-brain. The output is therefore a subset of <code>gluster volume heal &lt;VOLNAME&gt; info</code></p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_1","title":"Example","text":"<pre><code># gluster volume heal test info split-brain\nBrick &lt;hostname:brickpath-b1&gt;\n&lt;gfid:aaca219f-0e25-4576-8689-3bfd93ca70c2&gt;\n&lt;gfid:39f301ae-4038-48c2-a889-7dac143e82dd&gt;\n&lt;gfid:c3c94de2-232d-4083-b534-5da17fc476ac&gt;\nNumber of entries in split-brain: 3\n\nBrick &lt;hostname:brickpath-b2&gt;\n/dir/file1\n/dir\n/file4\nNumber of entries in split-brain: 3\n</code></pre> <p>Note that similar to the heal info command, for GFID split-brains (same filename but different GFID) their parent directories are listed to be in split-brain.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#3-resolution-of-split-brain-using-gluster-cli","title":"3. Resolution of split-brain using gluster CLI","text":"<p>Once the files in split-brain are identified, their resolution can be done from the gluster command line using various policies. Type-mismatch cannot be healed using this methods. Split-brain resolution commands let the user resolve data, metadata, and GFID split-brains.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#31-resolution-of-datametadata-split-brain-using-gluster-cli","title":"3.1 Resolution of data/metadata split-brain using gluster CLI","text":"<p>Data and metadata split-brains can be resolved using the following policies:</p>"},{"location":"Troubleshooting/resolving-splitbrain/#i-select-the-bigger-file-as-source","title":"i) Select the bigger-file as source","text":"<p>This command is useful for per file healing where it is known/decided that the file with bigger size is to be considered as source. <code>gluster volume heal &lt;VOLNAME&gt; split-brain bigger-file &lt;FILE&gt;</code> Here, <code>&lt;FILE&gt;</code> can be either the full file name as seen from the root of the volume (or) the GFID-string representation of the file, which sometimes gets displayed in the heal info command's output. Once this command is executed, the replica containing the <code>&lt;FILE&gt;</code> with a bigger size is found and healing is completed with that brick as a source.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_2","title":"Example :","text":"<p>Consider the earlier output of the heal info split-brain command.</p> <p>Before healing the file, notice file size and md5 checksums :</p> <p>On brick b1:</p> <pre><code>[brick1]# stat b1/dir/file1\n  File: \u2018b1/dir/file1\u2019\n  Size: 17              Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919362      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 13:55:40.149897333 +0530\nModify: 2015-03-06 13:55:37.206880347 +0530\nChange: 2015-03-06 13:55:37.206880347 +0530\n Birth: -\n[brick1]#\n[brick1]# md5sum b1/dir/file1\n040751929ceabf77c3c0b3b662f341a8  b1/dir/file1\n</code></pre> <p>On brick b2:</p> <pre><code>[brick2]# stat b2/dir/file1\n  File: \u2018b2/dir/file1\u2019\n  Size: 13              Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919365      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 13:54:22.974451898 +0530\nModify: 2015-03-06 13:52:22.910758923 +0530\nChange: 2015-03-06 13:52:22.910758923 +0530\n Birth: -\n[brick2]#\n[brick2]# md5sum b2/dir/file1\ncb11635a45d45668a403145059c2a0d5  b2/dir/file1\n</code></pre> <p>Healing file1 using the above command :- <code>gluster volume heal test split-brain bigger-file /dir/file1</code> Healed /dir/file1.</p> <p>After healing is complete, the md5sum and file size on both bricks should be the same.</p> <p>On brick b1:</p> <pre><code>[brick1]# stat b1/dir/file1\n  File: \u2018b1/dir/file1\u2019\n  Size: 17              Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919362      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 14:17:27.752429505 +0530\nModify: 2015-03-06 13:55:37.206880347 +0530\nChange: 2015-03-06 14:17:12.880343950 +0530\n Birth: -\n[brick1]#\n[brick1]# md5sum b1/dir/file1\n040751929ceabf77c3c0b3b662f341a8  b1/dir/file1\n</code></pre> <p>On brick b2:</p> <pre><code>[brick2]# stat b2/dir/file1\n  File: \u2018b2/dir/file1\u2019\n  Size: 17              Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919365      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 14:17:23.249403600 +0530\nModify: 2015-03-06 13:55:37.206880000 +0530\nChange: 2015-03-06 14:17:12.881343955 +0530\n Birth: -\n[brick2]#\n[brick2]# md5sum b2/dir/file1\n040751929ceabf77c3c0b3b662f341a8  b2/dir/file1\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#ii-select-the-file-with-the-latest-mtime-as-source","title":"ii) Select the file with the latest mtime as source","text":"<pre><code>gluster volume heal &lt;VOLNAME&gt; split-brain latest-mtime &lt;FILE&gt;\n</code></pre> <p>As is perhaps self-explanatory, this command uses the brick having the latest modification time for <code>&lt;FILE&gt;</code> as the source for healing.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#iii-select-one-of-the-bricks-in-the-replica-as-the-source-for-a-particular-file","title":"iii) Select one of the bricks in the replica as the source for a particular file","text":"<pre><code>gluster volume heal &lt;VOLNAME&gt; split-brain source-brick &lt;HOSTNAME:BRICKNAME&gt; &lt;FILE&gt;\n</code></pre> <p>Here, <code>&lt;HOSTNAME:BRICKNAME&gt;</code> is selected as source brick and <code>&lt;FILE&gt;</code> present in the source brick is taken as the source for healing.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_3","title":"Example :","text":"<p>Notice the md5 checksums and file size before and after healing.</p> <p>Before heal :</p> <p>On brick b1:</p> <pre><code>[brick1]# stat b1/file4\n  File: \u2018b1/file4\u2019\n  Size: 4               Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919356      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 13:53:19.417085062 +0530\nModify: 2015-03-06 13:53:19.426085114 +0530\nChange: 2015-03-06 13:53:19.426085114 +0530\n Birth: -\n[brick1]#\n[brick1]# md5sum b1/file4\nb6273b589df2dfdbd8fe35b1011e3183  b1/file4\n</code></pre> <p>On brick b2:</p> <pre><code>[brick2]# stat b2/file4\n  File: \u2018b2/file4\u2019\n  Size: 4               Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919358      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 13:52:35.761833096 +0530\nModify: 2015-03-06 13:52:35.769833142 +0530\nChange: 2015-03-06 13:52:35.769833142 +0530\n Birth: -\n[brick2]#\n[brick2]# md5sum b2/file4\n0bee89b07a248e27c83fc3d5951213c1  b2/file4\n</code></pre> <p>Healing the file with gfid c3c94de2-232d-4083-b534-5da17fc476ac using the above command :</p> <pre><code>gluster volume heal test split-brain source-brick test-host:/test/b1 gfid:c3c94de2-232d-4083-b534-5da17fc476ac\n</code></pre> <p>Healed gfid:c3c94de2-232d-4083-b534-5da17fc476ac.</p> <p>After healing :</p> <p>On brick b1:</p> <pre><code># stat b1/file4\n  File: \u2018b1/file4\u2019\n  Size: 4               Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919356      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 14:23:38.944609863 +0530\nModify: 2015-03-06 13:53:19.426085114 +0530\nChange: 2015-03-06 14:27:15.058927962 +0530\n Birth: -\n# md5sum b1/file4\nb6273b589df2dfdbd8fe35b1011e3183  b1/file4\n</code></pre> <p>On brick b2:</p> <pre><code># stat b2/file4\n File: \u2018b2/file4\u2019\n  Size: 4               Blocks: 16         IO Block: 4096   regular file\nDevice: fd03h/64771d    Inode: 919358      Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-03-06 14:23:38.944609000 +0530\nModify: 2015-03-06 13:53:19.426085000 +0530\nChange: 2015-03-06 14:27:15.059927968 +0530\n Birth: -\n# md5sum b2/file4\nb6273b589df2dfdbd8fe35b1011e3183  b2/file4\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#iv-select-one-brick-of-the-replica-as-the-source-for-all-files","title":"iv) Select one brick of the replica as the source for all files","text":"<pre><code>gluster volume heal &lt;VOLNAME&gt; split-brain source-brick &lt;HOSTNAME:BRICKNAME&gt;\n</code></pre> <p>Consider a scenario where many files are in split-brain such that one brick of replica pair is source. As the result of the above command all split-brained files in <code>&lt;HOSTNAME:BRICKNAME&gt;</code> are selected as source and healed to the sink.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_4","title":"Example:","text":"<p>Consider a volume having three entries \"a, b and c\" in split-brain.</p> <pre><code># gluster volume heal test split-brain source-brick test-host:/test/b1\nHealed gfid:944b4764-c253-4f02-b35f-0d0ae2f86c0f.\nHealed gfid:3256d814-961c-4e6e-8df2-3a3143269ced.\nHealed gfid:b23dd8de-af03-4006-a803-96d8bc0df004.\nNumber of healed entries: 3\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#32-resolution-of-gfid-split-brain-using-gluster-cli","title":"3.2 Resolution of GFID split-brain using gluster CLI","text":"<p>GFID split-brains can also be resolved by the gluster command line using the same policies that are used to resolve data and metadata split-brains.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#i-selecting-the-bigger-file-as-source","title":"i) Selecting the bigger-file as source","text":"<p>This method is useful for per file healing and where you can decided that the file with bigger size is to be considered as source.</p> <p>Run the following command to obtain the path of the file that is in split-brain:</p> <pre><code># gluster volume heal VOLNAME info split-brain\n</code></pre> <p>From the output, identify the files for which file operations performed from the client failed with input/output error.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_5","title":"Example :","text":"<pre><code># gluster volume heal testvol info\nBrick 10.70.47.45:/bricks/brick2/b0\n/f5\n/ - Is in split-brain\n\nStatus: Connected\nNumber of entries: 2\n\nBrick 10.70.47.144:/bricks/brick2/b1\n/f5\n/ - Is in split-brain\n\nStatus: Connected\nNumber of entries: 2\n</code></pre> <p>Note Entries which are in GFID split-brain may not be shown as in split-brain by the heal info or heal info split-brain commands always. For entry split-brains, it is the parent directory which is shown as being in split-brain. So one might need to run info split-brain to get the dir names and then heal info to get the list of files under that dir which might be in split-brain (it could just be needing heal without split-brain).</p> <p>In the above command, testvol is the volume name, b0 and b1 are the bricks. Execute the below getfattr command on the brick to fetch information if a file is in GFID split-brain or not.</p> <pre><code># getfattr -d -e hex -m. &lt;path-to-file&gt;\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#example_6","title":"Example :","text":"<p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f5\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f5\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-1=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0xce0a9956928e40afb78e95f78defd64f\ntrusted.gfid2path.9cde09916eabc845=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6635\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f5\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b1/f5\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-0=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0x9563544118653550e888ab38c232e0c\ntrusted.gfid2path.9cde09916eabc845=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6635\n</code></pre> <p>You can notice the difference in GFID for the file f5 in both the bricks. You can find the differences in the file size by executing stat command on the file from the bricks.</p> <p>On brick /b0</p> <pre><code># stat /bricks/brick2/b0/f5\nFile: \u2018/bricks/brick2/b0/f5\u2019\nSize: 15            Blocks: 8          IO Block: 4096   regular file\nDevice: fd15h/64789d    Inode: 67113350    Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: system_u:object_r:glusterd_brick_t:s0\nAccess: 2018-08-29 20:46:26.353751073 +0530\nModify: 2018-08-29 20:46:26.361751203 +0530\nChange: 2018-08-29 20:47:16.363751236 +0530\nBirth: -\n</code></pre> <p>On brick /b1</p> <pre><code># stat /bricks/brick2/b1/f5\nFile: \u2018/bricks/brick2/b1/f5\u2019\nSize: 2             Blocks: 8          IO Block: 4096   regular file\nDevice: fd15h/64789d    Inode: 67111750    Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: system_u:object_r:glusterd_brick_t:s0\nAccess: 2018-08-29 20:44:56.153301616 +0530\nModify: 2018-08-29 20:44:56.161301745 +0530\nChange: 2018-08-29 20:44:56.162301761 +0530\nBirth: -\n</code></pre> <p>Execute the following command along with the full filename as seen from the root of the volume which is displayed in the heal info command's output:</p> <pre><code># gluster volume heal VOLNAME split-brain bigger-file FILE\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#example_7","title":"Example :","text":"<pre><code># gluster volume heal testvol split-brain bigger-file /f5\nGFID split-brain resolved for file /f5\n</code></pre> <p>After the healing is complete, the GFID of the file on both the bricks must be the same as that of the file which had the bigger size. The following is a sample output of the getfattr command after completion of healing the file.</p> <p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f5\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f5\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0xce0a9956928e40afb78e95f78defd64f\ntrusted.gfid2path.9cde09916eabc845=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6635\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f5\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b1/f5\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0xce0a9956928e40afb78e95f78defd64f\ntrusted.gfid2path.9cde09916eabc845=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6635\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#ii-selecting-the-file-with-latest-mtime-as-source","title":"ii) Selecting the file with latest mtime as source","text":"<p>This method is useful for per file healing and if you want the file with latest mtime has to be considered as source.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_8","title":"Example :","text":"<p>Lets take another file which is in GFID split-brain and try to heal that using the latest-mtime option.</p> <p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f4\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f4\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-1=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0xb66b66d07b315f3c9cffac2fb6422a28\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f4\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b1/f4\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-0=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0x87242f808c6e56a007ef7d49d197acff\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>You can notice the difference in GFID for the file f4 in both the bricks. You can find the difference in the modification time by executing stat command on the file from the bricks.</p> <p>On brick /b0</p> <pre><code># stat /bricks/brick2/b0/f4\nFile: \u2018/bricks/brick2/b0/f4\u2019\nSize: 14            Blocks: 8          IO Block: 4096   regular file\nDevice: fd15h/64789d    Inode: 67113349    Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: system_u:object_r:glusterd_brick_t:s0\nAccess: 2018-08-29 20:57:38.913629991 +0530\nModify: 2018-08-29 20:57:38.921630122 +0530\nChange: 2018-08-29 20:57:38.923630154 +0530\nBirth: -\n</code></pre> <p>On brick /b1</p> <pre><code># stat /bricks/brick2/b1/f4\nFile: \u2018/bricks/brick2/b1/f4\u2019\nSize: 2             Blocks: 8          IO Block: 4096   regular file\nDevice: fd15h/64789d    Inode: 67111749    Links: 2\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: system_u:object_r:glusterd_brick_t:s0\nAccess: 2018-08-24 20:54:50.953217256 +0530\nModify: 2018-08-24 20:54:50.961217385 +0530\nChange: 2018-08-24 20:54:50.962217402 +0530\nBirth: -\n</code></pre> <p>Execute the following command:</p> <pre><code># gluster volume heal VOLNAME split-brain latest-mtime FILE\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#example_9","title":"Example :","text":"<pre><code># gluster volume heal testvol split-brain latest-mtime /f4\nGFID split-brain resolved for file /f4\n</code></pre> <p>After the healing is complete, the GFID of the files on both bricks must be same. The following is a sample output of the getfattr command after completion of healing the file. You can notice that the file has been healed using the brick having the latest mtime as the source.</p> <p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f4\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f4\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0xb66b66d07b315f3c9cffac2fb6422a28\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f4\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b1/f4\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0xb66b66d07b315f3c9cffac2fb6422a28\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#iii-select-one-of-the-bricks-in-the-replica-as-source-for-a-particular-file","title":"iii) Select one of the bricks in the replica as source for a particular file","text":"<p>This method is useful for per file healing and if you know which copy of the file is good.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_10","title":"Example :","text":"<p>Lets take another file which is in GFID split-brain and try to heal that using the source-brick option.</p> <p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f3\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f3\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-1=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0x9d542fb1b3b15837a2f7f9dcdf5d6ee8\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f3\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f3\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.afr.testvol-client-1=0x000000020000000100000000\ntrusted.afr.dirty=0x000000000000000000000000\ntrusted.gfid=0xc90d9b0f65f6530b95b9f3f8334033df\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>You can notice the difference in GFID for the file f3 in both the bricks.</p> <p>Execute the following command:</p> <pre><code># gluster volume heal VOLNAME split-brain source-brick HOSTNAME:export-directory-absolute-path FILE\n</code></pre> <p>In this command, FILE present in HOSTNAME : export-directory-absolute-path is taken as source for healing.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_11","title":"Example :","text":"<pre><code># gluster volume heal testvol split-brain source-brick 10.70.47.144:/bricks/brick2/b1 /f3\nGFID split-brain resolved for file /f3\n</code></pre> <p>After the healing is complete, the GFID of the file on both the bricks should be same as that of the brick which was chosen as source for healing. The following is a sample output of the getfattr command after the file is healed.</p> <p>On brick /b0</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b0/f3\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b0/f3\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0x90d9b0f65f6530b95b9f3f8334033df\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>On brick /b1</p> <pre><code># getfattr -d -m . -e hex /bricks/brick2/b1/f3\ngetfattr: Removing leading '/' from absolute path names\nfile: bricks/brick2/b1/f3\nsecurity.selinux=0x73797374656d5f753a6f626a6563745f723a676c7573746572645f627269636b5f743a733000\ntrusted.gfid=0x90d9b0f65f6530b95b9f3f8334033df\ntrusted.gfid2path.364f55367c7bd6f4=0x30303030303030302d303030302d303030302d303030302d3030303030303030303030312f6634\n</code></pre> <p>Note</p> <ul> <li> <p>One cannot use the GFID of the file as an argument with any of the CLI options to resolve GFID split-brain. It should be the absolute path as seen from the mount point to the file considered as source.</p> </li> <li> <p>With source-brick option there is no way to resolve all the GFID split-brain in one shot by not specifying any file path in the CLI as done while resolving data or metadata split-brain. For each file in GFID split-brain, run the CLI with the policy you want to use.</p> </li> <li> <p>Resolving directory GFID split-brain using CLI with the \"source-brick\" option in a \"distributed-replicated\" volume needs to be done on all the sub-volumes explicitly, which are in this state. Since directories get created on all the sub-volumes, using one particular brick as source for directory GFID split-brain heals the directory for that particular sub-volume. Source brick should be chosen in such a way that after heal all the bricks of all the sub-volumes have the same GFID.</p> </li> </ul>"},{"location":"Troubleshooting/resolving-splitbrain/#note","title":"Note:","text":"<p>As mentioned earlier, type-mismatch can not be resolved using CLI. Type-mismatch means different st_mode values (for example, the entry is a file in one brick while it is a directory on the other). Trying to heal such entry would fail.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_12","title":"Example","text":"<p>The entry named \"entry1\" is of different types on the bricks of the replica. Lets try to heal that using the split-brain CLI.</p> <pre><code># gluster volume heal test split-brain source-brick test-host:/test/b1 /entry1\nHealing /entry1 failed:Operation not permitted.\nVolume heal failed.\n</code></pre> <p>However, they can be fixed by deleting the file from all but one bricks. See Fixing Directory entry split-brain</p>"},{"location":"Troubleshooting/resolving-splitbrain/#an-overview-of-working-of-heal-info-commands","title":"An overview of working of heal info commands","text":"<p>When these commands are invoked, a \"glfsheal\" process is spawned which reads the entries from the various sub-directories under <code>/&lt;brick-path&gt;/.glusterfs/indices/</code> of all the bricks that are up (that it can connect to) one after another. These entries are GFIDs of files that might need healing. Once GFID entries from a brick are obtained, based on the lookup response of this file on each participating brick of replica-pair &amp; trusted.afr.* extended attributes it is found out if the file needs healing, is in split-brain etc based on the requirement of each command and displayed to the user.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#4-resolution-of-split-brain-from-the-mount-point","title":"4. Resolution of split-brain from the mount point","text":"<p>A set of getfattr and setfattr commands have been provided to detect the data and metadata split-brain status of a file and resolve split-brain, if any, from mount point.</p> <p>Consider a volume \"test\", having bricks b0, b1, b2 and b3.</p> <pre><code># gluster volume info test\n\nVolume Name: test\nType: Distributed-Replicate\nVolume ID: 00161935-de9e-4b80-a643-b36693183b61\nStatus: Started\nNumber of Bricks: 2 x 2 = 4\nTransport-type: tcp\nBricks:\nBrick1: test-host:/test/b0\nBrick2: test-host:/test/b1\nBrick3: test-host:/test/b2\nBrick4: test-host:/test/b3\n</code></pre> <p>Directory structure of the bricks is as follows:</p> <pre><code># tree -R /test/b?\n/test/b0\n\u251c\u2500\u2500 dir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 a\n\u2514\u2500\u2500 file100\n\n/test/b1\n\u251c\u2500\u2500 dir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 a\n\u2514\u2500\u2500 file100\n\n/test/b2\n\u251c\u2500\u2500 dir\n\u251c\u2500\u2500 file1\n\u251c\u2500\u2500 file2\n\u2514\u2500\u2500 file99\n\n/test/b3\n\u251c\u2500\u2500 dir\n\u251c\u2500\u2500 file1\n\u251c\u2500\u2500 file2\n\u2514\u2500\u2500 file99\n</code></pre> <p>Some files in the volume are in split-brain.</p> <pre><code># gluster v heal test info split-brain\nBrick test-host:/test/b0/\n/file100\n/dir\nNumber of entries in split-brain: 2\n\nBrick test-host:/test/b1/\n/file100\n/dir\nNumber of entries in split-brain: 2\n\nBrick test-host:/test/b2/\n/file99\n&lt;gfid:5399a8d1-aee9-4653-bb7f-606df02b3696&gt;\nNumber of entries in split-brain: 2\n\nBrick test-host:/test/b3/\n&lt;gfid:05c4b283-af58-48ed-999e-4d706c7b97d5&gt;\n&lt;gfid:5399a8d1-aee9-4653-bb7f-606df02b3696&gt;\nNumber of entries in split-brain: 2\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#to-know-datametadata-split-brain-status-of-a-file","title":"To know data/metadata split-brain status of a file:","text":"<pre><code>getfattr -n replica.split-brain-status &lt;path-to-file&gt;\n</code></pre> <p>The above command executed from mount provides information if a file is in data/metadata split-brain. Also provides the list of afr children to analyze to get more information about the file. This command is not applicable to gfid/directory split-brain.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_13","title":"Example:","text":"<ol> <li>\"file100\" is in metadata split-brain. Executing the above mentioned command for file100 gives :</li> </ol> <pre><code># getfattr -n replica.split-brain-status file100\nfile: file100\nreplica.split-brain-status=\"data-split-brain:no    metadata-split-brain:yes    Choices:test-client-0,test-client-1\"\n</code></pre> <ol> <li>\"file1\" is in data split-brain.</li> </ol> <pre><code># getfattr -n replica.split-brain-status file1\nfile: file1\nreplica.split-brain-status=\"data-split-brain:yes    metadata-split-brain:no    Choices:test-client-2,test-client-3\"\n</code></pre> <ol> <li>\"file99\" is in both data and metadata split-brain.</li> </ol> <pre><code># getfattr -n replica.split-brain-status file99\nfile: file99\nreplica.split-brain-status=\"data-split-brain:yes    metadata-split-brain:yes    Choices:test-client-2,test-client-3\"\n</code></pre> <ol> <li>\"dir\" is in directory split-brain but as mentioned earlier, the above command is not applicable to such split-brain. So it says that the file is not under data or metadata split-brain.</li> </ol> <pre><code># getfattr -n replica.split-brain-status dir\nfile: dir\nreplica.split-brain-status=\"The file is not under data or metadata split-brain\"\n</code></pre> <ol> <li>\"file2\" is not in any kind of split-brain.</li> </ol> <pre><code># getfattr -n replica.split-brain-status file2\nfile: file2\nreplica.split-brain-status=\"The file is not under data or metadata split-brain\"\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#to-analyze-the-files-in-data-and-metadata-split-brain","title":"To analyze the files in data and metadata split-brain","text":"<p>Trying to do operations (say cat, getfattr etc) from the mount on files in split-brain, gives an input/output error. To enable the users analyze such files, a setfattr command is provided.</p> <pre><code># setfattr -n replica.split-brain-choice -v \"choiceX\" &lt;path-to-file&gt;\n</code></pre> <p>Using this command, a particular brick can be chosen to access the file in split-brain from.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_14","title":"Example:","text":"<ol> <li>\"file1\" is in data-split-brain. Trying to read from the file gives input/output error.</li> </ol> <pre><code># cat file1\ncat: file1: Input/output error\n</code></pre> <p>Split-brain choices provided for file1 were test-client-2 and test-client-3.</p> <p>Setting test-client-2 as split-brain choice for file1 serves reads from b2 for the file.</p> <pre><code># setfattr -n replica.split-brain-choice -v test-client-2 file1\n</code></pre> <p>Now, read operations on the file can be done.</p> <pre><code># cat file1\nxyz\n</code></pre> <p>Similarly, to inspect the file from other choice, replica.split-brain-choice is to be set to test-client-3.</p> <p>Trying to inspect the file from a wrong choice errors out.</p> <p>To undo the split-brain-choice that has been set, the above mentioned setfattr command can be used with \"none\" as the value for extended attribute.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#example_15","title":"Example:","text":"<pre><code># setfattr -n replica.split-brain-choice -v none file1\n</code></pre> <p>Now performing cat operation on the file will again result in input/output error, as before.</p> <pre><code># cat file\ncat: file1: Input/output error\n</code></pre> <p>Once the choice for resolving split-brain is made, source brick is supposed to be set for the healing to be done. This is done using the following command:</p> <pre><code># setfattr -n replica.split-brain-heal-finalize -v &lt;heal-choice&gt; &lt;path-to-file&gt;\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#example_16","title":"Example","text":"<pre><code># setfattr -n replica.split-brain-heal-finalize -v test-client-2 file1\n</code></pre> <p>The above process can be used to resolve data and/or metadata split-brain on all the files.</p> <p>NOTE:</p> <ol> <li>If \"fopen-keep-cache\" fuse mount option is disabled then inode needs to be invalidated each time before selecting a new replica.split-brain-choice to inspect a file. This can be done by using:</li> </ol> <pre><code># sefattr -n inode-invalidate -v 0 &lt;path-to-file&gt;\n</code></pre> <ol> <li>The above mentioned process for split-brain resolution from mount will not work on nfs mounts as it doesn't provide xattrs support.</li> </ol>"},{"location":"Troubleshooting/resolving-splitbrain/#5-automagic-unsplit-brain-by-ctimemtimesizemajority","title":"5. Automagic unsplit-brain by [ctime|mtime|size|majority]","text":"<p>The CLI and fuse mount based resolution methods require intervention in the sense that the admin/ user needs to run the commands manually. There is a <code>cluster.favorite-child-policy</code> volume option which when set to one of the various policies available, automatically resolve split-brains without user intervention. The default value is 'none', i.e. it is disabled.</p> <pre><code># gluster volume set help | grep -A3 cluster.favorite-child-policy\nOption: cluster.favorite-child-policy\nDefault Value: none\nDescription: This option can be used to automatically resolve split-brains using various policies without user intervention. \"size\" picks the file with the biggest size as the source. \"ctime\" and \"mtime\" pick the file with the latest ctime and mtime respectively as the source. \"majority\" picks a file with identical mtime and size in more than half the number of bricks in the replica.\n</code></pre> <p><code>cluster.favorite-child-policy</code> applies to all files of the volume. It is assumed that if this option is enabled with a particular policy, you don't care to examine the split-brain files on a per file basis but just want the split-brain to be resolved as and when it occurs based on the set policy.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#manual-split-brain-resolution","title":"Manual Split-Brain Resolution:","text":""},{"location":"Troubleshooting/resolving-splitbrain/#quick-start","title":"Quick Start:","text":"<ol> <li> <p>Get the path of the file that is in split-brain:</p> <p>It can be obtained either by  a) The command <code>gluster volume heal info split-brain</code>.  b) Identify the files for which file operations performed from the client keep failing with Input/Output error.</p> </li> <li> <p>Close the applications that opened this file from the mount point.     In case of VMs, they need to be powered-off.</p> </li> <li> <p>Decide on the correct copy:</p> <p>This is done by observing the afr changelog extended attributes of the file on the bricks using the getfattr command; then identifying the type of split-brain (data split-brain, metadata split-brain, entry split-brain or split-brain due to gfid-mismatch); and finally determining which of the bricks contains the 'good copy' of the file. <code>getfattr -d -m . -e hex &lt;file-path-on-brick&gt;</code>. It is also possible that one brick might contain the correct data while the other might contain the correct metadata.</p> </li> <li> <p>Reset the relevant extended attribute on the brick(s) that contains the     'bad copy' of the file data/metadata using the setfattr command.</p> <p><code>setfattr -n &lt;attribute-name&gt; -v &lt;attribute-value&gt; &lt;file-path-on-brick&gt;</code></p> </li> <li> <p>Trigger self-heal on the file by performing lookup from the client:</p> <p><code>ls -l &lt;file-path-on-gluster-mount&gt;</code></p> </li> </ol>"},{"location":"Troubleshooting/resolving-splitbrain/#detailed-instructions-for-steps-3-through-5","title":"Detailed Instructions for steps 3 through 5:","text":"<p>To understand how to resolve split-brain we need to know how to interpret the afr changelog extended attributes.</p> <p>Execute <code>getfattr -d -m . -e hex &lt;file-path-on-brick&gt;</code></p> <p>Example:</p> <pre><code>[root@store3 ~]# getfattr -d -e hex -m. brick-a/file.txt\n\\#file: brick-a/file.txt\nsecurity.selinux=0x726f6f743a6f626a6563745f723a66696c655f743a733000\ntrusted.afr.vol-client-2=0x000000000000000000000000\ntrusted.afr.vol-client-3=0x000000000200000000000000\ntrusted.gfid=0x307a5c9efddd4e7c96e94fd4bcdcbd1b\n</code></pre> <p>The extended attributes with <code>trusted.afr.&lt;volname&gt;-client-&lt;subvolume-index&gt;</code> are used by afr to maintain changelog of the file.The values of the <code>trusted.afr.&lt;volname&gt;-client-&lt;subvolume-index&gt;</code> are calculated by the glusterfs client (fuse or nfs-server) processes. When the glusterfs client modifies a file or directory, the client contacts each brick and updates the changelog extended attribute according to the response of the brick.</p> <p>'subvolume-index' is nothing but (brick number - 1) in <code>gluster volume info &lt;volname&gt;</code> output.</p> <p>Example:</p> <pre><code>[root@pranithk-laptop ~]# gluster volume info vol\n Volume Name: vol\n Type: Distributed-Replicate\n Volume ID: 4f2d7849-fbd6-40a2-b346-d13420978a01\n Status: Created\n Number of Bricks: 4 x 2 = 8\n Transport-type: tcp\n Bricks:\n brick-a: pranithk-laptop:/gfs/brick-a\n brick-b: pranithk-laptop:/gfs/brick-b\n brick-c: pranithk-laptop:/gfs/brick-c\n brick-d: pranithk-laptop:/gfs/brick-d\n brick-e: pranithk-laptop:/gfs/brick-e\n brick-f: pranithk-laptop:/gfs/brick-f\n brick-g: pranithk-laptop:/gfs/brick-g\n brick-h: pranithk-laptop:/gfs/brick-h\n</code></pre> <p>In the example above:</p> <pre><code>Brick             |    Replica set        |    Brick subvolume index\n----------------------------------------------------------------------------\n-/gfs/brick-a     |       0               |       0\n-/gfs/brick-b     |       0               |       1\n-/gfs/brick-c     |       1               |       2\n-/gfs/brick-d     |       1               |       3\n-/gfs/brick-e     |       2               |       4\n-/gfs/brick-f     |       2               |       5\n-/gfs/brick-g     |       3               |       6\n-/gfs/brick-h     |       3               |       7\n</code></pre> <p>Each file in a brick maintains the changelog of itself and that of the files present in all the other bricks in its replica set as seen by that brick.</p> <p>In the example volume given above, all files in brick-a will have 2 entries, one for itself and the other for the file present in its replica pair, i.e.brick-b: trusted.afr.vol-client-0=0x000000000000000000000000 --&gt;changelog for itself (brick-a) trusted.afr.vol-client-1=0x000000000000000000000000 --&gt;changelog for brick-b as seen by brick-a</p> <p>Likewise, all files in brick-b will have: trusted.afr.vol-client-0=0x000000000000000000000000 --&gt;changelog for brick-a as seen by brick-b trusted.afr.vol-client-1=0x000000000000000000000000 --&gt;changelog for itself (brick-b)</p> <p>The same can be extended for other replica pairs.</p> <p>Interpreting Changelog (roughly pending operation count) Value: Each extended attribute has a value which is 24 hexa decimal digits. First 8 digits represent changelog of data. Second 8 digits represent changelog of metadata. Last 8 digits represent Changelog of directory entries.</p> <p>Pictorially representing the same, we have:</p> <pre><code>0x 000003d7 00000001 00000000\n        |      |       |\n        |      |        \\_ changelog of directory entries\n        |       \\_ changelog of metadata\n         \\ _ changelog of data\n</code></pre> <p>For Directories metadata and entry changelogs are valid. For regular files data and metadata changelogs are valid. For special files like device files etc metadata changelog is valid. When a file split-brain happens it could be either data split-brain or meta-data split-brain or both. When a split-brain happens the changelog of the file would be something like this:</p> <p>Example:(Lets consider both data, metadata split-brain on same file).</p> <pre><code>[root@pranithk-laptop vol]# getfattr -d -m . -e hex /gfs/brick-?/a\ngetfattr: Removing leading '/' from absolute path names\n\\#file: gfs/brick-a/a\ntrusted.afr.vol-client-0=0x000000000000000000000000\ntrusted.afr.vol-client-1=0x000003d70000000100000000\ntrusted.gfid=0x80acdbd886524f6fbefa21fc356fed57\n\\#file: gfs/brick-b/a\ntrusted.afr.vol-client-0=0x000003b00000000100000000\ntrusted.afr.vol-client-1=0x000000000000000000000000\ntrusted.gfid=0x80acdbd886524f6fbefa21fc356fed57\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#observations","title":"Observations:","text":""},{"location":"Troubleshooting/resolving-splitbrain/#according-to-changelog-extended-attributes-on-file-gfsbrick-aa","title":"According to changelog extended attributes on file /gfs/brick-a/a:","text":"<p>The first 8 digits of trusted.afr.vol-client-0 are all zeros (0x00000000................), and the first 8 digits of trusted.afr.vol-client-1 are not all zeros (0x000003d7................). So the changelog on /gfs/brick-a/a implies that some data operations succeeded on itself but failed on /gfs/brick-b/a.</p> <p>The second 8 digits of trusted.afr.vol-client-0 are all zeros (0x........00000000........), and the second 8 digits of trusted.afr.vol-client-1 are not all zeros (0x........00000001........). So the changelog on /gfs/brick-a/a implies that some metadata operations succeeded on itself but failed on /gfs/brick-b/a.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#according-to-changelog-extended-attributes-on-file-gfsbrick-ba","title":"According to Changelog extended attributes on file /gfs/brick-b/a:","text":"<p>The first 8 digits of trusted.afr.vol-client-0 are not all zeros (0x000003b0................), and the first 8 digits of trusted.afr.vol-client-1 are all zeros (0x00000000................). So the changelog on /gfs/brick-b/a implies that some data operations succeeded on itself but failed on /gfs/brick-a/a.</p> <p>The second 8 digits of trusted.afr.vol-client-0 are not all zeros (0x........00000001........), and the second 8 digits of trusted.afr.vol-client-1 are all zeros (0x........00000000........). So the changelog on /gfs/brick-b/a implies that some metadata operations succeeded on itself but failed on /gfs/brick-a/a.</p> <p>Since both the copies have data, metadata changes that are not on the other file, it is in both data and metadata split-brain.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#deciding-on-the-correct-copy","title":"Deciding on the correct copy:","text":"<p>The user may have to inspect stat,getfattr output of the files to decide which metadata to retain and contents of the file to decide which data to retain. Continuing with the example above, lets say we want to retain the data of /gfs/brick-a/a and metadata of /gfs/brick-b/a.</p>"},{"location":"Troubleshooting/resolving-splitbrain/#resetting-the-relevant-changelogs-to-resolve-the-split-brain","title":"Resetting the relevant changelogs to resolve the split-brain:","text":"<p>For resolving data-split-brain:</p> <p>We need to change the changelog extended attributes on the files as if some data operations succeeded on /gfs/brick-a/a but failed on /gfs/brick-b/a. But /gfs/brick-b/a should NOT have any changelog which says some data operations succeeded on /gfs/brick-b/a but failed on /gfs/brick-a/a. We need to reset the data part of the changelog on trusted.afr.vol-client-0 of /gfs/brick-b/a.</p> <p>For resolving metadata-split-brain:</p> <p>We need to change the changelog extended attributes on the files as if some metadata operations succeeded on /gfs/brick-b/a but failed on /gfs/brick-a/a. But /gfs/brick-a/a should NOT have any changelog which says some metadata operations succeeded on /gfs/brick-a/a but failed on /gfs/brick-b/a. We need to reset metadata part of the changelog on trusted.afr.vol-client-1 of /gfs/brick-a/a</p> <p>So, the intended changes are: On /gfs/brick-b/a: For trusted.afr.vol-client-0 0x000003b00000000100000000 to 0x000000000000000100000000 (Note that the metadata part is still not all zeros) Hence execute <code>setfattr -n trusted.afr.vol-client-0 -v 0x000000000000000100000000 /gfs/brick-b/a</code></p> <p>On /gfs/brick-a/a: For trusted.afr.vol-client-1 0x000003d70000000100000000 to 0x000003d70000000000000000 (Note that the data part is still not all zeros) Hence execute <code>setfattr -n trusted.afr.vol-client-1 -v 0x000003d70000000000000000 /gfs/brick-a/a</code></p> <p>Thus after the above operations are done, the changelogs look like this:</p> <pre><code>[root@pranithk-laptop vol]# getfattr -d -m . -e hex /gfs/brick-?/a\ngetfattr: Removing leading '/' from absolute path names\n\\#file: gfs/brick-a/a\ntrusted.afr.vol-client-0=0x000000000000000000000000\ntrusted.afr.vol-client-1=0x000003d70000000000000000\ntrusted.gfid=0x80acdbd886524f6fbefa21fc356fed57\n\n\\#file: gfs/brick-b/a\ntrusted.afr.vol-client-0=0x000000000000000100000000\ntrusted.afr.vol-client-1=0x000000000000000000000000\ntrusted.gfid=0x80acdbd886524f6fbefa21fc356fed57\n</code></pre>"},{"location":"Troubleshooting/resolving-splitbrain/#triggering-self-heal","title":"Triggering Self-heal:","text":"<p>Perform <code>ls -l &lt;file-path-on-gluster-mount&gt;</code> to trigger healing.</p> <p> Fixing Directory entry split-brain:</p> <p>Afr has the ability to conservatively merge different entries in the directories when there is a split-brain on directory. If on one brick directory 'd' has entries '1', '2' and has entries '3', '4' on the other brick then afr will merge all of the entries in the directory to have '1', '2', '3', '4' entries in the same directory. (Note: this may result in deleted files to re-appear in case the split-brain happens because of deletion of files on the directory) Split-brain resolution needs human intervention when there is at least one entry which has same file name but different gfid in that directory. Example: On brick-a the directory has entries '1' (with gfid g1), '2' and on brick-b directory has entries '1' (with gfid g2) and '3'. These kinds of directory split-brains need human intervention to resolve. The user needs to remove either file '1' on brick-a or the file '1' on brick-b to resolve the split-brain. In addition, the corresponding gfid-link file also needs to be removed.The gfid-link files are present in the .glusterfs folder in the top-level directory of the brick. If the gfid of the file is 0x307a5c9efddd4e7c96e94fd4bcdcbd1b (the trusted.gfid extended attribute got from the getfattr command earlier),the gfid-link file can be found at</p> <p>/gfs/brick-a/.glusterfs/30/7a/307a5c9efddd4e7c96e94fd4bcdcbd1b</p>"},{"location":"Troubleshooting/resolving-splitbrain/#word-of-caution","title":"Word of caution:","text":"<p>Before deleting the gfid-link, we have to ensure that there are no hard links to the file present on that brick. If hard-links exist,they must be deleted as well.</p>"},{"location":"Troubleshooting/statedump/","title":"Statedump","text":"<p>A statedump is, as the name suggests, a dump of the internal state of a glusterfs process. It captures information about in-memory structures such as frames, call stacks, active inodes, fds, mempools, iobufs, and locks as well as xlator specific data structures. This can be an invaluable tool for debugging memory leaks and hung processes.</p> <ul> <li>Generate a Statedump</li> <li>Read a Statedump</li> <li>Debug with a Statedump</li> </ul>"},{"location":"Troubleshooting/statedump/#generate-a-statedump","title":"Generate a Statedump","text":"<p>Run the command</p> <pre><code>gluster --print-statedumpdir\n</code></pre> <p>on a gluster server node to find out which directory the statedumps will be created in. This directory may need to be created if not already present. For the rest of this document, we will refer to this directory as <code>statedump-directory</code>.</p> <p>To generate a statedump for a process, run</p> <pre><code>kill -USR1 &lt;pid-of-gluster-process&gt;\n</code></pre> <p>For client mounts:</p> <p>Run the following command on the client system</p> <pre><code>kill -USR1 &lt;pid-of-gluster-mount-process&gt;\n</code></pre> <p>There are specific commands to generate statedumps for all brick processes/nfs server/quotad which can be used instead of the above. Run the following commands on one of the server nodes:</p> <p>For bricks:</p> <pre><code>gluster volume statedump &lt;volname&gt;\n</code></pre> <p>For the NFS server:</p> <pre><code>gluster volume statedump &lt;volname&gt; nfs\n</code></pre> <p>For quotad:</p> <pre><code>gluster volume statedump &lt;volname&gt; quotad\n</code></pre> <p>The statedumps will be created in <code>statedump-directory</code> on each node. The statedumps for brick processes will be created with the filename <code>hyphenated-brick-path.&lt;pid&gt;.dump.timestamp</code> while for all other processes it will be <code>glusterdump.&lt;pid&gt;.dump.timestamp</code>.</p>"},{"location":"Troubleshooting/statedump/#read-a-statedump","title":"Read a Statedump","text":"<p>Statedumps are text files and can be opened in any text editor. The first and last lines of the file contain the start and end time (in UTC)respectively of when the statedump file was written.</p>"},{"location":"Troubleshooting/statedump/#mallinfo","title":"Mallinfo","text":"<p>The mallinfo return status is printed in the following format. Please read man mallinfo for more information about what each field means.</p> <pre><code>[mallinfo]\nmallinfo_arena=100020224    /* Non-mmapped space allocated (bytes) */\nmallinfo_ordblks=69467      /* Number of free chunks */\nmallinfo_smblks=449         /* Number of free fastbin blocks */\nmallinfo_hblks=13           /* Number of mmapped regions */\nmallinfo_hblkhd=20144128    /* Space allocated in mmapped regions (bytes) */\nmallinfo_usmblks=0          /* Maximum total allocated space (bytes) */\nmallinfo_fsmblks=39264      /* Space in freed fastbin blocks (bytes) */\nmallinfo_uordblks=96710112  /* Total allocated space (bytes) */\nmallinfo_fordblks=3310112   /* Total free space (bytes) */\nmallinfo_keepcost=133712    /* Top-most, releasable space (bytes) */\n</code></pre>"},{"location":"Troubleshooting/statedump/#memory-accounting-stats","title":"Memory accounting stats","text":"<p>Each xlator defines data structures specific to its requirements. The statedump captures information about the memory usage and allocations of these structures for each xlator in the call-stack and prints them in the following format:</p> <p>For the xlator with the name glusterfs</p> <pre><code>[global.glusterfs - Memory usage]   #[global.&lt;xlator-name&gt; - Memory usage]\nnum_types=119                       #The number of data types it is using\n</code></pre> <p>followed by the memory usage for each data-type for that translator. The following example displays a sample for the gf_common_mt_gf_timer_t type</p> <pre><code>[global.glusterfs - usage-type gf_common_mt_gf_timer_t memusage]\n#[global.&lt;xlator-name&gt; - usage-type &lt;tag associated with the data-type&gt; memusage]\nsize=112          #Total size allocated for data-type when the statedump was taken i.e. num_allocs * sizeof (data-type)\nnum_allocs=2      #Number of allocations of the data-type which are active at the time of taking the statedump.\nmax_size=168      #max_num_allocs times the sizeof(data-type) i.e. max_num_allocs * sizeof (data-type)\nmax_num_allocs=3  #Maximum number of active allocations at any point in the life of the process.\ntotal_allocs=7    #Number of times this data-type was allocated in the life of the process.\n</code></pre> <p>This information is useful while debugging high memory usage issues as steadily increasing values for num_allocs may indicate a memory leak for that data-type.</p>"},{"location":"Troubleshooting/statedump/#mempools","title":"Mempools","text":"<p>Mempools are an optimization intended to reduce the number of allocations of a data type. By creating a mempool of 1024 elements for a data-type, new elements of that type will be allocated from the heap using syscalls like calloc only if all the 1024 elements in the pool are in active use.</p> <p>Memory pool allocations by each xlator are displayed in the following format:</p> <pre><code>[mempool] #Section name\n-----=-----\npool-name=fuse:fd_t #pool-name=&lt;xlator-name&gt;:&lt;data-type&gt;\nhot-count=1         #number of mempool elements in active use. i.e. for this pool it is the number of 'fd_t' elements in active use.\ncold-count=1023     #number of mempool elements that are not in use. New allocation requests will be served from here until all the elements in the pool are in use i.e. cold-count becomes 0.\npadded_sizeof=108   #Element size including padding. Each mempool element is padded with a doubly-linked-list + ptr of mempool + is-in-use info to operate the pool of elements\npool-misses=0       #Number of times the element was allocated from heap because all elements from the pool were in active use.\nalloc-count=314     #Number of times this type of data was allocated through out the life of this process. This may include pool-misses as well.\nmax-alloc=3         #Maximum number of elements from the pool in active use at any point in the life of the process. This does *not* include pool-misses.\ncur-stdalloc=0      #Number of allocations made from heap that are yet to be released via mem_put().\nmax-stdalloc=0      #Maximum number of allocations from heap that were in active use at any point in the life of the process.\n</code></pre> <p>This information is also useful while debugging high memory usage issues as large hot_count and cur-stdalloc values may point to an element not being freed after it has been used.</p>"},{"location":"Troubleshooting/statedump/#iobufs","title":"Iobufs","text":"<pre><code>[iobuf.global]\niobuf_pool=0x1f0d970                #The memory pool for iobufs\niobuf_pool.default_page_size=131072 #The default size of iobuf (if no iobuf size is specified the default size is allocated)\n#iobuf_arena: One arena represents a group of iobufs of a particular size\niobuf_pool.arena_size=12976128       # The initial size of the iobuf pool (doesn't include the stdalloc'd memory or newly added arenas)\niobuf_pool.arena_cnt=8               #Total number of arenas in the pool\niobuf_pool.request_misses=0          #The number of iobufs that were stdalloc'd (as they exceeded the default max page size provided by iobuf_pool).\n</code></pre> <p>There are 3 lists of arenas</p> <ol> <li>Arena list: arenas allocated during iobuf pool creation and the arenas that are in use(active_cnt != 0) will be part of this list.</li> <li>Purge list: arenas that can be purged(no active iobufs, active_cnt == 0).</li> <li>Filled list: arenas without free iobufs.</li> </ol> <pre><code>[purge.1]                        #purge.&lt;S.No.&gt;\npurge.1.mem_base=0x7fc47b35f000  #The address of the arena structure\npurge.1.active_cnt=0             #The number of iobufs active in that arena\npurge.1.passive_cnt=1024         #The number of unused iobufs in the arena\npurge.1.alloc_cnt=22853          #Total allocs in this pool(number of times the iobuf was allocated from this arena)\npurge.1.max_active=7             #Max active iobufs from this arena, at any point in the life of this process.\npurge.1.page_size=128            #Size of all the iobufs in this arena.\n\n[arena.5] #arena.&lt;S.No.&gt;\narena.5.mem_base=0x7fc47af1f000\narena.5.active_cnt=0\narena.5.passive_cnt=64\narena.5.alloc_cnt=0\narena.5.max_active=0\narena.5.page_size=32768\n</code></pre> <p>If the active_cnt of any arena is non zero, then the statedump will also have the iobuf list.</p> <pre><code>[arena.6.active_iobuf.1]                  #arena.&lt;S.No&gt;.active_iobuf.&lt;iobuf.S.No.&gt;\narena.6.active_iobuf.1.ref=1              #refcount of the iobuf\narena.6.active_iobuf.1.ptr=0x7fdb921a9000 #address of the iobuf\n\n[arena.6.active_iobuf.2]\narena.6.active_iobuf.2.ref=1\narena.6.active_iobuf.2.ptr=0x7fdb92189000\n</code></pre> <p>A lot of filled arenas at any given point in time could be a sign of iobuf leaks.</p>"},{"location":"Troubleshooting/statedump/#call-stack","title":"Call stack","text":"<p>The fops received by gluster are handled using call stacks. A call stack contains information about the uid/gid/pid etc of the process that is executing the fop. Each call stack contains different call-frames for each xlator which handles that fop.</p> <pre><code>[global.callpool.stack.3]    #global.callpool.stack.&lt;Serial-Number&gt;\nstack=0x7fc47a44bbe0         #Stack address\nuid=0                        #Uid of the process executing the fop\ngid=0                        #Gid of the process executing the fop\npid=6223                     #Pid of the process executing the fop\nunique=2778                  #Some Xlators like afr do copy_frame and perform the operation in a different stack. This id is used to determine the stacks that are inter-related because of copy-frame\nlk-owner=0000000000000000    #Some of the fuse fops have lk-owner.\nop=LOOKUP                    #Fop\ntype=1                       #Type of the op i.e. FOP/MGMT-OP\ncnt=9                        #Number of frames in this stack.\n</code></pre>"},{"location":"Troubleshooting/statedump/#call-frame","title":"Call-frame","text":"<p>Each frame will have information about which xlator the frame belongs to, which function it wound to/from and which it will be unwound to, and whether it has unwound.</p> <pre><code>[global.callpool.stack.3.frame.2] #global.callpool.stack.&lt;stack-serial-number&gt;.frame.&lt;frame-serial-number&gt;\nframe=0x7fc47a611dbc              #Frame address\nref_count=0                       #Incremented at the time of wind and decremented at the time of unwind.\ntranslator=r2-client-1            #Xlator this frame belongs to\ncomplete=0                        #1 if this frame is already unwound. 0 if it is yet to unwind.\nparent=r2-replicate-0             #Parent xlator of this frame\nwind_from=afr_lookup              #Parent xlator function from which it was wound\nwind_to=priv-&gt;children[i]-&gt;fops-&gt;lookup\nunwind_to=afr_lookup_cbk          #Parent xlator function to unwind to\n</code></pre> <p>To debug hangs in the system, see which xlator has not yet unwound its fop by checking the value of the complete tag in the statedump. (complete=0 indicates the xlator has not yet unwound).</p>"},{"location":"Troubleshooting/statedump/#fuse-operation-history","title":"FUSE Operation History","text":"<p>Gluster Fuse maintains a history of the operations that it has performed.</p> <pre><code>[xlator.mount.fuse.history]\nTIME=2014-07-09 16:44:57.523364\nmessage=[0] fuse_release: RELEASE(): 4590:, fd: 0x1fef0d8, gfid: 3afb4968-5100-478d-91e9-76264e634c9f\n\nTIME=2014-07-09 16:44:57.523373\nmessage=[0] send_fuse_err: Sending Success for operation 18 on inode 3afb4968-5100-478d-91e9-76264e634c9f\n\nTIME=2014-07-09 16:44:57.523394\nmessage=[0] fuse_getattr_resume: 4591, STAT, path: (/iozone.tmp), gfid: (3afb4968-5100-478d-91e9-76264e634c9f)\n</code></pre>"},{"location":"Troubleshooting/statedump/#xlator-configuration","title":"Xlator configuration","text":"<pre><code>[cluster/replicate.r2-replicate-0] #Xlator type, name information\nchild_count=2                      #Number of children for the xlator\n#Xlator specific configuration below\nchild_up[0]=1\npending_key[0]=trusted.afr.r2-client-0\nchild_up[1]=1\npending_key[1]=trusted.afr.r2-client-1\ndata_self_heal=on\nmetadata_self_heal=1\nentry_self_heal=1\ndata_change_log=1\nmetadata_change_log=1\nentry-change_log=1\nread_child=1\nfavorite_child=-1\nwait_count=1\n</code></pre>"},{"location":"Troubleshooting/statedump/#graphinode-table","title":"Graph/inode table","text":"<pre><code>[active graph - 1]\n\nconn.1.bound_xl./data/brick01a/homegfs.hashsize=14057\nconn.1.bound_xl./data/brick01a/homegfs.name=/data/brick01a/homegfs/inode\nconn.1.bound_xl./data/brick01a/homegfs.lru_limit=16384 #Least recently used size limit\nconn.1.bound_xl./data/brick01a/homegfs.active_size=690 #Number of inodes undergoing some kind of fop ie., on which there is at least one ref.\nconn.1.bound_xl./data/brick01a/homegfs.lru_size=183    #Number of inodes present in lru list\nconn.1.bound_xl./data/brick01a/homegfs.purge_size=0    #Number of inodes present in purge list\n</code></pre>"},{"location":"Troubleshooting/statedump/#inode","title":"Inode","text":"<pre><code>[conn.1.bound_xl./data/brick01a/homegfs.active.324] #324th inode in active inode list\ngfid=e6d337cf-97eb-44b3-9492-379ba3f6ad42           #Gfid of the inode\nnlookup=13                                          #Number of times lookups happened from the client or from fuse kernel\nfd-count=4                                          #Number of fds opened on the inode\nref=11                                              #Number of refs taken on the inode\nia_type=1                                           #Type of the inode. This should be changed to some string :-(\n\n[conn.1.bound_xl./data/brick01a/homegfs.lru.1] #1st inode in lru list. Note that ref count is zero for these inodes.\ngfid=5114574e-69bc-412b-9e52-f13ff087c6fc\nnlookup=5\nfd-count=0\nref=0\nia_type=2\n</code></pre>"},{"location":"Troubleshooting/statedump/#inode-context","title":"Inode context","text":"<p>Each xlator can store information specific to it in the inode context. This context can also be printed in the statedump. Here is the inode context of the locks xlator</p> <pre><code>[xlator.features.locks.homegfs-locks.inode]\npath=/homegfs/users/dfrobins/gfstest/r4/SCRATCH/fort.5102 - path of the file\nmandatory=0\ninodelk-count=5 #Number of inode locks\nlock-dump.domain.domain=homegfs-replicate-0:self-heal #Domain on which the lock was taken. In this case, this domain is used by the selfheal to prevent more than one heal on the same file\ninodelk.inodelk[0](ACTIVE)=type=WRITE, whence=0, start=0, len=0, pid = 18446744073709551615, owner=080b1ada117f0000, client=0xb7fc30, connection-id=compute-30-029.com-3505-2014/06/29-14:46:12:477358-homegfs-client-0-0-1, granted at Sun Jun 29 11:01:00 2014 #Active lock information\n\ninodelk.inodelk[1](BLOCKED)=type=WRITE, whence=0, start=0, len=0, pid = 18446744073709551615, owner=c0cb091a277f0000, client=0xad4f10, connection-id=gfs01a.com-4080-2014/06/29-14:41:36:917768-homegfs-client-0-0-0, blocked at Sun Jun 29 11:04:44 2014 #Blocked lock information\n\nlock-dump.domain.domain=homegfs-replicate-0:metadata #Domain name where metadata operations take locks to maintain replication consistency\nlock-dump.domain.domain=homegfs-replicate-0 #Domain name where entry/data operations take locks to maintain replication consistency\ninodelk.inodelk[0](ACTIVE)=type=WRITE, whence=0, start=11141120, len=131072, pid = 18446744073709551615, owner=080b1ada117f0000, client=0xb7fc30, connection-id=compute-30-029.com-3505-2014/06/29-14:46:12:477358-homegfs-client-0-0-1, granted at Sun Jun 29 11:10:36 2014 #Active lock information\n</code></pre>"},{"location":"Troubleshooting/statedump/#debug-with-statedumps","title":"Debug With Statedumps","text":""},{"location":"Troubleshooting/statedump/#memory-leaks","title":"Memory leaks","text":"<p>Statedumps can be used to determine whether the high memory usage of a process is caused by a leak. To debug the issue, generate statedumps for that process at regular intervals, or before and after running the steps that cause the memory used to increase. Once you have multiple statedumps, compare the memory allocation stats to see if any of them are increasing steadily as those could indicate a potential memory leak.</p> <p>The following examples walk through using statedumps to debug two different memory leaks.</p>"},{"location":"Troubleshooting/statedump/#with-the-memory-accounting-feature","title":"With the memory accounting feature:","text":"<p>BZ 1120151 reported high memory usage by the self heal daemon whenever one of the bricks was wiped in a replicate volume and a full self-heal was invoked to heal the contents. This issue was debugged using statedumps to determine which data-structure was leaking memory.</p> <p>A statedump of the self heal daemon process was taken using</p> <pre><code>kill -USR1 `&lt;pid-of-gluster-self-heal-daemon&gt;`\n</code></pre> <p>On examining the statedump:</p> <pre><code>grep -w num_allocs glusterdump.5225.dump.1405493251\nnum_allocs=77078\nnum_allocs=87070\nnum_allocs=117376\n....\n\ngrep hot-count glusterdump.5225.dump.1405493251\nhot-count=16384\nhot-count=16384\nhot-count=4095\n....\n</code></pre> <p>On searching for num_allocs with high values in the statedump, a <code>grep</code> of the statedump revealed a large number of allocations for the following data-types under the replicate xlator:</p> <ol> <li>gf_common_mt_asprintf</li> <li>gf_common_mt_char</li> <li>gf_common_mt_mem_pool.</li> </ol> <p>On checking the afr-code for allocations with tag <code>gf_common_mt_char</code>, it was found that the <code>data-self-heal</code> code path does not free one such allocated data structure. <code>gf_common_mt_mem_pool</code> suggests that there is a leak in pool memory. The <code>replicate-0:dict_t</code>, <code>glusterfs:data_t</code> and <code>glusterfs:data_pair_t</code> pools are using a lot of memory, i.e. cold_count is <code>0</code> and there are too many allocations. Checking the source code of dict.c shows that <code>key</code> in <code>dict</code> is allocated with <code>gf_common_mt_char</code> i.e. <code>2.</code> tag and value is created using gf_asprintf which in-turn uses <code>gf_common_mt_asprintf</code> i.e. <code>1.</code>. Checking the code for leaks in self-heal code paths led to a line which over-writes a variable with new dictionary even when it was already holding a reference to another dictionary. After fixing these leaks, we ran the same test to verify that none of the <code>num_allocs</code> values increased in the statedump of the self-daemon after healing 10,000 files. Please check http://review.gluster.org/8316 for more info about the patch/code.</p>"},{"location":"Troubleshooting/statedump/#leaks-in-mempools","title":"Leaks in mempools:","text":"<p>The statedump output of mempools was used to test and verify the fixes for BZ 1134221. On code analysis, dict_t objects were found to be leaking (due to missing unref's) during name self-heal.</p> <p>Glusterfs was compiled with the -DDEBUG flags to have cold count set to 0 by default. The test involved creating 100 files on plain replicate volume, removing them from one of the backend bricks, and then triggering lookups on them from the mount point. A statedump of the mount process was taken before executing the test case and after it was completed.</p> <p>Statedump output of the fuse mount process before the test case was executed:</p> <pre><code>pool-name=glusterfs:dict_t\nhot-count=0\ncold-count=0\npadded_sizeof=140\nalloc-count=33\nmax-alloc=0\npool-misses=33\ncur-stdalloc=14\nmax-stdalloc=18\n</code></pre> <p>Statedump output of the fuse mount process after the test case was executed:</p> <pre><code>pool-name=glusterfs:dict_t\nhot-count=0\ncold-count=0\npadded_sizeof=140\nalloc-count=2841\nmax-alloc=0\npool-misses=2841\ncur-stdalloc=214\nmax-stdalloc=220\n</code></pre> <p>Here, as cold count was 0 by default, cur-stdalloc indicates the number of dict_t objects that were allocated from the heap using mem_get(), and are yet to be freed using mem_put(). After running the test case (named selfheal of 100 files), there was a rise in the cur-stdalloc value (from 14 to 214) for dict_t.</p> <p>After the leaks were fixed, glusterfs was again compiled with -DDEBUG flags and the steps were repeated. Statedumps of the FUSE mount were taken before and after executing the test case to ascertain the validity of the fix. And the results were as follows:</p> <p>Statedump output of the fuse mount process before executing the test case:</p> <pre><code>pool-name=glusterfs:dict_t\nhot-count=0\ncold-count=0\npadded_sizeof=140\nalloc-count=33\nmax-alloc=0\npool-misses=33\ncur-stdalloc=14\nmax-stdalloc=18\n</code></pre> <p>Statedump output of the fuse mount process after executing the test case:</p> <pre><code>pool-name=glusterfs:dict_t\nhot-count=0\ncold-count=0\npadded_sizeof=140\nalloc-count=2837\nmax-alloc=0\npool-misses=2837\ncur-stdalloc=14\nmax-stdalloc=119\n</code></pre> <p>The value of cur-stdalloc remained 14 after the test, indicating that the fix indeed does what it's supposed to do.</p>"},{"location":"Troubleshooting/statedump/#hangs-caused-by-frame-loss","title":"Hangs caused by frame loss","text":"<p>BZ 994959 reported that the Fuse mount hangs on a readdirp operation. Here are the steps used to locate the cause of the hang using statedump.</p> <p>Statedumps were taken for all gluster processes after reproducing the issue. The following stack was seen in the FUSE mount's statedump:</p> <pre><code>[global.callpool.stack.1.frame.1]\nref_count=1\ntranslator=fuse\ncomplete=0\n\n[global.callpool.stack.1.frame.2]\nref_count=0\ntranslator=r2-client-1\ncomplete=1 &lt;&lt;----- Client xlator has completed the readdirp call and unwound to afr\nparent=r2-replicate-0\nwind_from=afr_do_readdir\nwind_to=children[call_child]-&gt;fops-&gt;readdirp\nunwind_from=client3_3_readdirp_cbk\nunwind_to=afr_readdirp_cbk\n\n[global.callpool.stack.1.frame.3]\nref_count=0\ntranslator=r2-replicate-0\ncomplete=0 &lt;&lt;---- But the Afr xlator is not unwinding for some reason.\nparent=r2-dht\nwind_from=dht_do_readdir\nwind_to=xvol-&gt;fops-&gt;readdirp\nunwind_to=dht_readdirp_cbk\n\n[global.callpool.stack.1.frame.4]\nref_count=1\ntranslator=r2-dht\ncomplete=0\nparent=r2-io-cache\nwind_from=ioc_readdirp\nwind_to=FIRST_CHILD(this)-&gt;fops-&gt;readdirp\nunwind_to=ioc_readdirp_cbk\n\n[global.callpool.stack.1.frame.5]\nref_count=1\ntranslator=r2-io-cache\ncomplete=0\nparent=r2-quick-read\nwind_from=qr_readdirp\nwind_to=FIRST_CHILD (this)-&gt;fops-&gt;readdirp\nunwind_to=qr_readdirp_cbk\n</code></pre> <p><code>unwind_to</code> shows that call was unwound to <code>afr_readdirp_cbk</code> from the r2-client-1 xlator. Inspecting that function revealed that afr is not unwinding the stack when fop failed. Check http://review.gluster.org/5531 for more info about patch/code changes.</p>"},{"location":"Troubleshooting/troubleshooting-afr/","title":"Troubleshooting Self-heal","text":"<p>The first level of analysis always starts with looking at the log files. Which ones, you ask?</p> <ul> <li>/var/log/glusterfs/$fuse-mount-point.log \u2013&gt; Fuse client log</li> <li>/var/log/glusterfs/glfsheal-$volname.log \u2013&gt; This is the log file to look at when you run the heal info/split-brain resolution commands.</li> <li>/var/log/glusterfs/glustershd.log \u2013&gt; This is the self-heal daemon log that prints the names of files undergoing heal, the sources and sinks for each file etc. It is common for all volumes.</li> <li>/var/log/glusterfs/bricks/$brick.log\u2013&gt;Some errors in clients are simply propagated from the bricks themselves, so correlating client log errors with the logs from the brick is necessary.</li> </ul> <p>Sometimes, you might need more verbose logging to figure out what\u2019s going on: <code>gluster volume set $volname client-log-level $LEVEL</code></p> <p>where LEVEL can be any one of <code>DEBUG, WARNING, ERROR, INFO, CRITICAL, NONE, TRACE</code>. This should ideally make all the log files mentioned above to start logging at <code>$LEVEL</code>. The default is <code>INFO</code> but you can temporarily toggle it to <code>DEBUG</code> or <code>TRACE</code> if you want to see under-the-hood messages. Useful when the normal logs don\u2019t give a clue as to what is happening.</p>"},{"location":"Troubleshooting/troubleshooting-afr/#heal-related-issues","title":"Heal related issues:","text":"<p>Most issues I\u2019ve seen on the mailing list and with customers can broadly fit into the following buckets:</p> <p>(Note: Not discussing split-brains here. If they occur, you need to use split-brain resolution CLI or cluster.favorite-child-policy options to fix them. They usually occur in replica 2 volumes and can be prevented by using replica 3 or arbiter volumes.)</p>"},{"location":"Troubleshooting/troubleshooting-afr/#i-heal-info-appears-to-hangtakes-a-long-time-to-complete","title":"i) Heal info appears to hang/takes a long time to complete","text":"<p>If the number of entries are large, then heal info will take longer than usual. While there are performance improvements to heal info being planned, a faster way to get an approx. count of the pending entries is to use the <code>gluster volume heal $VOLNAME statistics heal-count</code> command.</p> <p>Knowledge Hack: Since we know that during the write transaction. the xattrop folder will capture the gfid-string of the file if it needs heal, we can also do an <code>ls /brick/.glusterfs/indices/xattrop|wc -l</code> on each brick to get the approx. no of entries that need heal. If this number reduces over time, it is a sign that the heal backlog is reducing. You will also see messages whenever a particular type of heal starts/ends for a given gfid, like so:</p> <pre><code>[2019-05-07 12:05:14.460442] I [MSGID: 108026] [afr-self-heal-entry.c:883:afr_selfheal_entry_do] 0-testvol-replicate-0: performing entry selfheal on d120c0cf-6e87-454b-965b-0d83a4c752bb\n\n[2019-05-07 12:05:14.474710] I [MSGID: 108026] [afr-self-heal-common.c:1741:afr_log_selfheal] 0-testvol-replicate-0: Completed entry selfheal on d120c0cf-6e87-454b-965b-0d83a4c752bb. sources=[0] 2 sinks=1\n\n[2019-05-07 12:05:14.493506] I [MSGID: 108026] [afr-self-heal-common.c:1741:afr_log_selfheal] 0-testvol-replicate-0: Completed data selfheal on a9b5f183-21eb-4fb3-a342-287d3a7dddc5. sources=[0] 2 sinks=1\n\n[2019-05-07 12:05:14.494577] I [MSGID: 108026] [afr-self-heal-metadata.c:52:__afr_selfheal_metadata_do] 0-testvol-replicate-0: performing metadata selfheal on a9b5f183-21eb-4fb3-a342-287d3a7dddc5\n\n[2019-05-07 12:05:14.498398] I [MSGID: 108026] [afr-self-heal-common.c:1741:afr_log_selfheal] 0-testvol-replicate-0: Completed metadata selfheal on a9b5f183-21eb-4fb3-a342-287d3a7dddc5. sources=[0] 2 sinks=1\n</code></pre>"},{"location":"Troubleshooting/troubleshooting-afr/#ii-self-heal-is-stuck-not-getting-completed","title":"ii) Self-heal is stuck/ not getting completed.","text":"<p>If a file seems to be forever appearing in heal info and not healing, check the following:</p> <ul> <li>Examine the afr xattrs- Do they clearly indicate the good and bad copies? If there isn\u2019t at least one good copy, then the file is in split-brain and you would need to use the split-brain resolution CLI.</li> <li>Identify which node\u2019s shds would be picking up the file for heal. If a file is listed in the heal info output under brick1 and brick2, then the shds on the nodes which host those bricks would attempt (and one of them would succeed) in doing the heal.</li> <li>Once the shd is identified, look at the shd logs to see if it is indeed connected to the bricks.</li> </ul> <p>This is good:</p> <pre><code>[2019-05-07 09:53:02.912923] I [MSGID: 114046] [client-handshake.c:1106:client_setvolume_cbk] 0-testvol-client-2: Connected to testvol-client-2, attached to remote volume '/bricks/brick3'\n</code></pre> <p>This indicates a disconnect:</p> <pre><code>[2019-05-07 11:44:47.602862] I [MSGID: 114018] [client.c:2334:client_rpc_notify] 0-testvol-client-2: disconnected from testvol-client-2. Client process will keep trying to connect to glusterd until brick's port is available\n\n[2019-05-07 11:44:50.953516] E [MSGID: 114058] [client-handshake.c:1456:client_query_portmap_cbk] 0-testvol-client-2: failed to get the port number for remote subvolume. Please run 'gluster volume status' on server to see if brick process is running.\n</code></pre> <p>Alternatively, take a statedump of the self-heal daemon (shd) and check if all client xlators are connected to the respective bricks. The shd must have <code>connected=1</code> for all the client xlators, meaning it can talk to all the bricks.</p> Shd\u2019s statedump entry of a client xlator that is connected to the 3rd brick Shd\u2019s statedump entry of the same client xlator if it is diconnected from the 3rd brick [xlator.protocol.client.testvol-client-2.priv] connected=1 total_bytes_read=75004 ping_timeout=42 total_bytes_written=50608 ping_msgs_sent=0 msgs_sent=0 [xlator.protocol.client.testvol-client-2.priv] connected=0 total_bytes_read=75004 ping_timeout=42 total_bytes_written=50608 ping_msgs_sent=0 msgs_sent=0 <p>If there are connection issues (i.e. <code>connected=0</code>), you would need to investigate and fix them. Check if the pid and the TCP/RDMA Port of the brick proceess from gluster volume status $VOLNAME matches that of <code>ps aux|grep glusterfsd|grep $brick-path</code></p> <pre><code># gluster volume status\nStatus of volume: testvol\nGluster process TCP Port RDMA Port Online Pid\n\n---\n\nBrick 127.0.0.2:/bricks/brick1 49152 0 Y 12527\n</code></pre> <pre><code># ps aux|grep brick1\n\nroot 12527 0.0 0.1 1459208 20104 ? Ssl 11:20 0:01 /usr/local/sbin/glusterfsd -s 127.0.0.2 --volfile-id testvol.127.0.0.2.bricks-brick1 -p /var/run/gluster/vols/testvol/127.0.0.2-bricks-brick1.pid -S /var/run/gluster/70529980362a17d6.socket --brick-name /bricks/brick1 -l /var/log/glusterfs/bricks/bricks-brick1.log --xlator-option *-posix.glusterd-uuid=d90b1532-30e5-4f9d-a75b-3ebb1c3682d4 --process-name brick --brick-port 49152 --xlator-option testvol-server.listen-port=49152\n</code></pre> <p>Though this will likely match, sometimes there could be a bug leading to stale port usage. A quick workaround would be to restart glusterd on that node and check if things match. Report the issue to the devs if you see this problem.</p> <ul> <li> <p>I have seen some cases where a file is listed in heal info, and the afr xattrs indicate pending metadata or data heal but the file itself is not present on all bricks. Ideally, the parent directory of the file must have pending entry heal xattrs so that the file either gets created on the missing bricks or gets deleted from the ones where it is present. But if the parent dir doesn\u2019t have xattrs, the entry heal can\u2019t proceed. In such cases, you can</p> <ul> <li>Either do a lookup directly on the file from the mount so that name heal is triggered and then shd can pickup the data/metadata heal.</li> <li>Or manually set entry xattrs on the parent dir to emulate an entry heal so that the file gets created as a part of it.</li> <li>If a brick\u2019s underlying filesystem/lvm was damaged and fsck\u2019d to recovery, some files/dirs might be missing on it. If there is a lot of missing info on the recovered bricks, it might be better to just to a replace-brick or reset-brick and let the heal fully sync everything rather than fiddling with afr xattrs of individual entries.</li> </ul> </li> </ul> <p>Hack: How to trigger heal on any file/directory Knowing about self-heal logic and index heal from the previous post, we can sort of emulate a heal with the following steps. This is not something that you should be doing on your cluster but it pays to at least know that it is possible when push comes to shove.</p> <ol> <li>Picking one brick as good and setting the afr pending xattr on it blaming the bad bricks.</li> <li>Capture the gfid inside .glusterfs/indices/xattrop so that the shd can pick it up during index heal.</li> <li>Finally, trigger index heal: gluster volume heal $VOLNAME .</li> </ol> <p>Example: Let us say a FILE-1 exists with <code>trusted.gfid=0x1ad2144928124da9b7117d27393fea5c</code> on all bricks of a replica 3 volume called testvol. It has no afr xattrs. But you still need to emulate a heal. Let us say you choose brick-2 as the source. Let us do the steps listed above:</p> <ol> <li> <p>Make brick-2 blame the other 2 bricks:</p> <pre><code>setfattr -n trusted.afr.testvol-client-2 -v 0x000000010000000000000000 /bricks/brick2/FILE-1\nsetfattr -n trusted.afr.testvol-client-1 -v 0x000000010000000000000000 /bricks/brick2/FILE-1\n</code></pre> </li> <li> <p>Store the gfid string inside xattrop folder as a hardlink to the base entry:</p> <pre><code># cd /bricks/brick2/.glusterfs/indices/xattrop/\n# ls -li\ntotal 0\n17829255 ----------. 1 root root 0 May 10 11:20 xattrop-a400ca91-cec9-4463-a183-aca9eaff9fa7`\n\n# ln xattrop-a400ca91-cec9-4463-a183-aca9eaff9fa7 1ad21449-2812-4da9-b711-7d27393fea5c\n# ll\ntotal 0\n----------. 2 root root 0 May 10 11:20 1ad21449-2812-4da9-b711-7d27393fea5c\n----------. 2 root root 0 May 10 11:20 xattrop-a400ca91-cec9-4463-a183-aca9eaff9fa7\n</code></pre> </li> <li> <p>Trigger heal: <code>gluster volume heal testvol</code></p> <p>The glustershd.log of node-2 should log about the heal.</p> <pre><code>[2019-05-10 06:10:46.027238] I [MSGID: 108026] [afr-self-heal-common.c:1741:afr_log_selfheal] 0-testvol-replicate-0: Completed data selfheal on 1ad21449-2812-4da9-b711-7d27393fea5c. sources=[1] sinks=0 2\n</code></pre> <p>So the data was healed from the second brick to the first and third brick.</p> </li> </ol>"},{"location":"Troubleshooting/troubleshooting-afr/#iii-self-heal-is-too-slow","title":"iii) Self-heal is too slow","text":"<p>If the heal backlog is decreasing and you see glustershd logging heals but you\u2019re not happy with the rate of healing, then you can play around with shd-max-threads and shd-wait-qlength volume options.</p> <pre><code>Option: cluster.shd-max-threads\nDefault Value: 1\nDescription: Maximum number of parallel heals SHD can do per local brick. This can substantially lower heal times, but can also crush your bricks if you don\u2019t have the storage hardware to support this.\n\nOption: cluster.shd-wait-qlength\nDefault Value: 1024\nDescription: This option can be used to control number of heals that can wait in SHD per subvolume\n</code></pre> <p>I\u2019m not covering it here but it is possible to launch multiple shd instances (and kill them later on) on your node for increasing heal throughput. It is documented at https://access.redhat.com/solutions/3794011.</p>"},{"location":"Troubleshooting/troubleshooting-afr/#iv-self-heal-is-too-aggressive-and-slows-down-the-system","title":"iv) Self-heal is too aggressive and slows down the system.","text":"<p>If shd-max-threads are at the lowest value (i.e. 1) and you see if CPU usage of the bricks is too high, you can check if the volume\u2019s profile info shows a lot of RCHECKSUM fops. Data self-heal does checksum calculation (i.e the <code>posix_rchecksum()</code> FOP) which can be CPU intensive. You can the <code>cluster.data-self-heal-algorithm</code> option to full. This does a full file copy instead of computing rolling checksums and syncing only the mismatching blocks. The tradeoff is that the network consumption will be increased.</p> <p>You can also disable all client-side heals if they are turned on so that the client bandwidth is consumed entirely by the application FOPs and not the ones by client side background heals. i.e. turn off <code>cluster.metadata-self-heal, cluster.data-self-heal and cluster.entry-self-heal</code>. Note: In recent versions of gluster, client-side heals are disabled by default.</p>"},{"location":"Troubleshooting/troubleshooting-afr/#mount-related-issues","title":"Mount related issues:","text":""},{"location":"Troubleshooting/troubleshooting-afr/#i-all-fops-are-failing-with-enotconn","title":"i) All fops are failing with ENOTCONN","text":"<p>Check mount log/ statedump for loss of quorum, just like for glustershd. If this is a fuse client (as opposed to an nfs/ gfapi client), you can also check the .meta folder to check the connection status to the bricks.</p> <pre><code># cat /mnt/fuse_mnt/.meta/graphs/active/testvol-client-*/private |grep connected\n\nconnected = 0\nconnected = 1\nconnected = 1\n</code></pre> <p>If <code>connected=0</code>, the connection to that brick is lost. Find out why. If the client is not connected to quorum number of bricks, then AFR fails lookups (and therefore any subsequent FOP) with Transport endpoint is not connected</p>"},{"location":"Troubleshooting/troubleshooting-afr/#ii-fops-on-some-files-are-failing-with-enotconn","title":"ii) FOPs on some files are failing with ENOTCONN","text":"<p>Check mount log for the file being unreadable:</p> <pre><code>[2019-05-10 11:04:01.607046] W [MSGID: 108027] [afr-common.c:2268:afr_attempt_readsubvol_set] 13-testvol-replicate-0: no read subvols for /FILE.txt\n[2019-05-10 11:04:01.607775] W [fuse-bridge.c:939:fuse_entry_cbk] 0-glusterfs-fuse: 234: LOOKUP() /FILE.txt =&gt; -1 (Transport endpoint is not connected)\n</code></pre> <p>This means there was only 1 good copy and the client has lost connection to that brick. You need to ensure that the client is connected to all bricks.</p>"},{"location":"Troubleshooting/troubleshooting-afr/#iii-mount-is-hung","title":"iii) Mount is hung","text":"<p>It can be difficult to pin-point the issue immediately and might require assistance from the developers but the first steps to debugging could be to</p> <ul> <li>strace the fuse mount; see where it is hung.</li> <li>Take a statedump of the mount to see which xlator has frames that are not wound (i.e. complete=0) and for which FOP. Then check the source code to see if there are any unhanded cases where the xlator doesn\u2019t wind the FOP to its child.</li> <li>Take statedump of bricks to see if there are any stale locks. An indication of stale locks is the same lock being present in multiple statedumps or the \u2018granted\u2019 date being very old.</li> </ul> <p>Excerpt from a brick statedump:</p> <pre><code>[xlator.features.locks.testvol-locks.inode]\npath=/FILE\nmandatory=0\ninodelk-count=1\nlock-dump.domain.domain=testvol-replicate-0:self-heal\nlock-dump.domain.domain=testvol-replicate-0\ninodelk.inodelk[0](ACTIVE)=type=WRITE, whence=0, start=0, len=0,\npid = 18446744073709551610, owner=700a0060037f0000, client=0x7fc57c09c1c0,\nconnection-id=vm1-17902-2018/10/14-07:18:17:132969-testvol-client-0-0-0, granted at 2018-10-14 07:18:40\n</code></pre> <p>While stale lock issues are candidates for bug reports, the locks xlator on the brick releases locks from a particular client upon a network disconnect. That can be used as a workaround to release the stale locks- i.e. restart the brick or restart the client or induce a network disconnect between them.</p>"},{"location":"Troubleshooting/troubleshooting-filelocks/","title":"Troubleshooting File Locks","text":"<p>Use statedumps to find and list the locks held on files. The statedump output also provides information on each lock with its range, basename, PID of the application holding the lock, and so on. You can analyze the output to know about the locks whose owner/application is no longer running or interested in that lock. After ensuring that the no application is using the file, you can clear the lock using the following <code>clear lock</code> commands.</p> <ol> <li> <p>Perform statedump on the volume to view the files that are locked     using the following command:</p> <pre><code>gluster volume statedump  inode\n</code></pre> <p>For example, to display statedump of test-volume:</p> <pre><code>gluster volume statedump test-volume\nVolume statedump successful\n</code></pre> <p>The statedump files are created on the brick servers in the<code>/tmp</code> directory or in the directory set using <code>server.statedump-path</code> volume option. The naming convention of the dump file is <code>&lt;brick-path&gt;.&lt;brick-pid&gt;.dump</code>.</p> <p>The following are the sample contents of the statedump file. It indicates that GlusterFS has entered into a state where there is an entry lock (entrylk) and an inode lock (inodelk). Ensure that those are stale locks and no resources own them.</p> <pre><code>[xlator.features.locks.vol-locks.inode]\npath=/\nmandatory=0\nentrylk-count=1\nlock-dump.domain.domain=vol-replicate-0\nxlator.feature.locks.lock-dump.domain.entrylk.entrylk[0](ACTIVE)=type=ENTRYLK_WRLCK on basename=file1, pid = 714782904, owner=ffffff2a3c7f0000, transport=0x20e0670, , granted at Mon Feb 27 16:01:01 2012\n\nconn.2.bound_xl./gfs/brick1.hashsize=14057\nconn.2.bound_xl./gfs/brick1.name=/gfs/brick1/inode\nconn.2.bound_xl./gfs/brick1.lru_limit=16384\nconn.2.bound_xl./gfs/brick1.active_size=2\nconn.2.bound_xl./gfs/brick1.lru_size=0\nconn.2.bound_xl./gfs/brick1.purge_size=0\n\n[conn.2.bound_xl./gfs/brick1.active.1]\ngfid=538a3d4a-01b0-4d03-9dc9-843cd8704d07\nnlookup=1\nref=2\nia_type=1\n[xlator.features.locks.vol-locks.inode]\npath=/file1\nmandatory=0\ninodelk-count=1\nlock-dump.domain.domain=vol-replicate-0\ninodelk.inodelk[0](ACTIVE)=type=WRITE, whence=0, start=0, len=0, pid = 714787072, owner=00ffff2a3c7f0000, transport=0x20e0670, , granted at Mon Feb 27 16:01:01 2012\n</code></pre> </li> <li> <p>Clear the lock using the following command:</p> <pre><code>gluster volume clear-locks\n</code></pre> <p>For example, to clear the entry lock on <code>file1</code> of test-volume:</p> <pre><code>gluster volume clear-locks test-volume / kind granted entry file1\nVolume clear-locks successful\nvol-locks: entry blocked locks=0 granted locks=1\n</code></pre> </li> <li> <p>Clear the inode lock using the following command:</p> <pre><code>gluster volume clear-locks\n</code></pre> <p>For example, to clear the inode lock on <code>file1</code> of test-volume:</p> <pre><code>gluster  volume clear-locks test-volume /file1 kind granted inode 0,0-0\nVolume clear-locks successful\nvol-locks: inode blocked locks=0 granted locks=1\n</code></pre> <p>Perform statedump on test-volume again to verify that the above inode and entry locks are cleared.</p> </li> </ol>"},{"location":"Troubleshooting/troubleshooting-georep/","title":"Troubleshooting Geo-replication","text":""},{"location":"Troubleshooting/troubleshooting-georep/#troubleshooting-geo-replication","title":"Troubleshooting Geo-replication","text":"<p>This section describes the most common troubleshooting scenarios related to GlusterFS Geo-replication.</p>"},{"location":"Troubleshooting/troubleshooting-georep/#locating-log-files","title":"Locating Log Files","text":"<p>For every Geo-replication session, the following three log files are associated to it (four, if the secondary is a gluster volume):</p> <ul> <li>Primary-log-file - log file for the process which monitors the Primary   volume</li> <li>Secondary-log-file - log file for process which initiates the changes in   secondary</li> <li>Primary-gluster-log-file - log file for the maintenance mount point   that Geo-replication module uses to monitor the Primary volume</li> <li>Secondary-gluster-log-file - is the secondary's counterpart of it</li> </ul> <p>Primary Log File</p> <p>To get the Primary-log-file for geo-replication, use the following command:</p> <pre><code>gluster volume geo-replication &lt;session&gt; config log-file\n</code></pre> <p>For example:</p> <pre><code>gluster volume geo-replication Volume1 example.com:/data/remote_dir config log-file\n</code></pre> <p>Secondary Log File</p> <p>To get the log file for geo-replication on secondary (glusterd must be running on secondary machine), use the following commands:</p> <ol> <li> <p>On primary, run the following command:</p> <pre><code>gluster volume geo-replication Volume1 example.com:/data/remote_dir config session-owner 5f6e5200-756f-11e0-a1f0-0800200c9a66\n</code></pre> <p>Displays the session owner details.</p> </li> <li> <p>On secondary, run the following command:</p> <pre><code>gluster volume geo-replication /data/remote_dir config log-file /var/log/gluster/${session-owner}:remote-mirror.log\n</code></pre> </li> <li> <p>Replace the session owner details (output of Step 1) to the output     of Step 2 to get the location of the log file.</p> <pre><code>/var/log/gluster/5f6e5200-756f-11e0-a1f0-0800200c9a66:remote-mirror.log\n</code></pre> </li> </ol>"},{"location":"Troubleshooting/troubleshooting-georep/#rotating-geo-replication-logs","title":"Rotating Geo-replication Logs","text":"<p>Administrators can rotate the log file of a particular primary-secondary session, as needed. When you run geo-replication's <code>log-rotate</code> command, the log file is backed up with the current timestamp suffixed to the file name and signal is sent to gsyncd to start logging to a new log file.</p> <p>To rotate a geo-replication log file</p> <ul> <li>Rotate log file for a particular primary-secondary session using the   following command:<pre><code>gluster volume geo-replication  log-rotate\n</code></pre> </li> </ul> <p>For example, to rotate the log file of primary <code>Volume1</code> and secondary   <code>example.com:/data/remote_dir</code> :</p> <pre><code>    gluster volume geo-replication Volume1 example.com:/data/remote_dir log rotate\n    log rotate successful\n</code></pre> <ul> <li>Rotate log file for all sessions for a primary volume using the   following command:<pre><code>gluster volume geo-replication  log-rotate\n</code></pre> </li> </ul> <p>For example, to rotate the log file of primary <code>Volume1</code>:</p> <pre><code>    gluster volume geo-replication Volume1 log rotate\n    log rotate successful\n</code></pre> <ul> <li>Rotate log file for all sessions using the following command:<pre><code>gluster volume geo-replication log-rotate\n</code></pre> </li> </ul> <p>For example, to rotate the log file for all sessions:</p> <pre><code>    gluster volume geo-replication log rotate\n    log rotate successful\n</code></pre>"},{"location":"Troubleshooting/troubleshooting-georep/#synchronization-is-not-complete","title":"Synchronization is not complete","text":"<p>Description: GlusterFS geo-replication did not synchronize the data completely but the geo-replication status displayed is OK.</p> <p>Solution: You can enforce a full sync of the data by erasing the index and restarting GlusterFS geo-replication. After restarting, GlusterFS geo-replication begins synchronizing all the data. All files are compared using checksum, which can be a lengthy and high resource utilization operation on large data sets.</p>"},{"location":"Troubleshooting/troubleshooting-georep/#issues-in-data-synchronization","title":"Issues in Data Synchronization","text":"<p>Description: Geo-replication display status as OK, but the files do not get synced, only directories and symlink gets synced with the following error message in the log:</p> <pre><code>[2011-05-02 13:42:13.467644] E [primary:288:regjob] GMaster: failed to sync ./some\\_file\\`\n</code></pre> <p>Solution: Geo-replication invokes rsync v3.0.0 or higher on the host and the remote machine. You must verify if you have installed the required version.</p>"},{"location":"Troubleshooting/troubleshooting-georep/#geo-replication-status-displays-faulty-very-often","title":"Geo-replication status displays Faulty very often","text":"<p>Description: Geo-replication displays status as faulty very often with a backtrace similar to the following:</p> <pre><code>2011-04-28 14:06:18.378859] E [syncdutils:131:log\\_raise\\_exception]\n\\&lt;top\\&gt;: FAIL: Traceback (most recent call last): File\n\"/usr/local/libexec/glusterfs/python/syncdaemon/syncdutils.py\", line\n152, in twraptf(\\*aa) File\n\"/usr/local/libexec/glusterfs/python/syncdaemon/repce.py\", line 118, in\nlisten rid, exc, res = recv(self.inf) File\n\"/usr/local/libexec/glusterfs/python/syncdaemon/repce.py\", line 42, in\nrecv return pickle.load(inf) EOFError\n</code></pre> <p>Solution: This error indicates that the RPC communication between the primary gsyncd module and secondary gsyncd module is broken and this can happen for various reasons. Check if it satisfies all the following pre-requisites:</p> <ul> <li>Password-less SSH is set up properly between the host and the remote   machine.</li> <li>If FUSE is installed in the machine, because geo-replication module   mounts the GlusterFS volume using FUSE to sync data.</li> <li>If the Secondary is a volume, check if that volume is started.</li> <li>If the Secondary is a plain directory, verify if the directory has been   created already with the required permissions.</li> <li>If GlusterFS 3.2 or higher is not installed in the default location   (in Primary) and has been prefixed to be installed in a custom   location, configure the <code>gluster-command</code> for it to point to the   exact location.</li> <li>If GlusterFS 3.2 or higher is not installed in the default location   (in secondary) and has been prefixed to be installed in a custom   location, configure the <code>remote-gsyncd-command</code> for it to point to   the exact place where gsyncd is located.</li> </ul>"},{"location":"Troubleshooting/troubleshooting-georep/#intermediate-primary-goes-to-faulty-state","title":"Intermediate Primary goes to Faulty State","text":"<p>Description: In a cascading set-up, the intermediate primary goes to faulty state with the following log:</p> <pre><code>raise RuntimeError (\"aborting on uuid change from %s to %s\" % \\\\\nRuntimeError: aborting on uuid change from af07e07c-427f-4586-ab9f-\n4bf7d299be81 to de6b5040-8f4e-4575-8831-c4f55bd41154\n</code></pre> <p>Solution: In a cascading set-up the Intermediate primary is loyal to the original primary. The above log means that the geo-replication module has detected change in original primary. If this is the desired behavior, delete the config option volume-id in the session initiated from the intermediate primary.</p>"},{"location":"Troubleshooting/troubleshooting-glusterd/","title":"Troubleshooting CLI and glusterd","text":""},{"location":"Troubleshooting/troubleshooting-glusterd/#troubleshooting-the-gluster-cli-and-glusterd","title":"Troubleshooting the gluster CLI and glusterd","text":"<p>The glusterd daemon runs on every trusted server node and is responsible for the management of the trusted pool and volumes.</p> <p>The gluster CLI sends commands to the glusterd daemon on the local node, which executes the operation and returns the result to the user.</p>"},{"location":"Troubleshooting/troubleshooting-glusterd/#debugging-glusterd","title":"Debugging glusterd","text":""},{"location":"Troubleshooting/troubleshooting-glusterd/#logs","title":"Logs","text":"<p>Start by looking at the log files for clues as to what went wrong when you hit a problem. The default directory for Gluster logs is /var/log/glusterfs. The logs for the CLI and glusterd are:</p> <ul> <li>glusterd : /var/log/glusterfs/glusterd.log</li> <li>gluster CLI : /var/log/glusterfs/cli.log</li> </ul>"},{"location":"Troubleshooting/troubleshooting-glusterd/#statedumps","title":"Statedumps","text":"<p>Statedumps are useful in debugging memory leaks and hangs. See Statedump for more details.</p>"},{"location":"Troubleshooting/troubleshooting-glusterd/#common-issues-and-how-to-resolve-them","title":"Common Issues and How to Resolve Them","text":"<p>\"Another transaction is in progress for volname\" or \"Locking failed on xxx.xxx.xxx.xxx\"</p> <p>As Gluster is distributed by nature, glusterd takes locks when performing operations to ensure that configuration changes made to a volume are atomic across the cluster. These errors are returned when:</p> <ul> <li>More than one transaction contends on the same lock.</li> </ul> <p>Solution : These are likely to be transient errors and the operation will succeed if retried once the other transaction is complete.</p> <ul> <li>A stale lock exists on one of the nodes.</li> </ul> <p>Solution : Repeating the operation will not help until the stale lock is cleaned up. Restart the glusterd process holding the lock</p> <ul> <li>Check the glusterd.log file to find out which node holds the stale lock. Look for the message:     <code>lock being held by &lt;uuid&gt;</code></li> <li>Run <code>gluster peer status</code> to identify the node with the uuid in the log message.</li> <li>Restart glusterd on that node.</li> </ul> <p>\"Transport endpoint is not connected\" errors but all bricks are up</p> <p>This is usually seen when a brick process does not shut down cleanly, leaving stale data behind in the glusterd process. Gluster client processes query glusterd for the ports the bricks processes are listening on and attempt to connect to that port. If the port information in glusterd is incorrect, the client will fail to connect to the brick even though it is up. Operations which would need to access that brick may fail with \"Transport endpoint is not connected\".</p> <p>Solution : Restart the glusterd service.</p> <p>\"Peer Rejected\"</p> <p><code>gluster peer status</code> returns \"Peer Rejected\" for a node.</p> <pre><code>Hostname: &lt;hostname&gt;\nUuid: &lt;xxxx-xxx-xxxx&gt;\nState: Peer Rejected (Connected)\n</code></pre> <p>This indicates that the volume configuration on the node is not in sync with the rest of the trusted storage pool. You should see the following message in the glusterd log for the node on which the peer status command was run:</p> <pre><code>Version of Cksums &lt;vol-name&gt; differ. local cksum = xxxxxx, remote cksum = xxxxyx on peer &lt;hostname&gt;\n</code></pre> <p>Solution: Update the cluster.op-version</p> <ul> <li>Run <code>gluster volume get all cluster.max-op-version</code> to get the latest supported op-version.</li> <li>Update the cluster.op-version to the latest supported op-version by executing <code>gluster volume set all cluster.op-version &lt;op-version&gt;</code>.</li> </ul> <p>\"Accepted Peer Request\"</p> <p>If the glusterd handshake fails while expanding a cluster, the view of the cluster will be inconsistent. The state of the peer in <code>gluster peer status</code> will be \u201caccepted peer request\u201d and subsequent CLI commands will fail with an error. Eg. <code>Volume create command will fail with \"volume create: testvol: failed: Host &lt;hostname&gt; is not in 'Peer in Cluster' state</code></p> <p>In this case the value of the state field in <code>/var/lib/glusterd/peers/&lt;UUID&gt;</code> will be other than 3.</p> <p>Solution:</p> <ul> <li>Stop glusterd</li> <li>Open <code>/var/lib/glusterd/peers/&lt;UUID&gt;</code></li> <li>Change state to 3</li> <li>Start glusterd</li> </ul>"},{"location":"Troubleshooting/troubleshooting-gnfs/","title":"Troubleshooting gNFS","text":""},{"location":"Troubleshooting/troubleshooting-gnfs/#troubleshooting-gluster-nfs","title":"Troubleshooting Gluster NFS","text":"<p>This section describes the most common troubleshooting issues related to NFS .</p>"},{"location":"Troubleshooting/troubleshooting-gnfs/#mount-command-on-nfs-client-fails-with-rpc-error-program-not-registered","title":"mount command on NFS client fails with \u201cRPC Error: Program not registered\u201d","text":"<p>Start portmap or rpcbind service on the NFS server.</p> <p>This error is encountered when the server has not started correctly. On most Linux distributions this is fixed by starting portmap:</p> <pre><code>/etc/init.d/portmap start\n</code></pre> <p>On some distributions where portmap has been replaced by rpcbind, the following command is required:</p> <pre><code>/etc/init.d/rpcbind start\n</code></pre> <p>After starting portmap or rpcbind, gluster NFS server needs to be restarted.</p>"},{"location":"Troubleshooting/troubleshooting-gnfs/#nfs-server-start-up-fails-with-port-is-already-in-use-error-in-the-log-file","title":"NFS server start-up fails with \u201cPort is already in use\u201d error in the log file.","text":"<p>Another Gluster NFS server is running on the same machine.</p> <p>This error can arise in case there is already a Gluster NFS server running on the same machine. This situation can be confirmed from the log file, if the following error lines exist:</p> <pre><code>[2010-05-26 23:40:49] E [rpc-socket.c:126:rpcsvc_socket_listen] rpc-socket: binding socket failed:Address already in use\n[2010-05-26 23:40:49] E [rpc-socket.c:129:rpcsvc_socket_listen] rpc-socket: Port is already in use\n[2010-05-26 23:40:49] E [rpcsvc.c:2636:rpcsvc_stage_program_register] rpc-service: could not create listening connection\n[2010-05-26 23:40:49] E [rpcsvc.c:2675:rpcsvc_program_register] rpc-service: stage registration of program failed\n[2010-05-26 23:40:49] E [rpcsvc.c:2695:rpcsvc_program_register] rpc-service: Program registration failed: MOUNT3, Num: 100005, Ver: 3, Port: 38465\n[2010-05-26 23:40:49] E [nfs.c:125:nfs_init_versions] nfs: Program init failed\n[2010-05-26 23:40:49] C [nfs.c:531:notify] nfs: Failed to initialize protocols\n</code></pre> <p>To resolve this error one of the Gluster NFS servers will have to be shutdown. At this time, Gluster NFS server does not support running multiple NFS servers on the same machine.</p>"},{"location":"Troubleshooting/troubleshooting-gnfs/#mount-command-fails-with-rpcstatd-related-error-message","title":"mount command fails with \u201crpc.statd\u201d related error message","text":"<p>If the mount command fails with the following error message:</p> <pre><code>mount.nfs: rpc.statd is not running but is required for remote locking.\nmount.nfs: Either use '-o nolock' to keep locks local, or start statd.\n</code></pre> <p>For NFS clients to mount the NFS server, rpc.statd service must be running on the clients. Start rpc.statd service by running the following command:</p> <pre><code>rpc.statd\n</code></pre>"},{"location":"Troubleshooting/troubleshooting-gnfs/#mount-command-takes-too-long-to-finish","title":"mount command takes too long to finish.","text":"<p>Start rpcbind service on the NFS client</p> <p>The problem is that the rpcbind or portmap service is not running on the NFS client. The resolution for this is to start either of these services by running the following command:</p> <pre><code>/etc/init.d/portmap start\n</code></pre> <p>On some distributions where portmap has been replaced by rpcbind, the following command is required:</p> <pre><code>/etc/init.d/rpcbind start\n</code></pre>"},{"location":"Troubleshooting/troubleshooting-gnfs/#nfs-server-glusterfsd-starts-but-initialization-fails-with-nfsrpc-service-portmap-registration-of-program-failed-error-message-in-the-log","title":"NFS server glusterfsd starts but initialization fails with \u201cnfsrpc- service: portmap registration of program failed\u201d error message in the log.","text":"<p>NFS start-up can succeed but the initialization of the NFS service can still fail preventing clients from accessing the mount points. Such a situation can be confirmed from the following error messages in the log file:</p> <pre><code>[2010-05-26 23:33:47] E [rpcsvc.c:2598:rpcsvc_program_register_portmap] rpc-service: Could notregister with portmap\n[2010-05-26 23:33:47] E [rpcsvc.c:2682:rpcsvc_program_register] rpc-service: portmap registration of program failed\n[2010-05-26 23:33:47] E [rpcsvc.c:2695:rpcsvc_program_register] rpc-service: Program registration failed: MOUNT3, Num: 100005, Ver: 3, Port: 38465\n[2010-05-26 23:33:47] E [nfs.c:125:nfs_init_versions] nfs: Program init failed\n[2010-05-26 23:33:47] C [nfs.c:531:notify] nfs: Failed to initialize protocols\n[2010-05-26 23:33:49] E [rpcsvc.c:2614:rpcsvc_program_unregister_portmap] rpc-service: Could not unregister with portmap\n[2010-05-26 23:33:49] E [rpcsvc.c:2731:rpcsvc_program_unregister] rpc-service: portmap unregistration of program failed\n[2010-05-26 23:33:49] E [rpcsvc.c:2744:rpcsvc_program_unregister] rpc-service: Program unregistration failed: MOUNT3, Num: 100005, Ver: 3, Port: 38465\n</code></pre> <ol> <li> <p>Start portmap or rpcbind service on the NFS server</p> <p>On most Linux distributions, portmap can be started using the following command:</p> <pre><code>/etc/init.d/portmap start\n</code></pre> <p>On some distributions where portmap has been replaced by rpcbind, run the following command:</p> <pre><code>/etc/init.d/rpcbind start\n</code></pre> <p>After starting portmap or rpcbind, gluster NFS server needs to be restarted.</p> </li> <li> <p>Stop another NFS server running on the same machine</p> <p>Such an error is also seen when there is another NFS server running on the same machine but it is not the Gluster NFS server. On Linux systems, this could be the kernel NFS server. Resolution involves stopping the other NFS server or not running the Gluster NFS server on the machine. Before stopping the kernel NFS server, ensure that no critical service depends on access to that NFS server's exports.</p> <p>On Linux, kernel NFS servers can be stopped by using either of the following commands depending on the distribution in use:</p> <pre><code>/etc/init.d/nfs-kernel-server stop\n/etc/init.d/nfs stop\n</code></pre> </li> <li> <p>Restart Gluster NFS server</p> </li> </ol>"},{"location":"Troubleshooting/troubleshooting-gnfs/#mount-command-fails-with-nfs-server-failed-error","title":"mount command fails with NFS server failed error.","text":"<p>mount command fails with following error</p> <pre><code>mount: mount to NFS server '10.1.10.11' failed: timed out (retrying).\n</code></pre> <p>Perform one of the following to resolve this issue:</p> <ol> <li> <p>Disable name lookup requests from NFS server to a DNS server</p> <p>The NFS server attempts to authenticate NFS clients by performing a reverse DNS lookup to match hostnames in the volume file with the client IP addresses. There can be a situation where the NFS server either is not able to connect to the DNS server or the DNS server is taking too long to responsd to DNS request. These delays can result in delayed replies from the NFS server to the NFS client resulting in the timeout error seen above.</p> <p>NFS server provides a work-around that disables DNS requests, instead relying only on the client IP addresses for authentication. The following option can be added for successful mounting in such situations:</p> <p><code>option rpc-auth.addr.namelookup off</code></p> <p>Note: Remember that disabling the NFS server forces authentication of clients to use only IP addresses and if the authentication rules in the volume file use hostnames, those authentication rules will fail and disallow mounting for those clients.</p> <p>OR</p> </li> <li> <p>NFS version used by the NFS client is other than version 3</p> <p>Gluster NFS server supports version 3 of NFS protocol. In recent Linux kernels, the default NFS version has been changed from 3 to 4. It is possible that the client machine is unable to connect to the Gluster NFS server because it is using version 4 messages which are not understood by Gluster NFS server. The timeout can be resolved by forcing the NFS client to use version 3. The vers option to mount command is used for this purpose:</p> <pre><code>mount -o vers=3\n</code></pre> </li> </ol>"},{"location":"Troubleshooting/troubleshooting-gnfs/#showmount-fails-with-clnt_create-rpc-unable-to-receive","title":"showmount fails with clnt_create: RPC: Unable to receive","text":"<p>Check your firewall setting to open ports 111 for portmap requests/replies and Gluster NFS server requests/replies. Gluster NFS server operates over the following port numbers: 38465, 38466, and 38467.</p>"},{"location":"Troubleshooting/troubleshooting-gnfs/#application-fails-with-invalid-argument-or-value-too-large-for-defined-data-type-error","title":"Application fails with \"Invalid argument\" or \"Value too large for defined data type\" error.","text":"<p>These two errors generally happen for 32-bit nfs clients or applications that do not support 64-bit inode numbers or large files. Use the following option from the CLI to make Gluster NFS return 32-bit inode numbers instead: nfs.enable-ino32 \\&lt;on|off&gt;</p> <p>Applications that will benefit are those that were either:</p> <ul> <li>built 32-bit and run on 32-bit machines such that they do not   support large files by default</li> <li>built 32-bit on 64-bit systems</li> </ul> <p>This option is disabled by default so NFS returns 64-bit inode numbers by default.</p> <p>Applications which can be rebuilt from source are recommended to rebuild using the following flag with gcc:</p> <pre><code>-D_FILE_OFFSET_BITS=64\n</code></pre>"},{"location":"Troubleshooting/troubleshooting-memory/","title":"Troubleshooting High Memory Utilization","text":"<p>If the memory utilization of a Gluster process increases significantly with time, it could be a leak caused by resources not being freed. If you suspect that you may have hit such an issue, try using statedumps to debug the issue.</p> <p>If you are unable to figure out where the leak is, please file an issue and provide the following details:</p> <ul> <li>Gluster version</li> <li>The affected process</li> <li>The output of <code>gluster volume info</code></li> <li>Steps to reproduce the issue if available</li> <li>Statedumps for the process collected at intervals as the memory utilization increases</li> <li>The Gluster log files for the process (if possible)</li> </ul>"},{"location":"Upgrade-Guide/","title":"Upgrade-Guide Index","text":""},{"location":"Upgrade-Guide/#upgrading-glusterfs","title":"Upgrading GlusterFS","text":"<ul> <li>About op-version</li> </ul> <p>If you are using GlusterFS version 6.x or above, you can upgrade it to the following:</p> <ul> <li>Upgrading to 10</li> <li>Upgrading to 9</li> <li>Upgrading to 8</li> <li>Upgrading to 7</li> </ul> <p>If you are using GlusterFS version 5.x or above, you can upgrade it to the following:</p> <ul> <li>Upgrading to 8</li> <li>Upgrading to 7</li> <li>Upgrading to 6</li> </ul> <p>If you are using GlusterFS version 4.x or above, you can upgrade it to the following:</p> <ul> <li>Upgrading to 6</li> <li>Upgrading to 5</li> </ul> <p>If you are using GlusterFS version 3.4.x or above, you can upgrade it to following:</p> <ul> <li>Upgrading to 3.5</li> <li>Upgrading to 3.6</li> <li>Upgrading to 3.7</li> <li>Upgrading to 3.9</li> <li>Upgrading to 3.10</li> <li>Upgrading to 3.11</li> <li>Upgrading to 3.12</li> <li>Upgrading to 3.13</li> </ul>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/","title":"Generic Upgrade procedure","text":""},{"location":"Upgrade-Guide/generic-upgrade-procedure/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If there are disperse or, pure distributed volumes in the storage pool being upgraded, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-new-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to new-version :","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means.</p> <pre><code>systemctl stop glusterd\nsystemctl stop glustereventsd\nkillall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster new-version, below example shows how to create a repository on fedora and use it to upgrade :</p> <p>3.1 Create a private repository (assuming /new-gluster-rpms/ folder has the new rpms ):</p> <pre><code>createrepo /new-gluster-rpms/\n</code></pre> <p>3.2 Create the .repo file in /etc/yum.d/ :</p> <pre><code># cat /etc/yum.d/newglusterrepo.repo\n [newglusterrepo]\n name=NewGlusterRepo\n baseurl=\"file:///new-gluster-rpms/\"\n gpgcheck=0\n enabled=1\n</code></pre> <p>3.3 Upgrade glusterfs, for example to upgrade glusterfs-server to x.y version :</p> <pre><code>yum update glusterfs-server-x.y.fc30.x86_64.rpm\n</code></pre> </li> <li> <p>Ensure that version reflects new-version in the output of,</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>systemctl start glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Invoke self-heal on all the gluster volumes by running,</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Verify that there are no heal backlog by running the command for all the volumes,</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> </li> </ol> <p>NOTE: Before proceeding to upgrade the next server in the pool it is recommended to check the heal backlog. If there is a heal backlog, it is recommended to wait until the backlog is empty, or, the backlog does not contain any entries requiring a sync to the just upgraded server.</p> <ol> <li>Restart any gfapi based application stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>systemctl stop glusterd\nsystemctl stop glustereventsd\nkillall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster new-version, on all servers</p> </li> <li> <p>Ensure that version reflects new-version in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>systemctl start glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to new-version version as well</li> <li>Post upgrading the clients, for replicate volumes, it is recommended to enable the option <code>gluster volume set &lt;volname&gt; fips-mode-rchecksum on</code> to turn off usage of MD5 checksums during healing. This enables running Gluster on FIPS compliant systems.</li> </ul>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#if-upgrading-from-a-version-lesser-than-gluster-70","title":"If upgrading from a version lesser than Gluster 7.0","text":"<p>NOTE: If you have ever enabled quota on your volumes then after the upgrade is done, you will have to restart all the nodes in the cluster one by one so as to fix the checksum values in the quota.cksum file under the <code>/var/lib/glusterd/vols/&lt;volname&gt;/ directory.</code> The peers may go into <code>Peer rejected</code> state while doing so but once all the nodes are rebooted everything will be back to normal.</p>"},{"location":"Upgrade-Guide/generic-upgrade-procedure/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the new-version version,</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster new-version</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/op-version/","title":"Op-version","text":""},{"location":"Upgrade-Guide/op-version/#op-version","title":"op-version","text":"<p>op-version is the operating version of the Gluster which is running.</p> <p>op-version was introduced to ensure gluster running with different versions do not end up in a problem and backward compatibility issues can be tackled.</p> <p>After Gluster upgrade, it is advisable to have op-version updated.</p>"},{"location":"Upgrade-Guide/op-version/#updating-op-version","title":"Updating op-version","text":"<p>Current op-version can be queried as below:</p> <p>For 3.10 onwards:</p> <pre><code>gluster volume get all cluster.op-version\n</code></pre> <p>For release &lt; 3.10:</p> <pre><code># gluster volume get &lt;VOLNAME&gt; cluster.op-version\n</code></pre> <p>To get the maximum possible op-version a cluster can support, the following query can be used (this is available 3.10 release onwards):</p> <pre><code>gluster volume get all cluster.max-op-version\n</code></pre> <p>For example, if some nodes in a cluster have been upgraded to X and some to X+, then the maximum op-version supported by the cluster is X, and the cluster.op-version can be bumped up to X to support new features.</p> <p>op-version can be updated as below. For example, after upgrading to glusterfs-4.0.0, set op-version as:</p> <pre><code>gluster volume set all cluster.op-version 40000\n</code></pre> <p>Note: This is not mandatory, but advisable to have updated op-version if you want to make use of latest features in the updated gluster.</p>"},{"location":"Upgrade-Guide/op-version/#client-op-version","title":"Client op-version","text":"<p>When trying to set a volume option, it might happen that one or more of the connected clients cannot support the feature being set and might need to be upgraded to the op-version the cluster is currently running on.</p> <p>To check op-version information for the connected clients and find the offending client, the following query can be used for 3.10 release onwards:</p> <pre><code># gluster volume status &lt;all|VOLNAME&gt; clients\n</code></pre> <p>The respective clients can then be upgraded to the required version.</p> <p>This information could also be used to make an informed decision while bumping up the op-version of a cluster, so that connected clients can support all the new features provided by the upgraded cluster as well.</p>"},{"location":"Upgrade-Guide/upgrade-to-10/","title":"Upgrade procedure to Gluster 10, from Gluster 9.x, 8.x and 7.x","text":"<p>We recommend reading the release notes for 10.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Before following the generic upgrade procedure checkout the \"Major Issues\" section given below.</p> <p>Refer, to the generic upgrade procedure guide and follow documented instructions.</p>"},{"location":"Upgrade-Guide/upgrade-to-10/#major-issues","title":"Major issues","text":""},{"location":"Upgrade-Guide/upgrade-to-10/#the-following-options-are-removed-from-the-code-base-and-require-to-be-unset","title":"The following options are removed from the code base and require to be unset","text":"<p>before an upgrade from releases older than release 4.1.0,</p> <pre><code>- features.lock-heal\n- features.grace-timeout\n</code></pre> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-10/#make-sure-you-are-not-using-any-of-the-following-depricated-features","title":"Make sure you are not using any of the following depricated features :","text":"<pre><code>- Block device (bd) xlator\n- Decompounder feature\n- Crypt xlator\n- Symlink-cache xlator\n- Stripe feature\n- Tiering support (tier xlator and changetimerecorder)\n- Glupy\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-10/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>If you are upgrading from a release prior to release-6 be aware of deprecated xlators and functionality.</p>"},{"location":"Upgrade-Guide/upgrade-to-11/","title":"Upgrade procedure to Gluster 11, from Gluster 10.x, 9.x and 8.x","text":"<p>We recommend reading the release notes for 11.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Before following the generic upgrade procedure checkout the \"Major Issues\" section given below.</p> <p>Refer, to the generic upgrade procedure guide and follow documented instructions.</p>"},{"location":"Upgrade-Guide/upgrade-to-11/#major-issues","title":"Major issues","text":""},{"location":"Upgrade-Guide/upgrade-to-11/#the-following-options-are-removed-from-the-code-base-and-require-to-be-unset","title":"The following options are removed from the code base and require to be unset","text":"<p>before an upgrade from releases older than release 4.1.0,</p> <pre><code>- features.lock-heal\n- features.grace-timeout\n</code></pre> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-11/#make-sure-you-are-not-using-any-of-the-following-depricated-features","title":"Make sure you are not using any of the following depricated features :","text":"<pre><code>- Block device (bd) xlator\n- Decompounder feature\n- Crypt xlator\n- Symlink-cache xlator\n- Stripe feature\n- Tiering support (tier xlator and changetimerecorder)\n- Glupy\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p> <p>Online Upgrade: User will obsrve \"Peer Rejected\" issues while upgrading if NFS Ganesha is not enabled as the nfs options were made optional in this release causing checksum misamtch. Stopping and starting a server after upgrade should fix the issue.</p>"},{"location":"Upgrade-Guide/upgrade-to-11/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>If you are upgrading from a release prior to release-6 be aware of deprecated xlators and functionality.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.10/","title":"Upgrade to 3.10","text":""},{"location":"Upgrade-Guide/upgrade-to-3.10/#upgrade-procedure-to-gluster-3100-from-gluster-39x-38x-and-37x","title":"Upgrade procedure to Gluster 3.10.0, from Gluster 3.9.x, 3.8.x and 3.7.x","text":""},{"location":"Upgrade-Guide/upgrade-to-3.10/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If any of your volumes, in the trusted storage pool that is being upgraded, uses disperse or is a pure distributed volume, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-310-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 3.10 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 3.10</p> </li> <li> <p>Ensure that version reflects 3.10.0 in the output of,</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Self-heal all gluster volumes by running</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Ensure that there is no heal backlog by running the below command for all volumes</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> <p>NOTE: If there is a heal backlog, wait till the backlog is empty, or the backlog does not have any entries needing a sync to the just upgraded server, before proceeding to upgrade the next server in the pool</p> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 3.10, on all servers</p> </li> <li> <p>Ensure that version reflects 3.10.0 in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 3.10 version as well</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.10/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 3.10.0 version,</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 3.10</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.11/","title":"Upgrade to 3.11","text":""},{"location":"Upgrade-Guide/upgrade-to-3.11/#upgrade-procedure-to-gluster-311-from-gluster-310x-and-38x","title":"Upgrade procedure to Gluster 3.11, from Gluster 3.10.x, and 3.8.x","text":"<p>NOTE: Upgrade procedure remains the same as with the 3.10 release</p>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If any of your volumes, in the trusted storage pool that is being upgraded, uses disperse or is a pure distributed volume, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-311-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 3.11 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 3.11</p> </li> <li> <p>Ensure that version reflects 3.11.x in the output of,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Self-heal all gluster volumes by running</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Ensure that there is no heal backlog by running the below command for all volumes</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> <p>NOTE: If there is a heal backlog, wait till the backlog is empty, or the backlog does not have any entries needing a sync to the just upgraded server, before proceeding to upgrade the next server in the pool</p> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 3.11, on all servers</p> </li> <li> <p>Ensure that version reflects 3.11.x in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 3.11 version as well</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.11/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 3.11.x version,</p> <p>NOTE: x is the minor release number for the release</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 3.11</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.12/","title":"Upgrade to 3.12","text":""},{"location":"Upgrade-Guide/upgrade-to-3.12/#upgrade-procedure-to-gluster-312-from-gluster-311x-310x-and-38x","title":"Upgrade procedure to Gluster 3.12, from Gluster 3.11.x, 3.10.x, and 3.8.x","text":"<p>NOTE: Upgrade procedure remains the same as with 3.11 and 3.10 releases</p>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If there are disperse or, pure distributed volumes in the storage pool being upgraded, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-312-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 3.12 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\nsystemctl stop glustereventsd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 3.12</p> </li> <li> <p>Ensure that version reflects 3.12.x in the output of,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Invoke self-heal on all the gluster volumes by running,</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Verify that there are no heal backlog by running the command for all the volumes,</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> <p>NOTE: Before proceeding to upgrade the next server in the pool it is recommended to check the heal backlog. If there is a heal backlog, it is recommended to wait until the backlog is empty, or, the backlog does not contain any entries requiring a sync to the just upgraded server.</p> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd glustereventsd\nsystemctl stop glustereventsd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 3.12, on all servers</p> </li> <li> <p>Ensure that version reflects 3.12.x in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 3.12 version as well</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.12/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 3.12.x version,</p> <p>NOTE: x is the minor release number for the release</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 3.12</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.13/","title":"Upgrade to 3.13","text":""},{"location":"Upgrade-Guide/upgrade-to-3.13/#upgrade-procedure-to-gluster-313-from-gluster-312x-and-310x","title":"Upgrade procedure to Gluster 3.13, from Gluster 3.12.x, and 3.10.x","text":"<p>NOTE: Upgrade procedure remains the same as with 3.12 and 3.10 releases</p>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If any of your volumes, in the trusted storage pool that is being upgraded, uses disperse or is a pure distributed volume, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-313-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 3.13 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 3.13</p> </li> <li> <p>Ensure that version reflects 3.13.x in the output of,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Self-heal all gluster volumes by running</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Ensure that there is no heal backlog by running the below command for all volumes</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> <p>NOTE: If there is a heal backlog, wait till the backlog is empty, or the backlog does not have any entries needing a sync to the just upgraded server, before proceeding to upgrade the next server in the pool</p> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 3.13, on all servers</p> </li> <li> <p>Ensure that version reflects 3.13.x in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 3.13 version as well</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.13/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 3.13.x version,</p> <p>NOTE: x is the minor release number for the release</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 3.13</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-3.5/","title":"Upgrade to 3.5","text":""},{"location":"Upgrade-Guide/upgrade-to-3.5/#glusterfs-upgrade-from-34x-to-35","title":"Glusterfs upgrade from 3.4.x to 3.5","text":"<p>Now that GlusterFS 3.5.0 is out, here are some mechanisms to upgrade from earlier installed versions of GlusterFS.</p> <p>Upgrade from GlusterFS 3.4.x:</p> <p>GlusterFS 3.5.0 is compatible with 3.4.x (yes, you read it right!). You can upgrade your deployment by following one of the two procedures below.</p> <p>a) Scheduling a downtime (Recommended)</p> <p>For this approach, schedule a downtime and prevent all your clients from accessing the servers.</p> <p>If you have quota configured, you need to perform step 1 and 6, otherwise you can skip it.</p> <p>If you have geo-replication session running, stop the session using the geo-rep stop command (please refer to step 1 of geo-rep upgrade steps provided below)</p> <ol> <li>Execute \"pre-upgrade-script-for-quota.sh\" mentioned under \"Upgrade Steps For Quota\" section.</li> <li>Stop all glusterd, glusterfsd and glusterfs processes on your server.</li> <li>Install GlusterFS 3.5.0</li> <li>Start glusterd.</li> <li>Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.</li> <li>Execute \"Post-Upgrade Script\" mentioned under \"Upgrade Steps For Quota\" section.</li> </ol> <p>You would need to repeat these steps on all servers that form your trusted storage pool.</p> <p>To upgrade geo-replication session, please refer to geo-rep upgrade steps provided below (from step 2)</p> <p>After upgrading the servers, it is recommended to upgrade all client installations to 3.5.0.</p> <p>b) Rolling upgrades with no downtime</p> <p>If you have replicated or distributed replicated volumes with bricks placed in the right fashion for redundancy, have no data to be self-healed and feel adventurous, you can perform a rolling upgrade through the following procedure:</p> <p>NOTE: Rolling upgrade of geo-replication session from glusterfs version \\&lt; 3.5 to 3.5.x is not supported.</p> <p>If you have quota configured, you need to perform step 1 and 7, otherwise you can skip it.</p> <ol> <li>Execute \"pre-upgrade-script-for-quota.sh\" mentioned under \"Upgrade Steps For Quota\" section.</li> <li>Stop all glusterd, glusterfs and glusterfsd processes on your server.</li> <li>Install GlusterFS 3.5.0.</li> <li>Start glusterd.</li> <li>Run \u201cgluster volume heal <code>&lt;volname&gt;</code> info\u201d on all volumes and ensure that there is nothing left to be self-healed on every volume. If you have pending data for self-heal, run \u201cgluster volume heal <code>&lt;volname&gt;</code>\u201d and wait for self-heal to complete.</li> <li>Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.</li> <li>Execute \"Post-Upgrade Script\" mentioned under \"Upgrade Steps For Quota\" section.</li> </ol> <p>Repeat the above steps on all servers that are part of your trusted storage pool.</p> <p>Again after upgrading the servers, it is recommended to upgrade all client installations to 3.5.0.</p> <p>Do report your findings on 3.5.0 in gluster-users, #gluster on Freenode and bugzilla.</p> <p>Please note that this may not work for all installations &amp; upgrades. If you notice anything amiss and would like to see it covered here, please point the same.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.5/#upgrade-steps-for-quota","title":"Upgrade Steps For Quota","text":"<p>The upgrade process for quota involves executing two upgrade scripts:</p> <ol> <li>pre-upgrade-script-for-quota.sh, and\\</li> <li>post-upgrade-script-for-quota.sh</li> </ol> <p>Pre-Upgrade Script:</p> <p>What it does:</p> <p>The pre-upgrade script (pre-upgrade-script-for-quota.sh) iterates over the list of volumes that have quota enabled and captures the configured quota limits for each such volume in a file under /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; by executing 'quota list' command on each one of them.</p> <p>Pre-requisites for running Pre-Upgrade Script:</p> <ol> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster.</li> <li>The pre-upgrade script must be run prior to upgradation.</li> <li>The pre-upgrade script must be run on only one of the nodes in the     cluster.</li> </ol> <p>Location:</p> <p>pre-upgrade-script-for-quota.sh must be retrieved from the source tree under the 'extras' directory.</p> <p>Invocation:</p> <p>Invoke the script by executing `./pre-upgrade-script-for-quota.sh` from the shell on any one of the nodes in the cluster.</p> <ul> <li> <p>Example:</p> <p>[root@server1 extras]#./pre-upgrade-script-for-quota.sh</p> </li> </ul> <p>Post-Upgrade Script:</p> <p>What it does:</p> <p>The post-upgrade script (post-upgrade-script-for-quota.sh) picks the volumes that have quota enabled.</p> <p>Because the cluster must be operating at op-version 3 for quota to work, the 'default-soft-limit' for each of these volumes is set to 80% (which is its default value) via `volume set` operation as an explicit trigger to bump up the op-version of the cluster and also to trigger a re-write of volfiles which knocks quota off client volume file.</p> <p>Once this is done, these volumes are started forcefully using `volume start force` to launch the Quota Daemon on all the nodes.</p> <p>Thereafter, for each of these volumes, the paths and the limits configured on them are retrieved from the backed up file /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; and limits are set on them via the `quota limit-usage` interface.</p> <p>Note:</p> <p>In the new version of quota, the command `quota limit-usage` will fail if the directory on which quota limit is to be set for a given volume does not exist. Therefore, it is advised that you create these directories first before running post-upgrade-script-for-quota.sh if you want limits to be set on these directories.</p> <p>Pre-requisites for running Post-Upgrade Script:</p> <ol> <li>The post-upgrade script must be executed after all the nodes in the     cluster have upgraded.</li> <li>Also, all the clients accessing the given volume must also be     upgraded before the script is run.</li> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster post upgrade.</li> <li>The script must be run from the same node where the pre-upgrade     script was run.</li> </ol> <p>Location:</p> <p>post-upgrade-script-for-quota.sh can be found under the 'extras' directory of the source tree for glusterfs.</p> <p>Invocation:</p> <p>post-upgrade-script-for-quota.sh takes one command line argument. This argument could be one of the following: ''the name of the volume which has quota enabled; or' '' 'all'.''</p> <p>In the first case, invoke post-upgrade-script-for-quota.sh from the shell for each volume with quota enabled, with the name of the volume passed as an argument in the command-line:</p> <ul> <li>Example:</li> </ul> <p>For a volume \"vol1\" on which quota is enabled, invoke the script in the following way:</p> <pre><code>    [root@server1 extras]#./post-upgrade-script-for-quota.sh vol1\n</code></pre> <p>In the second case, the post-upgrade script picks on its own, the volumes on which quota is enabled, and executes the post-upgrade procedure on each one of them. In this case, invoke post-upgrade-script-for-quota.sh from the shell with 'all' passed as an argument in the command-line:</p> <ul> <li> <p>Example:</p> <p>[root@server1 extras]#./post-upgrade-script-for-quota.sh all</p> </li> </ul> <p>Note:</p> <p>In the second case, post-upgrade-script-for-quota.sh exits prematurely upon failure to ugprade any given volume. In that case, you may run post-upgrade-script-for-quota.sh individually (using the volume name as command line argument) on this volume and also on all volumes appearing after this volume in the output of `gluster volume list`, that have quota enabled.</p> <p>The backed up files under /var/tmp/glusterfs/quota-config-backup/ are retained after the post-upgrade procedure for reference.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.5/#upgrade-steps-for-geo-replication","title":"Upgrade steps for geo replication:","text":"<p>Here are the steps to upgrade your existing geo-replication setup to new distributed geo-replication in glusterfs-3.5. The new version leverges all the nodes in your master volume and provides better performace.</p> <p>Note:</p> <p>Since new version of geo-rep very much different from the older one, this has to be done offline.</p> <p>New version supports only syncing between two gluster volumes via ssh+gluster.</p> <p>This doc deals with upgrading geo-rep. So upgrading the volumes are not covered in detail here.</p> <p>Below are the steps to upgrade:</p> <p>\u200b1. Stop the geo-replication session in older version ( \\&lt; 3.5) using the below command</p> <pre><code>    #gluster volume geo-replication `&lt;master_vol&gt;` `&lt;slave_host&gt;`::`&lt;slave_vol&gt;` stop\n</code></pre> <p>\u200b2. Now since the new geo-replication requires gfids of master and slave volume to be same, generate a file containing the gfids of all the files in master</p> <pre><code>    cd /usr/share/glusterfs/scripts/ ;\n    bash generate-gfid-file.sh localhost:`&lt;master_vol&gt;` $PWD/get-gfid.sh    /tmp/master_gfid_file.txt ;\n    scp /tmp/master_gfid_file.txt root@`&lt;slave_host&gt;`:/tmp\n</code></pre> <p>\u200b3. Now go to the slave host and aplly the gfid to the slave volume.</p> <pre><code>    cd /usr/share/glusterfs/scripts/\n    bash slave-upgrade.sh localhost:`&lt;slave_vol&gt;` /tmp/master_gfid_file.txt    $PWD/gsync-sync-gfid\n</code></pre> <p>This will ask you for password of all the nodes in slave cluster. Please provide them, if asked.</p> <p>\u200b4. Also note that this will restart your slave gluster volume (stop and start)</p> <p>\u200b5. Now create and start the geo-rep session between master and slave. For instruction on creating new geo-rep seesion please refer distributed-geo-rep admin guide.</p> <pre><code>    gluster volume geo-replication `&lt;master_volume&gt;` `&lt;slave_host&gt;`::`&lt;slave_volume&gt;` create push-pem force\n    gluster volume geo-replication `&lt;master_volume&gt;` `&lt;slave_host&gt;`::`&lt;slave_volume&gt;` start\n</code></pre> <p>\u200b6. Now your session is upgraded to use distributed-geo-rep</p>"},{"location":"Upgrade-Guide/upgrade-to-3.6/","title":"GlusterFS upgrade from 3.5.x to 3.6.x","text":"<p>Now that GlusterFS 3.6.0 is out, here is the process to upgrade from earlier installed versions of GlusterFS.</p> <p>If you are using GlusterFS replication ( \\&lt; 3.6) in your setup , please note that the new afrv2 implementation is only compatible with 3.6 GlusterFS clients. If you are not updating your clients to GlusterFS version 3.6 you need to disable client self healing process. You can perform this by below steps.</p> <pre><code># gluster v set testvol cluster.entry-self-heal off\nvolume set: success\n\n# gluster v set testvol cluster.data-self-heal off\nvolume set: success\n\n# gluster v set testvol cluster.metadata-self-heal off\nvolume set: success\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-3.6/#glusterfs-upgrade-from-35x-to-36x_1","title":"GlusterFS upgrade from 3.5.x to 3.6.x","text":"<p>a) Scheduling a downtime (Recommended)</p> <p>For this approach, schedule a downtime and prevent all your clients from accessing ( umount your volumes, stop gluster Volumes..etc)the servers.</p> <ol> <li>Stop all glusterd, glusterfsd and glusterfs processes on your server.</li> <li>Install GlusterFS 3.6.0</li> <li>Start glusterd.</li> <li>Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.</li> </ol> <p>You would need to repeat these steps on all servers that form your trusted storage pool.</p> <p>After upgrading the servers, it is recommended to upgrade all client installations to 3.6.0</p>"},{"location":"Upgrade-Guide/upgrade-to-3.6/#glusterfs-upgrade-from-34x-to-36x","title":"GlusterFS upgrade from 3.4.x to 3.6.X","text":"<p>Upgrade from GlusterFS 3.4.x:</p> <p>GlusterFS 3.6.0 is compatible with 3.4.x (yes, you read it right!). You can upgrade your deployment by following one of the two procedures below.</p> <p>a) Scheduling a downtime (Recommended)</p> <p>For this approach, schedule a downtime and prevent all your clients from accessing ( umount your volumes, stop gluster Volumes..etc)the servers.</p> <p>If you have quota configured, you need to perform step 1 and 6, otherwise you can skip it.</p> <p>If you have geo-replication session running, stop the session using the geo-rep stop command (please refer to step 1 of geo-rep upgrade steps provided below)</p> <ol> <li>Execute \"pre-upgrade-script-for-quota.sh\" mentioned under \"Upgrade Steps For Quota\" section.</li> <li>Stop all glusterd, glusterfsd and glusterfs processes on your server.</li> <li>Install GlusterFS 3.6.0</li> <li>Start glusterd.</li> <li>Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.</li> <li>Execute \"Post-Upgrade Script\" mentioned under \"Upgrade Steps For Quota\" section.</li> </ol> <p>You would need to repeat these steps on all servers that form your trusted storage pool.</p> <p>To upgrade geo-replication session, please refer to geo-rep upgrade steps provided below (from step 2)</p> <p>After upgrading the servers, it is recommended to upgrade all client installations to 3.6.0.</p> <p>Do report your findings on 3.6.0 in gluster-users, #gluster on Freenode and bugzilla.</p> <p>Please note that this may not work for all installations &amp; upgrades. If you notice anything amiss and would like to see it covered here, please point the same.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.6/#upgrade-steps-for-quota","title":"Upgrade Steps For Quota","text":"<p>The upgrade process for quota involves executing two upgrade scripts:</p> <ol> <li>pre-upgrade-script-for-quota.sh, and\\</li> <li>post-upgrade-script-for-quota.sh</li> </ol> <p>Pre-Upgrade Script:</p> <p>What it does:</p> <p>The pre-upgrade script (pre-upgrade-script-for-quota.sh) iterates over the list of volumes that have quota enabled and captures the configured quota limits for each such volume in a file under /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; by executing 'quota list' command on each one of them.</p> <p>Pre-requisites for running Pre-Upgrade Script:</p> <ol> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster.</li> <li>The pre-upgrade script must be run prior to upgradation.</li> <li>The pre-upgrade script must be run on only one of the nodes in the     cluster.</li> </ol> <p>Location:</p> <p>pre-upgrade-script-for-quota.sh must be retrieved from the source tree under the 'extras' directory.</p> <p>Invocation:</p> <p>Invoke the script by executing `./pre-upgrade-script-for-quota.sh` from the shell on any one of the nodes in the cluster.</p> <p>Example:</p> <pre><code>[root@server1 extras]#./pre-upgrade-script-for-quota.sh\n</code></pre> <p>Post-Upgrade Script:</p> <p>What it does:</p> <p>The post-upgrade script (post-upgrade-script-for-quota.sh) picks the volumes that have quota enabled.</p> <p>Because the cluster must be operating at op-version 3 for quota to work, the 'default-soft-limit' for each of these volumes is set to 80% (which is its default value) via `volume set` operation as an explicit trigger to bump up the op-version of the cluster and also to trigger a re-write of volfiles which knocks quota off client volume file.</p> <p>Once this is done, these volumes are started forcefully using `volume start force` to launch the Quota Daemon on all the nodes.</p> <p>Thereafter, for each of these volumes, the paths and the limits configured on them are retrieved from the backed up file /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; and limits are set on them via the `quota limit-usage` interface.</p> <p>Note:</p> <p>In the new version of quota, the command `quota limit-usage` will fail if the directory on which quota limit is to be set for a given volume does not exist. Therefore, it is advised that you create these directories first before running post-upgrade-script-for-quota.sh if you want limits to be set on these directories.</p> <p>Pre-requisites for running Post-Upgrade Script:</p> <ol> <li>The post-upgrade script must be executed after all the nodes in the     cluster have upgraded.</li> <li>Also, all the clients accessing the given volume must also be     upgraded before the script is run.</li> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster post upgrade.</li> <li>The script must be run from the same node where the pre-upgrade     script was run.</li> </ol> <p>Location:</p> <p>post-upgrade-script-for-quota.sh can be found under the 'extras' directory of the source tree for glusterfs.</p> <p>Invocation:</p> <p>post-upgrade-script-for-quota.sh takes one command line argument. This argument could be one of the following: ''the name of the volume which has quota enabled; or' '' 'all'.''</p> <p>In the first case, invoke post-upgrade-script-for-quota.sh from the shell for each volume with quota enabled, with the name of the volume passed as an argument in the command-line:</p> <p>Example:</p> <p>For a volume \"vol1\" on which quota is enabled, invoke the script in the following way:</p> <pre><code>[root@server1 extras]#./post-upgrade-script-for-quota.sh vol1\n</code></pre> <p>In the second case, the post-upgrade script picks on its own, the volumes on which quota is enabled, and executes the post-upgrade procedure on each one of them. In this case, invoke post-upgrade-script-for-quota.sh from the shell with 'all' passed as an argument in the command-line:</p> <p>Example:</p> <pre><code>[root@server1 extras]#./post-upgrade-script-for-quota.sh all\n</code></pre> <p>Note:</p> <p>In the second case, post-upgrade-script-for-quota.sh exits prematurely upon failure to ugprade any given volume. In that case, you may run post-upgrade-script-for-quota.sh individually (using the volume name as command line argument) on this volume and also on all volumes appearing after this volume in the output of `gluster volume list`, that have quota enabled.</p> <p>The backed up files under /var/tmp/glusterfs/quota-config-backup/ are retained after the post-upgrade procedure for reference.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.6/#upgrade-steps-for-geo-replication","title":"Upgrade steps for geo replication:","text":"<p>Here are the steps to upgrade your existing geo-replication setup to new distributed geo-replication in glusterfs-3.5. The new version leverges all the nodes in your master volume and provides better performace.</p> <p>Note:</p> <p>Since new version of geo-rep very much different from the older one, this has to be done offline.</p> <p>New version supports only syncing between two gluster volumes via ssh+gluster.</p> <p>This doc deals with upgrading geo-rep. So upgrading the volumes are not covered in detail here.</p> <p>Below are the steps to upgrade:</p> <p>\u200b1. Stop the geo-replication session in older version ( \\&lt; 3.5) using the below command</p> <pre><code>    # gluster volume geo-replication `&lt;master_vol&gt;` `&lt;slave_host&gt;`::`&lt;slave_vol&gt;` stop\n</code></pre> <p>\u200b2. Now since the new geo-replication requires gfids of master and slave volume to be same, generate a file containing the gfids of all the files in master</p> <pre><code>    # cd /usr/share/glusterfs/scripts/ ;\n    # bash generate-gfid-file.sh localhost:`&lt;master_vol&gt;` $PWD/get-gfid.sh    /tmp/master_gfid_file.txt ;\n    # scp /tmp/master_gfid_file.txt root@`&lt;slave_host&gt;`:/tmp\n</code></pre> <p>\u200b3. Now go to the slave host and aplly the gfid to the slave volume.</p> <pre><code>    # cd /usr/share/glusterfs/scripts/\n    # bash slave-upgrade.sh localhost:`&lt;slave_vol&gt;` /tmp/master_gfid_file.txt    $PWD/gsync-sync-gfid\n</code></pre> <p>This will ask you for password of all the nodes in slave cluster. Please provide them, if asked.</p> <p>\u200b4. Also note that this will restart your slave gluster volume (stop and start)</p> <p>\u200b5. Now create and start the geo-rep session between master and slave. For instruction on creating new geo-rep seesion please refer distributed-geo-rep admin guide.</p> <pre><code>    # gluster volume geo-replication `&lt;master_volume&gt;` `&lt;slave_host&gt;`::`&lt;slave_volume&gt;` create push-pem force\n    # gluster volume geo-replication `&lt;master_volume&gt;` `&lt;slave_host&gt;`::`&lt;slave_volume&gt;` start\n</code></pre> <p>\u200b6. Now your session is upgraded to use distributed-geo-rep</p>"},{"location":"Upgrade-Guide/upgrade-to-3.7/","title":"GlusterFS upgrade to 3.7.x","text":"<p>Now that GlusterFS 3.7.0 is out, here is the process to upgrade from earlier installed versions of GlusterFS. Please read the entire howto before proceeding with an upgrade of your deployment</p>"},{"location":"Upgrade-Guide/upgrade-to-3.7/#pre-upgrade","title":"Pre-upgrade","text":"<p>GlusterFS contains afrv2 implementation from 3.6.0 by default. If you are using GlusterFS replication ( \\&lt; 3.6) in your setup, please note that the new afrv2 implementation is only compatible with 3.6 or greater GlusterFS clients. If you are not updating your clients to GlusterFS version 3.6 along with your servers you would need to disable client self healing process before the upgrade. You can perform this by below steps.</p> <pre><code># gluster v set testvol cluster.entry-self-heal off\nvolume set: success\n\n# gluster v set testvol cluster.data-self-heal off\nvolume set: success\n\n# gluster v set testvol cluster.metadata-self-heal off\nvolume set: success\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-3.7/#glusterfs-upgrade-to-37x_1","title":"GlusterFS upgrade to 3.7.x","text":"<p>a) Scheduling a downtime</p> <p>For this approach, schedule a downtime and prevent all your clients from accessing (umount your volumes, stop gluster Volumes..etc) the servers.</p> <pre><code>1. Stop all glusterd, glusterfsd and glusterfs processes on your server.\n2. Install  GlusterFS 3.7.0\n3. Start glusterd.\n4. Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.\n</code></pre> <p>You would need to repeat these steps on all servers that form your trusted storage pool.</p> <p>After upgrading the servers, it is recommended to upgrade all client installations to 3.7.0.</p> <p>b) Rolling Upgrade</p> <p>If you have replicated or distributed replicated volumes with bricks placed in the right fashion for redundancy, have no data to be self-healed and feel adventurous, you can perform a rolling upgrade through the following procedure:</p> <pre><code>1.Stop all glusterd, glusterfs and glusterfsd processes on your server.\n2.Install GlusterFS 3.7.0.\n3.Start glusterd.\n4.Run \u201cgluster volume heal &lt;volname&gt; info\u201d on all volumes and ensure that there is nothing left to be 5.self-healed on every volume. If you have pending data for self-heal, run \u201cgluster volume heal &lt;volname&gt;\u201d and wait for self-heal to complete.\n6.Ensure that all started volumes have processes online in \u201cgluster volume status\u201d.\n</code></pre> <p>Repeat the above steps on all servers that are part of your trusted storage pool.</p> <p>Again after upgrading the servers, it is recommended to upgrade all client installations to 3.7.0.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.7/#special-notes-for-upgrading-from-34x-to-37x","title":"Special notes for upgrading from 3.4.x to 3.7.X","text":"<p>If you have quota or geo-replication configured in 3.4.x, please read below. Else you can skip this section.</p> <p>Architectural changes in Quota &amp; geo-replication were introduced in Gluster 3.5.0. Hence scheduling a downtime is recommended for upgrading from 3.4.x to 3.7.x if you have these features enabled.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.7/#upgrade-steps-for-quota","title":"Upgrade Steps For Quota","text":"<p>The upgrade process for quota involves the following:</p> <ol> <li>Run pre-upgrade-script-for-quota.sh</li> <li>Upgrade to 3.7.0</li> <li>Run post-upgrade-script-for-quota.sh</li> </ol> <p>More details on the scripts are as under.</p> <p>Pre-Upgrade Script:</p> <p>What it does:</p> <p>The pre-upgrade script (pre-upgrade-script-for-quota.sh) iterates over the list of volumes that have quota enabled and captures the configured quota limits for each such volume in a file under /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; by executing 'quota list' command on each one of them.</p> <p>Pre-requisites for running Pre-Upgrade Script:</p> <ol> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster.</li> <li>The pre-upgrade script must be run prior to upgradation.</li> <li>The pre-upgrade script must be run on only one of the nodes in the     cluster.</li> </ol> <p>Location:</p> <p>pre-upgrade-script-for-quota.sh must be retrieved from the source tree under the 'extras' directory.</p> <p>Invocation:</p> <p>Invoke the script by executing `./pre-upgrade-script-for-quota.sh` from the shell on any one of the nodes in the cluster.</p> <p>Example:</p> <pre><code>[root@server1 extras]#./pre-upgrade-script-for-quota.sh\n</code></pre> <p>Post-Upgrade Script:</p> <p>What it does:</p> <p>The post-upgrade script (post-upgrade-script-for-quota.sh) picks the volumes that have quota enabled.</p> <p>Because the cluster must be operating at op-version 3 for quota to work, the 'default-soft-limit' for each of these volumes is set to 80% (which is its default value) via `volume set` operation as an explicit trigger to bump up the op-version of the cluster and also to trigger a re-write of volfiles which knocks quota off client volume file.</p> <p>Once this is done, these volumes are started forcefully using `volume start force` to launch the Quota Daemon on all the nodes.</p> <p>Thereafter, for each of these volumes, the paths and the limits configured on them are retrieved from the backed up file /var/tmp/glusterfs/quota-config-backup/vol_\\&lt;VOLNAME&gt; and limits are set on them via the `quota limit-usage` interface.</p> <p>Note:</p> <p>In the new version of quota, the command `quota limit-usage` will fail if the directory on which quota limit is to be set for a given volume does not exist. Therefore, it is advised that you create these directories first before running post-upgrade-script-for-quota.sh if you want limits to be set on these directories.</p> <p>Pre-requisites for running Post-Upgrade Script:</p> <ol> <li>The post-upgrade script must be executed after all the nodes in the     cluster have upgraded.</li> <li>Also, all the clients accessing the given volume must also be     upgraded before the script is run.</li> <li>Make sure glusterd and the brick processes are running on all nodes     in the cluster post upgrade.</li> <li>The script must be run from the same node where the pre-upgrade     script was run.</li> </ol> <p>Location:</p> <p>post-upgrade-script-for-quota.sh can be found under the 'extras' directory of the source tree for glusterfs.</p> <p>Invocation:</p> <p>post-upgrade-script-for-quota.sh takes one command line argument. This argument could be one of the following: ''the name of the volume which has quota enabled; or' '' 'all'.''</p> <p>In the first case, invoke post-upgrade-script-for-quota.sh from the shell for each volume with quota enabled, with the name of the volume passed as an argument in the command-line:</p> <p>Example: For a volume \"vol1\" on which quota is enabled, invoke the script in the following way:</p> <pre><code>[root@server1 extras]#./post-upgrade-script-for-quota.sh vol1\n</code></pre> <p>In the second case, the post-upgrade script picks on its own, the volumes on which quota is enabled, and executes the post-upgrade procedure on each one of them. In this case, invoke post-upgrade-script-for-quota.sh from the shell with 'all' passed as an argument in the command-line:</p> <p>Example:</p> <pre><code>[root@server1 extras]#./post-upgrade-script-for-quota.sh all\n</code></pre> <p>Note:</p> <p>In the second case, post-upgrade-script-for-quota.sh exits prematurely upon failure to ugprade any given volume. In that case, you may run post-upgrade-script-for-quota.sh individually (using the volume name as command line argument) on this volume and also on all volumes appearing after this volume in the output of `gluster volume list`, that have quota enabled.</p> <p>The backed up files under /var/tmp/glusterfs/quota-config-backup/ are retained after the post-upgrade procedure for reference.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.7/#upgrade-steps-for-geo-replication","title":"Upgrade steps for geo replication:","text":"<p>New version supports only syncing between two gluster volumes via ssh+gluster.</p> <p>''Below are the steps to upgrade. ''</p> <p>\u200b1. Stop the geo-replication session in older version ( \\&lt; 3.5) using the below command</p> <pre><code>    # gluster volume geo-replication &lt;master_vol&gt; &lt;slave_host&gt;::&lt;slave_vol&gt; stop\n</code></pre> <p>\u200b2. Now since the new geo-replication requires gfids of master and slave volume to be same, generate a file containing the gfids of all the files in master</p> <pre><code>    # cd /usr/share/glusterfs/scripts/ ;\n    # bash generate-gfid-file.sh localhost:&lt;master_vol&gt; $PWD/get-gfid.sh    /tmp/master_gfid_file.txt ;\n    # scp /tmp/master_gfid_file.txt root@&lt;slave_host&gt;:/tmp\n</code></pre> <p>\u200b3. Upgrade the slave cluster installation to 3.7.0</p> <p>\u200b4. Now go to the slave host and apply the gfid to the slave volume.</p> <pre><code>    # cd /usr/share/glusterfs/scripts/\n    # bash slave-upgrade.sh localhost:&lt;slave_vol&gt; /tmp/master_gfid_file.txt    $PWD/gsync-sync-gfid\n</code></pre> <p>This will ask you for password of all the nodes in slave cluster. Please provide them, if asked. Also note that this will restart your slave gluster volume (stop and start)</p> <p>\u200b5. Upgrade the master cluster to 3.7.0</p> <p>\u200b6. Now create and start the geo-rep session between master and slave. For instruction on creating new geo-rep session please refer distributed-geo-rep chapter in admin guide.</p> <pre><code>    # gluster volume geo-replication &lt;master_volume&gt; &lt;slave_host&gt;::&lt;slave_volume&gt; create push-pem force\n    # gluster volume geo-replication &lt;master_volume&gt; &lt;slave_host&gt;::&lt;slave_volume&gt; start\n</code></pre> <p>At this point, your distributed geo-replication should be configured appropriately.</p>"},{"location":"Upgrade-Guide/upgrade-to-3.8/","title":"Upgrade to 3.8","text":""},{"location":"Upgrade-Guide/upgrade-to-3.8/#upgrade-procedure-from-gluster-37x","title":"Upgrade procedure from Gluster 3.7.x","text":""},{"location":"Upgrade-Guide/upgrade-to-3.8/#pre-upgrade-notes","title":"Pre-upgrade Notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes.</li> <li>Online upgrade is not yet supported for dispersed or distributed dispersed volumes.</li> <li>Ensure no configuration changes are done during the upgrade.</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master.</li> <li>Upgrading the servers ahead of the clients is recommended.</li> <li>Upgrade the clients after the servers are upgraded. It is recommended to have the same client and server major versions.</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.8/#online-upgrade-procedure-for-servers","title":"Online Upgrade Procedure for Servers","text":"<p>The procedure involves upgrading one server at a time . On every storage server in your trusted storage pool:</p> <ul> <li> <p>Stop all gluster services using the below command or through your favorite way to stop them.</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>If you are using gfapi based applications (qemu, NFS-Ganesha, Samba etc.) on the servers, please stop those applications too.</p> </li> <li> <p>Install Gluster 3.8</p> </li> <li> <p>Ensure that version reflects 3.8.x in the output of</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by executing</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Self-heal all gluster volumes by running</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Ensure that there is no heal backlog by running the below command for all volumes</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously.</p> </li> <li> <p>After the upgrade is complete on all servers, run the following command:</p> <pre><code>gluster volume set all cluster.op-version 30800\n</code></pre> </li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.8/#offline-upgrade-procedure","title":"Offline Upgrade Procedure","text":"<p>For this procedure, schedule a downtime and prevent all your clients from accessing the servers.</p> <p>On every storage server in your trusted storage pool:</p> <ul> <li> <p>Stop all gluster services using the below command or through your favorite way to stop them.</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>If you are using gfapi based applications (qemu, NFS-Ganesha, Samba etc.) on the servers, please stop those applications too.</p> </li> <li> <p>Install Gluster 3.8</p> </li> <li> <p>Ensure that version reflects 3.8.x in the output of</p> <pre><code>gluster --version\n</code></pre> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by executing</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously.</p> </li> <li> <p>After the upgrade is complete on all servers, run the following command:</p> <pre><code>gluster volume set all cluster.op-version 30800\n</code></pre> </li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.8/#upgrade-procedure-for-clients","title":"Upgrade Procedure for Clients","text":"<ul> <li>Unmount all glusterfs mount points on the client</li> <li>Stop applications using gfapi (qemu etc.)</li> <li>Install Gluster 3.8</li> <li>Mount all gluster shares</li> <li>Start applications using libgfapi that were stopped previously</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-3.9/","title":"Upgrade to 3.9","text":""},{"location":"Upgrade-Guide/upgrade-to-3.9/#upgrade-procedure-from-gluster-38x-and-37x","title":"Upgrade procedure from Gluster 3.8.x and 3.7.x","text":"<p>The steps to uprade to Gluster 3.9 are the same as for upgrading to Gluster 3.8. Please follow the detailed instructions from the 3.8 upgrade guide.</p> <p>Note that there is only a single difference, related to the <code>op-version</code>:</p> <p>After the upgrade is complete on all servers, run the following command:</p> <pre><code>gluster volume set all cluster.op-version 30900\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-4.0/","title":"Upgrade to 4.0","text":""},{"location":"Upgrade-Guide/upgrade-to-4.0/#upgrade-procedure-to-gluster-40-from-gluster-313x-312x-and-310x","title":"Upgrade procedure to Gluster 4.0, from Gluster 3.13.x, 3.12.x, and 3.10.x","text":"<p>NOTE: Upgrade procedure remains the same as with 3.12 and 3.10 releases</p>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If any of your volumes, in the trusted storage pool that is being upgraded, uses disperse or is a pure distributed volume, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-40-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 4.0 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 4.0</p> </li> <li> <p>Ensure that version reflects 4.0.x in the output of,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Self-heal all gluster volumes by running</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Ensure that there is no heal backlog by running the below command for all volumes</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> <p>NOTE: If there is a heal backlog, wait till the backlog is empty, or the backlog does not have any entries needing a sync to the just upgraded server, before proceeding to upgrade the next server in the pool</p> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 4.0, on all servers</p> </li> <li> <p>Ensure that version reflects 4.0.x in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 4.0 version as well</li> <li>Post upgrading the clients, for replicate volumes, it is recommended to enable the option <code>gluster volume set &lt;volname&gt; fips-mode-rchecksum on</code> to turn off usage of MD5 checksums during healing. This enables running Gluster on FIPS compliant systems.</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-4.0/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 4.0.x version,</p> <p>NOTE: x is the minor release number for the release</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 4.0</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-4.1/","title":"Upgrade to 4.1","text":""},{"location":"Upgrade-Guide/upgrade-to-4.1/#upgrade-procedure-to-gluster-41-from-gluster-40x-312x-and-310x","title":"Upgrade procedure to Gluster 4.1, from Gluster 4.0.x, 3.12.x, and 3.10.x","text":"<p>NOTE: Upgrade procedure remains the same as with 3.12 and 3.10 releases</p>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#pre-upgrade-notes","title":"Pre-upgrade notes","text":"<ul> <li>Online upgrade is only possible with replicated and distributed replicate volumes</li> <li>Online upgrade is not supported for dispersed or distributed dispersed volumes</li> <li>Ensure no configuration changes are done during the upgrade</li> <li>If you are using geo-replication, please upgrade the slave cluster(s) before upgrading the master</li> <li>Upgrading the servers ahead of the clients is recommended</li> <li>It is recommended to have the same client and server, major versions running eventually</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#online-upgrade-procedure-for-servers","title":"Online upgrade procedure for servers","text":"<p>This procedure involves upgrading one server at a time, while keeping the volume(s) online and client IO ongoing. This procedure assumes that multiple replicas of a replica set, are not part of the same server in the trusted storage pool.</p> <p>ALERT: If there are disperse or, pure distributed volumes in the storage pool being upgraded, this procedure is NOT recommended, use the Offline upgrade procedure instead.</p>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#repeat-the-following-steps-on-each-server-in-the-trusted-storage-pool-to-upgrade-the-entire-pool-to-41-version","title":"Repeat the following steps, on each server in the trusted storage pool, to upgrade the entire pool to 4.1 version:","text":"<ol> <li> <p>Stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd\nsystemctl stop glustereventsd\n</code></pre> </li> <li> <p>Stop all applications that run on this server and access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.)</p> </li> <li> <p>Install Gluster 4.1</p> </li> <li> <p>Ensure that version reflects 4.1.x in the output of,</p> <pre><code>gluster --version\n</code></pre> </li> </ol> <p>NOTE: x is the minor release number for the release</p> <ol> <li> <p>Start glusterd on the upgraded server</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Invoke self-heal on all the gluster volumes by running,</p> <pre><code>for i in `gluster volume list`; do gluster volume heal $i; done\n</code></pre> </li> <li> <p>Verify that there are no heal backlog by running the command for all the volumes,</p> <pre><code>gluster volume heal &lt;volname&gt; info\n</code></pre> </li> </ol> <p>NOTE: Before proceeding to upgrade the next server in the pool it is recommended to check the heal backlog. If there is a heal backlog, it is recommended to wait until the backlog is empty, or, the backlog does not contain any entries requiring a sync to the just upgraded server.</p> <ol> <li>Restart any gfapi based application stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#offline-upgrade-procedure","title":"Offline upgrade procedure","text":"<p>This procedure involves cluster downtime and during the upgrade window, clients are not allowed access to the volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#steps-to-perform-an-offline-upgrade","title":"Steps to perform an offline upgrade:","text":"<ol> <li> <p>On every server in the trusted storage pool, stop all gluster services, either using the command below, or through other means,</p> <pre><code>killall glusterfs glusterfsd glusterd glustereventsd\nsystemctl stop glustereventsd\n</code></pre> </li> <li> <p>Stop all applications that access the volumes via gfapi (qemu, NFS-Ganesha, Samba, etc.), across all servers</p> </li> <li> <p>Install Gluster 4.1, on all servers</p> </li> <li> <p>Ensure that version reflects 4.1.x in the output of the following command on all servers,</p> <pre><code>gluster --version\n</code></pre> <p>NOTE: x is the minor release number for the release</p> </li> <li> <p>Start glusterd on all the upgraded servers</p> <pre><code>glusterd\n</code></pre> </li> <li> <p>Ensure that all gluster processes are online by checking the output of,</p> <pre><code>gluster volume status\n</code></pre> </li> <li> <p>If the glustereventsd service was previously enabled, it is required to start it using the commands below, or, through other means,</p> <pre><code>systemctl start glustereventsd\n</code></pre> </li> <li> <p>Restart any gfapi based application stopped previously in step (2)</p> </li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#post-upgrade-steps","title":"Post upgrade steps","text":"<p>Perform the following steps post upgrading the entire trusted storage pool,</p> <ul> <li>It is recommended to update the op-version of the cluster. Refer, to the op-version section for further details</li> <li>Proceed to upgrade the clients to 4.1 version as well</li> <li>Post upgrading the clients, for replicate volumes, it is recommended to enable the option <code>gluster volume set &lt;volname&gt; fips-mode-rchecksum on</code> to turn off usage of MD5 checksums during healing. This enables running Gluster on FIPS compliant systems.</li> </ul>"},{"location":"Upgrade-Guide/upgrade-to-4.1/#upgrade-procedure-for-clients","title":"Upgrade procedure for clients","text":"<p>Following are the steps to upgrade clients to the 4.1.x version,</p> <p>NOTE: x is the minor release number for the release</p> <ol> <li>Unmount all glusterfs mount points on the client</li> <li>Stop all applications that access the volumes via gfapi (qemu, etc.)</li> <li>Install Gluster 4.1</li> <li>Mount all gluster shares</li> <li>Start any applications that were stopped previously in step (2)</li> </ol>"},{"location":"Upgrade-Guide/upgrade-to-5/","title":"Upgrade to 5","text":""},{"location":"Upgrade-Guide/upgrade-to-5/#upgrade-procedure-to-gluster-5-from-gluster-41x-40x-312x-and-310x","title":"Upgrade procedure to Gluster 5, from Gluster 4.1.x, 4.0.x, 3.12.x and 3.10.x","text":"<p>NOTE: Upgrade procedure remains the same as with 4.1 release</p> <p>Refer, to the Upgrading to 4.1 guide and follow documented instructions, replacing 5 when you encounter 4.1 in the guide as the version reference.</p>"},{"location":"Upgrade-Guide/upgrade-to-5/#major-issues","title":"Major issues","text":"<ol> <li> <p>The following options are removed from the code base and require to be unset     before an upgrade from releases older than release 4.1.0,</p> <ul> <li>features.lock-heal</li> <li>features.grace-timeout</li> </ul> </li> </ol> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-6/","title":"Upgrade to 6","text":""},{"location":"Upgrade-Guide/upgrade-to-6/#upgrade-procedure-to-gluster-6-from-gluster-5x-41x-and-312x","title":"Upgrade procedure to Gluster 6, from Gluster 5.x, 4.1.x, and 3.12.x","text":"<p>We recommend reading the release notes for 6.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Upgrade procedure remains the same as with 4.1.x release</p> <p>Refer, to the Upgrading to 4.1 guide and follow documented instructions, replacing 6 when you encounter 4.1 in the guide as the version reference.</p>"},{"location":"Upgrade-Guide/upgrade-to-6/#major-issues","title":"Major issues","text":"<ol> <li> <p>The following options are removed from the code base and require to be unset     before an upgrade from releases older than release 4.1.0,</p> <ul> <li>features.lock-heal</li> <li>features.grace-timeout</li> </ul> </li> </ol> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-6/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>With this release of Gluster, the following xlator/features are deprecated and are not available in the distribution specific packages. If any of these xlators or features are in use, refer to instructions on steps needed pre-upgrade to plan for an upgrade to this release.</p>"},{"location":"Upgrade-Guide/upgrade-to-6/#stripe-volume","title":"Stripe volume","text":"<p>Stripe xlator, provided the ability to stripe data across bricks. This functionality was used to create and support files larger than a single brick and also to provide better disk utilization across large file IO, by spreading the IO blocks across bricks and hence physical disks.</p> <p>This functionality is now provided by the shard xlator.</p> <p>There is no in place upgrade feasible for volumes using the stripe feature, and users are encouraged to migrate their data from existing stripe based volumes to sharded volumes.</p>"},{"location":"Upgrade-Guide/upgrade-to-6/#tier-volume","title":"Tier volume","text":"<p>Tier feature is no longer supported with this release. There is no replacement for the tiering feature as well.</p> <p>Volumes using the existing Tier feature need to be converted to regular volumes before upgrading to this release.</p> <p>Command reference:</p> <pre><code>volume tier &lt;VOLNAME&gt; detach &lt;start|stop|status|commit|[force]&gt;\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-6/#other-miscellaneous-features","title":"Other miscellaneous features","text":"<ul> <li>BD xlator</li> <li>glupy</li> </ul> <p>The above translators were not supported in previous versions as well, but users had an option to create volumes using these features. If such volumes were in use, data from the same need to me migrated into a new volume without the feature, before upgrading the clusters.</p>"},{"location":"Upgrade-Guide/upgrade-to-7/","title":"Upgrade to 7","text":""},{"location":"Upgrade-Guide/upgrade-to-7/#upgrade-procedure-to-gluster-7-from-gluster-6x-5x-41x-and-312x","title":"Upgrade procedure to Gluster 7, from Gluster 6.x, 5.x, 4.1.x, and 3.12.x","text":"<p>We recommend reading the release notes for 7.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Upgrade procedure remains the same as with 4.1.x release</p> <p>Refer, to the Upgrading to 4.1 guide and follow documented instructions, replacing 7 when you encounter 4.1 in the guide as the version reference.</p> <p>NOTE: If you have ever enabled quota on your volumes then after the upgrade is done, you will have to restart all the nodes in the cluster one by one so as to fix the checksum values in the quota.cksum file under the <code>/var/lib/glusterd/vols/&lt;volname&gt;/ directory.</code> The peers may go into <code>Peer rejected</code> state while doing so but once all the nodes are rebooted everything will be back to normal.</p>"},{"location":"Upgrade-Guide/upgrade-to-7/#major-issues","title":"Major issues","text":"<ol> <li> <p>The following options are removed from the code base and require to be unset     before an upgrade from releases older than release 4.1.0,</p> <ul> <li>features.lock-heal</li> <li>features.grace-timeout</li> </ul> </li> </ol> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-7/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>If you are upgrading from a release prior to release-6 be aware of deprecated xlators and functionality.</p>"},{"location":"Upgrade-Guide/upgrade-to-8/","title":"Upgrade procedure to Gluster 8, from Gluster 7.x, 6.x and 5.x","text":"<p>We recommend reading the release notes for 8.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Before following the generic upgrade procedure checkout the \"Major Issues\" section given below.</p> <p>With version 8, there are certain changes introduced to the directory structure of changelog files in gluster geo-replication. Thus, before the upgrade of geo-rep packages, we need to execute the upgrade script with the brick path as argument, as described below:</p> <ol> <li>Stop the geo-rep session</li> <li>Run the upgrade script with the brick path as the argument. Script can be used in loop for multiple bricks.</li> <li>Start the upgradation process.     This script will update the existing changelog directory structure and the paths inside the htime files to a new format introduced in version 8.     If the above mentioned script is not executed, the search algorithm, used during the history crawl will fail with the wrong result for upgradation from version 7 and below to version 8 and above.</li> </ol> <p>Refer, to the generic upgrade procedure guide and follow documented instructions.</p>"},{"location":"Upgrade-Guide/upgrade-to-8/#major-issues","title":"Major issues","text":""},{"location":"Upgrade-Guide/upgrade-to-8/#the-following-options-are-removed-from-the-code-base-and-require-to-be-unset","title":"The following options are removed from the code base and require to be unset","text":"<p>before an upgrade from releases older than release 4.1.0,</p> <pre><code>- features.lock-heal\n- features.grace-timeout\n</code></pre> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-8/#make-sure-you-are-not-using-any-of-the-following-depricated-features","title":"Make sure you are not using any of the following depricated features :","text":"<pre><code>- Block device (bd) xlator\n- Decompounder feature\n- Crypt xlator\n- Symlink-cache xlator\n- Stripe feature\n- Tiering support (tier xlator and changetimerecorder)\n- Glupy\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-8/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>If you are upgrading from a release prior to release-6 be aware of deprecated xlators and functionality.</p>"},{"location":"Upgrade-Guide/upgrade-to-9/","title":"Upgrade procedure to Gluster 9, from Gluster 8.x, 7.x and 6.x","text":"<p>We recommend reading the release notes for 9.0 to be aware of the features and fixes provided with the release.</p> <p>NOTE: Before following the generic upgrade procedure checkout the \"Major Issues\" section given below.</p> <p>Refer, to the generic upgrade procedure guide and follow documented instructions.</p>"},{"location":"Upgrade-Guide/upgrade-to-9/#major-issues","title":"Major issues","text":""},{"location":"Upgrade-Guide/upgrade-to-9/#the-following-options-are-removed-from-the-code-base-and-require-to-be-unset","title":"The following options are removed from the code base and require to be unset","text":"<p>before an upgrade from releases older than release 4.1.0,</p> <pre><code>- features.lock-heal\n- features.grace-timeout\n</code></pre> <p>To check if these options are set use,</p> <pre><code>gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre>"},{"location":"Upgrade-Guide/upgrade-to-9/#make-sure-you-are-not-using-any-of-the-following-deprecated-features","title":"Make sure you are not using any of the following deprecated features :","text":"<pre><code>- Block device (bd) xlator\n- Decompounder feature\n- Crypt xlator\n- Symlink-cache xlator\n- Stripe feature\n- Tiering support (tier xlator and changetimerecorder)\n- Glupy\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"Upgrade-Guide/upgrade-to-9/#deprecated-translators-and-upgrade-procedure-for-volumes-using-these-features","title":"Deprecated translators and upgrade procedure for volumes using these features","text":"<p>If you are upgrading from a release prior to release-6 be aware of deprecated xlators and functionality.</p>"},{"location":"presentations/","title":"Presentations","text":"<p>This is a collection of Gluster presentations from all over the world. We have a slideshare account where most of these presentations are stored.</p>"},{"location":"presentations/#fosdem-2020-brussels-belgium-1st-2nd-february-2020","title":"FOSDEM 2020 @ Brussels, Belgium - 1st &amp; 2nd February 2020","text":"<ul> <li>Evolution of path based Geo-replication in Gluster - Hari Gowtham</li> <li>A 'Thin Arbiter' for glusterfs replication - Ravishankar N</li> </ul>"},{"location":"presentations/#fosdem-2017-brussels-belgium-february-5-2017","title":"FOSDEM 2017 @ Brussels, Belgium - February 5, 2017","text":"<ul> <li>GlusterD-2.0: The next generation of GlusterFS management - Kaushal M</li> <li>Gluster Roadmap and Features - Niels de Vos</li> <li>SELinux Support over GlusterFS - Jiffin Tony Thottan</li> <li>Hyper-converged, persistent storage for containers with GlusterFS - Jose Rivera, Mohamed Ashiq Liyazudeen</li> <li>Kubernetes+GlusterFS Lightning Ver. - Jose Rivera, Mohamed Ashiq Liyazudeen</li> </ul>"},{"location":"presentations/#pycon-india-2016-new-delhi-india-september-25-2016","title":"PyCon India 2016 @ New Delhi, India - September 25, 2016","text":"<ul> <li>Python bindings to GlusterFS - a distributed filesystem - Prashanth Pai</li> </ul>"},{"location":"presentations/#openshift-meetup-india-2016-bangalore-india-june-11-2016","title":"Openshift Meetup India 2016 @Bangalore, India - June 11, 2016","text":"<ul> <li>\u201cGlusterFS and Openshift (slideshare)\u201d - Humble Devassy Chirammal, Mohamed Ashiq Liyazudeen</li> </ul>"},{"location":"presentations/#glusterfs-meetup-bangalore-2016-bangalore-india-june-4-2016","title":"GlusterFS Meetup Bangalore 2016 @ Bangalore, India - June 4, 2016","text":"<ul> <li>\u201cGlusterFS Containers (slideshare)\u201d - Humble Devassy Chirammal, Mohamed Ashiq Liyazudeen</li> <li>\"gdeploy 2.0 (slideshare)\" - Sachidananda Urs, Nandaja Varma</li> </ul>"},{"location":"presentations/#openstack-days-istanbul-2016-istanbul-turkey-may-31-2016","title":"OpenStack Days Istanbul  2016 @ Istanbul, Turkey - May 31, 2016","text":"<ul> <li>\u201cBuilding Clouds That Scale-Out with GlusterFS\u201d - Mustafa Resul CETINEL</li> </ul>"},{"location":"presentations/#nluug-voorjaarsconferentie-2016-bunnik-the-netherlands-may-26-2016","title":"NLUUG Voorjaarsconferentie 2016 @ Bunnik, The Netherlands - May 26, 2016","text":"<ul> <li>Replication Techniques in Gluster   (.odp)   (.pdf) - Niels de Vos</li> </ul>"},{"location":"presentations/#vault-2016-raleigh-nc-us-apr-20-21-2016","title":"Vault 2016 @ Raleigh, NC, US - Apr 20-21, 2016","text":"<ul> <li>GlusterD 2.0   (slideshare) - Atin Mukherjee</li> </ul>"},{"location":"presentations/#incontro-devops-italia-2016-bologna-italy-apr-1-2016","title":"Incontro DevOps Italia 2016 @ Bologna, Italy - Apr 1, 2016","text":"<ul> <li>Gluster roadmap, recent improvements and upcoming features slideshare Vimeo recording - Niels de Vos</li> </ul>"},{"location":"presentations/#linuxconfau-2016-geelong-australia-feb-03-2016","title":"LinuxConfAU 2016 @ Geelong, Australia - Feb 03, 2016","text":"<ul> <li>GlusterD thread synchronization using Userspace Read Copy Update (URCU)   slideshare - Atin Mukherjee</li> </ul>"},{"location":"presentations/#devconfcz-2016-brno-czech-republic-february-5-2016","title":"DevConf.CZ 2016 @ Brno, Czech Republic - February 5, 2016","text":"<ul> <li>[Ceph, Gluster, Swift : Similarities and differences]   (https://speakerdeck.com/prashanthpai/ceph-gluster-swift-similarities-and-differences) - Prashanth Pai, Thiago da Silva</li> </ul>"},{"location":"presentations/#fosdem-2016-brussels-belgium-january-30-2016","title":"FOSDEM 2016 @ Brussels, Belgium - January 30, 2016","text":"<ul> <li>Gluster roadmap: Recent improvements and upcoming features   slideshare - Niels de Vos</li> </ul>"},{"location":"presentations/#t-dose-2015-eindhoven-the-netherlands-nov-28-2015","title":"T-DOSE 2015 @ Eindhoven, The Netherlands - Nov 28, 2015","text":"<ul> <li>Introduction into Scale-out Storage with Gluster   slideshare - Niels de Vos</li> </ul>"},{"location":"presentations/#usenix-lisa-2015-washington-dc-usa-nov-8-2015","title":"Usenix LISA 2015 @ Washington DC, USA - Nov 8, 2015","text":"<ul> <li>GlusterFS Tutorial - Architecture -   Rajesh Joseph &amp; Poornima Gurusiddaiah</li> <li>GlusterFS Tutorial - Hands-on -   Rajesh Joseph &amp; Poornima Gurusiddaiah</li> </ul>"},{"location":"presentations/#open-source-backup-conference-cologne-germany-september-30-2015","title":"Open Source Backup Conference @ Cologne, Germany - September 30, 2015","text":"<ul> <li>Scale-Out backups with Bareos and Gluster   (slideshare) - Niels de Vos</li> </ul>"},{"location":"presentations/#2015-storage-developer-conference","title":"2015 Storage Developer Conference","text":"<ul> <li> <p>Achieving Coherent and Aggressive Client Caching in Gluster, a Distributed System   pdf - Poornima Gurusiddaiah, Soumya Koduri</p> </li> <li> <p>Introduction to Highly Available NFS Server on Scale-Out Storage Systems Based on GlusterFS   slideshare - Soumya Koduri, Meghana Madhusudhan</p> </li> </ul>"},{"location":"presentations/#gluster-summit-2015-barcelona-spain","title":"Gluster Summit 2015 @ Barcelona, Spain","text":"<ul> <li>Bug Triage in Gluster -   Niels de Vos</li> <li>Responsibilities of Gluster Maintainers -   Niels de Vos</li> <li>Leases and caching -   Poornima Gurusiddaiah &amp; Soumya Koduri</li> <li>Cache tiering in GlusterFS and future directions - Dan Lambright</li> <li>Yet Another Deduplication Library (YADL) - Dan Lambright</li> </ul>"},{"location":"presentations/#gluster-conference-nmamit-nitte-apr-11-2015","title":"Gluster Conference @ NMAMIT, Nitte - Apr 11, 2015","text":"<ul> <li>Introduction to Open Source - Niels de Vos, Red Hat</li> <li>Software Defined Storage - Dan Lambright, Red Hat</li> <li>Introduction to GlusterFS - Kaleb S. KEITHLEY, Red Hat</li> <li>Data Deduplication - Joseph Fernandes, Red Hat</li> <li>Quality of Service - Karthik US &amp; Sukumar Poojary, 4th SEM, MCA, NMAMIT, Nitte</li> </ul>"},{"location":"presentations/#ceph-gluster-fs-software-defined-storage-meetup-jan-22-2015","title":"Ceph &amp; Gluster FS - Software Defined Storage Meetup - Jan 22, 2015","text":"<ul> <li>GlusterFS - Current Features &amp; Roadmap -   Niels de Vos, Red Hat</li> </ul>"},{"location":"presentations/#open-source-storage-for-bigdata-fifth-elephant-event-jun-21-2014","title":"Open source storage for bigdata :Fifth Elephant event - Jun 21, 2014","text":"<ul> <li>GlusterFS_Hadoop_fifth-elephant.odp - Lalatendu Mohanty, Red Hat</li> </ul>"},{"location":"presentations/#red-hat-summit-2014-san-francisco-california-usa-apr-14-17-2014","title":"Red Hat Summit 2014, San Francisco, California, USA - Apr 14-17, 2014","text":"<ul> <li>Red Hat Storage Server Administration Deep Dive -   slideshare -   Dustin Black, Red Hat</li> <li>GlusterFS Stack Diagram</li> </ul>"},{"location":"presentations/#gluster-community-night-amsterdam-the-netherlands-mar-4th-2014","title":"Gluster Community Night, Amsterdam, The Netherlands - Mar 4th, 2014","text":"<ul> <li>GlusterFS for System Administrators -   Niels de Vos, Red Hat</li> </ul>"},{"location":"presentations/#gluster-community-day-london-united-kingdom-oct-29th-2013","title":"Gluster Community Day, London, United Kingdom - Oct 29th, 2013","text":"<ul> <li>Developing Apps and Integrating with GlusterFS - Libgfapi.odp -   Justin Clift, Red Hat</li> </ul>"},{"location":"presentations/#gluster-community-day-linuxcon-europ-2013-edinburgh-united-kingdom-oct-22-24-2013","title":"Gluster Community Day / LinuxCon Europ 2013, Edinburgh, United Kingdom - Oct 22-24, 2013","text":"<ul> <li>GlusterFS Architecture &amp; Roadmap - Vijay Bellur</li> <li>Integrating GlusterFS, qemu and oVirt - Vijay Bellur</li> </ul>"},{"location":"presentations/#gluster-community-day-stockholm-sweden-sep-4th-2013","title":"Gluster Community Day, Stockholm, Sweden - Sep 4th, 2013","text":"<ul> <li>Gluster related development -   Niels de Vos, Red Hat</li> </ul>"},{"location":"presentations/#loadays-belgium-april-6th-2013","title":"LOADays, Belgium - April 6th, 2013","text":"<ul> <li>Glusterfs_for_sysadmins-justin_clift - GlusterFS for   SysAdmins, Justin Clift. For LOADays 2013 conference.</li> </ul>"},{"location":"presentations/#cialug-des-moines-ia-march-21st-2013","title":"CIALUG Des Moines, IA - March 21st, 2013","text":"<ul> <li>Converged infrastruture with oVirt, KVM, and   Gluster -   Theron Conrey, Red Hat</li> </ul>"},{"location":"presentations/#gluster-community-summit-bangalore-march-7-8-2013","title":"Gluster Community Summit, Bangalore - March 7 &amp; 8, 2013","text":"<ul> <li>SMB-GlusterDevMar2013 - Chris Hertel, Red Hat</li> <li>Video recording</li> <li>kkeithley-UFONFS-GlusterSummit - Kaleb Keithley, Red Hat</li> <li>HDFS + GlusterFS integration -   Jay Vyas Video</li> <li>Jointhe_SuperColony-_Feb2013.odp - JMW, Red Hat</li> <li>GlusterFS API Introduction   slideshare   (Jeff Darcy, Red Hat)</li> </ul>"},{"location":"presentations/#gluster-community-workshop-at-cern-in-geneva-february-26-2013","title":"Gluster Community Workshop at CERN in Geneva - February 26, 2013","text":"<ul> <li>Debugging GlusterFS with Wireshark   (additional files),   Niels de Vos</li> </ul>"},{"location":"presentations/#gluster-community-workshop-at-linuxcon-europe-november-8-2012","title":"Gluster Community Workshop at LinuxCon Europe - November 8, 2012","text":"<ul> <li>Gluster for Sysadmins - Dustin Black, Red Hat</li> <li>On-demand_File_Caching_-_Gustavo_Brand -   On-demand File Caching, Gustavo Brand, Scalus Project</li> <li>Gluster_Wireshark_Niels_de_Vos -   Gluster and Wireshark Integration, Niels de Vos, Red Hat</li> <li>Accessing_Gluster_UFO_-_Eco_Willson   Unified File and Object with GlusterFS, Eco Willson, Red Hat</li> <li>Disperse_Xlator_Ramon_Datalab.pdf -   Disperse Translator, Ramon , Datalab</li> <li>State_of_the_Gluster_-_LCEU.pdf   State of the Gluster Community, John Mark Walker, Red Hat</li> <li>QEMU_GlusterFS - QEMU integration   with GlusterFS, Bharata Rao, IBM Linux Technology Center</li> </ul>"},{"location":"presentations/#software-developers-conference-snia-sep-17-2012","title":"Software Developers' Conference (SNIA) - Sep 17, 2012","text":"<ul> <li>Challenges and Futures   slideshare   (Jeff Darcy, Red Hat)</li> </ul>"},{"location":"presentations/#gluster-workshop-at-linuxcon-north-america-aug-28-2012","title":"Gluster Workshop at LinuxCon North America - Aug 28, 2012","text":"<ul> <li>Translator tutorial   slideshare   (Jeff Darcy, Red Hat)</li> <li>Translator example   slideshare   (Jeff Darcy, Red Hat)</li> </ul>"},{"location":"release-notes/","title":"index","text":"<p>Gluster releases are separated into major and minor releases. Major releases typically contain newer functionality (in addition to bug fixes) and minor releases improve the stability of a major releases by providing bug fixes that are found or reported against them.</p> <p>Major releases are made once every 1 year and receive minor updates for the next 12 months, after which they are no longer maintained (or termed EOL (End-Of-Life)).</p> <p>NOTE:</p> <p>From Gluster 10 major release, the release cycle for major releases is changed from 6 months to 1 year. Minor releases will follow every alternate month for a period of 12 months.</p> <p>Like wise minor releases of the previous major version will happen every three months.</p> <p>Detailed release schedule here</p>"},{"location":"release-notes/#release-notes","title":"Release Notes","text":""},{"location":"release-notes/#glusterfs-selinux-release-notes","title":"GlusterFS seLinux release notes","text":"<ul> <li>2.0.1</li> </ul>"},{"location":"release-notes/#glusterfs-11-release-notes","title":"GlusterFS 11 release notes","text":"<ul> <li>11.0</li> </ul>"},{"location":"release-notes/#glusterfs-10-release-notes","title":"GlusterFS 10 release notes","text":"<ul> <li>10.1</li> <li>10.0</li> <li>10.2</li> <li>10.3</li> <li>10.4</li> </ul>"},{"location":"release-notes/#glusterfs-9-release-notes","title":"GlusterFS 9 release notes","text":"<ul> <li>9.6</li> <li>9.5</li> <li>9.4</li> <li>9.3</li> <li>9.2</li> <li>9.1</li> <li>9.0</li> </ul>"},{"location":"release-notes/#glusterfs-8-release-notes","title":"GlusterFS 8 release notes","text":"<ul> <li>8.6</li> <li>8.5</li> <li>8.4</li> <li>8.3</li> <li>8.2</li> <li>8.1</li> <li>8.0</li> </ul>"},{"location":"release-notes/#glusterfs-7-release-notes","title":"GlusterFS 7 release notes","text":"<ul> <li>7.9</li> <li>7.8</li> <li>7.7</li> <li>7.6</li> <li>7.5</li> <li>7.4</li> <li>7.3</li> <li>7.2</li> <li>7.1</li> <li>7.0</li> </ul>"},{"location":"release-notes/#glusterfs-6-release-notes","title":"GlusterFS 6 release notes","text":"<ul> <li>6.10</li> <li>6.9</li> <li>6.8</li> <li>6.7</li> <li>6.6</li> <li>6.5</li> <li>6.4</li> <li>6.3</li> <li>6.2</li> <li>6.1</li> <li>6.0</li> </ul>"},{"location":"release-notes/#glusterfs-5-release-notes","title":"GlusterFS 5 release notes","text":"<ul> <li>5.13</li> <li>5.12</li> <li>5.11</li> <li>5.10</li> <li>5.9</li> <li>5.8</li> <li>5.6</li> <li>5.5</li> <li>5.3</li> <li>5.2</li> <li>5.1</li> <li>5.0</li> </ul>"},{"location":"release-notes/#glusterfs-41-release-notes","title":"GlusterFS 4.1 release notes","text":"<ul> <li>4.1.10</li> <li>4.1.9</li> <li>4.1.8</li> <li>4.1.7</li> <li>4.1.6</li> <li>4.1.5</li> <li>4.1.4</li> <li>4.1.3</li> <li>4.1.2</li> <li>4.1.1</li> <li>4.1.0</li> </ul>"},{"location":"release-notes/#glusterfs-40-release-notes","title":"GlusterFS 4.0 release notes","text":"<ul> <li>4.0.2</li> <li>4.0.1</li> <li>4.0.0</li> </ul>"},{"location":"release-notes/#glusterfs-313-release-notes","title":"GlusterFS 3.13 release notes","text":"<ul> <li>3.13.2</li> <li>3.13.1</li> <li>3.13.0</li> </ul>"},{"location":"release-notes/#glusterfs-312-release-notes","title":"GlusterFS 3.12 release notes","text":"<ul> <li>3.12.15</li> <li>3.12.14</li> <li>3.12.13</li> <li>3.12.12</li> <li>3.12.11</li> <li>3.12.10</li> <li>3.12.9</li> <li>3.12.8</li> <li>3.12.7</li> <li>3.12.6</li> <li>3.12.5</li> <li>3.12.4</li> <li>3.12.3</li> <li>3.12.2</li> <li>3.12.1</li> <li>3.12.0</li> </ul>"},{"location":"release-notes/#glusterfs-311-release-notes","title":"GlusterFS 3.11 release notes","text":"<ul> <li>3.11.3</li> <li>3.11.2</li> <li>3.11.1</li> <li>3.11.0</li> </ul>"},{"location":"release-notes/#glusterfs-310-release-notes","title":"GlusterFS 3.10 release notes","text":"<ul> <li>3.10.12</li> <li>3.10.11</li> <li>3.10.10</li> <li>3.10.9</li> <li>3.10.8</li> <li>3.10.7</li> <li>3.10.6</li> <li>3.10.5</li> <li>3.10.4</li> <li>3.10.3</li> <li>3.10.2</li> <li>3.10.1</li> <li>3.10.0</li> </ul>"},{"location":"release-notes/#glusterfs-39-release-notes","title":"GlusterFS 3.9 release notes","text":"<ul> <li>3.9.0</li> </ul>"},{"location":"release-notes/#glusterfs-37-release-notes","title":"GlusterFS 3.7 release notes","text":"<ul> <li>3.7.1</li> <li>3.7.0</li> </ul>"},{"location":"release-notes/#glusterfs-36-release-notes","title":"GlusterFS 3.6 release notes","text":"<ul> <li>3.6.3</li> <li>3.6.0</li> </ul>"},{"location":"release-notes/#glusterfs-35-release-notes","title":"GlusterFS 3.5 release notes","text":"<ul> <li>3.5.4</li> <li>3.5.3</li> <li>3.5.2</li> <li>3.5.1</li> <li>3.5.0</li> </ul>"},{"location":"release-notes/10.0/","title":"Release notes for Gluster 10.0","text":"<p>Release date: 16-Nov-2021</p> <p>This is a major release that includes a range of features, code improvements and stability fixes as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Release notes for Gluster 10.0</li> <li>Announcements</li> <li>Builds are available at -</li> <li>Highlights</li> <li>Bugs addressed</li> </ul>"},{"location":"release-notes/10.0/#announcements","title":"Announcements","text":"<ol> <li>Releases that receive maintenance updates post release 10 is 9    (reference)</li> <li>Release 10 will receive maintenance updates around the 15th of every alternative month, and the release 9 will recieve maintainance updates around 15th every three months.</li> </ol>"},{"location":"release-notes/10.0/#builds-are-available-at-","title":"Builds are available at -","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/10/10.0/</p>"},{"location":"release-notes/10.0/#highlights","title":"Highlights","text":"<ul> <li>Major performance improvement of ~20% w.r.t small files   as well as large files testing in controlled lab environments #2771</li> </ul> <p>NOTE: The above improvement requires tcmalloc library to be enabled for building. We have tested and verified tcmalloc in X86_64 platforms and is enabled only for x86_64 builds in current release.</p> <ul> <li>Randomized port selection for bricks, improves startup time #786</li> <li>Performance improvement with use of readdir instead of readdirp in fix-layout #2241</li> <li>Heal time improvement with bigger window size #2067</li> </ul>"},{"location":"release-notes/10.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-10 are listed below.</p> <ul> <li>#504 AFR: remove memcpy() + ntoh32() pattern</li> <li>#705 gf_backtrace_save inefficiencies</li> <li>#782 Do not explicitly call strerror(errnum) when logging</li> <li>#786 glusterd-pmap binds to 10K ports on startup (using IPv4)</li> <li>#904 [bug:1649037] Translators allocate too much memory in their xlator_</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1002 [bug:1679998] GlusterFS can be improved</li> <li>#1052 [bug:1693692] Increase code coverage from regression tests</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1096 [bug:1622665] clang-scan report: glusterfs issues</li> <li>#1101 [bug:1813029] volume brick fails to come online because other proce</li> <li>#1251 performance: improve __afr_fd_ctx_get() function</li> <li>#1339 Rebalance status is not shown correctly after node reboot</li> <li>#1358 features/shard: wrong \"inode-&gt;ref\" leading to ASSERT in inode_unref</li> <li>#1359 Cleanup --disable-mempool</li> <li>#1380 fd_unref() optimization - do an atomic decrement outside the lock a</li> <li>#1384 mount glusterfs volume, files larger than 64Mb only show 64Mb</li> <li>#1406 shared storage volume fails to mount in ipv6 environment</li> <li>#1415 Removing problematic language in geo-replication</li> <li>#1423 shard_make_block_abspath() should be called with a string of of the</li> <li>#1536 Improve dict_reset() efficiency</li> <li>#1545 fuse_invalidate_entry() - too many repetitive calls to uuid_utoa()</li> <li>#1583 Rework stats structure (xl-&gt;stats.total.metrics[fop_idx] and friend</li> <li>#1584 MAINTAINERS file needs to be revisited and updated</li> <li>#1596 'this' NULL check relies on 'THIS' not being NULL</li> <li>#1600 Save and re-use MYUUID</li> <li>#1678 Improve gf_error_to_errno() and gf_errno_to_error() positive flow</li> <li>#1695 Rebalance has a redundant lookup operation</li> <li>#1702 Move GF_CLIENT_PID_GSYNCD check to start of the function.</li> <li>#1703 Remove trivial check for GF_XATTR_SHARD_FILE_SIZE before calling sh</li> <li>#1707 PL_LOCAL_GET_REQUESTS access the dictionary twice for the same info</li> <li>#1717 glusterd: sequence of rebalance and replace/reset-brick presents re</li> <li>#1723 DHT: further investigation for treating an ongoing mknod's linkto file</li> <li>#1749 brick-process: call 'notify()' and 'fini()' of brick xlators in a p</li> <li>#1755 Reduce calls to 'THIS' in fd_destroy() and others, where 'THIS' is</li> <li>#1761 CONTRIBUTING.md regression can only be run by maintainers</li> <li>#1764 Slow write on ZFS bricks after healing millions of files due to add</li> <li>#1772 build: add LTO as a configure option</li> <li>#1773 DHT/Rebalance - Remove unused variable dht_migrate_file</li> <li>#1779 Add-brick command should check hostnames with bricks present in vol</li> <li>#1825 Latency in io-stats should be in nanoseconds resolution, not micros</li> <li>#1872 Question: How to check heal info without glusterd management layer</li> <li>#1885 __posix_writev() - reduce memory copies and unneeded zeroing</li> <li>#1888 GD_OP_VERSION needs to be updated for release-10</li> <li>#1898 schedule_georep.py resulting in failure when used with python3</li> <li>#1909 core: Avoid several dict OR key is NULL message in brick logs</li> <li>#1925 dht_pt_getxattr does not seem to handle virtual xattrs.</li> <li>#1935 logging to syslog instead of any glusterfs logs</li> <li>#1943 glusterd-volgen: Add functionality to accept any custom xlator</li> <li>#1952 posix-aio: implement GF_FOP_FSYNC</li> <li>#1959 Broken links in the 2 replicas split-brain-issue - [Bug]Enhancemen</li> <li>#1960 Add missing LOCK_DESTROY() calls</li> <li>#1966 Can't print trace details due to memory allocation issues</li> <li>#1977 Inconsistent locking in presence of disconnects</li> <li>#1978 test case ./tests/bugs/core/bug-1432542-mpx-restart-crash.t is gett</li> <li>#1981 Reduce posix_fdstat() calls in IO paths</li> <li>#1991 mdcache: bug causes getxattr() to report ENODATA when fetching samb</li> <li>#1992 dht: var decommission_subvols_cnt becomes invalid when config is up</li> <li>#1996 Analyze if spinlocks have any benefit and remove them if not</li> <li>#2001 Error handling in /usr/sbin/gluster-eventsapi produces AttributeErr</li> <li>#2005 ./tests/bugs/replicate/bug-921231.t is continuously failing</li> <li>#2013 dict_t hash-calculation can be removed when hash_size=1</li> <li>#2024 Remove gfs_id variable or at least set to appropriate value</li> <li>#2025 list_del() should not set prev and next</li> <li>#2033 tests/bugs/nfs/bug-1053579.t fails on CentOS 8</li> <li>#2038 shard_unlink() fails due to no space to create marker file</li> <li>#2039 Do not allow POSIX IO backend switch when the volume is running</li> <li>#2042 mount ipv6 gluster volume with serveral backup-volfile-servers,use</li> <li>#2052 Revert the commit 50e953e2450b5183988c12e87bdfbc997e0ad8a8</li> <li>#2054 cleanup call_stub_t from unused variables</li> <li>#2063 Provide autoconf option to enable/disable storage.linux-io_uring du</li> <li>#2067 Change self-heal-window-size to 1MB by default</li> <li>#2075 Annotate synctasks with valgrind API if --enable-valgrind[=memcheck</li> <li>#2080 Glustereventsd default port</li> <li>#2083 GD_MSG_DICT_GET_FAILED should not include 'errno' but 'ret'</li> <li>#2086 Move tests/00-geo-rep/00-georep-verify-non-root-setup.t to tests/00</li> <li>#2096 iobuf_arena structure doesn't need passive and active iobufs, but l</li> <li>#2099 'force' option does not work in the replicated volume snapshot crea</li> <li>#2101 Move 00-georep-verify-non-root-setup.t back to tests/00-geo-rep/</li> <li>#2107 mount crashes when setfattr -n distribute.fix.layout -v \"yes\" is ex</li> <li>#2116 enable quota for multiple volumes take more time</li> <li>#2117 Concurrent quota enable causes glusterd deadlock</li> <li>#2123 Implement an I/O framework</li> <li>#2129 CID 1445996 Null pointer dereferences (FORWARD_NULL) /xlators/mgmt/</li> <li>#2130 stack.h/c: remove unused variable and reorder struct</li> <li>#2133 Changelog History Crawl failed after resuming stopped geo-replicati</li> <li>#2134 Fix spurious failures caused by change in profile info duration to</li> <li>#2138 glfs_write() dumps a core file file when buffer size is 1GB</li> <li>#2154 \"Operation not supported\" doing a chmod on a symlink</li> <li>#2159 Remove unused component tests</li> <li>#2161 Crash caused by memory corruption</li> <li>#2169 Stack overflow when parallel-readdir is enabled</li> <li>#2180 CID 1446716: Memory - illegal accesses (USE_AFTER_FREE) /xlators/mg</li> <li>#2187 [Input/output error] IO failure while performing shrink operation w</li> <li>#2190 Move a test case tests/basic/glusterd-restart-shd-mux.t to flaky</li> <li>#2192 4+1 arbiter setup is broken</li> <li>#2198 There are blocked inodelks for a long time</li> <li>#2216 Fix coverity issues</li> <li>#2232 \"Invalid argument\" when reading a directory with gfapi</li> <li>#2234 Segmentation fault in directory quota daemon for replicated volume</li> <li>#2239 rebalance crashes in dht on master</li> <li>#2241 Using readdir instead of readdirp for fix-layout increases performa</li> <li>#2253 Disable lookup-optimize by default in the virt group</li> <li>#2258 Provide option to disable fsync in data migration</li> <li>#2260 failed to list quota info after setting limit-usage</li> <li>#2268 dht_layout_unref() only uses 'this' to check that 'this-&gt;private' i</li> <li>#2278 nfs-ganesha does not start due to shared storage not ready, but ret</li> <li>#2287 runner infrastructure fails to provide platfrom independent error c</li> <li>#2294 dict.c: remove some strlen() calls if using DICT_LIST_IMP</li> <li>#2308 Developer sessions for glusterfs</li> <li>#2313 Long setting names mess up the columns and break parsing</li> <li>#2317 Rebalance doesn't migrate some sparse files</li> <li>#2328 \"gluster volume set  group samba\" needs to include write-b <li>#2330 gf_msg can cause relock deadlock</li> <li>#2334 posix_handle_soft() is doing an unnecessary stat</li> <li>#2337 memory leak observed in lock fop</li> <li>#2348 Gluster's test suite on RHEL 8 runs slower than on RHEL 7</li> <li>#2351 glusterd: After upgrade on release 9.1 glusterd protocol is broken</li> <li>#2353 Permission issue after upgrading to Gluster v9.1</li> <li>#2360 extras: postscript fails on logrotation of snapd logs</li> <li>#2364 After the service is restarted, a large number of handles are not r</li> <li>#2370 glusterd: Issues with custom xlator changes</li> <li>#2378 Remove sys_fstatat() from posix_handle_unset_gfid() function - not</li> <li>#2380 Remove sys_lstat() from posix_acl_xattr_set() - not needed</li> <li>#2388 Geo-replication gets delayed when there are many renames on primary</li> <li>#2394 Spurious failure in tests/basic/fencing/afr-lock-heal-basic.t</li> <li>#2398 Bitrot and scrub process showed like unknown in the gluster volume</li> <li>#2404 Spurious failure of tests/bugs/ec/bug-1236065.t</li> <li>#2407 configure glitch with CC=clang</li> <li>#2410 dict_xxx_sizen variant compilation should fail on passing a variabl</li> <li>#2414 Prefer mallinfo2() to mallinfo() if available</li> <li>#2421 rsync should not try to sync internal xattrs.</li> <li>#2429 Use file timestamps with nanosecond precision</li> <li>#2431 Drop --disable-syslog configuration option</li> <li>#2440 Geo-replication not working on Ubuntu 21.04</li> <li>#2443 Core dumps on Gluster 9 - 3 replicas</li> <li>#2446 client_add_lock_for_recovery() - new_client_lock() should be called</li> <li>#2467 failed to open /proc/0/status: No such file or directory</li> <li>#2470 sharding: [inode.c:1255:__inode_unlink] 0-inode: dentry not found</li> <li>#2480 Brick going offline on another host as well as the host which reboo</li> <li>#2502 xlator/features/locks/src/common.c has code duplication</li> <li>#2507 Use appropriate msgid in gf_msg()</li> <li>#2515 Unable to mount the gluster volume using fuse unless iptables is fl</li> <li>#2522 ganesha_ha (extras/ganesha/ocf): ganesha_grace RA fails in start()</li> <li>#2540 delay-gen doesn't work correctly for delays longer than 2 seconds</li> <li>#2551 Sometimes the lock notification feature doesn't work</li> <li>#2581 With strict-locks enabled clients which are holding posix locks sti</li> <li>#2590 trusted.io-stats-dump extended attribute usage description error</li> <li>#2611 Granular entry self-heal is taking more time than full entry self h</li> <li>#2617 High CPU utilization of thread glfs_fusenoti and huge delays in som</li> <li>#2620 Granular entry heal purging of index name trigger two lookups in th</li> <li>#2625 auth.allow value is corrupted after add-brick operation</li> <li>#2626 entry self-heal does xattrops unnecessarily in many cases</li> <li>#2649 glustershd failed in bind with error \"Address already in use\"</li> <li>#2652 Removal of deadcode: Pump</li> <li>#2659 tests/basic/afr/afr-anon-inode.t crashed</li> <li>#2664 Test suite produce uncompressed logs</li> <li>#2693 dht: dht_local_wipe is crashed while running rename operation</li> <li>#2771 Smallfile improvement in glusterfs</li> <li>#2782 Glustereventsd does not listen on IPv4 when IPv6 is not available</li> <li>#2789 An improper locking bug(e.g., deadlock) on the lock up_inode_ctx-&gt;c</li> <li>#2798 FUSE mount option for localtime-logging is not exposed</li> <li>#2816 Glusterfsd memory leak when subdir_mounting a volume</li> <li>#2835 dht: found anomalies in dht_layout after commit c4cbdbcb3d02fb56a62</li> <li>#2857 variable twice initialization.</li>"},{"location":"release-notes/10.1/","title":"Release notes for Gluster 10.1","text":"<p>Release date: 1st-Feb-2022</p> <p>This is a bugfix and improvement release. The release notes for 10.0 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 10 stable release.</p> <p>NOTE:</p> <ul> <li> <p>Next minor release tentative date: Week of 15th May, 2022   (As published in the Gluster Community Meeting, Release 10 will have updates every 3 months now on)</p> </li> <li> <p>Users are highly encouraged to upgrade to newer releases of GlusterFS.</p> </li> </ul>"},{"location":"release-notes/10.1/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Fix missing stripe count issue with upgrade from 9.x to 10.x</li> <li>Fix IO failure when shrinking distributed dispersed volume with ongoing IO</li> <li>Fix log spam introduced with glusterfs 10.0</li> <li>Enable ltcmalloc_minimal instead of ltcmalloc</li> </ul>"},{"location":"release-notes/10.1/#builds-are-available-at-","title":"Builds are available at -","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/10/10.1/</p>"},{"location":"release-notes/10.1/#bugs-addressed","title":"Bugs addressed","text":"<ul> <li>#2846 Avoid redundant logs in gluster</li> <li>#2903 Fix worker disconnect due to AttributeError in geo-replication</li> <li>#2910 Check for available ports in port_range in glusterd</li> <li>#2939 Remove the deprecated commands from gluster man page</li> <li>#2947 Fix IO failure when shrinking distributed dispersed volume with ongoing IO</li> <li>#3071 Fix log spam introduced with glusterfs 10.0</li> <li>#3000 Enable ltcmalloc_minimal instead of ltcmalloc</li> <li>#3086 Handle excessive log in case dict is NUL</li> <li>#3133 Fix missing stripe count issue with upgrade from 9.x to 10.x</li> <li>#2962 Fix volume create failures without disperse count and ip addresses</li> </ul>"},{"location":"release-notes/10.2/","title":"Release notes for Gluster 10.2","text":"<p>This is a bugfix and improvement release. The release notes for 10.0 and 10.1 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 10 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 15th Nov, 2022</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/10.2/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Optimize server functionality by enhancing server_process_event_upcall code path during the handling of upcall event</li> <li>Fix all bricks not starting issue on node reboot when brick count is high(&gt;750)</li> <li>Fix stale posix locks that appear after client disconnection</li> </ul>"},{"location":"release-notes/10.2/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/10/10.2/</p>"},{"location":"release-notes/10.2/#bugs-addressed","title":"Bugs addressed","text":"<ul> <li>#3182 Fix stale posix locks that appear after client disconnection</li> <li>#3187 Fix Locks xlator fd leaks</li> <li>#3234 Fix incorrect directory check inorder to successfully locate the SSL certificate</li> <li>#3262 Synchronize layout(ref|unref) during layout(get|set) in dht</li> <li>#3321 Optimize server functionality by enhancing server_process_event_upcall code path during the handling of upcall event</li> <li>#3334 Fix errors and timeouts when creating qcow2 file via libgfapi</li> <li>#3375 Fix all bricks not starting issue on node reboot when brick count is high(&gt;750)</li> <li>#3417 Fix crash due to unaligned memory access</li> <li>#3470 Fix spurious crash when \"peer probing\" a non existing host name</li> </ul>"},{"location":"release-notes/10.3/","title":"Release notes for Gluster 10.3","text":"<p>Release date: 27th-Sep-2022</p> <p>This is a bugfix release. The release notes for 10.0, 10.1 and 10.2 contain a listing of all the new improvements and bugs fixed in the GlusterFS 10 stable release.</p> <p>NOTE: - Next minor release tentative date: Week of 25th Mar, 2022 - Users are highly encouraged to upgrade to newer releases of GlusterFS.</p>"},{"location":"release-notes/10.3/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Fix qemu-img crash on a distributed volume</li> <li>Fix a possible deadlock scenario In Brick Process</li> <li>Allow opening snapshot directory(entrypoint) via glfs_open()/glfs_h_open() and snapshot directory(entrypoint) to support functionalities of Samba</li> <li>Implement seek fop in DHT and prevent EBADFD related failures</li> </ul>"},{"location":"release-notes/10.3/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/10/10.3/</p>"},{"location":"release-notes/10.3/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#1000 Fix qemu-img crash on a distributed volume</li> <li>#3774 Fix a possible deadlock scenario In Brick Process</li> <li>#3373 Implement seek fop in DHT and prevent EBADFD related failures</li> <li>#3666 Prevent snapd crashes on opening snapshot directory via gfapi</li> <li>#3765 Allow opening snapshot directory(entrypoint) via glfs_open()/glfs_h_open()</li> <li>#3307 Fix return from glfs_open() to honour O_DIRECTORY flag for Samba</li> <li>#3725 Fix mismatch in errorcode between fgetxattr() and glusterfs.get_real_filename</li> <li>#3778 Handle spurious failures of spare_file_rebalance.t test case</li> </ul>"},{"location":"release-notes/10.4/","title":"Release notes for Gluster 10.4","text":"<p>Release date: 27th-Apr-2023</p> <p>This is a bugfix release. The release notes for 10.0, 10.1, 10.2 and 10.3 contain a listing of all the new improvements and bugs fixed in the GlusterFS 10 stable release.</p> <p>NOTE: - Next minor release tentative date: Week of 25th Sep, 2023 - Users are highly encouraged to upgrade to newer releases of GlusterFS.</p>"},{"location":"release-notes/10.4/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Fix fuse concurrency problems</li> <li>Fix memory corruption in debug builds</li> <li>Fix recovery issue with posix locks upon reconnection of a disconnected brick</li> </ul>"},{"location":"release-notes/10.4/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/10/10.4/</p>"},{"location":"release-notes/10.4/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#1000 configure: Force 'char' type to be signed in order to eliminate anomalies</li> <li>#2752 posix: Fix directory gfid handle if a rename fails</li> <li>#3345 Fix inconsistencies in big-endian architectures of hashfn</li> <li>#3346 Fix stack overflow when processing glx_dir(p) list structures in xdr</li> <li>#3882 Fix deadlock in gf_print_trace of sys_log</li> <li>#3901 Fix segmentaion fault in io-stats xlator</li> <li>#3954 Fix stack-buffer-overflow according to AddressSanitizer</li> <li>#4020 Improve regression test suite</li> <li>#4029 Process stuck listing snapshots from NFS</li> <li>#4031 Fix Input/Output error when using linux-aio on big-endean architectures</li> <li>#4042 Fix recovery issue with posix locks upon reconnection of a disconnected brick</li> <li>#4071 Make timestamps of .snap directory stable</li> <li>#3894 Use opendir for directories in glfs_open and glfs_h_open of api</li> <li>#3636 Enable posix xlator to consider storage.reserve val</li> </ul>"},{"location":"release-notes/11.0/","title":"Release notes for Gluster 11.0","text":"<p>Release date: 14th-Feb-2023</p> <p>This is a major release that includes a range of features, code improvements and stability fixes as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Highlights</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/11.0/#announcements","title":"Announcements","text":"<ol> <li>Releases that receive maintenance updates post release 11 is 10 (reference)</li> <li>Release 10 and 11 will receive maintenance updates around 15th of every six months corresponding to thier previous release dates.</li> </ol>"},{"location":"release-notes/11.0/#highlights","title":"Highlights","text":"<ul> <li>Major performance impovement of ~36% with rmdir operations #3685</li> <li>Extension of ZFS support for snapshots #2855</li> <li>Qouta implimentation based on namespace #1750</li> <li>Major cleanups and readdir/readdirp improvements link1 link2</li> </ul>"},{"location":"release-notes/11.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-10 are listed below:</p> <ul> <li>#1831 virtual images in replicated volume are not healed</li> <li>#1459 gluster_shared_storage failed to automount on node reboot on rhel 8</li> <li>#1458 sharding: fanout mknod process into multi threads</li> <li>#1457 systemd unit files missing from Debian 8.1-1 package</li> <li>#1456 virtual images in replicated volume are not healed?</li> <li>#1455 docs.gluster.org is down</li> <li>#1454 Geo-replication gsyncd at 100% CPU</li> <li>#1453 Disperse shd heal activity should be observable</li> <li>#1452 all glusterfs-client crashed at the same time</li> <li>#1451 Add details on ssl_setup_connection_params to help troubleshooting</li> <li>#1450 Please consider repackaging/providing dependency package (stubs)</li> <li>#145  Snapshot: improvements</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1002 [bug:1679998] GlusterFS can be improved</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1686 mount-shared-storage.sh issue with systemd-automount</li> <li>#1757 RFE: improve namespace support in glusterfs</li> <li>#1774 RFE: simple-quota implementation</li> <li>#2123 Implement an I/O framework</li> <li>#2164 gf_proc_dump_call_stack() is not printing ctime correctly</li> <li>#2308 Developer sessions for glusterfs</li> <li>#2469 Python syntax error in syncdutils.py</li> <li>#2483 Place holder issue for fixing potential bugs in protocol/client/src</li> <li>#2491 Add s390x support to community CI</li> <li>#2664 Test suite produce uncompressed logs</li> <li>#2717 GlusterFS doesn't support O_PATH flag in open()</li> <li>#2735 Remove byte-order.h and use the normal byteorder functions</li> <li>#2793 cluster.rebal-throttle description doesn't seem to match the code</li> <li>#2832 selinux: make it possible to persist ganesha_use_fusefs from one up</li> <li>#2846 glusterd log filled with error messages.</li> <li>#2903 geo-rep restarts because of 'list' object has no attribute 'join' e</li> <li>#2910 glusterd: volume start doesn't fail with properly if the port range</li> <li>#2912 When glusterfs uses an untrusted domain name\uff0c it cannot update the</li> <li>#2913 gluster lib cannot be dlopened: /lib64/libtcmalloc.so.4: cannot all</li> <li>#2916 Replace SHA deprecated functions with newer ones</li> <li>#2936 Wrong value for <code>inodeSize</code> in Volume status xml output.</li> <li>#2939 Volume log commands 'filename' and 'locate' described in the man bu</li> <li>#2944 tests: valid ip to be used instead of localhost, 127.0.0.1 or loopb</li> <li>#2947 IO failure when shrinking distributed dispersed volume while perfor</li> <li>#2962 cli: volume create without disperse count fails with ip addresses</li> <li>#2963 Do not use an iobuf pool for the CLI</li> <li>#2964 Cleanup the stub pool</li> <li>#2967 Make relevant functions static</li> <li>#2971 core file from /tests/basic/fencing/afr-lock-heal-advanced.t</li> <li>#2973 Allocate socket ioq outside of the out_lock</li> <li>#2975 quick-read: remove unused 'sh-failed' dict_get() function</li> <li>#2986 AFR: reduce variable indirection</li> <li>#2989 GF_ASSERT_AND_GOTO_WITH_ERROR improvements</li> <li>#2997 HA status is in FAILOVER when configuring NFS ganesha with pacemake</li> <li>#2998 Remove old authentication schemes</li> <li>#3004 Use gf_strndup() instead of gf_strdup() when string length is known</li> <li>#3005 multiple files: improve gf_dirent_for_name() functionality</li> <li>#3012 Reduce the impact of Cloudsync on IO path</li> <li>#3054 Update the links in gluster test framework documentation</li> <li>#3066 Online upgrade - 9.x to 10.0</li> <li>#3071 Log spam with glusterfs 10.0</li> <li>#3076 __lease_ctx_set() is not checking correctly for the return code</li> <li>#3103 glusterfs snapd crashes when snapshot is de-activated.</li> <li>#3130 Reduce the number of include statements</li> <li>#3137 Cleanup common include files</li> <li>#3166 bug: Incorrect Mac OS version assertion in configure.</li> <li>#3182 Some stale posix locks appear after a client disconnection</li> <li>#3187 Locks xlator leaks fd's in some cases</li> <li>#3191 dht: Fix double free issue in the cbk function dht_common_mark_mdsx</li> <li>#3194 Log message for RPC clients is misleading because it logs unsigned</li> <li>#3213 Configure geo rep SSH with AES128 encryption - to improve performance</li> <li>#3217 Disperse volume with more than 16 data bricks fails to mount</li> <li>#3228 event-epoll.c: table_idx will always be 0?</li> <li>#3229 handle 'option remote-port' properly in client protocol.</li> <li>#3232 The config for creating /var/run/gluster on boot is missing for glu</li> <li>#3234 SSL certificate wrong default path</li> <li>#3236 nfs: Optimize ctxcount value to reduce memory consumption for nfs-s</li> <li>#3240 dht_revalidate_cbk() needs to trigger directory heal with root perm</li> <li>#3248 fault in gluster command completion</li> <li>#3262 dht: Synchronize layout_(ref|unref) during layout_(get|set) in dht</li> <li>#3264 Posix private struct - reduce size</li> <li>#3288 GFID split brain resolution using favourite-child-policy leads to E</li> <li>#3294 Remove dht_nonblocking_inodelk() - it's not used</li> <li>#3304 CID 1476381: (OVERRUN) @ /rpc/rpc-lib/src/rpc-clnt.c: 249 in __save</li> <li>#3321 server: Optimize server_process_event_upcall code path during handl</li> <li>#3329 mounting with ipv6 hostname leads to failure</li> <li>#3334 Error messages and 20 seconds timeout when creating qcow2 file via</li> <li>#3347 Test Failure: tests/bitrot/bug-1207627-bitrot-scrub-status.t</li> <li>#3359 meta_lookup() and other small improvements to meta xlator</li> <li>#3373 DHT doesn't implement seek fop and causes failures</li> <li>#3375 glusterd: After node reboot not able to start all bricks successful</li> <li>#3382 Dictionary: remove all hash related code</li> <li>#3394 autoupdate - Update a configure.ac to a newer Autoconf</li> <li>#3417 Crash due to unaligned memory access</li> <li>#3426 logging.c small improvements</li> <li>#3469 Improve regression testing</li> <li>#3470 Spurious crash when \"peer probing\" a non existing host name</li> <li>#3507 thin-arbiter-volume.t execute failed</li> <li>#3521 changelog: A brick process is getting crash due to SIGSEGV</li> <li>#3527 Brick process crashed when global thread pool is enabled</li> <li>#3604 is_nfs_export_available check and mount_nfs commands fail in RHEL 8</li> <li>#3636 posix: small storage environment and storage.reserve value</li> <li>#3647 wrong debug log in upcall_cache_invalidate()</li> <li>#3662 Some times Gluster Volume info XML returns wrong <code>distCount</code></li> <li>#3683 dht: Cleanup linkto file by rebalance daemon while (hashed|cached)</li> <li>#3685 dht: Introduce rmdir-optimize option</li> <li>#3688 Infinite loop in dht when lookup fails with ENODATA</li> <li>#3695 test: ./tests/bugs/posix/bug-1651445.t is continuous failing during</li> <li>#3708 ./tests/basic/afr/afr-no-fsync.t is failing on FSYNCDIR, not on FSY</li> <li>#3710 Brick crashes automatically when writing small files</li> <li>#3717 syncop functions: no need to copy iatt structs if you are not going</li> <li>#3729 gf_svc_releasedir() logic error</li> <li>#3750 Bash completion is loaded every time bash starts</li> <li>#3774 Dead Lock In Brick Process</li> <li>#3778 test: Increase timeout for ./tests/basic/distribute/spare_file_reba</li> <li>#3781 Prime time client-only access control</li> <li>#3793 tests/bugs/replicate/bug-1586020-mark-dirty-for-entry-txn-on-quorum</li> <li>#3797 cdc xlator improvements</li> <li>#3823 rfc.sh: cannot detect upstream remote for non english locale</li> <li>#3831 afr: posix lock behavior is not correct while received an interrupt</li> <li>#3836 tests/bugs/glusterd/daemon-log-level-option.t fails on regression</li> <li>#3845 fuse_readdirp_cbk() - minor modifications</li> <li>#3847 gftest build failure</li> <li>#3855 reduce work for memory account</li> <li>#3876 <code>fsetxattr()</code> failed with <code>EBADFD</code> on opened directories</li> <li>#3891 Possible trash can size overflow</li> </ul>"},{"location":"release-notes/3.10.0/","title":"Release notes for Gluster 3.10.0","text":"<p>This is a major Gluster release that includes some substantial changes. The features revolve around, better support in container environments, scaling to larger number of bricks per node, and a few usability and performance improvements, among other bug fixes.</p> <p>The most notable features and changes are documented on this page. A full list of bugs that has been addressed is included further below.</p>"},{"location":"release-notes/3.10.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/3.10.0/#brick-multiplexing","title":"Brick multiplexing","text":"<p>Notes for users: Multiplexing reduces both port and memory usage. It does not improve performance vs. non-multiplexing except when memory is the limiting factor, though there are other related changes that improve performance overall (e.g. compared to 3.9).</p> <p>Multiplexing is off by default. It can be enabled with</p> <pre><code># gluster volume set all cluster.brick-multiplex on\n</code></pre> <p>Limitations: There are currently no tuning options for multiplexing - it's all or nothing. This will change in the near future.</p> <p>Known Issues: The only feature or combination of features known not to work with multiplexing is USS and SSL. Anyone using that combination should leave multiplexing off.</p>"},{"location":"release-notes/3.10.0/#support-to-display-op-version-information-from-clients","title":"Support to display op-version information from clients","text":"<p>Notes for users: To get information on what op-version are supported by the clients, users can invoke the <code>gluster volume status</code> command for clients. Along with information on hostname, port, bytes read, bytes written and number of clients connected per brick, we now also get the op-version on which the respective clients operate. Following is the example usage:</p> <pre><code># gluster volume status &lt;VOLNAME|all&gt; clients\n</code></pre> <p>Limitations:</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#support-to-get-maximum-op-version-in-a-heterogeneous-cluster","title":"Support to get maximum op-version in a heterogeneous cluster","text":"<p>Notes for users: A heterogeneous cluster operates on a common op-version that can be supported across all the nodes in the trusted storage pool. Upon upgrade of the nodes in the cluster, the cluster might support a higher op-version. Users can retrieve the maximum op-version to which the cluster could be bumped up to by invoking the <code>gluster volume get</code> command on the newly introduced global option, <code>cluster.max-op-version</code>. The usage is as follows:</p> <pre><code># gluster volume get all cluster.max-op-version\n</code></pre> <p>Limitations:</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#support-for-rebalance-time-to-completion-estimation","title":"Support for rebalance time to completion estimation","text":"<p>Notes for users: Users can now see approximately how much time the rebalance operation will take to complete across all nodes.</p> <p>The estimated time left for rebalance to complete is displayed as part of the rebalance status. Use the command:</p> <pre><code># gluster volume rebalance &lt;VOLNAME&gt; status\n</code></pre> <p>Limitations: The rebalance process calculates the time left based on the rate at while files are processed on the node and the total number of files on the brick which is determined using statfs. The limitations of this are:</p> <ul> <li> <p>A single fs partition must host only one brick. Multiple bricks on   the same fs partition will cause the statfs results to be invalid.</p> </li> <li> <p>The estimates are dynamic and are recalculated every time the rebalance status   command is invoked.The estimates become more accurate over time so short running   rebalance operations may not benefit.</p> </li> </ul> <p>Known Issues: As glusterfs does not stored the number of files on the brick, we use statfs to guess the number. The .glusterfs directory contents can significantly skew this number and affect the calculated estimates.</p>"},{"location":"release-notes/3.10.0/#separation-of-tier-as-its-own-service","title":"Separation of tier as its own service","text":"<p>Notes for users: This change is to move the management of the tier daemon into the gluster service framework, thereby improving it stability and manageability by the service framework.</p> <p>This has no change to any of the tier commands or user facing interfaces and operations.</p> <p>Limitations:</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#statedump-support-for-gfapi-based-applications","title":"Statedump support for gfapi based applications","text":"<p>Notes for users: gfapi based applications now can dump state information for better trouble shooting of issues. A statedump can be triggered in two ways:</p> <ol> <li>by executing the following on one of the Gluster servers,</li> </ol> <pre><code>   # gluster volume statedump &lt;VOLNAME&gt; client &lt;HOST&gt;:&lt;PID&gt;\n</code></pre> <ul> <li><code>&lt;VOLNAME&gt;</code> should be replaced by the name of the volume</li> <li><code>&lt;HOST&gt;</code> should be replaced by the hostname of the system running the   gfapi application</li> <li> <p><code>&lt;PID&gt;</code> should be replaced by the PID of the gfapi application</p> </li> <li> <p>through calling <code>glfs_sysrq(&lt;FS&gt;, GLFS_SYSRQ_STATEDUMP)</code> within the    application</p> </li> <li> <p><code>&lt;FS&gt;</code> should be replaced by a pointer to a <code>glfs_t</code> structure</p> </li> </ul> <p>All statedumps (<code>*.dump.*</code> files) will be located at the usual location, on most distributions this would be <code>/var/run/gluster/</code>.</p> <p>Limitations: It is not possible to trigger statedumps from the Gluster CLI when the gfapi application has lost its management connection to the GlusterD servers.</p> <p>GlusterFS 3.10 is the first release that contains support for the new <code>glfs_sysrq()</code> function. Applications that include features for debugging will need to be adapted to call this function. At the time of the release of 3.10, no applications are known to call <code>glfs_sysrq()</code>.</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#disabled-creation-of-trash-directory-by-default","title":"Disabled creation of trash directory by default","text":"<p>Notes for users: From now onwards trash directory, namely .trashcan, will not be be created by default upon creation of new volumes unless and until the feature is turned ON and the restrictions on the same will be applicable as long as features.trash is set for a particular volume.</p> <p>Limitations: After upgrade for pre-existing volumes, trash directory will be still present at root of the volume. Those who are not interested in this feature may have to manually delete the directory from the mount point.</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#implemented-parallel-readdirp-with-distribute-xlator","title":"Implemented parallel readdirp with distribute xlator","text":"<p>Notes for users: Currently the directory listing gets slower as the number of bricks/nodes increases in a volume, though the file/directory numbers remain unchanged. With this feature, the performance of directory listing is made mostly independent of the number of nodes/bricks in the volume. Thus scale doesn't exponentially reduce the directory listing performance. (On a 2, 5, 10, 25 brick setup we saw ~5, 100, 400, 450% improvement consecutively)</p> <p>To enable this feature:</p> <pre><code># gluster volume set &lt;VOLNAME&gt; performance.readdir-ahead on\n# gluster volume set &lt;VOLNAME&gt; performance.parallel-readdir on\n</code></pre> <p>To disable this feature:</p> <pre><code># gluster volume set &lt;VOLNAME&gt; performance.parallel-readdir off\n</code></pre> <p>If there are more than 50 bricks in the volume it is good to increase the cache size to be more than 10Mb (default value):</p> <pre><code># gluster volume set &lt;VOLNAME&gt; performance.rda-cache-limit &lt;CACHE SIZE&gt;\n</code></pre> <p>Limitations:</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#md-cache-can-optionally-ve-cache-securityima-xattr","title":"md-cache can optionally -ve cache security.ima xattr","text":"<p>Notes for users: From kernel version 3.X or greater, creating of a file results in removexattr call on security.ima xattr. This xattr is not set on the file unless IMA feature is active. With this patch, removxattr call returns ENODATA if it is not found in the cache.</p> <p>The end benefit is faster create operations where IMA is not enabled.</p> <p>To cache this xattr use,</p> <pre><code># gluster volume set &lt;VOLNAME&gt; performance.cache-ima-xattrs on\n</code></pre> <p>The above option is on by default.</p> <p>Limitations:</p> <p>Known Issues:</p>"},{"location":"release-notes/3.10.0/#added-support-for-cpu-extensions-in-disperse-computations","title":"Added support for CPU extensions in disperse computations","text":"<p>Notes for users: To improve disperse computations, a new way of generating dynamic code targeting specific CPU extensions like SSE and AVX on Intel processors is implemented. The available extensions are detected on run time. This can roughly double encoding and decoding speeds (or halve CPU usage).</p> <p>This change is 100% compatible with the old method. No change is needed if an existing volume is upgraded.</p> <p>You can control which extensions to use or disable them with the following command:</p> <pre><code># gluster volume set &lt;VOLNAME&gt; disperse.cpu-extensions &lt;type&gt;\n</code></pre> <p>Valid  values are: <ul> <li>none: Completely disable dynamic code generation</li> <li>auto: Automatically detect available extensions and use the best one</li> <li>x64: Use dynamic code generation using standard 64 bits instructions</li> <li>sse: Use dynamic code generation using SSE extensions (128 bits)</li> <li>avx: Use dynamic code generation using AVX extensions (256 bits)</li> </ul> <p>The default value is 'auto'. If a value is specified that is not detected on run-time, it will automatically fall back to the next available option.</p> <p>Limitations:</p> <p>Known Issues: To solve a conflict between the dynamic code generator and SELinux, it has been necessary to create a dynamic file on runtime in the directory /usr/libexec/glusterfs. This directory only exists if the server package is installed. On nodes with only the client package installed, this directory won't exist and the dynamic code won't be used.</p> <p>It also needs root privileges to create the file there, so any gfapi application not running as root won't be able to use dynamic code generation.</p> <p>In these cases, disperse volumes will continue working normally but using the old implementation (equivalent to setting disperse.cpu-extensions to none).</p> <p>More information and a discussion on how to solve this can be found here:</p> <p>https://bugzilla.redhat.com/1421649</p>"},{"location":"release-notes/3.10.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.9 are listed below.</p> <ul> <li>#789278: Issues reported by Coverity static analysis tool</li> <li>#1198849: Minor improvements and cleanup for the build system</li> <li>#1211863: RFE: Support in md-cache to use upcall notifications to invalidate its cache</li> <li>#1231224: Misleading error messages on brick logs while creating directory (mkdir) on fuse mount</li> <li>#1234054: `gluster volume heal  split-brain' does not heal if data/metadata/entry self-heal options are turned off <li>#1289922: Implement SIMD support on EC</li> <li>#1290304: [RFE]Reducing number of network round trips</li> <li>#1297182: Mounting with \"-o noatime\" or \"-o noexec\" causes \"nosuid,nodev\" to be set as well</li> <li>#1313838: Tiering as separate process and in v status moving tier task to tier process</li> <li>#1316873: EC: Set/unset dirty flag for all the update operations</li> <li>#1325531: Statedump: Add per xlator ref counting for inode</li> <li>#1325792: \"gluster vol heal test statistics heal-count replica\" seems doesn't work</li> <li>#1330604: out-of-tree builds generate XDR headers and source files in the original directory</li> <li>#1336371: Sequential volume start&amp;stop is failing with SSL enabled setup.</li> <li>#1341948: DHT: Rebalance- Misleading log messages from __dht_check_free_space function</li> <li>#1344714: removal of file from nfs mount crashs ganesha server</li> <li>#1349385: [FEAT]jbr: Add rollbacking of failed fops</li> <li>#1355956: RFE : move ganesha related configuration into shared storage</li> <li>#1356076: DHT doesn't evenly balance files on FreeBSD with ZFS</li> <li>#1356960: OOM Kill on client when heal is in progress on 1*(2+1) arbiter volume</li> <li>#1357753: JSON output for all Events CLI commands</li> <li>#1357754: Delayed Events if any one Webhook is slow</li> <li>#1358296: tier: breaking down the monolith processing function tier_migrate_using_query_file()</li> <li>#1359612: [RFE] Geo-replication Logging Improvements</li> <li>#1360670: Add output option <code>--xml</code> to man page of gluster</li> <li>#1363595: Node remains in stopped state in pcs status with \"/usr/lib/ocf/resource.d/heartbeat/ganesha_mon: line 137: [: too many arguments ]\" messages in logs.</li> <li>#1363965: geo-replication *changes.log does not respect the log-level configured</li> <li>#1364420: [RFE] History Crawl performance improvement</li> <li>#1365395: Support for rc.d and init for Service management</li> <li>#1365740: dht: Update stbuf from servers having layout</li> <li>#1365791: Geo-rep worker Faulty with OSError: [Errno 21] Is a directory</li> <li>#1365822: [RFE] cli command to get max supported cluster.op-version</li> <li>#1366494: Rebalance is not considering the brick sizes while fixing the layout</li> <li>#1366495: 1 mkdir generates tons of log messages from dht xlator</li> <li>#1366648: [GSS] A hot tier brick becomes full, causing the entire volume to have issues and returns stale file handle and input/output error.</li> <li>#1366815: spurious heal info as pending heal entries never end on an EC volume while IOs are going on</li> <li>#1368012: gluster fails to propagate permissions on the root of a gluster export when adding bricks</li> <li>#1368138: Crash of glusterd when using long username with geo-replication</li> <li>#1368312: Value of `replica.split-brain-status' attribute of a directory in metadata split-brain in a dist-rep volume reads that it is not in split-brain</li> <li>#1368336: [RFE] Tier Events</li> <li>#1369077: The directories get renamed when data bricks are offline in 4*(2+1) volume</li> <li>#1369124: fix unused variable warnings from out-of-tree builds generate XDR headers and source files i...</li> <li>#1369397: segment fault in changelog_cleanup_dispatchers</li> <li>#1369403: [RFE]: events from protocol server</li> <li>#1369523: worm: variable reten_mode is invalid to be free by mem_put in fini()</li> <li>#1370410: [granular entry sh] - Provide a CLI to enable/disable the feature that checks that there are no heals pending before allowing the operation</li> <li>#1370567: [RFE] Provide snapshot events for the new eventing framework</li> <li>#1370931: glfs_realpath() should not return malloc()'d allocated memory</li> <li>#1371353: posix: Integrate important events with events framework</li> <li>#1371470: disperse: Integrate important events with events framework</li> <li>#1371485: [RFE]: AFR events</li> <li>#1371539: Quota version not changing in the quota.conf after upgrading to 3.7.1 from 3.6.1</li> <li>#1371540: Spurious regression in tests/basic/gfapi/bug1291259.t</li> <li>#1371874: [RFE] DHT Events</li> <li>#1372193: [geo-rep]: AttributeError: 'Popen' object has no attribute 'elines'</li> <li>#1372211: write-behind: flush stuck by former failed write</li> <li>#1372356: glusterd experiencing repeated connect/disconnect messages when shd is down</li> <li>#1372553: \"gluster vol status all clients --xml\" doesn't generate xml if there is a failure in between</li> <li>#1372584: Fix the test case http://review.gluster.org/#/c/15385/</li> <li>#1373072: Event pushed even if Answer is No in the Volume Stop and Delete prompt</li> <li>#1373373: Worker crashes with EINVAL errors</li> <li>#1373520: [Bitrot]: Recovery fails of a corrupted hardlink (and the corresponding parent file) in a disperse volume</li> <li>#1373741: [geo-replication]: geo-rep Status is not showing bricks from one of the nodes</li> <li>#1374093: glusterfs: create a directory with 0464 mode return EIO error</li> <li>#1374286: [geo-rep]: defunct tar process while using tar+ssh sync</li> <li>#1374584: Detach tier commit is allowed when detach tier start goes into failed state</li> <li>#1374587: gf_event python fails with ImportError</li> <li>#1374993: bug-963541.t spurious failure</li> <li>#1375181: /var/tmp/rpm-tmp.KPCugR: line 2: /bin/systemctl: No such file or directory</li> <li>#1375431: [RFE] enable sharding and strict-o-direct with virt profile - /var/lib/glusterd/groups/virt</li> <li>#1375526: Kill rpc.statd on Linux machines</li> <li>#1375532: Rpm installation fails with conflicts error for eventsconfig.json file</li> <li>#1376671: Rebalance fails to start if a brick is down</li> <li>#1376693: RFE: Provide a prompt when enabling gluster-NFS</li> <li>#1377097: The GlusterFS Callback RPC-calls always use RPC/XID 42</li> <li>#1377341: out-of-tree builds generate XDR headers and source files in the original directory</li> <li>#1377427: incorrect fuse dumping for WRITE</li> <li>#1377556: Files not being opened with o_direct flag during random read operation (Glusterfs 3.8.2)</li> <li>#1377584: memory leak problems are found in daemon:glusterd, server:glusterfsd and client:glusterfs</li> <li>#1377607: Volume restart couldn't re-export the volume exported via ganesha.</li> <li>#1377864: Creation of files on hot tier volume taking very long time</li> <li>#1378057: glusterd fails to start without installing glusterfs-events package</li> <li>#1378072: Modifications to AFR Events</li> <li>#1378305: DHT: remove unused structure members</li> <li>#1378436: build: python-ctypes no longer exists in Fedora Rawhide</li> <li>#1378492: warning messages seen in glusterd logs for each 'gluster volume status' command</li> <li>#1378684: Poor smallfile read performance on Arbiter volume compared to Replica 3 volume</li> <li>#1378778: Add a test script for compound fops changes in AFR</li> <li>#1378842: [RFE] 'gluster volume get' should implement the way to retrieve volume options using the volume name 'all'</li> <li>#1379223: \"nfs.disable: on\" is not showing in Vol info by default for the 3.7.x volumes after updating to 3.9.0</li> <li>#1379285: gfapi: Fix fd ref leaks</li> <li>#1379328: Boolean attributes are published as string</li> <li>#1379330: eventsapi/georep: Events are not available for Checkpoint and Status Change</li> <li>#1379511: Fix spurious failures in open-behind.t</li> <li>#1379655: Recording (ffmpeg) processes on FUSE get hung</li> <li>#1379720: errors appear in brick and nfs logs and getting stale files on NFS clients</li> <li>#1379769: GlusterFS fails to build on old Linux distros with linux/oom.h missing</li> <li>#1380249: Huge memory usage of FUSE client</li> <li>#1380275: client ID should logged when SSL connection fails</li> <li>#1381115: Polling failure errors getting when volume is started&amp;stopped with SSL enabled setup.</li> <li>#1381421: afr fix shd log message error</li> <li>#1381830: Regression caused by enabling client-io-threads by default</li> <li>#1382236: glusterfind pre session hangs indefinitely</li> <li>#1382258: RFE: Support to update NFS-Ganesha export options dynamically</li> <li>#1382266: md-cache: Invalidate cache entry in case of OPEN with O_TRUNC</li> <li>#1384142: crypt: changes needed for openssl-1.1 (coming in Fedora 26)</li> <li>#1384297: glusterfs can't self heal character dev file for invalid dev_t parameters</li> <li>#1384906: arbiter volume write performance is bad with sharding</li> <li>#1385104: invalid argument warning messages seen in fuse client logs 2016-09-30 06:34:58.938667] W [dict.c:418ict_set] (--&gt;/usr/lib64/glusterfs/3.8.4/xlator/cluster/replicate.so(+0x58722) 0-dict: !this || !value for key=link-count [Invalid argument]</li> <li>#1385575: pmap_signin event fails to update brickinfo-&gt;signed_in flag</li> <li>#1385593: Fix some spelling mistakes in comments and log messages</li> <li>#1385839: Incorrect volume type in the \"glusterd_state\" file generated using CLI \"gluster get-state\"</li> <li>#1386088: Memory Leaks in snapshot code path</li> <li>#1386097: 4 of 8 bricks (2 dht subvols) crashed on systemic setup</li> <li>#1386123: geo-replica slave node goes faulty for non-root user session due to fail to locate gluster binary</li> <li>#1386141: Error and warning message getting while removing glusterfs-events package</li> <li>#1386188: Asynchronous Unsplit-brain still causes Input/Output Error on system calls</li> <li>#1386200: Log all published events</li> <li>#1386247: [Eventing]: 'gluster volume tier  start force' does not generate a TIER_START event <li>#1386450: Continuous warning messages getting when one of the cluster node is down on SSL setup.</li> <li>#1386516: [Eventing]: UUID is showing zeros in the event message for the peer probe operation.</li> <li>#1386626: fuse mount point not accessible</li> <li>#1386766: trashcan max file limit cannot go beyond 1GB</li> <li>#1387160: clone creation with older names in a system fails</li> <li>#1387207: [Eventing]: Random VOLUME_SET events seen when no operation is done on the gluster cluster</li> <li>#1387241: Pass proper permission to acl_permit() in posix_acl_open()</li> <li>#1387652: [Eventing]: BRICK_DISCONNECTED events seen when a tier volume is stopped</li> <li>#1387864: [Eventing]: 'gluster vol bitrot  scrub ondemand' does not produce an event <li>#1388010: [Eventing]: 'VOLUME_REBALANCE' event messages have an incorrect volume name</li> <li>#1388062: throw warning to show that older tier commands are depricated and will be removed.</li> <li>#1388292: performance.read-ahead on results in processes on client stuck in IO wait</li> <li>#1388348: glusterd: Display proper error message and fail the command if S32gluster_enable_shared_storage.sh hook script is not present during gluster volume set all cluster.enable-shared-storage  command <li>#1388401: Labelled geo-rep checkpoints hide geo-replication status</li> <li>#1388861: build: python on Debian-based dists use .../lib/python2.7/dist-packages instead of .../site-packages</li> <li>#1388862: [Eventing]: Events not seen when command is triggered from one of the peer nodes</li> <li>#1388877: Continuous errors getting in the mount log when the volume mount server glusterd is down.</li> <li>#1389293: build: incorrect Requires: for portblock resource agent</li> <li>#1389481: glusterfind fails to list files from tiered volume</li> <li>#1389697: Remove-brick status output is showing status of fix-layout instead of original remove-brick status output</li> <li>#1389746: Refresh config fails while exporting subdirectories within a volume</li> <li>#1390050: Elasticsearch get CorruptIndexException errors when running with GlusterFS persistent storage</li> <li>#1391086: gfapi clients crash while using async calls due to double fd_unref</li> <li>#1391387: The FUSE client log is filling up with posix_acl_default and posix_acl_access messages</li> <li>#1392167: SMB[md-cache Private Build]:Error messages in brick logs related to upcall_cache_invalidate gf_uuid_is_null</li> <li>#1392445: Hosted Engine VM paused post replace-brick operation</li> <li>#1392713: inconsistent file permissions b/w write permission and sticky bits(---------T ) displayed when IOs are going on with md-cache enabled (and within the invalidation cycle)</li> <li>#1392772: [setxattr_cbk] \"Permission denied\" warning messages are seen in logs while running pjd-fstest suite</li> <li>#1392865: Better logging when reporting failures of the kind \" Failing MKNOD as quorum is not met\" <li>#1393259: stat of file is hung with possible deadlock</li> <li>#1393678: Worker restarts on log-rsync-performance config update</li> <li>#1394131: [md-cache]: All bricks crashed while performing symlink and rename from client at the same time</li> <li>#1394224: \"nfs-grace-monitor\" timed out messages observed</li> <li>#1394548: Make debugging EACCES errors easier to debug</li> <li>#1394719: libgfapi core dumps</li> <li>#1394881: Failed to enable nfs-ganesha after disabling nfs-ganesha cluster</li> <li>#1395261: Seeing error messages [snapview-client.c:283:gf_svc_lookup_cbk] and [dht-helper.c:1666ht_inode_ctx_time_update] (--&gt;/usr/lib64/glusterfs/3.8.4/xlator/cluster/replicate.so(+0x5d75c)</li> <li>#1395648: ganesha-ha.conf --status should validate if the VIPs are assigned to right nodes</li> <li>#1395660: Checkpoint completed event missing master node detail</li> <li>#1395687: Client side IObuff leaks at a high pace consumes complete client memory and hence making gluster volume inaccessible</li> <li>#1395993: heal info --xml when bricks are down in a systemic environment is not displaying anything even after more than 30minutes</li> <li>#1396038: refresh-config fails and crashes ganesha when mdcache is enabled on the volume.</li> <li>#1396048: A hard link is lost during rebalance+lookup</li> <li>#1396062: [geo-rep]: Worker crashes seen while renaming directories in loop</li> <li>#1396081: Wrong value in Last Synced column during Hybrid Crawl</li> <li>#1396364: Scheduler : Scheduler should not depend on glusterfs-events package</li> <li>#1396793: [Ganesha] : Ganesha crashes intermittently during nfs-ganesha restarts.</li> <li>#1396807: capture volume tunables in get-state dump</li> <li>#1396952: I/O errors on FUSE mount point when reading and writing from 2 clients</li> <li>#1397052: OOM kill of nfs-ganesha on one node while fs-sanity test suite is executed.</li> <li>#1397177: memory leak when using libgfapi</li> <li>#1397419: glusterfs_ctx_defaults_init is re-initializing ctx-&gt;locks</li> <li>#1397424: PEER_REJECT, EVENT_BRICKPATH_RESOLVE_FAILED, EVENT_COMPARE_FRIEND_VOLUME_FAILED are not seen</li> <li>#1397754: [SAMBA-CIFS] : IO hungs in cifs mount while graph switch on &amp; off</li> <li>#1397795: NFS-Ganesha:Volume reset for any option causes reset of ganesha enable option and bring down the ganesha services</li> <li>#1398076: SEEK_HOLE/ SEEK_DATA doesn't return the correct offset</li> <li>#1398226: With compound fops on, client process crashes when a replica is brought down while IO is in progress</li> <li>#1398566: self-heal info command hangs after triggering self-heal</li> <li>#1399031: build: add systemd dependency to glusterfs sub-package</li> <li>#1399072: [Disperse] healing should not start if only data bricks are UP</li> <li>#1399134: GlusterFS client crashes during remove-brick operation</li> <li>#1399154: After ganesha node reboot/shutdown, portblock process goes to FAILED state</li> <li>#1399186: [GANESHA] Export ID changed during volume start and stop with message \"lookup_export failed with Export id not found\" in ganesha.log</li> <li>#1399578: [compound FOPs]: Memory leak while doing FOPs with brick down</li> <li>#1399592: Memory leak when self healing daemon queue is full</li> <li>#1399780: Use standard refcounting for structures where possible</li> <li>#1399995: Dump volume specific options in get-state output in a more parseable manner</li> <li>#1400013: [USS,SSL] .snaps directory is not reachable when I/O encryption (SSL) is enabled</li> <li>#1400026: Duplicate value assigned to GD_MSG_DAEMON_STATE_REQ_RCVD and GD_MSG_BRICK_CLEANUP_SUCCESS messages</li> <li>#1400237: Ganesha services are not stopped when pacemaker quorum is lost</li> <li>#1400613: [GANESHA] failed to create directory of hostname of new node in var/lib/nfs/ganesha/ in already existing cluster nodes</li> <li>#1400818: possible memory leak on client when writing to a file while another client issues a truncate</li> <li>#1401095: log the error when locking the brick directory fails</li> <li>#1401218: Fix compound fops memory leaks</li> <li>#1401404: [Arbiter] IO's Halted and heal info command hung</li> <li>#1401777: atime becomes zero when truncating file via ganesha (or gluster-NFS)</li> <li>#1401801: [RFE] Use Host UUID to find local nodes to spawn workers</li> <li>#1401812: RFE: Make readdirp parallel in dht</li> <li>#1401822: [GANESHA]Unable to export the ganesha volume after doing volume start and stop</li> <li>#1401836: update documentation to readthedocs.io</li> <li>#1401921: glusterfsd crashed while taking snapshot using scheduler</li> <li>#1402237: Bad spacing in error message in cli</li> <li>#1402261: cli: compile warnings (unused var) if building without bd xlator</li> <li>#1402369: Getting the warning message while erasing the gluster \"glusterfs-server\" package.</li> <li>#1402710: ls and move hung on disperse volume</li> <li>#1402730: self-heal not happening, as self-heal info lists the same pending shards to be healed</li> <li>#1402828: Snapshot: Snapshot create command fails when gluster-shared-storage volume is stopped</li> <li>#1402841: Files remain unhealed forever if shd is disabled and re-enabled while healing is in progress.</li> <li>#1403130: [GANESHA] Adding a node to cluster failed to allocate resource-agents to new node.</li> <li>#1403780: Incorrect incrementation of volinfo refcnt during volume start</li> <li>#1404118: Snapshot: After snapshot restore failure , snapshot goes into inconsistent state</li> <li>#1404168: Upcall: Possible use after free when log level set to TRACE</li> <li>#1404181: [Ganesha+SSL] : Ganesha crashes on all nodes on volume restarts</li> <li>#1404410: [Perf] : pcs cluster resources went into stopped state during Multithreaded perf tests on RHGS layered over RHEL 6</li> <li>#1404573: tests/bugs/snapshot/bug-1316437.t test is causing spurious failure</li> <li>#1404678: [geo-rep]: Config commands fail when the status is 'Created'</li> <li>#1404905: DHT : file rename operation is successful but log has error 'key:trusted.glusterfs.dht.linkto error:File exists' , 'setting xattrs on  failed (File exists)' <li>#1405165: Allow user to disable mem-pool</li> <li>#1405301: Fix the failure in tests/basic/gfapi/bug1291259.t</li> <li>#1405478: Keepalive should be set for IPv6 &amp; IPv4</li> <li>#1405554: Fix spurious failure in bug-1402841.t-mt-dir-scan-race.t</li> <li>#1405775: GlusterFS process crashed after add-brick</li> <li>#1405902: Fix spurious failure in tests/bugs/replicate/bug-1402730.t</li> <li>#1406224: VM pauses due to storage I/O error, when one of the data brick is down with arbiter/replica volume</li> <li>#1406249: [GANESHA] Deleting a node from ganesha cluster deletes the volume entry from /etc/ganesha/ganesha.conf file</li> <li>#1406252: Free xdr-allocated compound request and response arrays</li> <li>#1406348: [Eventing]: POSIX_SAME_GFID event seen for .trashcan folder and .trashcan/internal_op</li> <li>#1406410: [GANESHA] Adding node to ganesha cluster is not assigning the correct VIP to the new node</li> <li>#1406411: Fail add-brick command if replica count changes</li> <li>#1406878: ec prove tests fail in FB build environment.</li> <li>#1408115: Remove-brick rebalance failed while rm -rf is in progress</li> <li>#1408131: Remove tests/distaf</li> <li>#1408395: [Arbiter] After Killing a brick writes drastically slow down</li> <li>#1408712: with granular-entry-self-heal enabled i see that there is a gfid mismatch and vm goes to paused state after migrating to another host</li> <li>#1408755: Remove tests/basic/rpm.t</li> <li>#1408757: Fix failure of split-brain-favorite-child-policy.t in CentOS7</li> <li>#1408758: tests/bugs/glusterd/bug-913555.t fails spuriously</li> <li>#1409078: RFE: Need a command to check op-version compatibility of clients</li> <li>#1409186: Dict_t leak in dht_migration_complete_check_task and dht_rebalance_inprogress_task</li> <li>#1409202: Warning messages throwing when EC volume offline brick comes up are difficult to understand for end user.</li> <li>#1409206: Extra lookup/fstats are sent over the network when a brick is down.</li> <li>#1409727: [ganesha + EC]posix compliance rename tests failed on EC volume with nfs-ganesha mount.</li> <li>#1409730: [ganesha+ec]: Contents of original file are not seen when hardlink is created</li> <li>#1410071: [Geo-rep] Geo replication status detail without master and slave volume args</li> <li>#1410313: brick crashed on systemic setup</li> <li>#1410355: Remove-brick rebalance failed while rm -rf is in progress</li> <li>#1410375: [Mdcache] clients being served wrong information about a file, can lead to file inconsistency</li> <li>#1410777: ganesha service crashed on all nodes of ganesha cluster on disperse volume when doing lookup while copying files remotely using scp</li> <li>#1410853: glusterfs-server should depend on firewalld-filesystem</li> <li>#1411607: [Geo-rep] If for some reason MKDIR failed to sync, it should not proceed further.</li> <li>#1411625: Spurious split-brain error messages are seen in rebalance logs</li> <li>#1411999: URL to Fedora distgit no longer uptodate</li> <li>#1412002: Examples/getvolfile.py is not pep8 compliant</li> <li>#1412069: No rollback of renames on succeeded subvols during failure</li> <li>#1412174: Memory leak on mount/fuse when setxattr fails</li> <li>#1412467: Remove tests/bugs/distribute/bug-1063230.t</li> <li>#1412489: Upcall: Possible memleak if inode_ctx_set fails</li> <li>#1412689: [Geo-rep] Slave mount log file is cluttered by logs of multiple active mounts</li> <li>#1412917: OOM kill of glusterfsd during continuous add-bricks</li> <li>#1412918: fuse: Resource leak in fuse-helper under GF_SOLARIS_HOST_OS</li> <li>#1413967: geo-rep session faulty with ChangelogException \"No such file or directory\"</li> <li>#1415226: packaging: python/python2(/python3) cleanup</li> <li>#1415245: core: max op version</li> <li>#1415279: libgfapi: remove/revert glfs_ipc() changes targeted for 4.0</li> <li>#1415581: RFE : Create trash directory only when its is enabled</li> <li>#1415915: RFE: An administrator friendly way to determine rebalance completion time</li> <li>#1415918: Cache security.ima xattrs as well</li> <li>#1416285: EXPECT_WITHIN is taking too much time even if the result matches with expected value</li> <li>#1416416: Improve output of \"gluster volume status detail\"</li> <li>#1417027: option performance.parallel-readdir should honor cluster.readdir-optimize</li> <li>#1417028: option performance.parallel-readdir can cause OOM in large volumes</li> <li>#1417042: glusterd restart is starting the offline shd daemon on other node in the cluster</li> <li>#1417135: [Stress] : SHD Logs flooded with \"Heal Failed\" messages,filling up \"/\" quickly</li> <li>#1417521: [SNAPSHOT] With all USS plugin enable .snaps directory is not visible in cifs mount as well as windows mount</li> <li>#1417527: glusterfind: After glusterfind pre command execution all temporary files and directories /usr/var/lib/misc/glusterfsd/glusterfind/// should be removed <li>#1417804: debug/trace: Print iatts of individual entries in readdirp callback for better debugging experience</li> <li>#1418091: [RFE] Support multiple bricks in one process (multiplexing)</li> <li>#1418536: Portmap allocates way too much memory (256KB) on stack</li> <li>#1418541: [Ganesha+SSL] : Bonnie++ hangs during rewrites.</li> <li>#1418623: client process crashed due to write behind translator</li> <li>#1418650: Samba crash when mounting a distributed dispersed volume over CIFS</li> <li>#1418981: Unable to take Statedump for gfapi applications</li> <li>#1419305: disable client.io-threads on replica volume creation</li> <li>#1419306: [RFE] Need to have group cli option to set all md-cache options using a single command</li> <li>#1419503: [SAMBA-SSL] Volume Share hungs when multiple mount &amp; unmount is performed over a windows client on a SSL enabled cluster</li> <li>#1419696: Fix spurious failure of ec-background-heal.t and tests/bitrot/bug-1373520.t</li> <li>#1419824: repeated operation failed warnings in gluster mount logs with disperse volume</li> <li>#1419825: Sequential and Random Writes are off target by 12% and 22% respectively on EC backed volumes over FUSE</li> <li>#1419846: removing warning related to enum, to let the build take place without errors for 3.10</li> <li>#1419855: [Remove-brick] Hardlink migration fails with \"lookup failed (No such file or directory)\" error messages in rebalance logs</li> <li>#1419868: removing old tier commands under the rebalance commands</li> <li>#1420606: glusterd is crashed at the time of stop volume</li> <li>#1420808: Trash feature improperly disabled</li> <li>#1420810: Massive xlator_t leak in graph-switch code</li> <li>#1420982: Automatic split brain resolution must check for all the bricks to be up to avoiding serving of inconsistent data(visible on x3 or more)</li> <li>#1420987: warning messages seen in glusterd logs while setting the volume option</li> <li>#1420989: when server-quorum is enabled, volume get returns 0 value for server-quorum-ratio</li> <li>#1420991: Modified volume options not synced once offline nodes comes up.</li> <li>#1421017: CLI option \"--timeout\" is accepting non numeric and negative values.</li> <li>#1421956: Disperse: Fallback to pre-compiled code execution when dynamic code generation fails</li> <li>#1422350: glustershd process crashed on systemic setup</li> <li>#1422363: [Replicate] \"RPC call decoding failed\" leading to IO hang &amp; mount inaccessible</li> <li>#1422391: Gluster NFS server crashing in __mnt3svc_umountall</li> <li>#1422766: Entry heal messages in glustershd.log while no entries shown in heal info</li> <li>#1422777: DHT doesn't evenly balance files on FreeBSD with ZFS</li> <li>#1422819: [Geo-rep] Recreating geo-rep session with same slave after deleting with reset-sync-time fails to sync</li> <li>#1422942: Prevent reverse heal from happening</li> <li>#1423063: glusterfs-fuse RPM now depends on gfapi</li> <li>#1423070: Bricks not coming up when ran with address sanitizer</li> <li>#1423385: Crash in index xlator because of race in inode_ctx_set and inode_ref</li> <li>#1423406: Need to improve remove-brick failure message when the brick process is down.</li> <li>#1423412: Mount of older client fails</li> <li>#1423429: unnecessary logging in rda_opendir</li> <li>#1424921: dht_setxattr returns EINVAL when a file is deleted during the FOP</li> <li>#1424931: [RFE] Include few more options in virt file</li> <li>#1424937: multiple glusterfsd process crashed making the complete subvolume unavailable</li> <li>#1424973: remove-brick status shows 0 rebalanced files</li> <li>#1425556: glusterd log is flooded with stale disconnect rpc messages</li>"},{"location":"release-notes/3.10.1/","title":"Release notes for Gluster 3.10.1","text":"<p>This is a bugfix release. The release notes for 3.10.0, contains a listing of all the new features that were added and bugs in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li>auth-allow setting was broken with 3.10 release and is now fixed (#1429117)</li> </ol>"},{"location":"release-notes/3.10.1/#major-issues","title":"Major issues","text":"<ol> <li>Expanding a gluster volume that is sharded may cause file corruption</li> <li>Sharded volumes are typically used for VM images, if such volumes are      expanded or possibly contracted (i.e add/remove bricks and rebalance)      there are reports of VM images getting corrupted.</li> <li>If you are using sharded volumes, DO NOT rebalance them till this is      fixed</li> <li>Status of this bug can be tracked here, #1426508</li> </ol>"},{"location":"release-notes/3.10.1/#bugs-addressed","title":"Bugs addressed","text":"<p>A total of 31 patches have been merged, addressing 26 bugs:</p> <ul> <li>#1419824: repeated operation failed warnings in gluster mount logs with disperse volume</li> <li>#1422769: brick process crashes when glusterd is restarted</li> <li>#1422781: Transport endpoint not connected error seen on client when glusterd is restarted</li> <li>#1426222: build: fixes to build 3.9.0rc2 on Debian (jessie)</li> <li>#1426323: common-ha: no need to remove nodes one-by-one in teardown</li> <li>#1426329: [Ganesha] : Add comment to Ganesha HA config file ,about cluster name's length limitation</li> <li>#1427387: systemic testing: seeing lot of ping time outs which would lead to splitbrains</li> <li>#1427399: [RFE] capture portmap details in glusterd's statedump</li> <li>#1427461: Bricks take up new ports upon volume restart after add-brick op with brick mux enabled</li> <li>#1428670: Disconnects in nfs mount leads to IO hang and mount inaccessible</li> <li>#1428739: Fix crash in dht resulting from tests/features/nuke.t</li> <li>#1429117: auth failure after upgrade to GlusterFS 3.10</li> <li>#1429402: Restore atime/mtime for symlinks and other non-regular files.</li> <li>#1429773: disallow increasing replica count for arbiter volumes</li> <li>#1430512: /libgfxdr.so.0.0.1: undefined symbol: __gf_free</li> <li>#1430844: build/packaging: Debian and Ubuntu don't have /usr/libexec/; results in bad packages</li> <li>#1431175: volume start command hangs</li> <li>#1431176: USS is broken when multiplexing is on</li> <li>#1431591: memory leak in features/locks xlator</li> <li>#1434296: [Disperse] Metadata version is not healing when a brick is down</li> <li>#1434303: Move spit-brain msg in read txn to debug</li> <li>#1434399: glusterd crashes when peering an IP where the address is more than acceptable range (&gt;255) OR with random hostnames</li> <li>#1435946: When parallel readdir is enabled and there are simultaneous readdir and disconnects, then it results in crash</li> <li>#1436203: Undo pending xattrs only on the up bricks</li> <li>#1436411: Unrecognized filesystems (i.e. btrfs, zfs) log many errors about \"getinode size\"</li> <li>#1437326: Sharding: Fix a performance bug</li> </ul>"},{"location":"release-notes/3.10.10/","title":"Release notes for Gluster 3.10.10","text":"<p>This is a bugfix release. The release notes for 3.10.0, 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5, 3.10.6, 3.10.7, 3.10.8 and 3.10.9 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.10/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.10/#major-issues","title":"Major issues","text":"<ol> <li>Brick multiplexing is being tested and fixed aggressively but we still have a    few crashes and memory leaks to fix.</li> </ol>"},{"location":"release-notes/3.10.10/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.9 are listed below.</p> <ul> <li>#1498081: dht_(f)xattrop does not implement migration checks</li> <li>#1534848: entries not getting cleared post healing of softlinks (stale entries showing up in heal info)</li> </ul>"},{"location":"release-notes/3.10.11/","title":"Release notes for Gluster 3.10.11","text":"<p>This is a bugfix release. The release notes for 3.10.0, 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5, 3.10.6, 3.10.7, 3.10.8, 3.10.9 and 3.10.10 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.11/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.11/#major-issues","title":"Major issues","text":"<ol> <li>Brick multiplexing is being tested and fixed aggressively but we still have a    few crashes and memory leaks to fix.</li> </ol>"},{"location":"release-notes/3.10.11/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.10 are listed below.</p> <ul> <li>#1486542: \"ganesha.so cannot open\" warning message in glusterd log in non ganesha setup.</li> <li>#1544461: 3.8 -&gt; 3.10 rolling upgrade fails (same for 3.12 or 3.13) on Ubuntu 14</li> <li>#1544787: tests/bugs/cli/bug-1169302.t fails spuriously</li> <li>#1546912: tests/bugs/posix/bug-990028.t fails in release-3.10 branch</li> <li>#1549482: Quota: After deleting directory from mount point on which quota was configured, quota list command output is blank</li> </ul>"},{"location":"release-notes/3.10.12/","title":"Release notes for Gluster 3.10.12","text":"<p>This is a bugfix release. The release notes for 3.10.0, 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5, 3.10.6, 3.10.7, 3.10.8, 3.10.9, 3.10.10 and 3.10.11 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.12/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains a fix for a security vulerability in Gluster as follows,</p> <ul> <li>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1088</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-1088</li> </ul> <p>Installing the updated packages and restarting gluster services, will update the Gluster shared storage volume volfiles, that are more secure than the defaults currently in place.</p> <p>Further, for increased security, the Gluster shared storage volume can be TLS enabled, and access to the same restricted using the <code>auth.ssl-allow</code> option. See, this guide for more details.</p>"},{"location":"release-notes/3.10.12/#major-issues","title":"Major issues","text":"<ol> <li>Brick multiplexing is being tested and fixed aggressively but we still have a    few crashes and memory leaks to fix.</li> </ol>"},{"location":"release-notes/3.10.12/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.11 are listed below.</p> <ul> <li>#1553777: /var/log/glusterfs/bricks/export_vdb.log flooded with this error message \"Not able to add to index [Too many links]\"</li> <li>#1555195: [Ganesha] Duplicate volume export entries in ganesha.conf causing volume unexport to fail</li> <li>#1555203: After a replace brick command, self-heal takes some time to start healing files on disperse volumes</li> <li>#1557304: [Glusterd] Volume operations fail on a (tiered) volume because of a stale lock held by one of the nodes</li> <li>#1559352: [Ganesha] : Ganesha crashes while cluster enters failover/failback mode</li> <li>#1561732: Rebalance failures on a dispersed volume with lookup-optimize enabled</li> <li>#1563500: nfs-ganesha: in case pcs cluster setup fails then nfs-ganesha process should not start</li> <li>#1569409: EIO errors on some operations when volume has mixed brick versions on a disperse volume</li> <li>#1570428: CVE-2018-1088 glusterfs: Privilege escalation via gluster_shared_storage when snapshot scheduling is enabled [fedora-all]</li> </ul>"},{"location":"release-notes/3.10.2/","title":"Release notes for Gluster 3.10.2","text":"<p>This is a bugfix release. The release notes for 3.10.0 and 3.10.1 contains a listing of all the new features that were added and bugs in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li>Many bugs brick multiplexing and nfs-ganesha+ha bugs have been addressed.</li> <li>Rebalance and remove brick operations have been disabled for sharded volumes    to prevent data corruption.</li> </ol>"},{"location":"release-notes/3.10.2/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> </li> <li> <p>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</p> </li> <li>Status of this bug can be tracked here, #1426508</li> </ol>"},{"location":"release-notes/3.10.2/#bugs-addressed","title":"Bugs addressed","text":"<p>A total of 63 patches have been merged, addressing 46 bugs:</p> <ul> <li>#1437854: Spellcheck issues reported during Debian build</li> <li>#1425726: Stale export entries in ganesha.conf after executing \"gluster nfs-ganesha disable\"</li> <li>#1427079: [Ganesha] : unexport fails if export configuration file is not present</li> <li>#1440148: common-ha (debian/ubuntu): ganesha-ha.sh has a hard-coded /usr/libexec/ganesha...</li> <li>#1443478: RFE: Support to update NFS-Ganesha export options dynamically</li> <li>#1443490: [Nfs-ganesha] Refresh config fails when ganesha cluster is in failover mode.</li> <li>#1441474: synclocks don't work correctly under contention</li> <li>#1449002: [Brick Multiplexing] : Bricks for multiple volumes going down after glusterd restart and not coming back up after volume start force</li> <li>#1438813: Segmentation fault when creating a qcow2 with qemu-img</li> <li>#1438423: [Ganesha + EC] : Input/Output Error while creating LOTS of smallfiles</li> <li>#1444540: rm -rf \\&lt;dir&gt; returns ENOTEMPTY even though ls on the mount point returns no files</li> <li>#1446227: Incorrect and redundant logs in the DHT rmdir code path</li> <li>#1447608: Don't allow rebalance/fix-layout operation on sharding enabled volumes till dht+sharding bugs are fixed</li> <li>#1448864: Seeing error \"Failed to get the total number of files. Unable to estimate time to complete rebalance\" in rebalance logs</li> <li>#1443349: [Eventing]: Unrelated error message displayed when path specified during a 'webhook-test/add' is missing a schema</li> <li>#1441576: [geo-rep]: rsync should not try to sync internal xattrs</li> <li>#1441927: [geo-rep]: Worker crashes with [Errno 16] Device or resource busy: '.gfid/00000000-0000-0000-0000-000000000001/dir.166 while renaming directories</li> <li>#1401877: [GANESHA] Symlinks from /etc/ganesha/ganesha.conf to shared_storage are created on the non-ganesha nodes in 8 node gluster having 4 node ganesha cluster</li> <li>#1425723: nfs-ganesha volume export file remains stale in shared_storage_volume when volume is deleted</li> <li>#1427759: nfs-ganesha: Incorrect error message returned when disable fails</li> <li>#1438325: Need to improve remove-brick failure message when the brick process is down.</li> <li>#1438338: glusterd is setting replicate volume property over disperse volume or vice versa</li> <li>#1438340: glusterd is not validating for allowed values while setting \"cluster.brick-multiplex\" property</li> <li>#1441476: Glusterd crashes when restarted with many volumes</li> <li>#1444128: [BrickMultiplex] gluster command not responding and .snaps directory is not visible after executing snapshot related command</li> <li>#1445260: [GANESHA] Volume start and stop having ganesha enable on it,turns off cache-invalidation on volume</li> <li>#1445408: gluster volume stop hangs</li> <li>#1449934: Brick Multiplexing :- resetting a brick bring down other bricks with same PID</li> <li>#1435779: Inode ref leak on anonymous reads and writes</li> <li>#1440278: [GSS] NFS Sub-directory mount not working on solaris10 client</li> <li>#1450378: GNFS crashed while taking lock on a file from 2 different clients having same volume mounted from 2 different servers</li> <li>#1449779: quota: limit-usage command failed with error \" Failed to start aux mount\"</li> <li>#1450564: glfsheal: crashed(segfault) with disperse volume in RDMA</li> <li>#1443501: Don't wind post-op on a brick where the fop phase failed.</li> <li>#1444892: When either killing or restarting a brick with performance.stat-prefetch on, stat sometimes returns a bad st_size value.</li> <li>#1449169: Multiple bricks WILL crash after TCP port probing</li> <li>#1440805: Update rfc.sh to check Change-Id consistency for backports</li> <li>#1443010: snapshot: snapshots appear to be failing with respect to secure geo-rep slave</li> <li>#1445209: snapshot: Unable to take snapshot on a geo-replicated volume, even after stopping the session</li> <li>#1444773: explicitly specify executor to be bash for tests</li> <li>#1445407: remove bug-1421590-brick-mux-reuse-ports.t</li> <li>#1440742: Test files clean up for tier during 3.10</li> <li>#1448790: [Tiering]: High and low watermark values when set to the same level, is allowed</li> <li>#1435942: Enabling parallel-readdir causes dht linkto files to be visible on the mount,</li> <li>#1437763: File-level WORM allows ftruncate() on read-only files</li> <li>#1439148: Parallel readdir on Gluster NFS displays less number of dentries</li> </ul>"},{"location":"release-notes/3.10.3/","title":"Release notes for Gluster 3.10.3","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1 and 3.10.2 contain a listing of all the new features that were added and bugs in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li>No Major changes</li> </ol>"},{"location":"release-notes/3.10.3/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>Status of this bug can be tracked here, #1426508</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.3/#bugs-addressed","title":"Bugs addressed","text":"<p>A total of 18 patches have been merged, addressing 13 bugs:</p> <ul> <li>#1450053: [GANESHA] Adding a node to existing cluster failed to start pacemaker service on new node</li> <li>#1450773: Quota: After upgrade from 3.7 to higher version , gluster quota list command shows \"No quota configured on volume repvol\"</li> <li>#1450934: [New] - Replacing an arbiter brick while I/O happens causes vm pause</li> <li>#1450947: Autoconf leaves unexpanded variables in path names of non-shell-scripttext files</li> <li>#1451371: crash in dht_rmdir_do</li> <li>#1451561: AFR returns the node uuid of the same node for every file in the replica</li> <li>#1451587: cli xml status of detach tier broken</li> <li>#1451977: Add logs to identify whether disconnects are voluntary or due to network problems</li> <li>#1451995: Log message shows error code as success even when rpc fails to connect</li> <li>#1453056: [DHt] : segfault in dht_selfheal_dir_setattr while running regressions</li> <li>#1453087: Brick Multiplexing: On reboot of a node Brick multiplexing feature lost on that node as multiple brick processes get spawned</li> <li>#1456682: tierd listens to a port.</li> <li>#1457054: glusterfs client crash on io-cache.so(__ioc_page_wakeup+0x44)</li> </ul>"},{"location":"release-notes/3.10.4/","title":"Release notes for Gluster 3.10.4","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1, 3.10.2 and 3.10.3 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.4/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li>No Major changes</li> </ol>"},{"location":"release-notes/3.10.4/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>Status of this bug can be tracked here, #1426508</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> <li>Another rebalance related bug is being worked upon #1467010</li> </ol>"},{"location":"release-notes/3.10.4/#bugs-addressed","title":"Bugs addressed","text":"<p>A total of 18 patches have been merged, addressing 13 bugs:</p> <ul> <li>#1457732: \"split-brain observed [Input/output error]\" error messages in samba logs during parallel rm -rf</li> <li>#1459760: Glusterd segmentation fault in ' _Unwind_Backtrace' while running peer probe</li> <li>#1460649: posix-acl: Whitelist virtual ACL xattrs</li> <li>#1460914: Rebalance estimate time sometimes shows negative values</li> <li>#1460993: Revert CLI restrictions on running rebalance in VM store use case</li> <li>#1461019: [Ganesha] : Grace period is not being adhered to on RHEL 7.4; Clients continue running IO even during grace.</li> <li>#1462080: [Bitrot]: Inconsistency seen with 'scrub ondemand' - fails to trigger scrub</li> <li>#1463623: [Ganesha]Bricks got crashed while running posix compliance test suit on V4 mount</li> <li>#1463641: [Ganesha] Ganesha service failed to start on new node added in existing ganeshacluster</li> <li>#1464078: with AFR now making both nodes to return UUID for a file will result in georep consuming more resources</li> <li>#1466852: assorted typos and spelling mistakes from Debian lintian</li> <li>#1466863: dht_rename_lock_cbk crashes in upstream regression test</li> <li>#1467269: Heal info shows incorrect status</li> </ul>"},{"location":"release-notes/3.10.5/","title":"Release notes for Gluster 3.10.5","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1, 3.10.2, 3.10.3 and 3.10.4 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.5/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.5/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1467010   has a fix with this release. As further testing is still in progress, the issue   is retained as a major issue.</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.5/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.4 are listed below.</p> <ul> <li>#1467010: Fd based fops fail with EBADF on file migration</li> <li>#1468126: disperse seek does not correctly handle the end of file</li> <li>#1468198: [Geo-rep]: entry failed to sync to slave with ENOENT errror</li> <li>#1470040: packaging: Upgrade glusterfs-ganesha sometimes fails to semanage ganesha_use_fusefs</li> <li>#1470488: gluster volume status --xml fails when there are 100 volumes</li> <li>#1471028: glusterfs process leaking memory when error occurs</li> <li>#1471612: metadata heal not happening despite having an active sink</li> <li>#1471870: cthon04 can cause segfault in gNFS/NLM</li> <li>#1471917: [GANESHA] Ganesha setup creation fails due to selinux blocking some services required for setup creation</li> <li>#1472446: packaging: save ganesha config files in (/var)/run/gluster/shared_storage/nfs-ganesha</li> <li>#1473129: dht/rebalance: Improve rebalance crawl performance</li> <li>#1473132: dht/cluster: rebalance/remove-brick should honor min-free-disk</li> <li>#1473133: dht/cluster: rebalance/remove-brick should honor min-free-disk</li> <li>#1473134: The rebal-throttle setting does not work as expected</li> <li>#1473136: rebalance: Allow admin to change thread count for rebalance</li> <li>#1473137: dht: Make throttle option \"normal\" value uniform across dht_init and dht_reconfigure</li> <li>#1473140: Fix on demand file migration from client</li> <li>#1473141: cluster/dht: Fix hardlink migration failures</li> <li>#1475638: [Scale] : Client logs flooded with \"inode context is NULL\" error messages</li> <li>#1476212: [geo-rep]: few of the self healed hardlinks on master did not sync to slave</li> <li>#1478498: scripts: invalid test in S32gluster_enable_shared_storage.sh</li> <li>#1478499: packaging: /var/lib/glusterd/options should be %config(noreplace)</li> <li>#1480594: nfs process crashed in \"nfs3_getattr\"</li> </ul>"},{"location":"release-notes/3.10.6/","title":"Release notes for Gluster 3.10.6","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1, 3.10.2, 3.10.3, 3.10.4 and 3.10.5 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.6/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.6/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1498081   is still pending, and not yet a part of this release.</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.6/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.5 are listed below.</p> <ul> <li>#1467010: Fd based fops fail with EBADF on file migration</li> <li>#1481394: libgfapi: memory leak in glfs_h_acl_get</li> <li>#1482857: glusterd fails to start</li> <li>#1483997: packaging: use rdma-core(-devel) instead of ibverbs, rdmacm; disable rdma on armv7hl</li> <li>#1484443: packaging: /run and /var/run; prefer /run</li> <li>#1486542: \"ganesha.so cannot open\" warning message in glusterd log in non ganesha setup.</li> <li>#1487042: AFR returns the node uuid of the same node for every file in the replica</li> <li>#1487647: with AFR now making both nodes to return UUID for a file will result in georep consuming more resources</li> <li>#1488391: gluster-blockd process crashed and core generated</li> <li>#1488719: [RHHI] cannot boot vms created from template when disk format = qcow2</li> <li>#1490909: [Ganesha] : Unable to bring up a Ganesha HA cluster on SELinux disabled machines on latest gluster bits.</li> <li>#1491166: GlusterD returns a bad memory pointer in glusterd_get_args_from_dict()</li> <li>#1491691: rpc: TLSv1_2_method() is deprecated in OpenSSL-1.1</li> <li>#1491966: AFR entry self heal removes a directory's .glusterfs symlink.</li> <li>#1491985: Add NULL gfid checks before creating file</li> <li>#1491995: afr: check op_ret value in __afr_selfheal_name_impunge</li> <li>#1492010: Launch metadata heal in discover code path.</li> <li>#1495430: Make event-history feature configurable and have it disabled by default</li> <li>#1496321: [afr] split-brain observed on T files post hardlink and rename in x3 volume</li> <li>#1497122: Crash in dht_check_and_open_fd_on_subvol_task()</li> </ul>"},{"location":"release-notes/3.10.7/","title":"Release notes for Gluster 3.10.7","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5 and 3.10.6 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.7/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.7/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1498081   is still pending, and not yet a part of this release.</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.7/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.6 are listed below.</p> <ul> <li>#1480788: File-level WORM allows mv over read-only files</li> <li>#1491059: PID File handling: brick pid file leaves stale pid and brick fails to start when glusterd is started</li> <li>#1496321: [afr] split-brain observed on T files post hardlink and rename in x3 volume</li> <li>#1497990: Gluster 3.10.x Packages require manual systemctl daemon reload after install</li> <li>#1499890: md-cache uses incorrect xattr keynames for GF_POSIX_ACL keys</li> <li>#1499893: md-cache: xattr values should not be checked with string functions</li> <li>#1501955: gfapi: API needed to set lk_owner</li> <li>#1502928: Mishandling null check at send_brick_req of glusterfsd/src/gf_attach.c</li> <li>#1503405: Potential use of NULL <code>this</code> variable before it gets initialized</li> </ul>"},{"location":"release-notes/3.10.8/","title":"Release notes for Gluster 3.10.8","text":"<p>This is a bugfix release. The release notes for 3.10.0 , 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5, 3.10.6 and 3.10.7 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.8/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.8/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1498081   is still pending, and not yet a part of this release.</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.8/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.7 are listed below.</p> <ul> <li>#1507749: clean up port map on brick disconnect</li> <li>#1507752: Brick port mismatch</li> <li>#1507880: reset-brick commit force failed with glusterd_volume_brickinfo_get Returning -1</li> <li>#1508036: Address lstat usage in glusterd-snapshot.c code</li> <li>#1514388: default timeout of 5min not honored for analyzing split-brain files post setfattr replica.split-brain-heal-finalize</li> <li>#1514424: gluster volume splitbrain info needs to display output of each brick in a stream fashion instead of buffering and dumping at the end</li> <li>#1517682: Memory leak in locks xlator</li> </ul>"},{"location":"release-notes/3.10.9/","title":"Release notes for Gluster 3.10.9","text":"<p>This is a bugfix release. The release notes for 3.10.0, 3.10.1, 3.10.2, 3.10.3, 3.10.4, 3.10.5, 3.10.6, 3.10.7 and 3.10.8 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.10 stable release.</p>"},{"location":"release-notes/3.10.9/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.10.9/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance)   there are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1498081   is still pending, and not yet a part of this release.</li> </ul> </li> <li> <p>Brick multiplexing is being tested and fixed aggressively but we still have a     few crashes and memory leaks to fix.</p> </li> </ol>"},{"location":"release-notes/3.10.9/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.8 are listed below.</p> <ul> <li>#1523050: glusterd consuming high memory</li> <li>#1529086: fstat returns ENOENT/ESTALE</li> <li>#1529089: opening a file that is destination of rename results in ENOENT errors</li> <li>#1529096: /usr/sbin/glusterfs crashing on Red Hat OpenShift Container Platform node</li> <li>#1530341: [snapshot cifs]ls on .snaps directory is throwing input/output error over cifs mount</li> <li>#1530450: glustershd fails to start on a volume force start after a brick is down</li> </ul>"},{"location":"release-notes/3.11.0/","title":"Release notes for Gluster 3.11.0","text":"<p>This is a major Gluster release that includes some substantial changes. The features revolve around, improvements to small file workloads, SE Linux support, Halo replication enhancement from Facebook, some usability and performance improvements, among other bug fixes.</p> <p>The most notable features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p>"},{"location":"release-notes/3.11.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/3.11.0/#switched-to-storhaug-for-ganesha-and-samba-high-availability","title":"Switched to storhaug for ganesha and samba high availability","text":"<p>Notes for users:</p> <p>High Availability (HA) support for NFS-Ganesha (NFS) and Samba (SMB) is managed by Storhaug. Like the old HA implementation, Storhaug uses Pacemaker and Corosync to manage Virtual (floating) IP addresses (VIPs) and fencing. See https://github.com/linux-ha-storage/storhaug.</p> <p>Storhaug packages are available in Fedora and for several popular Linux distributions from https://download.gluster.org/pub/gluster/storhaug/</p> <p>Note: Storhaug does not dictate which fencing solution should be used. There are many to choose from in most popular Linux distributions. Choose the one the best fits your environment and use it.</p>"},{"location":"release-notes/3.11.0/#added-selinux-support-for-gluster-volumes","title":"Added SELinux support for Gluster Volumes","text":"<p>Notes for users:</p> <p>A new xlator has been introduced (<code>features/selinux</code>) to allow setting the extended attribute (<code>security.selinux</code>) that is needed to support SELinux on Gluster volumes. The current ability to enforce the SELinux policy on the Gluster Storage servers prevents setting the extended attribute for use on the client side. The new translator converts the client-side SELinux extended attribute to a Gluster internal representation (the <code>trusted.glusterfs.selinux</code> extended attribute) to prevent problems.</p> <p>This feature is intended to be the base for implementing Labelled-NFS in NFS-Ganesha and SELinux support for FUSE mounts in the Linux kernel.</p> <p>Limitations:</p> <ul> <li>The Linux kernel does not support mounting of FUSE filesystems with SELinux   support, yet.</li> <li>NFS-Ganesha does not support Labelled-NFS, yet.</li> </ul> <p>Known Issues:</p> <ul> <li>There has been limited testing, because other projects can not consume the   functionality yet without being part of a release. So far, no problems have   been observed, but this might change when other projects start to seriously   use this.</li> </ul>"},{"location":"release-notes/3.11.0/#several-memory-leaks-are-fixed-in-gfapi-during-graph-switches","title":"Several memory leaks are fixed in gfapi during graph switches","text":"<p>Notes for users:</p> <p>Gluster API (or gfapi), has had a few memory leak issues arising specifically during changes to volume graphs (volume topology or options). A few of these are addressed in this release, and more work towards ironing out the pending leaks are in the works across the next few releases.</p> <p>Limitations:</p> <ul> <li>There are still a few leaks to be addressed when graph switches occur</li> </ul>"},{"location":"release-notes/3.11.0/#get-state-cli-is-enhanced-to-provide-client-and-brick-capacity-related-information","title":"get-state CLI is enhanced to provide client and brick capacity related information","text":"<p>Notes for users:</p> <p>The get-state CLI output now optionally accommodates client related information corresponding locally running bricks as obtained from <code>gluster volume status &lt;volname&gt;|all clients</code>. Getting the client details is a is a relatively more costly operation and these details will only be added to the output if the get-state command is invoked with the 'detail' option. The following is the updated usage for the get-state command:</p> <pre><code> # gluster get-state [&lt;daemon&gt;] [[odir &lt;/path/to/output/dir/&gt;] [file &lt;filename&gt;]] [detail]\n</code></pre> <p>Other than client details, capacity related information for respective local bricks as obtained from <code>gluster volume status &lt;volname&gt;|all detail</code> has also been added to the get-state output.</p> <p>Limitations:</p> <ul> <li>Information for non-local bricks and clients connected to non-local bricks   won't be available. This is a known limitation of the get-state command, since   get-state command doesn't provide information on non-local bricks.</li> </ul>"},{"location":"release-notes/3.11.0/#ability-to-serve-negative-lookups-from-cache-has-been-added","title":"Ability to serve negative lookups from cache has been added","text":"<p>Notes for users:</p> <p>Before creating / renaming any file, lookups (around, 5-6 when using the SMB protocol) are sent to verify if the file already exists. The negative lookup cache, serves these lookups from the cache when possible, thus increasing the create/rename performance when using SMB based access to a gluster volume.</p> <p>Execute the following commands to enable negative-lookup cache:</p> <pre><code># gluster volume set &lt;volname&gt; features.cache-invalidation on\n# gluster volume set &lt;volname&gt; features.cache-invalidation-timeout 600\n# gluster volume set &lt;VOLNAME&gt; nl-cache on\n</code></pre> <p>Limitations</p> <ul> <li>This feature is supported only for SMB access, for this release</li> </ul>"},{"location":"release-notes/3.11.0/#new-xlator-to-help-developers-detecting-resource-leaks-has-been-added","title":"New xlator to help developers detecting resource leaks has been added","text":"<p>Notes for users:</p> <p>This is intended as a developer feature, and hence there is no direct user impact.</p> <p>For developers, the sink xlator provides ways to help detect memory leaks in gfapi and any xlator in between the API and the sink xlator.</p> <p>More details can be found in this thread on the gluster-devel lists</p>"},{"location":"release-notes/3.11.0/#feature-for-metadata-cachingsmall-file-performance-is-production-ready","title":"Feature for metadata-caching/small file performance is production ready","text":"<p>Notes for users:</p> <p>Over the course of releases several fixes and enhancements have been made to the mdcache xlator, to improve performance of small file workloads. As a result, with this release we are announcing this feature to be production ready.</p> <p>In order to improve the performance of directory operations of Gluster volumes, the maximum metadata (stat, xattr) caching time on the client side is increased to 10 minutes, without compromising on the consistency of the cache. Significant performance improvements can be achieved in the following workloads on FUSE and SMB access, by enabling metadata caching:</p> <ul> <li>Listing of directories (recursive)</li> <li>Creating files</li> <li>Deleting files</li> <li>Renaming files</li> </ul> <p>To enable metadata caching execute the following commands:</p> <pre><code># gluster volume set group metadata-cache\n# gluster volume set network.inode-lru-limit &lt;n&gt;\n</code></pre> <p>\\&lt;n&gt;, is set to 50000 by default. It should be increased if the number of concurrently accessed files in the volume is very high. Increasing this number increases the memory footprint of the brick processes.</p>"},{"location":"release-notes/3.11.0/#parallel-readdir-feature-introduced-in-3100-is-production-ready","title":"\"Parallel Readdir\" feature introduced in 3.10.0 is production ready","text":"<p>Notes for users:</p> <p>This feature was introduced in 3.10 and was experimental in nature. Over the course of 3.10 minor releases and 3.11.0 release, this feature has been stabilized and is ready for use in production environments.</p> <p>For further details refer: 3.10.0 release notes</p>"},{"location":"release-notes/3.11.0/#object-versioning-is-enabled-only-if-bitrot-is-enabled","title":"Object versioning is enabled only if bitrot is enabled","text":"<p>Notes for users:</p> <p>Object versioning was turned on by default on brick processes by the bitrot xlator. This caused, setting and looking up of additional extended attributes on the backed file system for every object, even when not actively using bitrot. This at times caused high CPU utilization on the brick processes.</p> <p>To fix this, object versioning is disabled by default, and is only enabled as a part of enabling the bitrot option.</p>"},{"location":"release-notes/3.11.0/#distribute-layer-provides-more-robust-transactions-during-directory-namespace-operations","title":"Distribute layer provides more robust transactions during directory namespace operations","text":"<p>Notes for users:</p> <p>Distribute layer in Gluster, creates and maintains directories in all subvolumes and as a result operations involving creation/manipulation/deletion of these directories needed better transaction support to ensure consistency of the file system.</p> <p>This transaction support is now implemented in the distribute layer, thus ensuring better consistency of the file system as a whole, when dealing with racing operations, operating on the same directory object.</p>"},{"location":"release-notes/3.11.0/#gfapi-extended-readdirplus-api-has-been-added","title":"gfapi extended readdirplus API has been added","text":"<p>Notes for users:</p> <p>An extended readdirplus API <code>glfs_xreaddirplus</code> is added to get extra information along with readdirplus results on demand. This is useful for the applications (like NFS-Ganesha which needs handles) to retrieve more information along with stat in a single call, thus improving performance of work-loads involving directory listing.</p> <p>The API syntax and usage can be found in <code>glfs.h</code> header file.</p> <p>Limitations:</p> <ul> <li>This API currently has support to only return stat and handles (<code>glfs_object</code>)   for each dirent of the directory, but can be extended in the future.</li> </ul>"},{"location":"release-notes/3.11.0/#improved-adoption-of-standard-refcounting-functions-across-the-code","title":"Improved adoption of standard refcounting functions across the code","text":"<p>Notes for users:</p> <p>This change does not impact users, it is an internal code cleanup activity that ensures that we ref count in a standard manner, thus avoiding unwanted bugs due to different implementations of the same.</p> <p>Known Issues:</p> <ul> <li>This standardization started with this release and is expected to continue   across releases.</li> </ul>"},{"location":"release-notes/3.11.0/#performance-improvements-to-rebalance-have-been-made","title":"Performance improvements to rebalance have been made","text":"<p>Notes for users:</p> <p>Both crawling and migration improvement has been done in rebalance. The crawler is optimized now to split the migration load across replica and ec nodes. Prior to this change, in case the replicating bricks are distributed over two nodes, then only one node used to do the migration. With the new optimization both the nodes divide the load among each other giving boost to migration performance. And also there have been some optimization to avoid redundant network operations (or RPC calls) in the process of migrating a file.</p> <p>Further, file migration now avoids syncop framework and is managed entirely by rebalance threads giving performance boost.</p> <p>Also, There is a change to throttle settings in rebalance. Earlier user could set three values to rebalance which were \"lazy\", \"normal\", \"aggressive\", which was not flexible enough. To overcome that we have introduced number based throttle settings. User now can set numbers which is an indication of the number of threads rebalance process will work with, thereby translating to the number of files being migrated in parallel.</p>"},{"location":"release-notes/3.11.0/#halo-replication-feature-in-afr-has-been-introduced","title":"Halo Replication feature in AFR has been introduced","text":"<p>Notes for users:</p> <p>Halo Geo-replication is a feature which allows Gluster or NFS clients to write locally to their region (as defined by a latency \"halo\" or threshold if you like), and have their writes asynchronously propagate from their origin to the rest of the cluster. Clients can also write synchronously to the cluster simply by specifying a halo-latency which is very large (e.g. 10seconds) which will include all bricks. To enable halo feature execute the following commands:</p> <pre><code># gluster volume set cluster.halo-enabled yes\n</code></pre> <p>You may have to set the following following options to change defaults. <code>cluster.halo-shd-latency</code>: The threshold below which self-heal daemons will consider children (bricks) connected.</p> <p><code>cluster.halo-nfsd-latency</code>: The threshold below which NFS daemons will consider children (bricks) connected.</p> <p><code>cluster.halo-latency</code>: The threshold below which all other clients will consider children (bricks) connected.</p> <p><code>cluster.halo-min-replicas</code>: The minimum number of replicas which are to be enforced regardless of latency specified in the above 3 options. If the number of children falls below this threshold the next best (chosen by latency) shall be swapped in.</p>"},{"location":"release-notes/3.11.0/#fallocate-support-with-ec","title":"FALLOCATE support with EC","text":"<p>Notes for users</p> <p>Support for FALLOCATE file operation on EC volume is added with this release. EC volumes can now support basic FALLOCATE functionality.</p>"},{"location":"release-notes/3.11.0/#self-heal-window-size-control-option-for-ec","title":"Self-heal window-size control option for EC","text":"<p>Notes for users</p> <p>Support to control the maximum size of read/write operation carried out during self-heal process has been added with this release. User has to tune 'disperse.self-heal-window-size' option on disperse volume to adjust the size.</p>"},{"location":"release-notes/3.11.0/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>Status of this bug can be tracked here, #1426508</li> <li>Latest series of fixes for the issue (which are present in this release as   well) are not showing the previous corruption, and hence the fixes look   good, but this is maintained on the watch list nevetheness.</li> </ul> </li> </ol>"},{"location":"release-notes/3.11.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.10.0 are listed below.</p> <ul> <li>#1169302: Unable to take Statedump for gfapi applications</li> <li>#1197308: do not depend on \"killall\", use \"pkill\" instead</li> <li>#1198849: Minor improvements and cleanup for the build system</li> <li>#1257792: bug-1238706-daemons-stop-on-peer-cleanup.t fails occasionally</li> <li>#1261689: geo-replication faulty</li> <li>#1264849: RFE : Create trash directory only when its is enabled</li> <li>#1297182: Mounting with \"-o noatime\" or \"-o noexec\" causes \"nosuid,nodev\" to be set as well</li> <li>#1318100: RFE : SELinux translator to support setting SELinux contexts on files in a glusterfs volume</li> <li>#1321578: auth.allow and auth.reject not working host mentioned with hostnames/FQDN</li> <li>#1322145: Glusterd fails to restart after replacing a failed GlusterFS node and a volume has a snapshot</li> <li>#1326219: Make Gluster/NFS an optional component</li> <li>#1328342: [tiering]: gluster v reset of watermark levels can allow low watermark level to have a higher value than hi watermark level</li> <li>#1353952: [geo-rep]: rsync should not try to sync internal xattrs</li> <li>#1356076: DHT doesn't evenly balance files on FreeBSD with ZFS</li> <li>#1359599: BitRot :- bit-rot.signature and bit-rot.version xattr should not be set if bitrot is not enabled on volume</li> <li>#1369393: dead loop in changelog_rpc_server_destroy</li> <li>#1383893: glusterd restart is starting the offline shd daemon on other node in the cluster</li> <li>#1384989: libglusterfs : update correct memory segments in glfs-message-id</li> <li>#1385758: [RFE] Support multiple bricks in one process (multiplexing)</li> <li>#1386578: mounting with rdma protocol fails for tcp,rdma volumes</li> <li>#1389127: build: fixes to build 3.9.0rc2 on Debian (jessie)</li> <li>#1390050: Elasticsearch get CorruptIndexException errors when running with GlusterFS persistent storage</li> <li>#1393338: Rebalance should skip the file if the file has hardlinks instead of failing</li> <li>#1395643: [SELinux] [Scheduler]: Unable to create Snapshots on RHEL-7.1 using Scheduler</li> <li>#1396004: RFE: An administrator friendly way to determine rebalance completion time</li> <li>#1399196: use attribute(format(printf)) to catch format string errors at compile time</li> <li>#1399593: Obvious typo in cleanup code in rpc_clnt_notify</li> <li>#1401571: bitrot quarantine dir misspelled</li> <li>#1401812: RFE: Make readdirp parallel in dht</li> <li>#1401877: [GANESHA] Symlinks from /etc/ganesha/ganesha.conf to shared_storage are created on the non-ganesha nodes in 8 node gluster having 4 node ganesha cluster</li> <li>#1402254: compile warning unused variable</li> <li>#1402661: Samba crash when mounting a distributed dispersed volume over CIFS</li> <li>#1404424: The data-self-heal option is not honored in AFR</li> <li>#1405628: Socket search code at startup is slow</li> <li>#1408809: [Perf] : significant Performance regression seen with disperse volume when compared with 3.1.3</li> <li>#1409191: Sequential and Random Writes are off target by 12% and 22% respectively on EC backed volumes over FUSE</li> <li>#1410425: [GNFS+EC] Cthon failures/issues with Lock/Special Test cases on disperse volume with GNFS mount</li> <li>#1410701: [SAMBA-SSL] Volume Share hungs when multiple mount &amp; unmount is performed over a windows client on a SSL enabled cluster</li> <li>#1411228: remove-brick status shows 0 rebalanced files</li> <li>#1411334: Improve output of \"gluster volume status detail\"</li> <li>#1412135: rename of the same file from multiple clients with caching enabled may result in duplicate files</li> <li>#1412549: EXPECT_WITHIN is taking too much time even if the result matches with expected value</li> <li>#1413526: glusterfind: After glusterfind pre command execution all temporary files and directories /usr/var/lib/misc/glusterfsd/glusterfind/// should be removed <li>#1413971: Bonnie test suite failed with \"Can't open file\" error</li> <li>#1414287: repeated operation failed warnings in gluster mount logs with disperse volume</li> <li>#1414346: Quota: After upgrade from 3.7 to higher version , gluster quota list command shows \"No quota configured on volume repvol\"</li> <li>#1414645: Typo in glusterfs code comments</li> <li>#1414782: Add logs to selfheal code path to be helpful for debug</li> <li>#1414902: packaging: python/python2(/python3) cleanup</li> <li>#1415115: client process crashed due to write behind translator</li> <li>#1415590: removing old tier commands under the rebalance commands</li> <li>#1415761: [Remove-brick] Hardlink migration fails with \"lookup failed (No such file or directory)\" error messages in rebalance logs</li> <li>#1416251: [SNAPSHOT] With all USS plugin enable .snaps directory is not visible in cifs mount as well as windows mount</li> <li>#1416520: Missing FOPs in the io-stats xlator</li> <li>#1416689: Fix spurious failure of ec-background-heal.t</li> <li>#1416889: Simplify refcount API for free'ing function</li> <li>#1417050: [Stress] : SHD Logs flooded with \"Heal Failed\" messages,filling up \"/\" quickly</li> <li>#1417466: Prevent reverse heal from happening</li> <li>#1417522: Automatic split brain resolution must check for all the bricks to be up to avoiding serving of inconsistent data(visible on x3 or more)</li> <li>#1417540: Mark tests/bitrot/bug-1373520.t bad</li> <li>#1417588: glusterd is setting replicate volume property over disperse volume or vice versa</li> <li>#1417913: Hangs on 32 bit systems since 3.9.0</li> <li>#1418014: disable client.io-threads on replica volume creation</li> <li>#1418095: Portmap allocates way too much memory (256KB) on stack</li> <li>#1418213: [Ganesha+SSL] : Bonnie++ hangs during rewrites.</li> <li>#1418249: [RFE] Need to have group cli option to set all md-cache options using a single command</li> <li>#1418259: Quota: After deleting directory from mount point on which quota was configured, quota list command output is blank</li> <li>#1418417: packaging: remove glusterfs-ganesha subpackage</li> <li>#1418629: glustershd process crashed on systemic setup</li> <li>#1418900: [RFE] Include few more options in virt file</li> <li>#1418973: removing warning related to enum, to let the build take place without errors for 3.10</li> <li>#1420166: The rebal-throttle setting does not work as expected</li> <li>#1420202: glusterd is crashed at the time of stop volume</li> <li>#1420434: Trash feature improperly disabled</li> <li>#1420571: Massive xlator_t leak in graph-switch code</li> <li>#1420611: when server-quorum is enabled, volume get returns 0 value for server-quorum-ratio</li> <li>#1420614: warning messages seen in glusterd logs while setting the volume option</li> <li>#1420619: Entry heal messages in glustershd.log while no entries shown in heal info</li> <li>#1420623: [RHV-RHGS]: Application VM paused after add brick operation and VM didn't comeup after power cycle.</li> <li>#1420637: Modified volume options not synced once offline nodes comes up.</li> <li>#1420697: CLI option \"--timeout\" is accepting non numeric and negative values.</li> <li>#1420713: glusterd: storhaug, remove all vestiges ganesha</li> <li>#1421023: Binary file gf_attach generated during build process should be git ignored</li> <li>#1421590: Bricks take up new ports upon volume restart after add-brick op with brick mux enabled</li> <li>#1421600: Test files clean up for tier during 3.10</li> <li>#1421607: Getting error messages in glusterd.log when peer detach is done</li> <li>#1421653: dht_setxattr returns EINVAL when a file is deleted during the FOP</li> <li>#1421721: volume start command hangs</li> <li>#1421724: glusterd log is flooded with stale disconnect rpc messages</li> <li>#1421759: Gluster NFS server crashing in __mnt3svc_umountall</li> <li>#1421937: [Replicate] \"RPC call decoding failed\" leading to IO hang &amp; mount inaccessible</li> <li>#1421938: systemic testing: seeing lot of ping time outs which would lead to splitbrains</li> <li>#1421955: Disperse: Fallback to pre-compiled code execution when dynamic code generation fails</li> <li>#1422074: GlusterFS truncates nanoseconds to microseconds when setting mtime</li> <li>#1422152: Bricks not coming up when ran with address sanitizer</li> <li>#1422624: Need to improve remove-brick failure message when the brick process is down.</li> <li>#1422760: [Geo-rep] Recreating geo-rep session with same slave after deleting with reset-sync-time fails to sync</li> <li>#1422776: multiple glusterfsd process crashed making the complete subvolume unavailable</li> <li>#1423369: unnecessary logging in rda_opendir</li> <li>#1423373: Crash in index xlator because of race in inode_ctx_set and inode_ref</li> <li>#1423410: Mount of older client fails</li> <li>#1423413: Self-heal fail an WORMed-Files</li> <li>#1423448: glusterfs-fuse RPM now depends on gfapi</li> <li>#1424764: Coverty scan return false positive regarding crypto</li> <li>#1424791: Coverty scan detect a potential free on uninitialised pointer in error code path</li> <li>#1424793: Missing verification of fcntl return code</li> <li>#1424796: Remove deadcode found by coverty in glusterd-utils.c</li> <li>#1424802: Missing call to va_end in xlators/cluster/dht/src/dht-common.c</li> <li>#1424809: Fix another coverty error for useless goto</li> <li>#1424815: Fix erronous comparaison of flags resulting in UUID always sent</li> <li>#1424894: Some switches don't have breaks causing unintended fall throughs.</li> <li>#1424905: Coverity: Memory issues and dead code</li> <li>#1425288: glusterd is not validating for allowed values while setting \"cluster.brick-multiplex\" property</li> <li>#1425515: tests: quota-anon-fd-nfs.t needs to check if nfs mount is avialable before mounting</li> <li>#1425623: Free all xlator specific resources when xlator-&gt;fini() gets called</li> <li>#1425676: gfids are not populated in release/releasedir requests</li> <li>#1425703: [Disperse] Metadata version is not healing when a brick is down</li> <li>#1425743: Tier ./tests/bugs/glusterd/bug-1303028-Rebalance-glusterd-rpc-connection-issue.t</li> <li>#1426032: Log message shows error code as success even when rpc fails to connect</li> <li>#1426052: \u2018state\u2019 set but not used error when readline and/or ncurses is not installed</li> <li>#1426059: gluster fuse client losing connection to gluster volume frequently</li> <li>#1426125: Add logs to identify whether disconnects are voluntary or due to network problems</li> <li>#1426509: include volume name in rebalance stage error log</li> <li>#1426667: [GSS] NFS Sub-directory mount not working on solaris10 client</li> <li>#1426891: script to resolve function name and line number from backtrace</li> <li>#1426948: [RFE] capture portmap details in glusterd's statedump</li> <li>#1427012: Disconnects in nfs mount leads to IO hang and mount inaccessible</li> <li>#1427018: [RFE] - Need a way to reduce the logging of messages \"Peer CN\" and \"SSL verification suceeded messages\" in glusterd.log file</li> <li>#1427404: Move tests/bitrot/bug-1373520.t to bad tests and fix the underlying issue in posix</li> <li>#1428036: Update rfc.sh to check/request issue # when a commit is an \u201crfc\u201d</li> <li>#1428047: Require a Jenkins job to validate Change-ID on commits to branches in glusterfs repository</li> <li>#1428055: dht/rebalance: Increase maximum read block size from 128 KB to 1 MB</li> <li>#1428058: tests: Fix tests/bugs/distribute/bug-1161311.t</li> <li>#1428064: nfs: Check for null buf, and set op_errno to EIO not 0</li> <li>#1428068: nfs: Tear down transports for requests that arrive before the volume is initialized</li> <li>#1428073: nfs: Fix compiler warning when calling svc_getcaller</li> <li>#1428093: protocol/server: Fix crash bug in unlink flow</li> <li>#1428510: memory leak in features/locks xlator</li> <li>#1429198: Restore atime/mtime for symlinks and other non-regular files.</li> <li>#1429200: disallow increasing replica count for arbiter volumes</li> <li>#1429330: [crawler]: auxiliary mount remains even after crawler finishes</li> <li>#1429696: ldd libgfxdr.so.0.0.1: undefined symbol: __gf_free</li> <li>#1430042: Transport endpoint not connected error seen on client when glusterd is restarted</li> <li>#1430148: USS is broken when multiplexing is on</li> <li>#1430608: [RFE] Pass slave volume in geo-rep as read-only</li> <li>#1430719: gfid split brains not getting resolved with automatic splitbrain resolution</li> <li>#1430841: build/packaging: Debian and Ubuntu don't have /usr/libexec/; results in bad packages</li> <li>#1430860: brick process crashes when glusterd is restarted</li> <li>#1431183: [RFE] Gluster get state command should provide connected client related information</li> <li>#1431192: [RFE] Gluster get state command should provide volume and cluster utilization related information</li> <li>#1431908: Enabling parallel-readdir causes dht linkto files to be visible on the mount,</li> <li>#1431963: Warn CLI while creating replica 2 volumes</li> <li>#1432542: Glusterd crashes when restarted with many volumes</li> <li>#1433405: GF_REF_PUT() should return 0 when the structure becomes invalid</li> <li>#1433425: Unrecognized filesystems (i.e. btrfs, zfs) log many errors about \"getinode size\"</li> <li>#1433506: [Geo-rep] Master and slave mounts are not accessible to take client profile info</li> <li>#1433571: Undo pending xattrs only on the up bricks</li> <li>#1433578: glusterd crashes when peering an IP where the address is more than acceptable range (&gt;255) OR with random hostnames</li> <li>#1433815: auth failure after upgrade to GlusterFS 3.10</li> <li>#1433838: Move spit-brain msg in read txn to debug</li> <li>#1434018: [geo-rep]: Worker crashes with [Errno 16] Device or resource busy: '.gfid/00000000-0000-0000-0000-000000000001/dir.166 while renaming directories</li> <li>#1434062: synclocks don't work correctly under contention</li> <li>#1434274: BZ for some bugs found while going through synctask code</li> <li>#1435943: When parallel readdir is enabled and there are simultaneous readdir and disconnects, then it results in crash</li> <li>#1436086: Parallel readdir on Gluster NFS displays less number of dentries</li> <li>#1436090: When parallel readdir is enabled, linked to file resolution fails</li> <li>#1436739: Sharding: Fix a performance bug</li> <li>#1436936: parameter state-&gt;size is wrong in server3_3_writev</li> <li>#1437037: Standardize atomic increment/decrement calling conventions</li> <li>#1437494: Brick Multiplexing:Volume status still shows the PID even after killing the process</li> <li>#1437748: Spacing issue in fix-layout status output</li> <li>#1437780: don't send lookup in fuse_getattr()</li> <li>#1437853: Spellcheck issues reported during Debian build</li> <li>#1438255: Don't wind post-op on a brick where the fop phase failed.</li> <li>#1438370: rebalance: Allow admin to change thread count for rebalance</li> <li>#1438411: [Ganesha + EC] : Input/Output Error while creating LOTS of smallfiles</li> <li>#1438738: Inode ref leak on anonymous reads and writes</li> <li>#1438772: build: clang/llvm has builtin_ffs() and builtin_popcount()</li> <li>#1438810: File-level WORM allows ftruncate() on read-only files</li> <li>#1438858: explicitly specify executor to be bash for tests</li> <li>#1439527: [disperse] Don't count healing brick as healthy brick</li> <li>#1439571: dht/rebalance: Improve rebalance crawl performance</li> <li>#1439640: [Parallel Readdir] : No bound-checks/CLI validation for parallel readdir tunables</li> <li>#1440051: Application VMs with their disk images on sharded-replica 3 volume are unable to boot after performing rebalance</li> <li>#1441035: remove bug-1421590-brick-mux-reuse-ports.t</li> <li>#1441106: [Geo-rep]: Unnecessary unlink call while processing rmdir</li> <li>#1441491: The data-self-heal option is not honored in EC</li> <li>#1441508: dht/cluster: rebalance/remove-brick should honor min-free-disk</li> <li>#1441910: gluster volume stop hangs</li> <li>#1441945: [Eventing]: Unrelated error message displayed when path specified during a 'webhook-test/add' is missing a schema</li> <li>#1442145: split-brain-favorite-child-policy.t depends on \"bc\"</li> <li>#1442411: meta xlator leaks memory when unloaded</li> <li>#1442569: Implement Negative lookup cache feature to improve create performance</li> <li>#1442724: rm -rf  returns ENOTEMPTY even though ls on the mount point returns no files <li>#1442760: snapshot: snapshots appear to be failing with respect to secure geo-rep slave</li> <li>#1443373: mkdir/rmdir loop causes gfid-mismatch on a 6 brick distribute volume</li> <li>#1443896: [BrickMultiplex] gluster command not responding and .snaps directory is not visible after executing snapshot related command</li> <li>#1443959: packaging: no firewalld-filesystem before el 7.3</li> <li>#1443977: Unable to take snapshot on a geo-replicated volume, even after stopping the session</li> <li>#1444023: io-stats xlator leaks memory when fini() is called</li> <li>#1444228: Autoconf leaves unexpanded variables in path names of non-shell-script text files</li> <li>#1444941: bogus date in %changelog</li> <li>#1445569: Provide a correct way to save the statedump generated by gfapi application</li> <li>#1445590: Incorrect and redundant logs in the DHT rmdir code path</li> <li>#1446126: S30samba-start.sh throws 'unary operator expected' warning during independent execution</li> <li>#1446273: Some functions are exported incorrectly for Mac OS X with the GFAPI_PUBLIC macro</li> <li>#1447543: Revert experimental and 4.0 features to prepare for 3.11 release</li> <li>#1447571: RFE: Enhance handleops readdirplus operation to return handles along with dirents</li> <li>#1447597: RFE : SELinux translator to support setting SELinux contexts on files in a glusterfs volume</li> <li>#1447604: volume set fails if nfs.so is not installed</li> <li>#1447607: Don't allow rebalance/fix-layout operation on sharding enabled volumes till dht+sharding bugs are fixed</li> <li>#1448345: Segmentation fault when creating a qcow2 with qemu-img</li> <li>#1448416: Halo Replication feature for AFR translator</li> <li>#1449004: [Brick Multiplexing] : Bricks for multiple volumes going down after glusterd restart and not coming back up after volume start force</li> <li>#1449191: Multiple bricks WILL crash after TCP port probing</li> <li>#1449311: [whql][virtio-block+glusterfs]\"Disk Stress\" and \"Disk Verification\" job always failed on win7-32/win2012/win2k8R2 guest</li> <li>#1449775: quota: limit-usage command failed with error \" Failed to start aux mount\"</li> <li>#1449921: afr: include quorum type and count when dumping afr priv</li> <li>#1449924: When either killing or restarting a brick with performance.stat-prefetch on, stat sometimes returns a bad st_size value.</li> <li>#1449933: Brick Multiplexing :- resetting a brick bring down other bricks with same PID</li> <li>#1450267: nl-cache xlator leaks timer wheel and other memory</li> <li>#1450377: GNFS crashed while taking lock on a file from 2 different clients having same volume mounted from 2 different servers</li> <li>#1450565: glfsheal: crashed(segfault) with disperse volume in RDMA</li> <li>#1450729: Brick Multiplexing: seeing Input/Output Error for .trashcan</li> <li>#1450933: [New] - Replacing an arbiter brick while I/O happens causes vm pause</li> <li>#1451033: contrib: timer-wheel 32-bit bug, use builtin_fls, license, etc</li> <li>#1451573: AFR returns the node uuid of the same node for every file in the replica</li> <li>#1451586: crash in dht_rmdir_do</li> <li>#1451591: cli xml status of detach tier broken</li> <li>#1451887: Add tests/basic/afr/gfid-mismatch-resolution-with-fav-child-policy.t to bad tests</li> <li>#1452000: Spacing issue in fix-layout status output</li> <li>#1453050: [DHt] : segfault in dht_selfheal_dir_setattr while running regressions</li> <li>#1453086: Brick Multiplexing: On reboot of a node Brick multiplexing feature lost on that node as multiple brick processes get spawned</li> <li>#1453152: [Parallel Readdir] : Mounts fail when performance.parallel-readdir is set to \"off\"</li> <li>#1454533: lock_revocation.t Marked as bad in 3.11 for CentOS as well</li> <li>#1454569: [geo-rep + nl]: Multiple crashes observed on slave with \"nlc_lookup_cbk\"</li> <li>#1454597: [Tiering]: High and low watermark values when set to the same level, is allowed</li> <li>#1454612: glusterd on a node crashed after running volume profile command</li> <li>#1454686: Implement FALLOCATE FOP for EC</li> <li>#1454853: Seeing error \"Failed to get the total number of files. Unable to estimate time to complete rebalance\" in rebalance logs</li> <li>#1455177: ignore incorrect uuid validation in gd_validate_mgmt_hndsk_req</li> <li>#1455423: dht: dht self heal fails with no hashed subvol error</li> <li>#1455907: heal info shows the status of the bricks as \"Transport endpoint is not connected\" though bricks are up</li> <li>#1456224: [gluster-block]:Need a volume group profile option for gluster-block volume to add necessary options to be added.</li> <li>#1456225: gluster-block is not working as expected when shard is enabled</li> <li>#1456331: [Bitrot]: Brick process crash observed while trying to recover a bad file in disperse volume</li>"},{"location":"release-notes/3.11.1/","title":"Release notes for Gluster 3.11.1","text":"<p>This is a bugfix release. The release notes for 3.11.0, contains a listing of all the new features that were added and bugs fixed, in the GlusterFS 3.11 stable release.</p>"},{"location":"release-notes/3.11.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":""},{"location":"release-notes/3.11.1/#improved-disperse-performance","title":"Improved disperse performance","text":"<p>Fix for bug #1456259 changes the way messages are read and processed from the socket layers on the Gluster client. This has shown performance improvements on disperse volumes, and is applicable to other volume types as well, where there maybe multiple applications or users accessing the same mount point.</p>"},{"location":"release-notes/3.11.1/#group-settings-for-enabling-negative-lookup-caching-provided","title":"Group settings for enabling negative lookup caching provided","text":"<p>Ability to serve negative lookups from cache was added in 3.11.0 and with this release, a group volume set option is added for ease in enabling this feature.</p> <p>See group-nl-cache for more details.</p>"},{"location":"release-notes/3.11.1/#gluster-fuse-now-implements-oauto_unmount-feature","title":"Gluster fuse now implements \"-oauto_unmount\" feature.","text":"<p>libfuse has an auto_unmount option which, if enabled, ensures that the file system is unmounted at FUSE server termination by running a separate monitor process that performs the unmount when that occurs. This release implements that option and behavior for glusterfs.</p> <p>Note that \"auto unmount\" (robust or not) is a leaky abstraction, as the kernel cannot guarantee that at the path where the FUSE fs is mounted is actually the toplevel mount at the time of the umount(2) call, for multiple reasons, among others, see:</p> <ul> <li>fuse-devel: \"fuse: feasible to distinguish between umount and abort?\"</li> <li>https://github.com/libfuse/libfuse/issues/122</li> </ul>"},{"location":"release-notes/3.11.1/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>Status of this bug can be tracked here, #1465123</li> </ul> </li> </ol>"},{"location":"release-notes/3.11.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.11.0 are listed below.</p> <ul> <li>#1456259: limited throughput with disperse volume over small number of bricks</li> <li>#1457058: glusterfs client crash on io-cache.so(__ioc_page_wakeup+0x44)</li> <li>#1457289: tierd listens to a port.</li> <li>#1457339: DHT: slow readdirp performance</li> <li>#1457616: \"split-brain observed [Input/output error]\" error messages in samba logs during parallel rm -rf</li> <li>#1457901: nlc_lookup_cbk floods logs</li> <li>#1458570: [brick multiplexing] detach a brick if posix health check thread complaints about underlying brick</li> <li>#1458664: [Geo-rep]: METADATA errors are seen even though everything is in sync</li> <li>#1459090: all: spelling errors (debian package maintainer)</li> <li>#1459095: extras/hook-scripts: non-portable shell syntax (debian package maintainer)</li> <li>#1459392: possible repeatedly recursive healing of same file with background heal not happening when IO is going on</li> <li>#1459759: Glusterd segmentation fault in ' _Unwind_Backtrace' while running peer probe</li> <li>#1460647: posix-acl: Whitelist virtual ACL xattrs</li> <li>#1460894: Rebalance estimate time sometimes shows negative values</li> <li>#1460895: Upcall missing invalidations</li> <li>#1460896: [Negative Lookup Cache]Need a single group set command for enabling all required nl cache options</li> <li>#1460898: Enabling parallel-readdir causes dht linkto files to be visible on the mount,</li> <li>#1462121: [GNFS+EC] Unable to release the lock when the other client tries to acquire the lock on the same file</li> <li>#1462127: [Bitrot]: Inconsistency seen with 'scrub ondemand' - fails to trigger scrub</li> <li>#1462636: Use of force with volume start, creates brick directory even it is not present</li> <li>#1462661: lk fop succeeds even when lock is not acquired on at least quorum number of bricks</li> <li>#1463250: with AFR now making both nodes to return UUID for a file will result in georep consuming more resources</li> </ul>"},{"location":"release-notes/3.11.2/","title":"Release notes for Gluster 3.11.2","text":"<p>This is a bugfix release. The release notes for 3.11.1, 3.11.0, contains a listing of all the new features that were added and bugs fixed, in the GlusterFS 3.11 stable release.</p>"},{"location":"release-notes/3.11.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>There are no major features or changes made in this release.</p>"},{"location":"release-notes/3.11.2/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1465123) has a fix with this   release. As further testing is still in progress, the issue is retained as   a major issue.</li> <li>Status of this bug can be tracked here, #1465123</li> </ul> </li> </ol>"},{"location":"release-notes/3.11.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.11.0 are listed below.</p> <ul> <li>#1463512: USS: stale snap entries are seen when activation/deactivation performed during one of the glusterd's unavailability</li> <li>#1463513: [geo-rep]: extended attributes are not synced if the entry and extended attributes are done within changelog roleover/or entry sync</li> <li>#1463517: Brick Multiplexing:dmesg shows request_sock_TCP: Possible SYN flooding on port 49152 and memory related backtraces</li> <li>#1463528: [Perf] 35% drop in small file creates on smbv3 on *2</li> <li>#1463626: [Ganesha]Bricks got crashed while running posix compliance test suit on V4 mount</li> <li>#1464316: DHT: Pass errno as an argument to gf_msg</li> <li>#1465123: Fd based fops fail with EBADF on file migration</li> <li>#1465854: Regression: Heal info takes longer time when a brick is down</li> <li>#1466801: assorted typos and spelling mistakes from Debian lintian</li> <li>#1466859: dht_rename_lock_cbk crashes in upstream regression test</li> <li>#1467268: Heal info shows incorrect status</li> <li>#1468118: disperse seek does not correctly handle the end of file</li> <li>#1468200: [Geo-rep]: entry failed to sync to slave with ENOENT errror</li> <li>#1468457: selfheal deamon cpu consumption not reducing when IOs are going on and all redundant bricks are brought down one after another</li> <li>#1469459: Rebalance hangs on remove-brick if the target volume changes</li> <li>#1470938: Regression: non-disruptive(in-service) upgrade on EC volume fails</li> <li>#1471025: glusterfs process leaking memory when error occurs</li> <li>#1471611: metadata heal not happening despite having an active sink</li> <li>#1471869: cthon04 can cause segfault in gNFS/NLM</li> <li>#1472794: Test script failing with brick multiplexing enabled</li> </ul>"},{"location":"release-notes/3.11.3/","title":"Release notes for Gluster 3.11.3","text":"<p>This is a bugfix release. The release notes for 3.11.2, 3.11.1, and 3.11.0 contain a listing of all the new features that were added and bugs fixed, in the GlusterFS 3.11 stable release.</p> <p>This is possibly the last bugfix release for 3.11, as 3.12 is expected to be released around end of August, 2017, which will hence EOL the 3.11 release, as it is a short term maintenence release (see release status).</p>"},{"location":"release-notes/3.11.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>There are no major features or changes made in this release.</p>"},{"location":"release-notes/3.11.3/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1465123) has a fix with the 3.11.2   release. As further testing is still in progress, the issue is retained as   a major issue.</li> <li>Status of this bug can be tracked here, #1465123</li> </ul> </li> </ol>"},{"location":"release-notes/3.11.3/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.11.2 are listed below.</p> <ul> <li>#1475637: [Scale] : Client logs flooded with \"inode context is NULL\" error messages</li> <li>#1476822: scripts: invalid test in S32gluster_enable_shared_storage.sh</li> <li>#1476870: [EC]: md5sum mismatches every time for a file from the fuse client on EC volume</li> <li>#1476873: packaging: /var/lib/glusterd/options should be %config(noreplace)</li> <li>#1479656: Permission denied errors when appending files after readdir</li> <li>#1479692: Running sysbench on vm disk from plain distribute gluster volume causes disk corruption</li> </ul>"},{"location":"release-notes/3.12.0/","title":"Release notes for Gluster 3.12.0","text":"<p>This is a major Gluster release that includes, ability to mount sub-directories using the Gluster native protocol (FUSE), further brick multiplexing enhancements that help scale to larger brick counts per node, enhancements to gluster get-state CLI enabling better understanding of various bricks and nodes participation/roles in the cluster, ability to resolve GFID split-brain using existing CLI, easier GFID to real path mapping thus enabling easier diagnostics and correction for reported GFID issues (healing among other uses where GFID is the only available source for identifying a file), and other changes and fixes.</p> <p>The most notable features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p> <p>Further, as 3.11 release is a short term maintenance release, features included in that release are available with 3.12 as well, and could be of interest to users upgrading to 3.12 from older than 3.11 releases. The 3.11 release notes captures the list of features that were introduced with 3.11.</p>"},{"location":"release-notes/3.12.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/3.12.0/#ability-to-mount-sub-directories-using-the-gluster-fuse-protocol","title":"Ability to mount sub-directories using the Gluster FUSE protocol","text":"<p>Notes for users:</p> <p>With this release, it is possible define sub-directories to be mounted by specific clients and additional granularity in the form of clients to mount only that portion of the volume for access.</p> <p>Until recently, Gluster FUSE mounts enabled mounting the entire volume on the client. This feature helps sharing a volume among the multiple consumers along with enabling restricting access to the sub-directory of choice.</p> <p>Option controlling sub-directory allow/deny rules can be set as follows:</p> <pre><code># gluster volume set &lt;volname&gt; auth.allow \"/subdir1(192.168.1.*),/(192.168.10.*),/subdir2(192.168.8.*)\"\n</code></pre> <p>How to mount from the client:</p> <pre><code># mount -t glusterfs &lt;hostname&gt;:/&lt;volname&gt;/&lt;subdir&gt; /&lt;mount_point&gt;\n</code></pre> <p>Or,</p> <pre><code># mount -t glusterfs &lt;hostname&gt;:/&lt;volname&gt; -osubdir_mount=&lt;subdir&gt; /&lt;mount_point&gt;\n</code></pre> <p>Limitations:</p> <ul> <li>There are no throttling or QoS support for this feature. The feature will   just provide the namespace isolation for the different clients.</li> </ul> <p>Known Issues:</p> <ul> <li>Once we cross more than 1000s of subdirs in 'auth.allow' option, the   performance of reconnect / authentication would be impacted.</li> </ul>"},{"location":"release-notes/3.12.0/#gfid-to-path-conversion-is-enabled-by-default","title":"GFID to path conversion is enabled by default","text":"<p>Notes for users:</p> <p>Prior to this feature, only when quota was enabled, did the on disk data have pointers back from GFID to their respective filenames. As a result, if there were a need to locate the path given a GFID, quota had to be enabled.</p> <p>The change brought in by this feature, is to enable this on disk data to be present, for all cases, than just quota. Further, enhancements here have been to improve the manner of storing this information on disk as extended attributes.</p> <p>The internal on disk xattr that is now stored to reference the filename and parent for a GFID is, <code>trusted.gfid2path.&lt;xxhash&gt;</code></p> <p>This feature is enabled by default with this release.</p> <p>Limitations:</p> <p>None</p> <p>Known Issues:</p> <p>None</p>"},{"location":"release-notes/3.12.0/#various-enhancements-have-been-made-to-the-output-of-get-state-cli-command","title":"Various enhancements have been made to the output of get-state CLI command","text":"<p>Notes for users:</p> <p>The command <code>#gluster get-state</code> has been enhanced to output more information as below,</p> <ul> <li>Arbiter bricks are marked more clearly in a volume that has the feature   enabled</li> <li>Ability to get all volume options (both set and defaults) in the get-state   output</li> <li>Rebalance time estimates, for ongoing rebalance, is captured in the get-state   output</li> <li>If geo-replication is configured, then get-state now captures the session   details of the same</li> </ul> <p>Limitations:</p> <p>None</p> <p>Known Issues:</p> <p>None</p>"},{"location":"release-notes/3.12.0/#provided-an-option-to-set-a-limit-on-number-of-bricks-multiplexed-in-a-processes","title":"Provided an option to set a limit on number of bricks multiplexed in a processes","text":"<p>Notes for users:</p> <p>This release includes a global option to be switched on only if brick multiplexing is enabled for the cluster. The introduction of this option allows the user to control the number of bricks that are multiplexed in a process on a node. If the limit set by this option is insufficient for a single process, more processes are spawned for the subsequent bricks.</p> <p>Usage:</p> <pre><code>#gluster volume set all cluster.max-bricks-per-process &lt;value&gt;\n</code></pre>"},{"location":"release-notes/3.12.0/#provided-an-option-to-use-localtime-timestamps-in-log-entries","title":"Provided an option to use localtime timestamps in log entries","text":"<p>Limitations:</p> <p>Gluster defaults to UTC timestamps. glusterd, glusterfsd, and server-side glusterfs daemons will use UTC until one of,</p> <ol> <li>command line option is processed,</li> <li>gluster config (/var/lib/glusterd/options) is loaded,</li> <li>admin manually sets localtime-logging (cluster.localtime-logging, e.g.    <code>#gluster volume set all cluster.localtime-logging enable</code>).</li> </ol> <p>There is no mount option to make the FUSE client enable localtime logging.</p> <p>There is no option in gfapi to enable localtime logging.</p>"},{"location":"release-notes/3.12.0/#enhanced-the-option-to-export-statfs-data-for-bricks-sharing-the-same-backend-filesystem","title":"Enhanced the option to export statfs data for bricks sharing the same backend filesystem","text":"<p>Notes for users: In the past 'storage/posix' xlator had an option called option <code>export-statfs-size</code>, which, when set to 'no', exports zero as values for few fields in <code>struct statvfs</code>. These are typically reflected in an output of <code>df</code> command, from a user perspective.</p> <p>When backend bricks are shared between multiple brick processes, the values of these variables have been corrected to reflect <code>field_value / number-of-bricks-at-node</code>. Thus enabling better usage reporting and also enhancing the ability for file placement in the distribute translator when used with the option <code>min-free-disk</code>.</p>"},{"location":"release-notes/3.12.0/#provided-a-means-to-resolve-gfid-split-brain-using-the-gluster-cli","title":"Provided a means to resolve GFID split-brain using the gluster CLI","text":"<p>Notes for users:</p> <p>The existing CLI commands to heal files under split-brain did not handle cases where there was a GFID mismatch between the files. With the provided enhancement the same CLI commands can now address GFID split-brain situations based on the choices provided.</p> <p>The CLI options that are enhanced to help with this situation are,</p> <pre><code>volume heal &lt;VOLNAME&gt; split-brain {bigger-file &lt;FILE&gt; |\n    latest-mtime &lt;FILE&gt; |\n    source-brick &lt;HOSTNAME:BRICKNAME&gt; [&lt;FILE&gt;]}\n</code></pre> <p>Limitations:</p> <p>None</p> <p>Known Issues:</p> <p>None</p>"},{"location":"release-notes/3.12.0/#developer-related-added-a-siteh-for-more-vendorcompany-specific-defaults","title":"Developer related: Added a 'site.h' for more vendor/company specific defaults","text":"<p>Notes for developers:</p> <p>NOTE: Also relevant for users building from sources and needing different defaults for some options</p> <p>Most people consume Gluster in one of two ways:</p> <ul> <li>From packages provided by their OS/distribution vendor</li> <li>By building themselves from source</li> </ul> <p>For the first group it doesn't matter whether configuration is done in a configure script, via command-line options to that configure script, or in a header file. All of these end up as edits to some file under the packager's control, which is then run through their tools and process (e.g. rpmbuild) to create the packages that users will install.</p> <p>For the second group, convenience matters. Such users might not even have a script wrapped around the configure process, and editing one line in a header file is a lot easier than editing several in the configure script. This also prevents a messy profusion of configure options, dozens of which might need to be added to support a single such user's preferences. This comes back around as greater simplicity for packagers as well. This patch defines site.h as the header file for options and parameters that someone building the code for themselves might want to tweak.</p> <p>The project ships one version to reflect the developers' guess at the best defaults for most users, and sophisticated users with unusual needs can override many options at once just by maintaining their own version of that file. Further guidelines for how to determine whether an option should go in configure.ac or site.h are explained within site.h itself.</p>"},{"location":"release-notes/3.12.0/#developer-related-added-xxhash-library-to-libglusterfs-for-required-use","title":"Developer related: Added xxhash library to libglusterfs for required use","text":"<p>Notes for developers:</p> <p>Function gf_xxh64_wrapper has been added as a wrapper into libglusterfs for consumption by interested developers.</p> <p>Reference to code can be found here</p>"},{"location":"release-notes/3.12.0/#developer-related-glfs_ipc-api-in-libgfapi-is-removed-as-a-public-interface","title":"Developer related: glfs_ipc API in libgfapi is removed as a public interface","text":"<p>Notes for users:</p> <p>glfs_ipc API was maintained as a public API in the GFAPI libraries. This has been removed as a public interface, from this release onwards.</p> <p>Any application, written directly to consume gfapi as a means of interfacing with Gluster, using the mentioned API, would need to be modified to adapt to this change.</p> <p>NOTE: As of this release there are no known public consumers of this API</p>"},{"location":"release-notes/3.12.0/#major-issues","title":"Major issues","text":"<ol> <li>Expanding a gluster volume that is sharded may cause file corruption</li> <li>Sharded volumes are typically used for VM images, if such volumes are      expanded or possibly contracted (i.e add/remove bricks and rebalance) there      are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1465123) has a fix with this      release. As further testing is still in progress, the issue is retained as      a major issue.</li> <li>Status of this bug can be tracked here, #1465123</li> </ol>"},{"location":"release-notes/3.12.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.11.0 are listed below.</p> <ul> <li>#1047975: glusterfs/extras: add a convenience script to label (selinux) gluster bricks</li> <li>#1254002: [RFE] Have named pthreads for easier debugging</li> <li>#1318100: RFE : SELinux translator to support setting SELinux contexts on files in a glusterfs volume</li> <li>#1318895: Heal info shows incorrect status</li> <li>#1326219: Make Gluster/NFS an optional component</li> <li>#1356453: DHT: slow readdirp performance</li> <li>#1366817: AFR returns the node uuid of the same node for every file in the replica</li> <li>#1381970: GlusterFS Daemon stops working after a longer runtime and higher file workload due to design flaws?</li> <li>#1400924: [RFE] Rsync flags for performance improvements</li> <li>#1402406: Client stale file handle error in dht-linkfile.c under SPEC SFS 2014 VDA workload</li> <li>#1414242: [whql][virtio-block+glusterfs]\"Disk Stress\" and \"Disk Verification\" job always failed on win7-32/win2012/win2k8R2 guest</li> <li>#1421938: systemic testing: seeing lot of ping time outs which would lead to splitbrains</li> <li>#1424817: Fix wrong operators, found by coverty</li> <li>#1428061: Halo Replication feature for AFR translator</li> <li>#1428673: possible repeatedly recursive healing of same file with background heal not happening when IO is going on</li> <li>#1430608: [RFE] Pass slave volume in geo-rep as read-only</li> <li>#1431908: Enabling parallel-readdir causes dht linkto files to be visible on the mount,</li> <li>#1433906: quota: limit-usage command failed with error \" Failed to start aux mount\"</li> <li>#1437748: Spacing issue in fix-layout status output</li> <li>#1438966: Multiple bricks WILL crash after TCP port probing</li> <li>#1439068: Segmentation fault when creating a qcow2 with qemu-img</li> <li>#1442569: Implement Negative lookup cache feature to improve create performance</li> <li>#1442788: Cleanup timer wheel in glfs_fini()</li> <li>#1442950: RFE: Enhance handleops readdirplus operation to return handles along with dirents</li> <li>#1444596: [Brick Multiplexing] : Bricks for multiple volumes going down after glusterd restart and not coming back up after volume start force</li> <li>#1445609: [perf-xlators/write-behind] write-behind-window-size could be set greater than its allowed MAX value 1073741824</li> <li>#1446172: Brick Multiplexing :- resetting a brick bring down other bricks with same PID</li> <li>#1446362: cli xml status of detach tier broken</li> <li>#1446412: error-gen don't need to convert error string to int in every fop</li> <li>#1446516: [Parallel Readdir] : Mounts fail when performance.parallel-readdir is set to \"off\"</li> <li>#1447116: gfapi exports non-existing glfs_upcall_inode_get_event symbol</li> <li>#1447266: [snapshot cifs]ls on .snaps directory is throwing input/output error over cifs mount</li> <li>#1447389: Brick Multiplexing: seeing Input/Output Error for .trashcan</li> <li>#1447609: server: fd should be refed before put into fdtable</li> <li>#1447630: Don't allow rebalance/fix-layout operation on sharding enabled volumes till dht+sharding bugs are fixed</li> <li>#1447826: potential endless loop in function glusterfs_graph_validate_options</li> <li>#1447828: Should use dict_set_uint64 to set fd-&gt;pid when dump fd's info to dict</li> <li>#1447953: Remove inadvertently merged IPv6 code</li> <li>#1447960: [Tiering]: High and low watermark values when set to the same level, is allowed</li> <li>#1447966: 'make cscope' fails on a clean tree due to missing generated XDR files</li> <li>#1448150: USS: stale snap entries are seen when activation/deactivation performed during one of the glusterd's unavailability</li> <li>#1448265: use common function iov_length to instead of duplicate code</li> <li>#1448293: Implement FALLOCATE FOP for EC</li> <li>#1448299: Mismatch in checksum of the image file after copying to a new image file</li> <li>#1448364: limited throughput with disperse volume over small number of bricks</li> <li>#1448640: Seeing error \"Failed to get the total number of files. Unable to estimate time to complete rebalance\" in rebalance logs</li> <li>#1448692: use GF_ATOMIC to generate callid</li> <li>#1448804: afr: include quorum type and count when dumping afr priv</li> <li>#1448914: [geo-rep]: extended attributes are not synced if the entry and extended attributes are done within changelog roleover/or entry sync</li> <li>#1449008: remove useless options from glusterd's volume set table</li> <li>#1449232: race condition between client_ctx_get and client_ctx_set</li> <li>#1449329: When either killing or restarting a brick with performance.stat-prefetch on, stat sometimes returns a bad st_size value.</li> <li>#1449348: disperse seek does not correctly handle the end of file</li> <li>#1449495: glfsheal: crashed(segfault) with disperse volume in RDMA</li> <li>#1449610: [New] - Replacing an arbiter brick while I/O happens causes vm pause</li> <li>#1450010: [gluster-block]:Need a volume group profile option for gluster-block volume to add necessary options to be added.</li> <li>#1450559: Error 0-socket.management: socket_poller XX.XX.XX.XX:YYY failed (Input/output error) during any volume operation</li> <li>#1450630: [brick multiplexing] detach a brick if posix health check thread complaints about underlying brick</li> <li>#1450730: Add tests/basic/afr/gfid-mismatch-resolution-with-fav-child-policy.t to bad tests</li> <li>#1450975: Fix on demand file migration from client</li> <li>#1451083: crash in dht_rmdir_do</li> <li>#1451162: dht: Make throttle option \"normal\" value uniform across dht_init and dht_reconfigure</li> <li>#1451248: Brick Multiplexing: On reboot of a node Brick multiplexing feature lost on that node as multiple brick processes get spawned</li> <li>#1451588: [geo-rep + nl]: Multiple crashes observed on slave with \"nlc_lookup_cbk\"</li> <li>#1451724: glusterfind pre crashes with \"UnicodeDecodeError: 'utf8' codec can't decode\" error when the <code>--no-encode</code> is used</li> <li>#1452006: tierd listens to a port.</li> <li>#1452084: [Ganesha] : Stale linkto files after unsuccessfuly hardlinks</li> <li>#1452102: [DHt] : segfault in dht_selfheal_dir_setattr while running regressions</li> <li>#1452378: Cleanup unnecessary logs in fix_quorum_options</li> <li>#1452527: Shared volume doesn't get mounted on few nodes after rebooting all nodes in cluster.</li> <li>#1452956: glusterd on a node crashed after running volume profile command</li> <li>#1453151: [RFE] glusterfind: add --end-time and --field-separator options</li> <li>#1453977: Brick Multiplexing: Deleting brick directories of the base volume must gracefully detach from glusterfsd without impacting other volumes IO(currently seeing transport end point error)</li> <li>#1454317: [Bitrot]: Brick process crash observed while trying to recover a bad file in disperse volume</li> <li>#1454375: ignore incorrect uuid validation in gd_validate_mgmt_hndsk_req</li> <li>#1454418: Glusterd segmentation fault in ' _Unwind_Backtrace' while running peer probe</li> <li>#1454701: DHT: Pass errno as an argument to gf_msg</li> <li>#1454865: [Brick Multiplexing] heal info shows the status of the bricks as \"Transport endpoint is not connected\" though bricks are up</li> <li>#1454872: [Geo-rep]: Make changelog batch size configurable</li> <li>#1455049: [GNFS+EC] Unable to release the lock when the other client tries to acquire the lock on the same file</li> <li>#1455104: dht: dht self heal fails with no hashed subvol error</li> <li>#1455179: [Geo-rep]: Log time taken to sync entry ops, metadata ops and data ops for each batch</li> <li>#1455301: gluster-block is not working as expected when shard is enabled</li> <li>#1455559: [Geo-rep]: METADATA errors are seen even though everything is in sync</li> <li>#1455831: libglusterfs: updates old comment for 'arena_size'</li> <li>#1456361: DHT : for many operation directory/file path is '(null)' in brick log</li> <li>#1456385: glusterfs client crash on io-cache.so(__ioc_page_wakeup+0x44)</li> <li>#1456405: Brick Multiplexing:dmesg shows request_sock_TCP: Possible SYN flooding on port 49152 and memory related backtraces</li> <li>#1456582: \"split-brain observed [Input/output error]\" error messages in samba logs during parallel rm -rf</li> <li>#1456653: nlc_lookup_cbk floods logs</li> <li>#1456898: Regression test for add-brick failing with brick multiplexing enabled</li> <li>#1457202: Use of force with volume start, creates brick directory even it is not present</li> <li>#1457808: all: spelling errors (debian package maintainer)</li> <li>#1457812: extras/hook-scripts: non-portable shell syntax (debian package maintainer)</li> <li>#1457981: client fails to connect to the brick due to an incorrect port reported back by glusterd</li> <li>#1457985: Rebalance estimate time sometimes shows negative values</li> <li>#1458127: Upcall missing invalidations</li> <li>#1458193: Implement seek() fop in trace translator</li> <li>#1458197: io-stats usability/performance statistics enhancements</li> <li>#1458539: [Negative Lookup]: negative lookup features doesn't seem to work on restart of volume</li> <li>#1458582: add all as volume option in gluster volume get usage</li> <li>#1458768: [Perf] 35% drop in small file creates on smbv3 on *2</li> <li>#1459402: brick process crashes while running bug-1432542-mpx-restart-crash.t in a loop</li> <li>#1459530: [RFE] Need a way to resolve gfid split brains</li> <li>#1459620: [geo-rep]: Worker crashed with TypeError: expected string or buffer</li> <li>#1459781: Brick Multiplexing:Even clean Deleting of the brick directories of base volume is resulting in posix health check errors(just as we see in ungraceful delete methods)</li> <li>#1459971: posix-acl: Whitelist virtual ACL xattrs</li> <li>#1460225: Not cleaning up stale socket file is resulting in spamming glusterd logs with warnings of \"got disconnect from stale rpc\"</li> <li>#1460514: [Ganesha] : Ganesha crashes while cluster enters failover/failback mode</li> <li>#1460585: Revert CLI restrictions on running rebalance in VM store use case</li> <li>#1460638: ec-data-heal.t fails with brick mux enabled</li> <li>#1460659: Avoid one extra call of l(get|list)xattr system call after use buffer in posix_getxattr</li> <li>#1461129: malformed cluster.server-quorum-ratio setting can lead to split brain</li> <li>#1461648: Update GlusterFS README</li> <li>#1461655: glusterd crashes when statedump is taken</li> <li>#1461792: lk fop succeeds even when lock is not acquired on at least quorum number of bricks</li> <li>#1461845: [Bitrot]: Inconsistency seen with 'scrub ondemand' - fails to trigger scrub</li> <li>#1462200: glusterd status showing failed when it's stopped in RHEL7</li> <li>#1462241: glusterfind: syntax error due to uninitialized variable 'end'</li> <li>#1462790: with AFR now making both nodes to return UUID for a file will result in georep consuming more resources</li> <li>#1463178: [Ganesha]Bricks got crashed while running posix compliance test suit on V4 mount</li> <li>#1463365: Changes for Maintainers 2.0</li> <li>#1463648: Use GF_XATTR_LIST_NODE_UUIDS_KEY to figure out local subvols</li> <li>#1464072: cns-brick-multiplexing: brick process fails to restart after gluster pod failure</li> <li>#1464091: Regression: Heal info takes longer time when a brick is down</li> <li>#1464110: [Scale] : Rebalance ETA (towards the end) may be inaccurate,even on a moderately large data set.</li> <li>#1464327: glusterfs client crashes when reading large directory</li> <li>#1464359: selfheal deamon cpu consumption not reducing when IOs are going on and all redundant bricks are brought down one after another</li> <li>#1465024: glusterfind: DELETE path needs to be unquoted before further processing</li> <li>#1465075: Fd based fops fail with EBADF on file migration</li> <li>#1465214: build failed with GF_DISABLE_MEMPOOL</li> <li>#1465559: multiple brick processes seen on gluster(fs)d restart in brick multiplexing</li> <li>#1466037: Fuse mount crashed with continuous dd on a file and reading the file in parallel</li> <li>#1466110: dht_rename_lock_cbk crashes in upstream regression test</li> <li>#1466188: Add scripts to analyze quota xattr in backend and identify accounting issues</li> <li>#1466785: assorted typos and spelling mistakes from Debian lintian</li> <li>#1467209: [Scale] : Rebalance ETA shows the initial estimate to be ~140 days,finishes within 18 hours though.</li> <li>#1467277: [GSS] [RFE] add documentation on --xml and --mode=script options to gluster interactive help and man pages</li> <li>#1467313: cthon04 can cause segfault in gNFS/NLM</li> <li>#1467513: CIFS:[USS]: .snaps is not accessible from the CIFS client after volume stop/start</li> <li>#1467718: [Geo-rep]: entry failed to sync to slave with ENOENT errror</li> <li>#1467841: gluster volume status --xml fails when there are 100 volumes</li> <li>#1467986: possible memory leak in glusterfsd with multiplexing</li> <li>#1468191: Enable stat-prefetch in group virt</li> <li>#1468261: Regression: non-disruptive(in-service) upgrade on EC volume fails</li> <li>#1468279: metadata heal not happening despite having an active sink</li> <li>#1468291: NFS Sub directory is getting mounted on solaris 10 even when the permission is restricted in nfs.export-dir volume option</li> <li>#1468432: tests: fix stats-dump.t failure</li> <li>#1468433: rpc: include current second in timed out frame cleanup on client</li> <li>#1468863: Assert in mem_pools_fini during libgfapi-fini-hang.t on NetBSD</li> <li>#1469029: Rebalance hangs on remove-brick if the target volume changes</li> <li>#1469179: invoke checkpatch.pl with strict</li> <li>#1469964: cluster/dht: Fix hardlink migration failures</li> <li>#1470170: mem-pool: mem_pool_fini() doesn't release entire memory allocated</li> <li>#1470220: glusterfs process leaking memory when error occurs</li> <li>#1470489: bulk removexattr shouldn't allow removal of trusted.gfid/trusted.glusterfs.volume-id</li> <li>#1470533: Brick Mux Setup: brick processes(glusterfsd) crash after a restart of volume which was preceded with some actions</li> <li>#1470768: file /usr/lib64/glusterfs/3.12dev/xlator is not owned by any package</li> <li>#1471790: [Brick Multiplexing] : cluster.brick-multiplex has no description.</li> <li>#1472094: Test script failing with brick multiplexing enabled</li> <li>#1472250: Remove fop_enum_to_string, get_fop_int usage in libglusterfs</li> <li>#1472417: No clear method to multiplex all bricks to one process(glusterfsd) with cluster.max-bricks-per-process option</li> <li>#1472949: [distribute] crashes seen upon rmdirs</li> <li>#1475181: dht remove-brick status does not indicate failures files not migrated because of a lack of space</li> <li>#1475192: [Scale] : Rebalance ETA shows the initial estimate to be ~140 days,finishes within 18 hours though.</li> <li>#1475258: [Geo-rep]: Geo-rep hangs in changelog mode</li> <li>#1475399: Rebalance estimate time sometimes shows negative values</li> <li>#1475635: [Scale] : Client logs flooded with \"inode context is NULL\" error messages</li> <li>#1475641: gluster core dump due to assert failed GF_ASSERT (brick_index &lt; wordcount);</li> <li>#1475662: [Scale] : Rebalance Logs are bulky.</li> <li>#1476109: Brick Multiplexing: Brick process crashed at changetimerecorder(ctr) translator when restarting volumes</li> <li>#1476208: [geo-rep]: few of the self healed hardlinks on master did not sync to slave</li> <li>#1476653: cassandra fails on gluster-block with both replicate and ec volumes</li> <li>#1476654: gluster-block default shard-size should be 64MB</li> <li>#1476819: scripts: invalid test in S32gluster_enable_shared_storage.sh</li> <li>#1476863: packaging: /var/lib/glusterd/options should be %config(noreplace)</li> <li>#1476868: [EC]: md5sum mismatches every time for a file from the fuse client on EC volume</li> <li>#1477152: [Remove-brick] Few files are getting migrated eventhough the bricks crossed cluster.min-free-disk value</li> <li>#1477190: [GNFS] GNFS got crashed while mounting volume on solaris client</li> <li>#1477381: Revert experimental and 4.0 features to prepare for 3.12 release</li> <li>#1477405: eager-lock should be off for cassandra to work at the moment</li> <li>#1477994: [Ganesha] : Ganesha crashes while cluster enters failover/failback mode</li> <li>#1478276: separating attach tier and add brick</li> <li>#1479118: AFR entry self heal removes a directory's .glusterfs symlink.</li> <li>#1479263: nfs process crashed in \"nfs3svc_getattr\"</li> <li>#1479303: [Perf] : Large file sequential reads are off target by ~38% on FUSE/Ganesha</li> <li>#1479474: Add NULL gfid checks before creating file</li> <li>#1479655: Permission denied errors when appending files after readdir</li> <li>#1479662: when gluster pod is restarted, bricks from the restarted pod fails to connect to fuse, self-heal etc</li> <li>#1479717: Running sysbench on vm disk from plain distribute gluster volume causes disk corruption</li> <li>#1480448: More useful error - replace 'not optimal'</li> <li>#1480459: Gluster puts PID files in wrong place</li> <li>#1481931: [Scale] : I/O errors on multiple gNFS mounts with \"Stale file handle\" during rebalance of an erasure coded volume.</li> <li>#1482804: Negative Test: glusterd crashes for some of the volume options if set at cluster level</li> <li>#1482835: glusterd fails to start</li> <li>#1483402: DHT: readdirp fails to read some directories.</li> <li>#1483996: packaging: use rdma-core(-devel) instead of ibverbs, rdmacm; disable rdma on armv7hl</li> <li>#1484440: packaging: /run and /var/run; prefer /run</li> <li>#1484885: [rpc]: EPOLLERR - disconnecting now messages every 3 secs after completing rebalance</li> <li>#1486107: /var/lib/glusterd/peers File had a blank line, Stopped Glusterd from starting</li> <li>#1486110: [quorum]: Replace brick is happened when Quorum not met.</li> <li>#1486120: symlinks trigger faulty geo-replication state (rsnapshot usecase)</li> <li>#1486122: gluster-block profile needs to have strict-o-direct</li> </ul>"},{"location":"release-notes/3.12.1/","title":"Release notes for Gluster 3.12.1","text":"<p>This is a bugfix release. The Release Notes for 3.12.0, 3.12.1 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<pre><code> No Major changes\n</code></pre>"},{"location":"release-notes/3.12.1/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1465123) has a fix with this   release. As further testing is still in progress, the issue is retained as   a major issue.</li> <li>Status of this bug can be tracked here, #1465123</li> </ul> </li> </ol>"},{"location":"release-notes/3.12.1/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 12 patches have been merged, addressing 11 bugs\n</code></pre> <ul> <li>#1486538: [geo-rep+qr]: Crashes observed at slave from qr_lookup_sbk during rename/hardlink/rebalance</li> <li>#1486557: Log entry of files skipped/failed during rebalance operation</li> <li>#1487033: rpc: client_t and related objects leaked due to incorrect ref counts</li> <li>#1487319: afr: check op_ret value in __afr_selfheal_name_impunge</li> <li>#1488119: scripts: mount.glusterfs contains non-portable bashisms</li> <li>#1488168: Launch metadata heal in discover code path.</li> <li>#1488387: gluster-blockd process crashed and core generated</li> <li>#1488718: [RHHI] cannot boot vms created from template when disk format = qcow2</li> <li>#1489260: Crash in dht_check_and_open_fd_on_subvol_task()</li> <li>#1489296: glusterfsd (brick) process crashed</li> <li>#1489511: return ENOSYS for 'non readable' FOPs</li> </ul>"},{"location":"release-notes/3.12.10/","title":"Release notes for Gluster 3.12.10","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8 and 3.12.9 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.10/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/3.12.10/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.10/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.9 are listed below .</p> <ul> <li>#1570475: Rebalance on few nodes doesn't seem to complete - stuck at FUTEX_WAIT</li> <li>#1576816: GlusterFS can be improved</li> <li>#1577164: gfapi: broken symbol versions</li> <li>#1577845: Geo-rep: faulty session due to OSError: [Errno 95] Operation not supported</li> <li>#1577862: [geo-rep]: Upgrade fails, session in FAULTY state</li> <li>#1577868: Glusterd crashed on a few (master) nodes</li> <li>#1577871: [geo-rep]: Geo-rep scheduler fails</li> <li>#1580519: the regression test \"tests/bugs/posix/bug-990028.t\" fails</li> <li>#1581746: bug-1309462.t is failing reliably due to changes in security.capability changes in the kernel</li> <li>#1590133: xdata is leaking in server3_3_seek</li> </ul>"},{"location":"release-notes/3.12.11/","title":"Release notes for Gluster 3.12.11","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.12.9, and 3.12.10 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.11/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains a fix for a security vulerability in Gluster as follows,</p> <ul> <li>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10841</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10841</li> </ul> <p>Installing the updated packages and restarting gluster services on gluster brick hosts, will help prevent the security issue.</p>"},{"location":"release-notes/3.12.11/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.11/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.10 are listed below.</p> <ul> <li>#1559829: snap/gcron.py: ABRT report for package glusterfs has reached 100 occurrences</li> <li>#1591187: Gluster Block PVC fails to mount on Jenkins pod</li> <li>#1593526: CVE-2018-10841 glusterfs: access trusted peer group via remote-host command [glusterfs upstream]</li> </ul>"},{"location":"release-notes/3.12.12/","title":"Release notes for Gluster 3.12.12","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.12.9, 3.12.10 and 3.12.11 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.12/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/3.12.12/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.12/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.12 are listed below</p> <ul> <li>#1579673: Remove EIO from the dht_inode_missing macro</li> <li>#1595528: rmdir is leaking softlinks to directories in .glusterfs</li> <li>#1597120: Add quorum checks in post-op</li> <li>#1597123: Changes to self-heal logic w.r.t. detecting of split-brains</li> <li>#1597154: When storage reserve limit is reached, appending data to an existing file throws EROFS error</li> <li>#1597230: glustershd crashes when index heal is launched before graph is initialized.</li> <li>#1598121: lookup not assigning gfid if file is not present in all bricks of replica</li> <li>#1598720: afr: fix bug-1363721.t failure</li> <li>#1599247: afr: don't update readables if inode refresh failed on all children</li> </ul>"},{"location":"release-notes/3.12.13/","title":"Release notes for Gluster 3.12.13","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.12.9, 3.12.10, 3.12.11 and 3.12.12 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.13/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/3.12.13/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.13/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed in release-3.12.13 are listed below</p> <ul> <li>#1599788: _is_prefix should return false for 0-length strings</li> <li>#1603093: directories are invisible on client side</li> <li>#1613512: Backport glusterfs-client memory leak fix to 3.12.x</li> <li>#1618838: gluster bash completion leaks TOP=0 into the environment</li> <li>#1618348: [Ganesha] Ganesha crashed in mdcache_alloc_and_check_handle while running bonnie and untars with parallel lookups</li> </ul>"},{"location":"release-notes/3.12.14/","title":"Release notes for Gluster 3.12.14","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.12.9, 3.12.10, 3.12.11, 3.12.12 and 3.12.13 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.14/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li> <p>This release contains fix for following security vulnerabilities,</p> </li> <li> <p>https://nvd.nist.gov/vuln/detail/CVE-2018-10904</p> </li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10907</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10911</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10913</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10914</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10923</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10926</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10927</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10928</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10929</li> <li> <p>https://nvd.nist.gov/vuln/detail/CVE-2018-10930</p> </li> <li> <p>To resolve the security vulnerabilities following limitations were made in GlusterFS</p> </li> <li> <p>open,read,write on special files like char and block are no longer permitted</p> </li> <li> <p>io-stat xlator can dump stat info only to /var/run/gluster directory</p> </li> <li> <p>Addressed an issue that affected copying a file over SSL/TLS in a volume</p> </li> </ol> <p>Installing the updated packages and restarting gluster services on gluster brick hosts, will fix the security issues.</p>"},{"location":"release-notes/3.12.14/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.14/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.14 are listed below.</p> <ul> <li>#1622405: Problem with SSL/TLS encryption on Gluster 4.0 &amp; 4.1</li> <li>#1625286: Information Exposure in posix_get_file_contents function in posix-helpers.c</li> <li>#1625648: I/O to arbitrary devices on storage server</li> <li>#1625654: Stack-based buffer overflow in server-rpc-fops.c allows remote attackers to execute arbitrary code</li> <li>#1625656: Improper deserialization in dict.c:dict_unserialize() can allow attackers to read arbitrary memory</li> <li>#1625660: Unsanitized file names in debug/io-stats translator can allow remote attackers to execute arbitrary code</li> <li>#1625664: Files can be renamed outside volume</li> </ul>"},{"location":"release-notes/3.12.15/","title":"Release notes for Gluster 3.12.15","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.12.9, 3.12.10, 3.12.11 3.12.12, 3.12.13 and 3.12.14 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.15/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/3.12.15/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.15/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.15 are listed below.</p> <ul> <li>#1569336: Volume status inode is broken with brickmux</li> <li>#1625588: Prevent hangs while increasing replica-count/replace-brick for directory hierarchy</li> <li>#1497989: Gluster 3.12.1 Packages require manual systemctl daemon reload after install</li> <li>#1512371: parallel-readdir = TRUE prevents directories listing</li> <li>#1633625: split-brain observed on parent dir</li> <li>#1637989: data-self-heal in arbiter volume results in stale locks.</li> </ul>"},{"location":"release-notes/3.12.2/","title":"Release notes for Gluster 3.12.2","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<pre><code> 1.) In a pure distribute volume there is no source to heal the replaced brick\n from and hence would cause a loss of data that was present in the replaced brick.\n The CLI has been enhanced to prevent a user from inadvertently using replace brick\n in a pure distribute volume. It is advised to use add/remove brick to migrate from\n an existing brick in a pure distribute volume.\n</code></pre>"},{"location":"release-notes/3.12.2/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1465123 is still pending, and not yet   part of this release.</li> </ul> </li> <li> <p>Gluster volume restarts fail if the sub directory export feature is in use.     Status of this issue can be tracked here, #1501315</p> </li> <li> <p>Mounting a gluster snapshot will fail, when attempting a FUSE based mount of     the snapshot. So for the current users, it is recommend to only access snapshot     via \".snaps\" directory on a mounted gluster volume.     Status of this issue can be tracked here, #1501378</p> </li> </ol>"},{"location":"release-notes/3.12.2/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 31 patches have been merged, addressing 28 bugs\n</code></pre> <ul> <li>#1490493: Sub-directory mount details are incorrect in /proc/mounts</li> <li>#1491178: GlusterD returns a bad memory pointer in glusterd_get_args_from_dict()</li> <li>#1491292: Provide brick list as part of VOLUME_CREATE event.</li> <li>#1491690: rpc: TLSv1_2_method() is deprecated in OpenSSL-1.1</li> <li>#1492026: set the shard-block-size to 64MB in virt profile</li> <li>#1492061: CLIENT_CONNECT event not being raised</li> <li>#1492066: AFR_SUBVOL_UP and AFR_SUBVOLS_DOWN events not working</li> <li>#1493975: disallow replace brick operation on plain distribute volume</li> <li>#1494523: Spelling errors in 3.12.1</li> <li>#1495162: glusterd ends up with multiple uuids for the same node</li> <li>#1495397: Make event-history feature configurable and have it disabled by default</li> <li>#1495858: gluster volume create asks for confirmation for replica-2 volume even with force</li> <li>#1496238: [geo-rep]: Scheduler help needs correction for description of --no-color</li> <li>#1496317: [afr] split-brain observed on T files post hardlink and rename in x3 volume</li> <li>#1496326: [GNFS+EC] lock is being granted to 2 different client for the same data range at a time after performing lock acquire/release from the clients1</li> <li>#1497084: glusterfs process consume huge memory on both server and client node</li> <li>#1499123: Readdirp is considerably slower than readdir on acl clients</li> <li>#1499150: Improve performance with xattrop update.</li> <li>#1499158: client-io-threads option not working for replicated volumes</li> <li>#1499202: self-heal daemon stuck</li> <li>#1499392: [geo-rep]: Improve the output message to reflect the real failure with schedule_georep script</li> <li>#1500396: [geo-rep]: Observed \"Operation not supported\" error with traceback on slave log</li> <li>#1500472: Use a bitmap to store local node info instead of conf-&gt;local_nodeuuids[i].uuids</li> <li>#1500662: gluster volume heal info \"healed\" and \"heal-failed\" showing wrong information</li> <li>#1500835: [geo-rep]: Status shows ACTIVE for most workers in EC before it becomes the PASSIVE</li> <li>#1500841: [geo-rep]: Worker crashes with OSError: [Errno 61] No data available</li> <li>#1500845: [geo-rep] master worker crash with interrupted system call</li> <li>#1500853: [geo-rep]: Incorrect last sync \"0\" during hystory crawl after upgrade/stop-start</li> <li>#1501022: Make choose-local configurable through <code>volume-set</code> command</li> <li>#1501154: Brick Multiplexing: Gluster volume start force complains with command \"Error : Request timed out\" when there are multiple volumes</li> </ul>"},{"location":"release-notes/3.12.3/","title":"Release notes for Gluster 3.12.3","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li> <p>The two regression related to with subdir mount got fixed - gluster volume restart failure (#1465123) - mounting gluster snapshot via fuse (#1501378)</p> </li> <li> <p>Improvements for \"help\" command with in gluster cli (#1509786)</p> </li> <li> <p>Introduction of new api glfs_fd_set_lkowner() to set lock owner</p> </li> </ol>"},{"location":"release-notes/3.12.3/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1465123 is still pending, and not yet   part of this release.</li> </ul> </li> </ol>"},{"location":"release-notes/3.12.3/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 25 patches have been merged, addressing 25 bugs\n</code></pre> <ul> <li>#1484489: File-level WORM allows mv over read-only files</li> <li>#1494527: glusterfs fails to build twice in a row</li> <li>#1499889: md-cache uses incorrect xattr keynames for GF_POSIX_ACL keys</li> <li>#1499892: md-cache: xattr values should not be checked with string functions</li> <li>#1501238: [SNAPSHOT] Unable to mount a snapshot on client</li> <li>#1501315: Gluster Volume restart fail after exporting fuse sub-dir</li> <li>#1501864: Add generated HMAC token in header for webhook calls</li> <li>#1501956: gfapi: API needed to set lk_owner</li> <li>#1502104: [geo-rep]: RSYNC throwing internal errors</li> <li>#1503239: [Glusterd] Volume operations fail on a (tiered) volume because of a stale lock held by one of the nodes</li> <li>#1505221: glusterfs client crash when removing directories</li> <li>#1505323: When sub-dir is mounted on Fuse client,adding bricks to the same volume unmounts the subdir from fuse client</li> <li>#1505370: Mishandling null check at send_brick_req of glusterfsd/src/gf_attach.c</li> <li>#1505373: server.allow-insecure should be visible in \"gluster volume set help\"</li> <li>#1505527: Posix compliance rename test fails on fuse subdir mount</li> <li>#1505846: [GSS] gluster volume status command is missing in man page</li> <li>#1505856: Potential use of NULL <code>this</code> variable before it gets initialized</li> <li>#1507747: clean up port map on brick disconnect</li> <li>#1507748: Brick port mismatch</li> <li>#1507877: reset-brick commit force failed with glusterd_volume_brickinfo_get Returning -1</li> <li>#1508283: stale brick processes getting created and volume status shows brick as down(pkill glusterfsd glusterfs ,glusterd restart)</li> <li>#1509200: Event webhook should work with HTTPS urls</li> <li>#1509786: The output of the \"gluster help\" command is difficult to read</li> <li>#1511271: Rebalance estimate(ETA) shows wrong details(as intial message of 10min wait reappears) when still in progress</li> <li>#1511301: In distribute volume after glusterd restart, brick goes offline</li> </ul>"},{"location":"release-notes/3.12.4/","title":"Release notes for Gluster 3.12.4","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.4/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1465123 is still pending, and not yet   part of this release.</li> </ul> </li> </ol>"},{"location":"release-notes/3.12.4/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 13 patches have been merged, addressing 12 bugs\n</code></pre> <ul> <li>#1478411: Directory listings on fuse mount are very slow due to small number of getdents() entries</li> <li>#1511782: In Replica volume 2*2 when quorum is set, after glusterd restart nfs server is coming up instead of self-heal daemon</li> <li>#1512432: Test bug-1483058-replace-brick-quorum-validation.t fails inconsistently</li> <li>#1513258: NetBSD port</li> <li>#1514380: default timeout of 5min not honored for analyzing split-brain files post setfattr replica.split-brain-heal-finalize</li> <li>#1514420: gluster volume splitbrain info needs to display output of each brick in a stream fashion instead of buffering and dumping at the end</li> <li>#1515042: bug-1247563.t is failing on master</li> <li>#1516691: Rebalance fails on NetBSD because fallocate is not implemented</li> <li>#1517689: Memory leak in locks xlator</li> <li>#1518061: Remove 'summary' option from 'gluster vol heal..' CLI</li> <li>#1523048: glusterd consuming high memory</li> <li>#1523455: Store allocated objects in the mem_acct</li> </ul>"},{"location":"release-notes/3.12.5/","title":"Release notes for Gluster 3.12.5","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.5/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1465123 is still pending, and not yet   part of this release.</li> </ul> </li> </ol>"},{"location":"release-notes/3.12.5/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 12 patches have been merged, addressing 11 bugs\n</code></pre> <ul> <li>#1489043: The number of bytes of the quota specified in version 3.7 or later is incorrect</li> <li>#1511301: In distribute volume after glusterd restart, brick goes offline</li> <li>#1525850: rdma transport may access an obsolete item in gf_rdma_device_t-&gt;all_mr, and causes glusterfsd/glusterfs process crash.</li> <li>#1527276: feature/bitrot: remove internal xattrs from lookup cbk</li> <li>#1529085: fstat returns ENOENT/ESTALE</li> <li>#1529088: opening a file that is destination of rename results in ENOENT errors</li> <li>#1529095: /usr/sbin/glusterfs crashing on Red Hat OpenShift Container Platform node</li> <li>#1529539: JWT support without external dependency</li> <li>#1530448: glustershd fails to start on a volume force start after a brick is down</li> <li>#1530455: Files are not rebalanced if destination brick(available size) is of smaller size than source brick(available size)</li> <li>#1531372: Use after free in cli_cmd_volume_create_cbk</li> </ul>"},{"location":"release-notes/3.12.6/","title":"Release notes for Gluster 3.12.6","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.5 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.6/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption #1465123 is still pending, and not yet   part of this release.</li> </ul> </li> </ol>"},{"location":"release-notes/3.12.6/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 16 patches have been merged, addressing 16 bugs\n</code></pre> <ul> <li>#1510342: Not all files synced using geo-replication</li> <li>#1533269: Random GlusterFSD process dies during rebalance</li> <li>#1534847: entries not getting cleared post healing of softlinks (stale entries showing up in heal info)</li> <li>#1536334: [Disperse] Implement open fd heal for disperse volume</li> <li>#1537346: glustershd/glusterd is not using right port when connecting to glusterfsd process</li> <li>#1539516: DHT log messages: Found anomalies in (null) (gfid = 00000000-0000-0000-0000-000000000000). Holes=1 overlaps=0</li> <li>#1540224: dht_(f)xattrop does not implement migration checks</li> <li>#1541267: dht_layout_t leak in dht_populate_inode_for_dentry</li> <li>#1541930: A down brick is incorrectly considered to be online and makes the volume to be started without any brick available</li> <li>#1542054: tests/bugs/cli/bug-1169302.t fails spuriously</li> <li>#1542475: Random failures in tests/bugs/nfs/bug-974972.t</li> <li>#1542601: The used space in the volume increases when the volume is expanded</li> <li>#1542615: tests/bugs/core/multiplex-limit-issue-151.t fails sometimes in upstream master</li> <li>#1542826: Mark tests/bugs/posix/bug-990028.t bad on release-3.12</li> <li>#1542934: Seeing timer errors in the rebalance logs</li> <li>#1543016: dht_lookup_unlink_of_false_linkto_cbk fails with \"Permission denied\"</li> <li>#1544637: 3.8 -&gt; 3.10 rolling upgrade fails (same for 3.12 or 3.13) on Ubuntu 14</li> </ul>"},{"location":"release-notes/3.12.7/","title":"Release notes for Gluster 3.12.7","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.7/#bugs-addressed","title":"Bugs addressed","text":""},{"location":"release-notes/3.12.7/#major-issues","title":"Major issues","text":"<ol> <li>Consider a case in which one of the nodes goes down in gluster cluster with brick multiplexing enabled, if volume operations are performed then post when the node comes back, brick processes will fail to come up. The issue is tracked in #1543708 and will be fixed by next release.</li> </ol> <p>A total of 8 patches have been merged, addressing 8 bugs</p> <ul> <li>#1517260: Volume wrong size</li> <li>#1543709: Optimize glusterd_import_friend_volume code path</li> <li>#1544635: Though files are in split-brain able to perform writes to the file</li> <li>#1547841: Typo error in __dht_check_free_space function log message</li> <li>#1548078: [Rebalance] \"Migrate file failed: : failed to get xattr [No data available]\" warnings in rebalance logs <li>#1548270: DHT calls dht_lookup_everywhere for 1xn volumes</li> <li>#1549505: Backport patch to reduce duplicate code in server-rpc-fops.c</li>"},{"location":"release-notes/3.12.8/","title":"Release notes for Gluster 3.12.8","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.8/#bugs-addressed","title":"Bugs addressed","text":"<pre><code> A total of 9 patches have been merged, addressing 9 bugs\n</code></pre> <ul> <li>#1543708: glusterd fails to attach brick during restart of the node</li> <li>#1546627: Syntactical errors in hook scripts for managing SELinux context on bricks</li> <li>#1549473: possible memleak in glusterfsd process with brick multiplexing on</li> <li>#1555161: [Rebalance] ENOSPC errors on few files in rebalance logs</li> <li>#1555201: After a replace brick command, self-heal takes some time to start healing files on disperse volumes</li> <li>#1558352: [EC] Read performance of EC volume exported over gNFS is significantly lower than write performance</li> <li>#1561731: Rebalance failures on a dispersed volume with lookup-optimize enabled</li> <li>#1562723: SHD is not healing entries in halo replication</li> <li>#1565590: timer: Possible race condition between gftimer* routines</li> </ul>"},{"location":"release-notes/3.12.9/","title":"Release notes for Gluster 3.12.9","text":"<p>This is a bugfix release. The release notes for 3.12.0, 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, and 3.12.8 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.12 stable release.</p>"},{"location":"release-notes/3.12.9/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains a fix for a security vulerability in Gluster as follows,</p> <ul> <li>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1088</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-1088</li> </ul> <p>Installing the updated packages and restarting gluster services, will update the Gluster shared storage volume volfiles, that are more secure than the defaults currently in place.</p> <p>Further, for increased security, the Gluster shared storage volume can be TLS enabled, and access to the same restricted using the <code>auth.ssl-allow</code> option. See, this guide for more details.</p>"},{"location":"release-notes/3.12.9/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/3.12.9/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.8 are listed below.</p> <ul> <li>#1566131: Bringing down data bricks in cyclic order results in arbiter brick becoming the source for heal.</li> <li>#1566820: [Remove-brick] Many files were not migrated from the decommissioned bricks; commit results in data loss</li> <li>#1569407: EIO errors on some operations when volume has mixed brick versions on a disperse volume</li> <li>#1570430: CVE-2018-1088 glusterfs: Privilege escalation via gluster_shared_storage when snapshot scheduling is enabled [fedora-all]</li> </ul>"},{"location":"release-notes/3.13.0/","title":"Release notes for Gluster 3.13.0","text":"<p>This is a major release that includes a range of features enhancing usability; enhancements to GFAPI for developers and a set of bug fixes.</p> <p>The most notable features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p>"},{"location":"release-notes/3.13.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/3.13.0/#addition-of-summary-option-to-the-heal-info-cli","title":"Addition of summary option to the heal info CLI","text":"<p>Notes for users: The Gluster heal info CLI now has a 'summary' option displaying the statistics of entries pending heal, in split-brain and currently being healed, per brick.</p> <p>Usage:</p> <pre><code># gluster volume heal &lt;volname&gt; info summary\n</code></pre> <p>Sample output:</p> <pre><code>Brick &lt;brickname&gt;\nStatus: Connected\nTotal Number of entries: 3\nNumber of entries in heal pending: 2\nNumber of entries in split-brain: 1\nNumber of entries possibly healing: 0\n\nBrick &lt;brickname&gt;\nStatus: Connected\nTotal Number of entries: 4\nNumber of entries in heal pending: 3\nNumber of entries in split-brain: 1\nNumber of entries possibly healing: 0\n</code></pre> <p>Using the --xml option with the CLI results in the output in XML format.</p> <p>NOTE: Summary information is obtained in a similar fashion to detailed information, thus time taken for the command to complete would still be the same, and not faster.</p>"},{"location":"release-notes/3.13.0/#addition-of-checks-for-allowing-lookups-in-afr-and-removal-of-clusterquorum-reads-volume-option","title":"Addition of checks for allowing lookups in AFR and removal of 'cluster.quorum-reads' volume option.","text":"<p> Notes for users:</p> <p>Previously, AFR has never failed lookup unless there is a gfid mismatch. This behavior is being changed with this release, as a part of fixing Bug#1515572.</p> <p>Lookups in replica-3 and arbiter volumes will now succeed only if there is quorum and there is a good copy of a file. I.e. the lookup has to succeed on quorum #bricks and at least one of them has to be a good copy. If these conditions are not met, the operation will fail with the ENOTCONN error.</p> <p>As a part of this change the cluster.quorum-reads volume option is removed, as lookup failure will result in all subsequent operations (including reads) failing, which makes this option redundant.</p> <p>Ensuring this strictness also helps prevent a long standing rename-leading-to-dataloss Bug#1366818, by disallowing lookups (and thus renames) when a good copy is not available.</p> <p>Note: These checks do not affect replica 2 volumes where lookups works as before, even when only 1 brick is online.</p> <p>Further reference: mailing list discussions on topic</p>"},{"location":"release-notes/3.13.0/#support-for-max-port-range-in-glusterdvol","title":"Support for max-port range in glusterd.vol","text":"<p>Notes for users:</p> <p>Glusterd configuration provides an option to control number of ports that can be used by gluster daemons on a node.</p> <p>The option is named \"max-port\" and can be set in the glusterd.vol file per-node to the desired maximum.</p>"},{"location":"release-notes/3.13.0/#prevention-of-other-processes-accessing-the-mounted-brick-snapshots","title":"Prevention of other processes accessing the mounted brick snapshots","text":"<p>Notes for users: Snapshot of gluster bricks are now only mounted when the snapshot is active, or when these are restored. Prior to this snapshots of gluster volumes were mounted by default across the entire life-cycle of the snapshot.</p> <p>This behavior is transparent to users and managed by the gluster processes.</p>"},{"location":"release-notes/3.13.0/#enabling-thin-client","title":"Enabling thin client","text":"<p>Notes for users: Gluster client stack encompasses the cluster translators (like distribution and replication or disperse). This is in addition to the usual caching translators on the client stacks. In certain cases this makes the client footprint larger than sustainable and also incurs frequent client updates.</p> <p>The thin client feature, moves the clustering translators (like distribute and other translators below it) and a few caching translators to a managed protocol endpoint (called gfproxy) on the gluster server nodes, thus thinning the client stack.</p> <p>Usage:</p> <pre><code># gluster volume set &lt;volname&gt; config.gfproxyd enable\n</code></pre> <p>The above enables the gfproxy protocol service on the server nodes. To mount a client that interacts with this end point, use the --thin-client mount option.</p> <p>Example:</p> <pre><code># glusterfs --thin-client --volfile-id=&lt;volname&gt; --volfile-server=&lt;host&gt; &lt;mountpoint&gt;\n</code></pre> <p>Limitations: This feature is a technical preview in the 3.13.0 release, and will be improved in the upcoming releases.</p>"},{"location":"release-notes/3.13.0/#ability-to-reserve-back-end-storage-space","title":"Ability to reserve back-end storage space","text":"<p>Notes for users: Posix translator is enhanced with an option that enables reserving disk space on the bricks. This reserved space is not used by the client mounts thus preventing disk full scenarios, as disk expansion or cluster expansion is more tedious to achieve when back-end bricks are full.</p> <p>When the bricks have free space equal to or lesser than the reserved space, mount points using the brick would get ENOSPC errors.</p> <p>The default value for the option is 1(%) of the brick size. If set to 0(%) this feature is disabled. The option takes a numeric percentage value, that reserves up to that percentage of disk space.</p> <p>Usage:</p> <pre><code># gluster volume set &lt;volname&gt; storage.reserve &lt;number&gt;\n</code></pre>"},{"location":"release-notes/3.13.0/#list-all-the-connected-clients-for-a-brick-and-also-exported-brickssnapshots-from-each-brick-process","title":"List all the connected clients for a brick and also exported bricks/snapshots from each brick process","text":"<p>Notes for users: Gluster CLI is enhanced with an option to list all connected clients to a volume (or all volumes) and also the list of exported bricks and snapshots for the volume.</p> <p>Usage:</p> <pre><code># gluster volume status &lt;volname/all&gt; client-list\n</code></pre>"},{"location":"release-notes/3.13.0/#improved-write-performance-with-disperse-xlator","title":"Improved write performance with Disperse xlator","text":"<p>Notes for users: Disperse translator has been enhanced to support parallel writes, that hence improves the performance of write operations when using disperse volumes.</p> <p>This feature is enabled by default, and can be toggled using the boolean option, 'disperse.parallel-writes'</p>"},{"location":"release-notes/3.13.0/#disperse-xlator-now-supports-discard-operations","title":"Disperse xlator now supports discard operations","text":"<p>Notes for users: This feature enables users to punch hole in files created on disperse volumes.</p> <p>Usage:</p> <pre><code># fallocate  -p -o &lt;offset&gt; -l &lt;len&gt; &lt;file_name&gt;\n</code></pre>"},{"location":"release-notes/3.13.0/#included-details-about-memory-pools-in-statedumps","title":"Included details about memory pools in statedumps","text":"<p>Notes for users: For troubleshooting purposes it sometimes is useful to verify the memory allocations done by Gluster. A previous release of Gluster included a rewrite of the memory pool internals. Since these changes, <code>statedump</code>s did not include details about the memory pools anymore.</p> <p>This version of Gluster adds details about the used memory pools in the <code>statedump</code>. Troubleshooting memory consumption problems is much more efficient again.</p> <p>Limitations: There are currently no statistics included in the <code>statedump</code> about the actual behavior of the memory pools. This means that the efficiency of the memory pools can not be verified.</p>"},{"location":"release-notes/3.13.0/#gluster-apis-added-to-register-callback-functions-for-upcalls","title":"Gluster APIs added to register callback functions for upcalls","text":"<p>Notes for developers: New APIs have been added to allow gfapi applications to register and unregister for upcall events. Along with the list of events interested, applications now have to register callback function. This routine shall be invoked asynchronously, in gluster thread context, in case of any upcalls sent by the backend server.</p> <pre><code>int glfs_upcall_register (struct glfs *fs, uint32_t event_list,\n                          glfs_upcall_cbk cbk, void *data);\nint glfs_upcall_unregister (struct glfs *fs, uint32_t event_list);\n</code></pre> <p>libgfapi header files include the complete synopsis about these APIs definition and their usage.</p> <p>Limitations: An application can register only a single callback function for all the upcall events it is interested in.</p> <p>Known Issues: Bug#1515748 GlusterFS server should be able to identify the clients which registered for upcalls and notify only those clients in case of such events</p>"},{"location":"release-notes/3.13.0/#gluster-api-added-with-a-glfs_mem_header-for-exported-memory","title":"Gluster API added with a <code>glfs_mem_header</code> for exported memory","text":"<p>Notes for developers: Memory allocations done in <code>libgfapi</code> that return a structure to the calling application should use <code>GLFS_CALLOC()</code> and friends. Applications can then correctly free the memory by calling <code>glfs_free()</code>.</p> <p>This is implemented with a new <code>glfs_mem_header</code> similar to how the memory allocations are done with <code>GF_CALLOC()</code> etc. The new header includes a <code>release()</code> function pointer that gets called to free the resource when the application calls <code>glfs_free()</code>.</p> <p>The change is a major improvement for allocating and free'ing resources in a standardized way that is transparent to the <code>libgfapi</code> applications.</p>"},{"location":"release-notes/3.13.0/#provided-a-new-xlator-to-delay-fops-to-aid-slow-brick-response-simulation-and-debugging","title":"Provided a new xlator to delay fops, to aid slow brick response simulation and debugging","text":"<p>Notes for developers: Like error-gen translator, a new translator that introduces delays for FOPs is added to the code base. This can help determine issues around slow(er) client responses and enable better qualification of the translator stacks.</p> <p>For usage refer to this test case.</p>"},{"location":"release-notes/3.13.0/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1515434) has a fix with this   release. As further testing is still in progress, the issue is retained as   a major issue.</li> <li>Status of this bug can be tracked here, #1515434</li> </ul> </li> </ol>"},{"location":"release-notes/3.13.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.12.0 are listed below.</p> <ul> <li>#1248393: DHT: readdirp fails to read some directories.</li> <li>#1258561: Gluster puts PID files in wrong place</li> <li>#1261463: AFR : [RFE] Improvements needed in \"gluster volume heal info\" commands</li> <li>#1294051: Though files are in split-brain able to perform writes to the file</li> <li>#1328994: When a feature fails needing a higher opversion, the message should state what version it needs.</li> <li>#1335251: mgmt/glusterd: clang compile warnings in glusterd-snapshot.c</li> <li>#1350406: [storage/posix] - posix_do_futimes function not implemented</li> <li>#1365683: Fix crash bug when mnt3_resolve_subdir_cbk fails</li> <li>#1371806: DHT :- inconsistent 'custom extended attributes',uid and gid, Access permission (for directories) if User set/modifies it after bringing one or more sub-volume down</li> <li>#1376326: separating attach tier and add brick</li> <li>#1388509: gluster volume heal info \"healed\" and \"heal-failed\" showing wrong information</li> <li>#1395492: trace/error-gen be turned on together while use 'volume set' command to set one of them</li> <li>#1396327: gluster core dump due to assert failed GF_ASSERT (brick_index &lt; wordcount);</li> <li>#1406898: Need build time option to default to IPv6</li> <li>#1428063: gfproxy: Introduce new server-side daemon called GFProxy</li> <li>#1432046: symlinks trigger faulty geo-replication state (rsnapshot usecase)</li> <li>#1443145: Free runtime allocated resources upon graph switch or glfs_fini()</li> <li>#1445663: Improve performance with xattrop update.</li> <li>#1451434: Use a bitmap to store local node info instead of conf-&gt;local_nodeuuids[i].uuids</li> <li>#1454590: run.c demo mode broken</li> <li>#1457985: Rebalance estimate time sometimes shows negative values</li> <li>#1460514: [Ganesha] : Ganesha crashes while cluster enters failover/failback mode</li> <li>#1461018: Implement DISCARD FOP for EC</li> <li>#1462969: Peer-file parsing is too fragile</li> <li>#1467209: [Scale] : Rebalance ETA shows the initial estimate to be ~140 days,finishes within 18 hours though.</li> <li>#1467614: Gluster read/write performance improvements on NVMe backend</li> <li>#1468291: NFS Sub directory is getting mounted on solaris 10 even when the permission is restricted in nfs.export-dir volume option</li> <li>#1471366: Posix xlator needs to reserve disk space to prevent the brick from getting full.</li> <li>#1472267: glusterd fails to start</li> <li>#1472609: Root path xattr does not heal correctly in certain cases when volume is in stopped state</li> <li>#1472758: Running sysbench on vm disk from plain distribute gluster volume causes disk corruption</li> <li>#1472961: [GNFS+EC] lock is being granted to 2 different client for the same data range at a time after performing lock acquire/release from the clients1</li> <li>#1473026: replace-brick failure leaves glusterd in inconsistent state</li> <li>#1473636: Launch metadata heal in discover code path.</li> <li>#1474180: [Scale] : Client logs flooded with \"inode context is NULL\" error messages</li> <li>#1474190: cassandra fails on gluster-block with both replicate and ec volumes</li> <li>#1474309: Disperse: Coverity issue</li> <li>#1474318: dht remove-brick status does not indicate failures files not migrated because of a lack of space</li> <li>#1474639: [Scale] : Rebalance Logs are bulky.</li> <li>#1475255: [Geo-rep]: Geo-rep hangs in changelog mode</li> <li>#1475282: [Remove-brick] Few files are getting migrated eventhough the bricks crossed cluster.min-free-disk value</li> <li>#1475300: implementation of fallocate call in read-only xlator</li> <li>#1475308: [geo-rep]: few of the self healed hardlinks on master did not sync to slave</li> <li>#1475605: gluster-block default shard-size should be 64MB</li> <li>#1475632: Brick Multiplexing: Brick process crashed at changetimerecorder(ctr) translator when restarting volumes</li> <li>#1476205: [EC]: md5sum mismatches every time for a file from the fuse client on EC volume</li> <li>#1476295: md-cache uses incorrect xattr keynames for GF_POSIX_ACL keys</li> <li>#1476324: md-cache: xattr values should not be checked with string functions</li> <li>#1476410: glusterd: code lacks clarity of logic in glusterd_get_quorum_cluster_counts()</li> <li>#1476665: [Perf] : Large file sequential reads are off target by ~38% on FUSE/Ganesha</li> <li>#1476668: [Disperse] : Improve heal info command to handle obvious cases</li> <li>#1476719: glusterd: flow in glusterd_validate_quorum() could be streamlined</li> <li>#1476785: scripts: invalid test in S32gluster_enable_shared_storage.sh</li> <li>#1476861: packaging: /var/lib/glusterd/options should be %config(noreplace)</li> <li>#1476957: peer-parsing.t fails on NetBSD</li> <li>#1477169: AFR entry self heal removes a directory's .glusterfs symlink.</li> <li>#1477404: eager-lock should be off for cassandra to work at the moment</li> <li>#1477488: Permission denied errors when appending files after readdir</li> <li>#1478297: Add NULL gfid checks before creating file</li> <li>#1478710: when gluster pod is restarted, bricks from the restarted pod fails to connect to fuse, self-heal etc</li> <li>#1479030: nfs process crashed in \"nfs3_getattr\"</li> <li>#1480099: More useful error - replace 'not optimal'</li> <li>#1480445: Log entry of files skipped/failed during rebalance operation</li> <li>#1480525: Make choose-local configurable through <code>volume-set</code> command</li> <li>#1480591: [Scale] : I/O errors on multiple gNFS mounts with \"Stale file handle\" during rebalance of an erasure coded volume.</li> <li>#1481199: mempool: run-time crash when built with --disable-mempool</li> <li>#1481600: rpc: client_t and related objects leaked due to incorrect ref counts</li> <li>#1482023: snpashots issues with other processes accessing the mounted brick snapshots</li> <li>#1482344: Negative Test: glusterd crashes for some of the volume options if set at cluster level</li> <li>#1482906: /var/lib/glusterd/peers File had a blank line, Stopped Glusterd from starting</li> <li>#1482923: afr: check op_ret value in __afr_selfheal_name_impunge</li> <li>#1483058: [quorum]: Replace brick is happened when Quorum not met.</li> <li>#1483995: packaging: use rdma-core(-devel) instead of ibverbs, rdmacm; disable rdma on armv7hl</li> <li>#1484215: Add Deepshika has CI Peer</li> <li>#1484225: [rpc]: EPOLLERR - disconnecting now messages every 3 secs after completing rebalance</li> <li>#1484246: [PATCH] incorrect xattr list handling on FreeBSD</li> <li>#1484490: File-level WORM allows mv over read-only files</li> <li>#1484709: [geo-rep+qr]: Crashes observed at slave from qr_lookup_sbk during rename/hardlink/rebalance cases</li> <li>#1484722: return ENOSYS for 'non readable' FOPs</li> <li>#1485962: gluster-block profile needs to have strict-o-direct</li> <li>#1486134: glusterfsd (brick) process crashed</li> <li>#1487644: Fix reference to readthedocs.io in source code and elsewhere</li> <li>#1487830: scripts: mount.glusterfs contains non-portable bashisms</li> <li>#1487840: glusterd: spelling errors reported by Debian maintainer</li> <li>#1488354: gluster-blockd process crashed and core generated</li> <li>#1488399: Crash in dht_check_and_open_fd_on_subvol_task()</li> <li>#1488546: [RHHI] cannot boot vms created from template when disk format = qcow2</li> <li>#1488808: Warning on FreeBSD regarding -Wformat-extra-args</li> <li>#1488829: Fix unused variable when TCP_USER_TIMEOUT is undefined</li> <li>#1488840: Fix guard define on nl-cache</li> <li>#1488906: Fix clagn/gcc warning for umountd</li> <li>#1488909: Fix the type of 'len' in posix.c, clang is showing a warning</li> <li>#1488913: Sub-directory mount details are incorrect in /proc/mounts</li> <li>#1489432: disallow replace brick operation on plain distribute volume</li> <li>#1489823: set the shard-block-size to 64MB in virt profile</li> <li>#1490642: glusterfs client crash when removing directories</li> <li>#1490897: GlusterD returns a bad memory pointer in glusterd_get_args_from_dict()</li> <li>#1491025: rpc: TLSv1_2_method() is deprecated in OpenSSL-1.1</li> <li>#1491670: [afr] split-brain observed on T files post hardlink and rename in x3 volume</li> <li>#1492109: Provide brick list as part of VOLUME_CREATE event.</li> <li>#1492542: Gluster v status client-list prints wrong output for multiplexed volume.</li> <li>#1492849: xlator/tier: flood of -Wformat-truncation warnings with gcc-7.</li> <li>#1492851: xlator/bitrot: flood of -Wformat-truncation warnings with gcc-7.</li> <li>#1492968: CLIENT_CONNECT event is not notified by eventsapi</li> <li>#1492996: Readdirp is considerably slower than readdir on acl clients</li> <li>#1493133: GlusterFS failed to build while running <code>make</code></li> <li>#1493415: self-heal daemon stuck</li> <li>#1493539: AFR_SUBVOL_UP and AFR_SUBVOLS_DOWN events not working</li> <li>#1493893: gluster volume asks for confirmation for disperse volume even with force</li> <li>#1493967: glusterd ends up with multiple uuids for the same node</li> <li>#1495384: Gluster 3.12.1 Packages require manual systemctl daemon reload after install</li> <li>#1495436: [geo-rep]: Scheduler help needs correction for description of --no-color</li> <li>#1496363: Add generated HMAC token in header for webhook calls</li> <li>#1496379: glusterfs process consume huge memory on both server and client node</li> <li>#1496675: Verify pool pointer before destroying it</li> <li>#1498570: client-io-threads option not working for replicated volumes</li> <li>#1499004: [Glusterd] Volume operations fail on a (tiered) volume because of a stale lock held by one of the nodes</li> <li>#1499159: [geo-rep]: Improve the output message to reflect the real failure with schedule_georep script</li> <li>#1499180: [geo-rep]: Observed \"Operation not supported\" error with traceback on slave log</li> <li>#1499391: [geo-rep]: Worker crashes with OSError: [Errno 61] No data available</li> <li>#1499393: [geo-rep] master worker crash with interrupted system call</li> <li>#1499509: Brick Multiplexing: Gluster volume start force complains with command \"Error : Request timed out\" when there are multiple volumes</li> <li>#1499641: gfapi: API needed to set lk_owner</li> <li>#1499663: Mark test case ./tests/bugs/bug-1371806_1.t as a bad test case.</li> <li>#1499933: md-cache: Add additional samba and macOS specific EAs to mdcache</li> <li>#1500269: opening a file that is destination of rename results in ENOENT errors</li> <li>#1500284: [geo-rep]: Status shows ACTIVE for most workers in EC before it becomes the PASSIVE</li> <li>#1500346: [geo-rep]: Incorrect last sync \"0\" during hystory crawl after upgrade/stop-start</li> <li>#1500433: [geo-rep]: RSYNC throwing internal errors</li> <li>#1500649: Shellcheck errors in hook scripts</li> <li>#1501235: [SNAPSHOT] Unable to mount a snapshot on client</li> <li>#1501317: glusterfs fails to build twice in a row</li> <li>#1501390: Intermittent failure in tests/basic/afr/gfid-mismatch-resolution-with-fav-child-policy.t on NetBSD</li> <li>#1502253: snapshot_scheduler crashes when SELinux is absent on the system</li> <li>#1503246: clean up port map on brick disconnect</li> <li>#1503394: Mishandling null check at send_brick_req of glusterfsd/src/gf_attach.c</li> <li>#1503424: server.allow-insecure should be visible in \"gluster volume set help\"</li> <li>#1503510: [BitRot] man page of gluster needs to be updated for scrub-frequency</li> <li>#1503519: default timeout of 5min not honored for analyzing split-brain files post setfattr replica.split-brain-heal-finalize</li> <li>#1503983: Wrong usage of getopt shell command in hook-scripts</li> <li>#1505253: Update .t test files to use the new tier commands</li> <li>#1505323: When sub-dir is mounted on Fuse client,adding bricks to the same volume unmounts the subdir from fuse client</li> <li>#1505325: Potential use of NULL <code>this</code> variable before it gets initialized</li> <li>#1505527: Posix compliance rename test fails on fuse subdir mount</li> <li>#1505663: [GSS] gluster volume status command is missing in man page</li> <li>#1505807: files are appendable on file-based worm volume</li> <li>#1506083: Ignore disk space reserve check for internal FOPS</li> <li>#1506513: stale brick processes getting created and volume status shows brick as down(pkill glusterfsd glusterfs ,glusterd restart)</li> <li>#1506589: Brick port mismatch</li> <li>#1506903: Event webhook should work with HTTPS urls</li> <li>#1507466: reset-brick commit force failed with glusterd_volume_brickinfo_get Returning -1</li> <li>#1508898: Add new configuration option to manage deletion of Worm files</li> <li>#1509789: The output of the \"gluster help\" command is difficult to read</li> <li>#1510012: GlusterFS 3.13.0 tracker</li> <li>#1510019: Change default versions of certain features to 3.13 from 4.0</li> <li>#1510022: Revert experimental and 4.0 features to prepare for 3.13 release</li> <li>#1511274: Rebalance estimate(ETA) shows wrong details(as intial message of 10min wait reappears) when still in progress</li> <li>#1511293: In distribute volume after glusterd restart, brick goes offline</li> <li>#1511768: In Replica volume 2*2 when quorum is set, after glusterd restart nfs server is coming up instead of self-heal daemon</li> <li>#1512435: Test bug-1483058-replace-brick-quorum-validation.t fails inconsistently</li> <li>#1512460: disperse eager-lock degrades performance for file create workloads</li> <li>#1513259: NetBSD port</li> <li>#1514419: gluster volume splitbrain info needs to display output of each brick in a stream fashion instead of buffering and dumping at the end</li> <li>#1515045: bug-1247563.t is failing on master</li> <li>#1515572: Accessing a file when source brick is down results in that FOP being hung</li> <li>#1516313: Bringing down data bricks in cyclic order results in arbiter brick becoming the source for heal.</li> <li>#1517692: Memory leak in locks xlator</li> <li>#1518257: EC DISCARD doesn't punch hole properly</li> <li>#1518512: Change GD_OP_VERSION to 3_13_0 from 3_12_0 for RFE https://bugzilla.redhat.com/show_bug.cgi?id=1464350</li> <li>#1518744: Add release notes about DISCARD on EC volume</li> </ul>"},{"location":"release-notes/3.13.1/","title":"Release notes for Gluster 3.13.1","text":"<p>This is a bugfix release. The release notes for 3.13.0, contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.13 stable release.</p>"},{"location":"release-notes/3.13.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.13.1/#major-issues","title":"Major issues","text":"<ol> <li> <p>Expanding a gluster volume that is sharded may cause file corruption</p> <ul> <li>Sharded volumes are typically used for VM images, if such volumes are   expanded or possibly contracted (i.e add/remove bricks and rebalance) there   are reports of VM images getting corrupted.</li> <li>The last known cause for corruption (Bug #1515434) is still under review.</li> <li>Status of this bug can be tracked here, #1515434</li> </ul> </li> </ol>"},{"location":"release-notes/3.13.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.13.0 are listed below.</p> <ul> <li>#1428060: write-behind: Allow trickling-writes to be configurable, fix usage of page_size and window_size</li> <li>#1520232: Rebalance fails on NetBSD because fallocate is not implemented</li> <li>#1522710: Directory listings on fuse mount are very slow due to small number of getdents() entries</li> <li>#1523046: glusterd consuming high memory</li> <li>#1523456: Store allocated objects in the mem_acct</li> <li>#1527275: feature/bitrot: remove internal xattrs from lookup cbk</li> <li>#1527699: rdma transport may access an obsolete item in gf_rdma_device_t-&gt;all_mr, and causes glusterfsd/glusterfs process crash.</li> </ul>"},{"location":"release-notes/3.13.2/","title":"Release notes for Gluster 3.13.2","text":"<p>This is a bugfix release. The release notes for 3.13.0 and 3.13.1, contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.13 stable release.</p>"},{"location":"release-notes/3.13.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/3.13.2/#major-issues","title":"Major issues","text":"<p>No Major iissues</p>"},{"location":"release-notes/3.13.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.13.1 are listed below.</p> <ul> <li>#1511293: In distribute volume after glusterd restart, brick goes offline</li> <li>#1515434: dht_(f)xattrop does not implement migration checks</li> <li>#1516313: Bringing down data bricks in cyclic order results in arbiter brick becoming the source for heal.</li> <li>#1529055: Test case ./tests/bugs/bug-1371806_1.t is failing</li> <li>#1529084: fstat returns ENOENT/ESTALE</li> <li>#1529094: /usr/sbin/glusterfs crashing on Red Hat OpenShift Container Platform node</li> <li>#1530449: glustershd fails to start on a volume force start after a brick is down</li> <li>#1531371: Use after free in cli_cmd_volume_create_cbk</li> <li>#1533023: [Disperse] Implement open fd heal for disperse volume</li> <li>#1534842: entries not getting cleared post healing of softlinks (stale entries showing up in heal info)</li> <li>#1535438: Take full lock on files in 3 way replication</li> <li>#1536294: Random GlusterFSD process dies during rebalance</li> </ul>"},{"location":"release-notes/3.5.0/","title":"3.5.0","text":""},{"location":"release-notes/3.5.0/#major-changes-and-features","title":"Major Changes and Features","text":"<p>Documentation about major changes and features is also included in the <code>doc/features/</code> directory of GlusterFS repository.</p>"},{"location":"release-notes/3.5.0/#afr_cli_enhancements","title":"AFR_CLI_enhancements","text":"<p>The AFR reporting via CLI has been improved. This feature provides a coherent mechanism to present heal status,information and the logs associated. This makes the end user more aware of healing status and provides statistics.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.5.0/#file_snapshot","title":"File_Snapshot","text":"<p>This feature provides ability to take snapshots of files in GlusterFS. File snapshot is supported on the files of QCOW2/QED format.</p> <p>This feature adds better integration with Openstack Cinder, and in general ability to take snapshots of files (typically VM images)</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.5.0/#gfid-access","title":"gfid-access","text":"<p>This feature add a new translator which is designed to provide direct access to files in glusterfs using its GFID</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.5.0/#prevent-nfs-restart-on-volume-change","title":"Prevent NFS restart on Volume change","text":"<p>Earlier any volume change (volume option, volume start, volume stop, volume delete,brick add, etc) required restarting NFS server.</p> <p>With this feature, it is no longer required to restart NFS server, thereby providing better usability with no disrupts in NFS connections</p>"},{"location":"release-notes/3.5.0/#featuresquota_scalability","title":"Features/Quota_Scalability","text":"<p>This feature provides support upto 65536 quota configurations per volume.</p>"},{"location":"release-notes/3.5.0/#readdir_ahead","title":"readdir_ahead","text":"<p>This feature provides read-ahead support for directories to improve sequential directory read performance.</p>"},{"location":"release-notes/3.5.0/#zerofill","title":"zerofill","text":"<p>zerofill feature allows creation of pre-allocated and zeroed-out files on GlusterFS volumes by offloading the zeroing part to server and/or storage (storage offloads use SCSI WRITESAME), thereby achieves quick creation of pre-allocated and zeroed-out VM disk image by using server/storage off-loads.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.5.0/#brick_failure_detection","title":"Brick_Failure_Detection","text":"<p>This feature attempts to identify storage/file system failures and disable the failed brick without disrupting the rest of the NODE operation.</p> <p>This adds a health-checker that periodically checks the status of the filesystem (implies checking of functional storage-hardware).</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.5.0/#changelog-based-distributed-geo-replication","title":"Changelog based distributed geo-replication","text":"<p>New improved geo-replication which makes use of all the nodes in the master volume. Unlike previous version of geo-replication where all changes were detected and synced on a single node in master volume, now each node of master volume participates in the geo-replication.</p> <p>Change Detection - Now geo-rep makes use of changelog xlator to detect the set of files which needs to be synced. Changelog xlator runs per brick and when enabled, records each fops which modifies the files. geo-rep consumes these journal created by this xlator and syncs the files identified as 'changed' to slave.</p> <p>Distributed nature - Each of the nodes take the repsonsibility of syncing the data which is present in that node. In case of replicated volume, one of them will be 'Active'ly syncing the data, while the other one is 'Passive'.</p> <p>Syncing Method - Apart from the using rsync as the syncing method, now there tar+ssh syncing method, which can be leveraged by the workload where there is large amount of smallfiles.</p>"},{"location":"release-notes/3.5.0/#improved-block-device-translator","title":"Improved block device translator","text":"<p>This feature provides a translator to use logical volumes to store VM images and expose them as files to QEMU/KVM.</p> <p>The Volume group is represented as directory and logical volumes as files.</p>"},{"location":"release-notes/3.5.0/#remove-brick-cli-change","title":"Remove brick CLI Change","text":"<p>remove-brick CLI earlier used to remove the brick forcefully ( without data migration ), when called without any arguments. This mode of 'remove-brick' cli, without any arguments has been deprecated.</p>"},{"location":"release-notes/3.5.0/#experimental-features","title":"Experimental Features","text":"<p>The following features are experimental with this release:</p> <ul> <li>RDMA-connection manager (RDMA-CM).</li> <li>support for NUFA translator.</li> <li>disk-encryption</li> <li>On-Wire Compression + Decompression [CDC]</li> </ul>"},{"location":"release-notes/3.5.0/#minor-improvements","title":"Minor Improvements:","text":"<ul> <li> <p>Old graphs are cleaned up by FUSE clients</p> </li> <li> <p>New command \"volume status tasks\" introduced to track asynchronous tasks like rebalance and remove-brick</p> </li> <li> <p>glfs_readdir(), glfs_readdirplus(), glfs_fallocate(), glfs_discard() APIs support added in libgfapi</p> </li> <li> <p>Per client RPC throttling added in rpc server</p> </li> <li> <p>Communication between cli and glusterd happens over unix domain socket</p> </li> <li> <p>Information on connected NFS clients is persistent across NFS restarts.</p> </li> <li> <p>Hardlink creation failures with SMB addressed</p> </li> <li> <p>Non-local clients function with nufa volumes</p> </li> <li> <p>Configurable option added to mount.glusterfs to use kernel-readdirp with fuse client</p> </li> <li> <p>AUTH support for exported nfs sub-directories added</p> </li> </ul>"},{"location":"release-notes/3.5.0/#known-issues","title":"Known Issues:","text":"<ul> <li>The following configuration changes are necessary for qemu and samba   integration with libgfapi to work seamlessly:</li> </ul> <pre><code>1) gluster volume set &lt;volname&gt; server.allow-insecure on\n\n2) Edit /etc/glusterfs/glusterd.vol to contain this line:\n      option rpc-auth-allow-insecure on\n\nPost 1), restarting the volume would be necessary.\nPost 2), restarting glusterd would be necessary.\n</code></pre> <ul> <li> <p>RDMA connection manager needs IPoIB for connection establishment. More   details can be found here.</p> </li> <li> <p>For Block Device translator based volumes open-behind translator at the   client side needs to be disabled.</p> </li> <li> <p>libgfapi clients calling glfs_fini before a successfull glfs_init will cause the client to   hang as reported here.   The workaround is NOT to call glfs_fini for error cases encountered before a successfull   glfs_init.</p> </li> </ul>"},{"location":"release-notes/3.5.1/","title":"3.5.1","text":""},{"location":"release-notes/3.5.1/#release-notes-for-glusterfs-351","title":"Release Notes for GlusterFS 3.5.1","text":"<p>This is mostly a bugfix release. The Release Notes for 3.5.0 contain a listing of all the new features that were added.</p> <p>There are two notable changes that are not only bug fixes, or documentation additions:</p> <ol> <li>a new volume option <code>server.manage-gids</code> has been added    This option should be used when users of a volume are in more than    approximately 93 groups (Bug 1096425)</li> <li>Duplicate Request Cache for NFS has now been disabled by default, this may    reduce performance for certain workloads, but improves the overall stability    and memory footprint for most users</li> </ol>"},{"location":"release-notes/3.5.1/#bugs-fixed","title":"Bugs Fixed:","text":"<ul> <li>765202: lgetxattr called with invalid keys on the bricks</li> <li>833586: inodelk hang from marker_rename_release_newp_lock</li> <li>859581: self-heal process can sometimes create directories instead of symlinks for the root gfid file in .glusterfs</li> <li>986429: Backupvolfile server option should work internal to GlusterFS framework</li> <li>1039544: [FEAT] \"gluster volume heal info\" should list the entries that actually required to be healed.</li> <li>1046624: Unable to heal symbolic Links</li> <li>1046853: AFR : For every file self-heal there are warning messages reported in glustershd.log file</li> <li>1063190: Volume was not accessible after server side quorum was met</li> <li>1064096: The old Python Translator code (not Glupy) should be removed</li> <li>1066996: Using sanlock on a gluster mount with replica 3 (quorum-type auto) leads to a split-brain</li> <li>1071191: [3.5.1] Sporadic SIGBUS with mmap() on a sparse file created with open(), seek(), write()</li> <li>1078061: Need ability to heal mismatching user extended attributes without any changelogs</li> <li>1078365: New xlators are linked as versioned .so files, creating .so.0.0.0 <li>1086743: Add documentation for the Feature: RDMA-connection manager (RDMA-CM)</li> <li>1086748: Add documentation for the Feature: AFR CLI enhancements</li> <li>1086749: Add documentation for the Feature: Exposing Volume Capabilities</li> <li>1086750: Add documentation for the Feature: File Snapshots in GlusterFS</li> <li>1086751: Add documentation for the Feature: gfid-access</li> <li>1086752: Add documentation for the Feature: On-Wire Compression/Decompression</li> <li>1086754: Add documentation for the Feature: Quota Scalability</li> <li>1086755: Add documentation for the Feature: readdir-ahead</li> <li>1086756: Add documentation for the Feature: zerofill API for GlusterFS</li> <li>1086758: Add documentation for the Feature: Changelog based parallel geo-replication</li> <li>1086760: Add documentation for the Feature: Write Once Read Many (WORM) volume</li> <li>1086762: Add documentation for the Feature: BD Xlator - Block Device translator</li> <li>1086766: Add documentation for the Feature: Libgfapi</li> <li>1086774: Add documentation for the Feature: Access Control List - Version 3 support for Gluster NFS</li> <li>1086781: Add documentation for the Feature: Eager locking</li> <li>1086782: Add documentation for the Feature: glusterfs and oVirt integration</li> <li>1086783: Add documentation for the Feature: qemu 1.3 - libgfapi integration</li> <li>1088848: Spelling errors in rpc/rpc-transport/rdma/src/rdma.c</li> <li>1089054: gf-error-codes.h is missing from source tarball</li> <li>1089470: SMB: Crash on brick process during compile kernel.</li> <li>1089934: list dir with more than N files results in Input/output error</li> <li>1091340: Doc: Add glfs_fini known issue to release notes 3.5</li> <li>1091392: glusterfs.spec.in: minor/nit changes to sync with Fedora spec</li> <li>1095256: Excessive logging from self-heal daemon, and bricks</li> <li>1095595: Stick to IANA standard while allocating brick ports</li> <li>1095775: Add support in libgfapi to fetch volume info from glusterd.</li> <li>1095971: Stopping/Starting a Gluster volume resets ownership</li> <li>1096040: AFR : self-heal-daemon not clearing the change-logs of all the sources after self-heal</li> <li>1096425: i/o error when one user tries to access RHS volume over NFS with 100+ GIDs</li> <li>1099878: Need support for handle based Ops to fetch/modify extended attributes of a file</li> <li>1101647: gluster volume heal volname statistics heal-count not giving desired output.</li> <li>1102306: license: xlators/features/glupy dual license GPLv2 and LGPLv3+</li> <li>1103413: Failure in gf_log_init reopening stderr</li> <li>1104592: heal info may give Success instead of transport end point not connected when a brick is down.</li> <li>1104915: glusterfsd crashes while doing stress tests</li> <li>1104919: Fix memory leaks in gfid-access xlator.</li> <li>1104959: Dist-geo-rep : some of the files not accessible on slave after the geo-rep sync from master to slave.</li> <li>1105188: Two instances each, of brick processes, glusterfs-nfs and quotad seen after glusterd restart</li> <li>1105524: Disable nfs.drc by default</li> <li>1107937: quota-anon-fd-nfs.t fails spuriously</li> <li>1109832: I/O fails for for glusterfs 3.4 AFR clients accessing servers upgraded to glusterfs 3.5</li> <li>1110777: glusterfsd OOM - using all memory when quota is enabled</li>"},{"location":"release-notes/3.5.1/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for qemu and samba   integration with libgfapi to work seamlessly:</p> <ol> <li>gluster volume set  server.allow-insecure on <li> <p>restarting the volume is necessary</p> <pre><code>gluster volume stop &lt;volname&gt;\ngluster volume start &lt;volname&gt;\n</code></pre> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:</p> <pre><code>option rpc-auth-allow-insecure on\n</code></pre> </li> <li> <p>restarting glusterd is necessary</p> <pre><code>service glusterd restart\n</code></pre> </li> <p>More details are also documented in the Gluster Wiki on the Libgfapi with qemu libvirt page.</p> <ul> <li> <p>For Block Device translator based volumes open-behind translator at the client side needs to be disabled.</p> </li> <li> <p>libgfapi clients calling <code>glfs_fini</code> before a successfull <code>glfs_init</code> will cause the client to   hang has been reported by QEMU developers.   The workaround is NOT to call <code>glfs_fini</code> for error cases encountered before a successfull   <code>glfs_init</code>. Follow Bug 1091335 to get informed when a   release is made available that contains a final fix.</p> </li> <li> <p>After enabling <code>server.manage-gids</code>, the volume needs to be stopped and   started again to have the option enabled in the brick processes</p> <pre><code>gluster volume stop &lt;volname&gt;\ngluster volume start &lt;volname&gt;\n</code></pre> </li> </ul>"},{"location":"release-notes/3.5.2/","title":"3.5.2","text":""},{"location":"release-notes/3.5.2/#release-notes-for-glusterfs-352","title":"Release Notes for GlusterFS 3.5.2","text":"<p>This is mostly a bugfix release. The Release Notes for 3.5.0 and 3.5.1 contain a listing of all the new features that were added and bugs fixed.</p>"},{"location":"release-notes/3.5.2/#bugs-fixed","title":"Bugs Fixed:","text":"<ul> <li>1096020: NFS server crashes in _socket_read_vectored_request</li> <li>1100050: Can't write to quota enable folder</li> <li>1103050: nfs: reset command does not alter the result for nfs options earlier set</li> <li>1105891: features/gfid-access: stat on .gfid virtual directory return EINVAL</li> <li>1111454: creating symlinks generates errors on stripe volume</li> <li>1112111: Self-heal errors with \"afr crawl failed for child 0 with ret -1\" while performing rolling upgrade.</li> <li>1112348: [AFR] I/O fails when one of the replica nodes go down</li> <li>1112659: Fix inode leaks in gfid-access xlator</li> <li>1112980: NFS subdir authentication doesn't correctly handle multi-(homed,protocol,etc) network addresses</li> <li>1113007: nfs-utils should be installed as dependency while installing glusterfs-server</li> <li>1113403: Excessive logging in quotad.log of the kind 'null client'</li> <li>1113749: client_t clienttable cliententries are never expanded when all entries are used</li> <li>1113894: AFR : self-heal of few files not happening when a AWS EC2 Instance is back online after a restart</li> <li>1113959: Spec %post server does not wait for the old glusterd to exit</li> <li>1114501: Dist-geo-rep : deletion of files on master, geo-rep fails to propagate to slaves.</li> <li>1115369: Allow the usage of the wildcard character '*' to the options \"nfs.rpc-auth-allow\" and \"nfs.rpc-auth-reject\"</li> <li>1115950: glfsheal: Improve the way in which we check the presence of replica volumes</li> <li>1116672: Resource cleanup doesn't happen for clients on servers after disconnect</li> <li>1116997: mounting a volume over NFS (TCP) with MOUNT over UDP fails</li> <li>1117241: backport 'gluster volume status --xml' issues</li> <li>1120151: Glustershd memory usage too high</li> <li>1124728: SMB: CIFS mount fails with the latest glusterfs rpm's</li> </ul>"},{"location":"release-notes/3.5.2/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for 'qemu' and 'samba vfs   plugin' integration with libgfapi to work seamlessly:</p> </li> <li> <p>gluster volume set  server.allow-insecure on <li> <p>restarting the volume is necessary</p> <p><code>gluster volume stop &lt;volname&gt;   gluster volume start &lt;volname&gt;</code></p> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:</p> <p><code>option rpc-auth-allow-insecure on</code></p> </li> <li> <p>restarting glusterd is necessary</p> <p><code>service glusterd restart</code></p> </li> <p>More details are also documented in the Gluster Wiki on the Libgfapi with qemu libvirt page.</p> <ul> <li> <p>For Block Device translator based volumes open-behind translator at the   client side needs to be disabled.</p> <pre><code>  gluster volume set &lt;volname&gt; performance.open-behind disabled\n</code></pre> </li> <li> <p>libgfapi clients calling <code>glfs_fini</code> before a successfull <code>glfs_init</code> will cause the client to   hang as reported here.   The workaround is NOT to call <code>glfs_fini</code> for error cases encountered before a successfull   <code>glfs_init</code>.</p> </li> <li> <p>If the <code>/var/run/gluster</code> directory does not exist enabling quota will likely fail (Bug 1117888).</p> </li> </ul>"},{"location":"release-notes/3.5.3/","title":"3.5.3","text":""},{"location":"release-notes/3.5.3/#release-notes-for-glusterfs-353","title":"Release Notes for GlusterFS 3.5.3","text":"<p>This is a bugfix release. The Release Notes for 3.5.0, 3.5.1 and 3.5.2 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.5 stable release.</p>"},{"location":"release-notes/3.5.3/#bugs-fixed","title":"Bugs Fixed:","text":"<ul> <li>1081016: glusterd needs xfsprogs and e2fsprogs packages</li> <li>1100204: brick failure detection does not work for ext4 filesystems</li> <li>1126801: glusterfs logrotate config file pollutes global config</li> <li>1129527: DHT :- data loss - file is missing on renaming same file from multiple client at same time</li> <li>1129541: [DHT:REBALANCE]: Rebalance failures are seen with error message \" remote operation failed: File exists\"</li> <li>1132391: NFS interoperability problem: stripe-xlator removes EOF at end of READDIR</li> <li>1133949: Minor typo in afr logging</li> <li>1136221: The memories are exhausted quickly when handle the message which has multi fragments in a single record</li> <li>1136835: crash on fsync</li> <li>1138922: DHT + rebalance : rebalance process crashed + data loss + few Directories are present on sub-volumes but not visible on mount point + lookup is not healing directories</li> <li>1139103: DHT + Snapshot :- If snapshot is taken when Directory is created only on hashed sub-vol; On restoring that snapshot Directory is not listed on mount point and lookup on parent is not healing</li> <li>1139170: DHT :- rm -rf is not removing stale link file and because of that unable to create file having same name as stale link file</li> <li>1139245: vdsm invoked oom-killer during rebalance and Killed process 4305, UID 0, (glusterfs nfs process)</li> <li>1140338: rebalance is not resulting in the hash layout changes being available to nfs client</li> <li>1140348: Renaming file while rebalance is in progress causes data loss</li> <li>1140549: DHT: Rebalance process crash after add-brick and `rebalance start' operation</li> <li>1140556: Core: client crash while doing rename operations on the mount</li> <li>1141558: AFR : \"gluster volume heal  info\" prints some random characters <li>1141733: data loss when rebalance + renames are in progress and bricks from replica pairs goes down and comes back</li> <li>1142052: Very high memory usage during rebalance</li> <li>1142614: files with open fd's getting into split-brain when bricks goes offline and comes back online</li> <li>1144315: core: all brick processes crash when quota is enabled</li> <li>1145000: Spec %post server does not wait for the old glusterd to exit</li> <li>1147156: AFR client segmentation fault in afr_priv_destroy</li> <li>1147243: nfs: volume set help says the rmtab file is in \"/var/lib/glusterd/rmtab\"</li> <li>1149857: Option transport.socket.bind-address ignored</li> <li>1153626: Sizeof bug for allocation of memory in afr_lookup</li> <li>1153629: AFR : excessive logging of \"Non blocking entrylks failed\" in glfsheal log file.</li> <li>1153900: Enabling Quota on existing data won't create pgfid xattrs</li> <li>1153904: self heal info logs are filled with messages reporting ENOENT while self-heal is going on</li> <li>1155073: Excessive logging in the self-heal daemon after a replace-brick</li> <li>1157661: GlusterFS allows insecure SSL modes</li>"},{"location":"release-notes/3.5.3/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for 'qemu' and 'samba vfs   plugin' integration with libgfapi to work seamlessly:</p> </li> <li> <p>gluster volume set  server.allow-insecure on <li> <p>restarting the volume is necessary</p> <p><code>gluster volume stop &lt;volname&gt;   gluster volume start &lt;volname&gt;</code></p> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:</p> <p><code>option rpc-auth-allow-insecure on</code></p> </li> <li> <p>restarting glusterd is necessary</p> <p><code>service glusterd restart</code></p> </li> <p>More details are also documented in the Gluster Wiki on the Libgfapi with qemu libvirt page.</p> <ul> <li> <p>For Block Device translator based volumes open-behind translator at the   client side needs to be disabled.</p> <pre><code>  gluster volume set &lt;volname&gt; performance.open-behind disabled\n</code></pre> </li> <li> <p>libgfapi clients calling <code>glfs_fini</code> before a successful <code>glfs_init</code> will cause the client to   hang as reported here.   The workaround is NOT to call <code>glfs_fini</code> for error cases encountered before a successful   <code>glfs_init</code>. This is being tracked in Bug 1134050 for   glusterfs-3.5 and Bug 1093594 for mainline.</p> </li> <li> <p>If the <code>/var/run/gluster</code> directory does not exist enabling quota will likely   fail (Bug 1117888).</p> </li> </ul>"},{"location":"release-notes/3.5.4/","title":"3.5.4","text":""},{"location":"release-notes/3.5.4/#release-notes-for-glusterfs-354","title":"Release Notes for GlusterFS 3.5.4","text":"<p>This is a bugfix release. The Release Notes for 3.5.0, 3.5.1, 3.5.2 and 3.5.3 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.5 stable release.</p>"},{"location":"release-notes/3.5.4/#bugs-fixed","title":"Bugs Fixed:","text":"<ul> <li>1092037: Issues reported by Cppcheck static analysis tool</li> <li>1101138: meta-data split-brain prevents entry/data self-heal of dir/file respectively</li> <li>1115197: Directory quota does not apply on it's sub-directories</li> <li>1159968: glusterfs.spec.in: deprecate *.logrotate files in dist-git in favor of the upstream logrotate files</li> <li>1160711: libgfapi: use versioned symbols in libgfapi.so for compatibility</li> <li>1161102: self heal info logs are filled up with messages reporting split-brain</li> <li>1162150: AFR gives EROFS when fop fails on all subvolumes when client-quorum is enabled</li> <li>1162226: bulk remove xattr should not fail if removexattr fails with ENOATTR/ENODATA</li> <li>1162230: quota xattrs are exposed in lookup and getxattr</li> <li>1162767: DHT: Rebalance- Rebalance process crash after remove-brick</li> <li>1166275: Directory fd leaks in index translator</li> <li>1168173: Regression tests fail in quota-anon-fs-nfs.t</li> <li>1173515: [HC] - mount.glusterfs fails to check return of mount command.</li> <li>1174250: Glusterfs outputs a lot of warnings and errors when quota is enabled</li> <li>1177339: entry self-heal in 3.5 and 3.6 are not compatible</li> <li>1177928: Directories not visible anymore after add-brick, new brick dirs not part of old bricks</li> <li>1184528: Some newly created folders have root ownership although created by unprivileged user</li> <li>1186121: tar on a gluster directory gives message \"file changed as we read it\" even though no updates to file in progress</li> <li>1190633: self-heal-algorithm with option \"full\" doesn't heal sparse files correctly</li> <li>1191006: Building argp-standalone breaks nightly builds on Fedora Rawhide</li> <li>1192832: log files get flooded when removexattr() can't find a specified key or value</li> <li>1200764: [AFR] Core dump and crash observed during disk replacement case</li> <li>1202675: Perf: readdirp in replicated volumes causes performance degrade</li> <li>1211841: glusterfs-api.pc versioning breaks QEMU</li> <li>1222150: readdirp return 64bits inodes even if enable-ino32 is set</li> </ul>"},{"location":"release-notes/3.5.4/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for 'qemu' and 'samba vfs   plugin' integration with libgfapi to work seamlessly:</p> </li> <li> <p>gluster volume set  server.allow-insecure on <li> <p>restarting the volume is necessary</p> <p><code>gluster volume stop &lt;volname&gt;   gluster volume start &lt;volname&gt;</code></p> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:</p> <p><code>option rpc-auth-allow-insecure on</code></p> </li> <li> <p>restarting glusterd is necessary</p> <p><code>service glusterd restart</code></p> </li> <p>More details are also documented in the Gluster Wiki on the Libgfapi with qemu libvirt page.</p> <ul> <li> <p>For Block Device translator based volumes open-behind translator at the   client side needs to be disabled.</p> <pre><code>  gluster volume set &lt;volname&gt; performance.open-behind disabled\n</code></pre> </li> <li> <p>libgfapi clients calling <code>glfs_fini</code> before a successful <code>glfs_init</code> will cause the client to   hang as reported here.   The workaround is NOT to call <code>glfs_fini</code> for error cases encountered before a successful   <code>glfs_init</code>. This is being tracked in Bug 1134050 for   glusterfs-3.5 and Bug 1093594 for mainline.</p> </li> <li> <p>If the <code>/var/run/gluster</code> directory does not exist enabling quota will likely   fail (Bug 1117888).</p> </li> </ul>"},{"location":"release-notes/3.6.0/","title":"3.6.0","text":""},{"location":"release-notes/3.6.0/#major-changes-and-features","title":"Major Changes and Features","text":"<p>Documentation about major changes and features is also included in the <code>doc/features/</code> directory of GlusterFS repository.</p>"},{"location":"release-notes/3.6.0/#volume-snapshot","title":"Volume Snapshot","text":"<p>Volume snapshot provides a point-in-time copy of a GlusterFS volume. The snapshot is an online operation and hence filesystem data continues to be available for the clients while the snapshot is being taken.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.6.0/#user-serviceable-snapshots","title":"User Serviceable Snapshots","text":"<p>User Serviceable Snapshots provides the ability for users to access snapshots of GlusterFS volumes without administrative intervention.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.6.0/#erasure-coding","title":"Erasure Coding","text":"<p>The new disperse translator provides the ability to perform erasure coding across nodes.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.6.0/#granular-locking-support-for-management-operations","title":"Granular locking support for management operations","text":"<p>Glusterd now holds a volume lock to support parallel management operations on different volumes.</p>"},{"location":"release-notes/3.6.0/#journaling-enhancements-changelog-xlator","title":"Journaling enhancements (changelog xlator)","text":"<p>Introduction of history API to consume journal records which were persisted by the changelog translator. With this API, it's not longer required to perform an expensive filesystem crawl to identify changes. Geo-replication makes use of this (on [re]start) thereby optimizing remote replication for purges, hardlinks, etc.</p>"},{"location":"release-notes/3.6.0/#better-support-for-bricks-with-heterogeneous-sizes","title":"Better Support for bricks with heterogeneous sizes","text":"<p>Prior to 3.6, bricks with heterogeneous sizes were treated as equal regardless of size, and would have been assigned an equal share of files. From 3.6, assignment of files to bricks will take into account the sizes of the bricks.</p>"},{"location":"release-notes/3.6.0/#improved-ssl-support","title":"Improved SSL support","text":"<p>GlusterFS 3.6 provides better support to enable SSL on both management and data connections. This feature is currently being consumed by the GlusterFS native driver in OpenStack Manila.</p>"},{"location":"release-notes/3.6.0/#better-peer-identification","title":"Better peer identification","text":"<p>GlusterFS 3.6 improves peer identification. GlusterD will no longer complain when a mixture of FQDNs, shortnames and IP addresses are used. Changes done for this improvement have also laid down a base for improving multi network support in GlusterFS.</p>"},{"location":"release-notes/3.6.0/#meta-translator","title":"Meta translator","text":"<p>Meta translator provides a virtual interface for viewing internal state of translators.</p>"},{"location":"release-notes/3.6.0/#improved-synchronous-replication-support-afrv2","title":"Improved synchronous replication support (AFRv2)","text":"<p>The replication translator (AFR) in GlusterFS 3.6 has undergone a complete rewrite (http://review.gluster.org/#/c/6010/) and is referred to as AFRv2.</p> <p>From a user point of view, there is no change in the replication behaviour but there are some caveats to be noted from an admin point of view:</p> <ul> <li> <p>Lookups do not trigger meta-data and data self-heals anymore. They only trigger entry-self-heals. Data and meta-data are healed by the self-heal daemon only.</p> </li> <li> <p>Bricks in a replica set do not mark any pending change log extended attributes for itself during pre or post op. They only mark it for other bricks in the replica set.</p> </li> </ul> <p>For e.g.: In a replica 2 volume, <code>trusted.afr.&lt;volname&gt;-client-0</code> for brick-0 and <code>trusted.afr.&lt;volname&gt;-client-1</code> for brick-1 will always be <code>0x000000000000000000000000</code>.</p> <ul> <li>If the post-op changelog updation does not complete successfully on a brick, a <code>trusted.afr.dirty</code> extended attribute is set on that brick.</li> </ul>"},{"location":"release-notes/3.6.0/#barrier-translator","title":"Barrier translator","text":"<p>The barrier translator allows file operations to be temporarily 'paused' on GlusterFS bricks, which is needed for performing consistent snapshots of a GlusterFS volume.</p> <p>For more information, see here.</p>"},{"location":"release-notes/3.6.0/#remove-brick-moves-data-by-default","title":"Remove brick moves data by default","text":"<p>Prior to 3.6, <code>volume remove-brick &lt;volname&gt;</code> CLI would remove the brick from the volume without performing any data migration. Now the default behavior has been changed to perform data migration when this command is issued. Removing a brick without data migration can now be performed through <code>volume remove-brick &lt;volname&gt; force</code> interface.</p>"},{"location":"release-notes/3.6.0/#experimental-features","title":"Experimental Features","text":"<p>The following features are experimental with this release:</p> <ul> <li>support for rdma volumes.</li> <li>support for NUFA translator.</li> <li>disk-encryption</li> <li>On-Wire Compression + Decompression [CDC]</li> </ul>"},{"location":"release-notes/3.6.0/#porting-status","title":"Porting Status","text":"<ul> <li> <p>NetBSD and FreeBSD support is experimental, but regressions tests suggest that it is close to be fully supported. Please make sure you use latest NetBSD code from -current or netbsd-7 branches.</p> </li> <li> <p>OSX support is in an alpha state. More testing will help in maturing this support.</p> </li> </ul>"},{"location":"release-notes/3.6.0/#minor-improvements","title":"Minor Improvements:","text":"<ul> <li> <p>Introduction of <code>server.anonuid</code> and <code>server.anongid</code> options for root squashing</p> </li> <li> <p>Root squashing doesn't happen for clients in trusted storage pool</p> </li> <li> <p>Memory accounting of glusterfs processes has been enabled by default</p> </li> <li> <p>The Gluster/NFS server now has support for setting access permissions on volumes with wildcard IP-addresses and IP-address/subnet (CIDR notation). More details and examples are in the commit message.</p> </li> <li> <p>More preparation for better integration with the nfs-ganesha user-space NFS-server. The changes are mostly related to the handle-based functions in <code>libgfapi.so</code>.</p> </li> <li> <p>A new logging framework that can suppress repetitive log messages and provide a dictionary of messages has been added. Few translators have now been integrated with the framework. More translators are expected to integrate with this framework in upcoming minor &amp; major releases.</p> </li> </ul>"},{"location":"release-notes/3.6.0/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for qemu and samba integration with libgfapi to work seamlessly:</p> </li> <li> <p><code>gluster volume set &lt;volname&gt; server.allow-insecure on</code></p> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:      <code>option rpc-auth-allow-insecure on</code></p> </li> </ul> <p>Post 1, restarting the volume would be necessary:   <code># gluster volume stop &lt;volname&gt;</code> <code># gluster volume start &lt;volname&gt;</code></p> <p>Post 2, restarting glusterd would be necessary:   <code># service glusterd restart</code></p> <ul> <li> <p>For Block Device translator based volumes open-behind translator at the client side needs to be disabled.</p> </li> <li> <p>Renames happening on a file that is being migrated during rebalance will fail.</p> </li> <li> <p>Dispersed volumes do not work with self-heal daemon. Self-healing is only activated when a damaged file or directory is accessed. To force a full self-heal or to replace a brick requires to traverse the file system from a mount point. This is the recommended command to do so:</p> <pre><code>find &lt;mount&gt; -d -exec getfattr -h -n test {} \\;\n</code></pre> </li> <li> <p>Quota on dispersed volumes is not correctly computed, allowing to store more data than specified. A workaround to this problem is to define a smaller quota based on this formula:</p> <pre><code>Q' = Q / (N - R)\n</code></pre> </li> </ul> <p>Where Q is the desired quota value, Q' is the new quota value to use, N is the number of bricks per disperse set, and R is the redundancy.</p>"},{"location":"release-notes/3.6.0/#upgrading-to-36x","title":"Upgrading to 3.6.X","text":"<p>Before upgrading to 3.6 version of gluster from 3.4.X or 3.5.x, please take a look at following link: Upgrade Gluster to 3.6</p>"},{"location":"release-notes/3.6.3/","title":"3.6.3","text":""},{"location":"release-notes/3.6.3/#release-notes-for-glusterfs-363","title":"Release Notes for GlusterFS 3.6.3","text":"<p>This is a bugfix release. The Release Notes for 3.6.0 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 3.6 stable release.</p>"},{"location":"release-notes/3.6.3/#bugs-fixed","title":"Bugs Fixed:","text":"<ul> <li>1187526: Disperse volume mounted through NFS doesn't list any files/directories</li> <li>1188471: When the volume is in stopped state/all the bricks are down mount of the volume hangs</li> <li>1201484: glusterfs-3.6.2 fails to build on Ubuntu Precise: 'RDMA_OPTION_ID_REUSEADDR' undeclared</li> <li>1202212: Performance enhancement for RDMA</li> <li>1189023: Directories not visible anymore after add-brick, new brick dirs not part of old bricks</li> <li>1202673: Perf: readdirp in replicated volumes causes performance degrade</li> <li>1203081: Entries in indices/xattrop directory not removed appropriately</li> <li>1203648: Quota: Build ancestry in the lookup</li> <li>1199936: readv on /var/run/6b8f1f2526c6af8a87f1bb611ae5a86f.socket failed when NFS is disabled</li> <li>1200297: cli crashes when listing quota limits with xml output</li> <li>1201622: Convert quota size from n-to-h order before using it</li> <li>1194141: AFR : failure in self-heald.t</li> <li>1201624: Spurious failure of tests/bugs/quota/bug-1038598.t</li> <li>1194306: Do not count files which did not need index heal in the first place as successfully healed</li> <li>1200258: Quota: features.quota-deem-statfs is \"on\" even after disabling quota.</li> <li>1165938: Fix regression test spurious failures</li> <li>1197598: NFS logs are filled with system.posix_acl_access messages</li> <li>1199577: mount.glusterfs uses /dev/stderr and fails if the device does not exist</li> <li>1197598: NFS logs are filled with system.posix_acl_access messages</li> <li>1188066: logging improvements in marker translator</li> <li>1191537: With afrv2 + ext4, lookups on directories with large offsets could result in duplicate/missing entries</li> <li>1165129: libgfapi: use versioned symbols in libgfapi.so for compatibility</li> <li>1179136: glusterd: Gluster rebalance status returns failure</li> <li>1176756: glusterd: remote locking failure when multiple synctask transactions are run</li> <li>1188064: log files get flooded when removexattr() can't find a specified key or value</li> <li>1165938: Fix regression test spurious failures</li> <li>1192522: index heal doesn't continue crawl on self-heal failure</li> <li>1193970: Fix spurious ssl-authz.t regression failure (backport)</li> <li>1138897: NetBSD port</li> <li>1184527: Some newly created folders have root ownership although created by unprivileged user</li> <li>1181977: gluster vol clear-locks vol-name path kind all inode return IO error in a disperse volume</li> <li>1159471: rename operation leads to core dump</li> <li>1173528: Change in volume heal info command output</li> <li>1186119: tar on a gluster directory gives message \"file changed as we read it\" even though no updates to file in progress</li> <li>1183716: Force replace-brick lead to the persistent write(use dd) return Input/output error</li> <li>1138897: NetBSD port</li> <li>1178590: Enable quota(default) leads to heal directory's xattr failed.</li> <li>1182490: Internal ec xattrs are allowed to be modified</li> <li>1187547: self-heal-algorithm with option \"full\" doesn't heal sparse files correctly</li> <li>1174170: Glusterfs outputs a lot of warnings and errors when quota is enabled</li> <li>1212684: - GlusterD segfaults when started with management SSL</li> </ul>"},{"location":"release-notes/3.6.3/#known-issues","title":"Known Issues:","text":"<ul> <li> <p>The following configuration changes are necessary for 'qemu' and 'samba vfs   plugin' integration with libgfapi to work seamlessly:</p> </li> <li> <p>gluster volume set  server.allow-insecure on <li> <p>restarting the volume is necessary</p> <p><code>gluster volume stop &lt;volname&gt;   gluster volume start &lt;volname&gt;</code></p> </li> <li> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line:</p> <p><code>option rpc-auth-allow-insecure on</code></p> </li> <li> <p>restarting glusterd is necessary</p> <p><code>service glusterd restart</code></p> </li> <p>More details are also documented in the Gluster Wiki on the Libgfapi with qemu libvirt page.</p> <ul> <li>For Block Device translator based volumes open-behind translator at the   client side needs to be disabled.<pre><code>  gluster volume set &lt;volname&gt; performance.open-behind disable\n</code></pre> </li> </ul>"},{"location":"release-notes/3.7.0/","title":"3.7.0","text":"<p>Release Notes for GlusterFS 3.7.0</p>"},{"location":"release-notes/3.7.0/#major-changes-and-features","title":"Major Changes and Features","text":"<p>Documentation about major changes and features is included in the <code>doc/features/</code> directory of GlusterFS repository.</p>"},{"location":"release-notes/3.7.0/#geo-replication","title":"Geo Replication","text":"<p>Many improvements have gone in the geo replication. A detailed documentation about all the improvements can be found here</p>"},{"location":"release-notes/3.7.0/#bitrot-detection","title":"Bitrot Detection","text":"<p>Bitrot detection is a technique used to identify an \u201cinsidious\u201d type of disk error where data is silently corrupted with no indication from the disk to the storage software layer that an error has occurred. When bitrot detection is enabled on a volume, gluster performs signing of all files/objects in the volume and scrubs data periodically for signature verification. All anomalies observed will be noted in log files.</p> <p>For more information, refer here.</p>"},{"location":"release-notes/3.7.0/#multi-threaded-epoll-for-performance-improvements","title":"Multi threaded epoll for performance improvements","text":"<p>Gluster 3.7 introduces multiple threads to dequeue and process more requests from epoll queues. This improves performance by processing more I/O requests. Workloads that involve read/write operations on a lot of small files can benefit from this enhancement.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.7.0/#volume-tiering-experimental","title":"Volume Tiering [Experimental]","text":"<p>Policy based tiering for placement of files. This feature will serve as a foundational piece for building support for data classification.</p> <p>For more information refer here.</p> <p>Volume Tiering is marked as an experimental feature for this release. It is expected to be fully supported in a 3.7.x minor release.</p>"},{"location":"release-notes/3.7.0/#trashcan","title":"Trashcan","text":"<p>This feature will enable administrators to temporarily store deleted files from Gluster volumes for a specified time period.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.7.0/#efficient-object-count-and-inode-quota-support","title":"Efficient Object Count and Inode Quota Support","text":"<p>This improvement enables an easy mechanism to retrieve the number of objects per directory or volume. Count of objects/files within a directory hierarchy is stored as an extended attribute of a directory. The extended attribute can be queried to retrieve the count.</p> <p>For more information refer here.</p> <p>This feature has been utilized to add support for inode quotas.</p> <p>For more details about inode quotas, refer here.</p>"},{"location":"release-notes/3.7.0/#pro-active-self-healing-for-erasure-coding","title":"Pro-active Self healing for Erasure Coding","text":"<p>Gluster 3.7 adds pro-active self healing support for erasure coded volumes.</p>"},{"location":"release-notes/3.7.0/#exports-and-netgroups-authentication-for-nfs","title":"Exports and Netgroups Authentication for NFS","text":"<p>This feature adds Linux-style exports &amp; netgroups authentication to the native NFS server. This enables administrators to restrict access to specific clients &amp; netgroups for volume/sub-directory NFSv3 exports.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.7.0/#glusterfind","title":"GlusterFind","text":"<p>GlusterFind is a new tool that provides a mechanism to monitor data events within a volume. Detection of events like modified files is made easier without having to traverse the entire volume.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.7.0/#rebalance-performance-improvements","title":"Rebalance Performance Improvements","text":"<p>Rebalance and remove brick operations in Gluster get a performance boost by speeding up identification of files needing movement and a multi-threaded mechanism to move all such files.</p> <p>For more information refer here.</p>"},{"location":"release-notes/3.7.0/#nfsv4-and-pnfs-support","title":"NFSv4 and pNFS support","text":"<p>Gluster 3.7 supports export of volumes through NFSv4, NFSv4.1 and pNFS. This support is enabled via NFS Ganesha. Infrastructure changes done in Gluster 3.7 to support this feature include:</p> <ul> <li>Addition of upcall infrastructure for cache invalidation.</li> <li>Support for lease locks and delegations.</li> <li>Support for enabling Ganesha through Gluster CLI.</li> <li>Corosync and pacemaker based implementation providing resource monitoring and failover to accomplish NFS HA.</li> </ul> <p>For more information refer the below links:</p> <ul> <li>NFS Ganesha Integration</li> <li>Upcall Infrastructure</li> <li>Gluster CLI for NFS Ganesha</li> <li>High Availability for NFS Ganesha</li> <li>pNFS support for Gluster</li> </ul> <p>pNFS support for Gluster volumes and NFSv4 delegations are in beta for this release. Infrastructure changes to support Lease locks and NFSv4 delegations are targeted for a 3.7.x minor release.</p>"},{"location":"release-notes/3.7.0/#snapshot-scheduling","title":"Snapshot Scheduling","text":"<p>With this enhancement, administrators can schedule volume snapshots.</p> <p>For more information, see here.</p>"},{"location":"release-notes/3.7.0/#snapshot-cloning","title":"Snapshot Cloning","text":"<p>Volume snapshots can now be cloned to create a new writeable volume.</p> <p>For more information, see here.</p>"},{"location":"release-notes/3.7.0/#sharding-experimental","title":"Sharding [Experimental]","text":"<p>Sharding addresses the problem of fragmentation of space within a volume. This feature adds support for files that are larger than the size of an individual brick. Sharding works by chunking files to blobs of a configurabe size.</p> <p>For more information, see here.</p> <p>Sharding is an experimental feature for this release. It is expected to be fully supported in a 3.7.x minor release.</p>"},{"location":"release-notes/3.7.0/#rcu-in-glusterd","title":"RCU in glusterd","text":"<p>Thread synchronization and critical section access has been improved by introducing userspace RCU in glusterd</p>"},{"location":"release-notes/3.7.0/#arbiter-volumes","title":"Arbiter Volumes","text":"<p>Arbiter volumes are 3 way replicated volumes where the 3rd brick of the replica is automatically configured as an arbiter. The 3rd brick contains only metadata which provides network partition tolerance and prevents split-brains from happening.</p> <p>For more information, see here.</p>"},{"location":"release-notes/3.7.0/#better-split-brain-resolution","title":"Better split-brain resolution","text":"<p>split-brain resolutions can now be also driven by users without administrative intervention.</p> <p>For more information, see the 'Resolution of split-brain from the mount point' section here.</p>"},{"location":"release-notes/3.7.0/#minor-improvements","title":"Minor Improvements","text":"<ul> <li>Message ID based logging has been added for several translators.</li> <li>Quorum support for reads.</li> <li>Snapshot names contain timestamps by default.Subsequent access to the snapshots should be done by the name listed in <code>gluster snapshot list</code></li> <li>Support for <code>gluster volume get &lt;volname&gt;</code> added.</li> <li>libgfapi has added handle based functions to get/set POSIX ACLs based on common libacl structures.</li> </ul>"},{"location":"release-notes/3.7.0/#known-issues","title":"Known Issues","text":"<ul> <li>Enabling Bitrot on volumes with more than 2 bricks on a node is known to cause problems.</li> <li>Addition of bricks dynamically to cold or hot tiers in a tiered volume is not supported.</li> <li>The following configuration changes are necessary for qemu and samba integration with libgfapi to work seamlessly:</li> </ul> <p><code># gluster volume set &lt;volname&gt; server.allow-insecure on</code></p> <p>Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line: <code>option rpc-auth-allow-insecure on</code></p> <p>Post 1, restarting the volume would be necessary:</p> <p><code># gluster volume stop &lt;volname&gt;   # gluster volume start &lt;volname&gt;</code></p> <p>Post 2, restarting glusterd would be necessary:</p> <p><code># service glusterd restart</code></p> <p>or</p> <p><code># systemctl restart glusterd</code></p>"},{"location":"release-notes/3.7.0/#upgrading-to-370","title":"Upgrading to 3.7.0","text":"<p>Instructions for upgrading from previous versions of GlusterFS are maintained on this page.</p>"},{"location":"release-notes/3.7.1/","title":"3.7.1","text":""},{"location":"release-notes/3.7.1/#release-notes-for-glusterfs-371","title":"Release Notes for GlusterFS 3.7.1","text":"<p>This is a bugfix release. The Release Notes for 3.7.0, contain a listing of all the new features that were added.</p> <p><code>Note: Enabling Bitrot on volumes with more than 2 bricks on a node works with this release.</code></p>"},{"location":"release-notes/3.7.1/#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>1212676: NetBSD port</li> <li>1218863: `ls' on a directory which has files with mismatching gfid's does not list anything</li> <li>1219782: Regression failures in tests/bugs/snapshot/bug-1112559.t</li> <li>1221000: detach-tier status emulates like detach-tier stop</li> <li>1221470: dHT rebalance: Dict_copy log messages when running rebalance on a dist-rep volume</li> <li>1221476: Data Tiering:rebalance fails on a tiered volume</li> <li>1221477: The tiering feature requires counters.</li> <li>1221503: DHT Rebalance : Misleading log messages for linkfiles</li> <li>1221507: NFS-Ganesha: ACL should not be enabled by default</li> <li>1221534: rebalance failed after attaching the tier to the volume.</li> <li>1221967: Do not allow detach-tier commands on a non tiered volume</li> <li>1221969: tiering: use sperate log/socket/pid file for tiering</li> <li>1222198: Fix nfs/mount3.c build warnings reported in Koji</li> <li>1222750: non-root geo-replication session goes to faulty state, when the session is started</li> <li>1222869: [SELinux] [BVT]: Selinux throws AVC errors while running DHT automation on Rhel6.6</li> <li>1223215: gluster volume status fails with locking failed error message</li> <li>1223286: [geo-rep]: worker died with \"ESTALE\" when performed rm -rf on a directory from mount of master volume</li> <li>1223644: [geo-rep]: With tarssh the file is created at slave but it doesnt get sync</li> <li>1224100: [geo-rep]: Even after successful sync, the DATA counter did not reset to 0</li> <li>1224241: gfapi: zero size issue in glfs_h_acl_set()</li> <li>1224292: peers connected in the middle of a transaction are participating in the transaction</li> <li>1224647: [RFE] Provide hourly scrubbing option</li> <li>1224650: SIGNING FAILURE Error messages are poping up in the bitd log</li> <li>1224894: Quota: spurious failures with quota testcases</li> <li>1225077: Fix regression test spurious failures</li> <li>1225279: Different client can not execute \"for((i=0;i&lt;1000;i++));do ls -al;done\" in a same directory at the sametime</li> <li>1225318: glusterd could crash in remove-brick-status when local remove-brick process has just completed</li> <li>1225320: ls command failed with features.read-only on while mounting ec volume.</li> <li>1225331: [geo-rep] stop-all-gluster-processes.sh fails to stop all gluster processes</li> <li>1225543: [geo-rep]: snapshot creation timesout even if geo-replication is in pause/stop/delete state</li> <li>1225552: [Backup]: Unable to create a glusterfind session</li> <li>1225709: [RFE] Move signing trigger mechanism to [f]setxattr()</li> <li>1225743: [AFR-V2] - afr_final_errno() should treat op_ret &gt; 0 also as success</li> <li>1225796: Spurious failure in tests/bugs/disperse/bug-1161621.t</li> <li>1225919: Log EEXIST errors in DEBUG level in fops MKNOD and MKDIR</li> <li>1225922: Sharding - Skip update of block count and size for directories in readdirp callback</li> <li>1226024: cli/tiering:typo errors in tiering</li> <li>1226029: I/O's hanging on tiered volumes (NFS)</li> <li>1226032: glusterd crashed on the node when tried to detach a tier after restoring data from the snapshot.</li> <li>1226117: [RFE] Return proper error codes in case of snapshot failure</li> <li>1226120: [Snapshot] Do not run scheduler if ovirt scheduler is running</li> <li>1226139: Implement MKNOD fop in bit-rot.</li> <li>1226146: BitRot :- bitd is not signing Objects if more than 3 bricks are present on same node</li> <li>1226153: Quota: Do not allow set/unset of quota limit in heterogeneous cluster</li> <li>1226629: bug-973073.t fails spuriously</li> <li>1226853: Volume start fails when glusterfs is source compiled with GCC v5.1.1</li> </ul>"},{"location":"release-notes/3.7.1/#known-issues","title":"Known Issues","text":"<ul> <li>1227677: Glusterd crashes and cannot start after rebalance</li> <li>1227656: Glusted dies when adding new brick to a distributed volume and converting to replicated volume</li> <li>1210256: gluster volume info --xml gives back incorrect typrStr in xml</li> <li>1212842: tar on a glusterfs mount displays \"file changed as we read it\" even though the file was not changed</li> <li>1220347: Read operation on a file which is in split-brain condition is successful</li> <li>1213352: nfs-ganesha: HA issue, the iozone process is not moving ahead, once the nfs-ganesha is killed</li> <li>1220270: nfs-ganesha: Rename fails while exectuing Cthon general category test</li> <li>1214169: glusterfsd crashed while rebalance and self-heal were in progress</li> <li>1221941: glusterfsd: bricks crash while executing ls on nfs-ganesha vers=3</li> <li>1225809: [DHT-REBALANCE]-DataLoss: The data appended to a file during its migration will be lost once the migration is done</li> <li> <p>1225940: DHT: lookup-unhashed feature breaks runtime compatibility with older client versions</p> </li> <li> <p>Addition of bricks dynamically to cold or hot tiers in a tiered volume is not supported.</p> </li> <li>The following configuration changes are necessary for qemu and samba integration with libgfapi to work seamlessly:</li> </ul> <p><code># gluster volume set &lt;volname&gt; server.allow-insecure on</code> Edit <code>/etc/glusterfs/glusterd.vol</code> to contain this line: <code>option rpc-auth-allow-insecure on</code></p> <pre><code>Post 1, restarting the volume would be necessary:\n</code></pre> <pre><code># gluster volume stop &lt;volname&gt;\n# gluster volume start &lt;volname&gt;\n</code></pre> <p>Post 2, restarting glusterd would be necessary:</p> <pre><code># service glusterd restart\n</code></pre> <pre><code>or\n</code></pre> <pre><code># systemctl restart glusterd\n</code></pre>"},{"location":"release-notes/3.9.0/","title":"Release notes for Gluster 3.9.0","text":"<p>This is a major release that includes a huge number of changes. Many improvements contribute to better support of Gluster with containers and running your storage on the same server as your hypervisors. Lots of work has been done to integrate with other projects that are part of the Open Source storage ecosystem.</p> <p>The most notable features and changes are documented on this page. A full list of bugs that has been addressed is included further below.</p>"},{"location":"release-notes/3.9.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/3.9.0/#introducing-reset-brick-command","title":"Introducing reset-brick command","text":"<p>Notes for users: The reset-brick command provides support to reformat/replace the disk(s) represented by a brick within a volume. This is helpful when a disk goes bad etc</p> <p>Start reset process -</p> <pre><code>gluster volume reset-brick VOLNAME HOSTNAME:BRICKPATH start\n</code></pre> <p>The above command kills the respective brick process. Now the brick can be reformatted.</p> <p>To restart the brick after modifying configuration -</p> <pre><code>gluster volume reset-brick VOLNAME HOSTNAME:BRICKPATH HOSTNAME:BRICKPATH commit\n</code></pre> <p>If the brick was killed to replace the brick with same brick path, restart with following command -</p> <pre><code>gluster volume reset-brick VOLNAME HOSTNAME:BRICKPATH HOSTNAME:BRICKPATH commit force\n</code></pre> <p>Limitations:</p> <ol> <li>resetting a brick kills a brick process in concern. During this    period the brick will not be available for IO's.</li> <li>Replacing a brick with this command will work only if both the brick paths    are same and belong to same volume.</li> </ol>"},{"location":"release-notes/3.9.0/#get-node-level-status-of-a-cluster","title":"Get node level status of a cluster","text":"<p>Notes for users: The get-state command provides node level status of a trusted storage pool from the point of view of glusterd in a parseable format. Using get-state command, external applications can invoke the command on all nodes of the cluster, and parse and collate the data obtained from all these nodes to get a complete picture of the state of the cluster.</p> <pre><code># gluster get-state &lt;glusterd&gt; [odir &lt;path/to/output/dir] [file &lt;filename&gt;]\n</code></pre> <p>This would dump data points that reflect the local state representation of the cluster as maintained in glusterd (no other daemons are supported as of now) to a file inside the specified output directory. The default output directory and filename is /var/run/gluster and glusterdstate respectively. <p>Following are the sections in the output:</p> <ol> <li><code>Global</code>: UUID and op-version of glusterd</li> <li><code>Global options</code>: Displays cluster specific options that have been set    explicitly through the volume set command.</li> <li><code>Peers</code>: Displays the peer node information including its hostname and    connection status</li> <li><code>Volumes</code>: Displays the list of volumes created on this node along with    detailed information on each volume.</li> <li><code>Services</code>: Displays the list of the services configured on this node along    with their corresponding statuses.</li> </ol> <p>Limitations:</p> <ol> <li>This only supports glusterd.</li> <li>Does not provide complete cluster state. Data to be collated from all nodes    by external application to get the complete cluster state.</li> </ol>"},{"location":"release-notes/3.9.0/#multi-threaded-self-heal-for-disperse-volumes","title":"Multi threaded self-heal for Disperse volumes","text":"<p>Notes for users: Users now have the ability to configure multi-threaded self-heal in disperse volumes using the following commands:</p> <pre><code>Option below can be used to control number of parallel heals in SHD\n# gluster volume set &lt;volname&gt; disperse.shd-max-threads [1-64] # default is 1\nOption below can be used to control number of heals that can wait in SHD\n# gluster volume set &lt;volname&gt; disperse.shd-wait-qlength [1-65536] # default is 1024\n</code></pre>"},{"location":"release-notes/3.9.0/#hardware-extention-acceleration-in-disperse-volumes","title":"Hardware extention acceleration in Disperse volumes","text":"<p>Notes for users: If the user has hardware that has special instructions which can be used in erasure code calculations on the client it will be automatically used. At the moment this support is added for cpu-extentions: <code>x64</code>, <code>sse</code>, <code>avx</code></p>"},{"location":"release-notes/3.9.0/#lock-revocation-feature","title":"Lock revocation feature","text":"<p>Notes for users:</p> <ol> <li>Motivation: Prevents cluster instability by mis-behaving clients causing bricks to OOM due to inode/entry lock pile-ups.</li> <li>Adds option to strip clients of entry/inode locks after N seconds</li> <li>Adds option to clear ALL locks should the revocation threshold get hit</li> <li>Adds option to clear all or granted locks should the max-blocked threshold get hit (can be used in combination w/ revocation-clear-all).</li> <li>Adds logging to indicate revocation event &amp; reason</li> <li>Options are:</li> </ol> <pre><code># gluster volume set &lt;volname&gt; features.locks-revocation-secs &lt;integer; 0 to disable&gt;\n# gluster volume set &lt;volname&gt; features.locks-revocation-clear-all [on/off]\n# gluster volume set &lt;volname&gt; features.locks-revocation-max-blocked &lt;integer&gt;\n</code></pre>"},{"location":"release-notes/3.9.0/#on-demand-scrubbing-for-bitrot-detection","title":"On demand scrubbing for Bitrot Detection:","text":"<p>Notes for users: With 'ondemand' scrub option, you don't need to wait for the scrub-frequency to expire. As the option name itself says, the scrubber can be initiated on demand to detect the corruption. If the scrubber is already running, this option is a no op.</p> <pre><code># gluster volume bitrot &lt;volume-name&gt; scrub ondemand\n</code></pre>"},{"location":"release-notes/3.9.0/#improvements-in-gluster-nfs-ganesha-integration","title":"Improvements in Gluster NFS-Ganesha integration","text":"<p>Notes for users: With this release the major change done is to store all the ganesha related configuration files in the shared storage volume mount point instead of having separate local copy in '/etc/ganesha' folder on each node.</p> <p>For new users, before enabling nfs-ganesha</p> <ol> <li> <p>create a directory named nfs-ganesha in the shared storage mount point (/var/run/gluster/shared_storage/)</p> </li> <li> <p>Create ganesha.conf &amp; ganesha-ha.conf in that directory with the required details filled in.</p> </li> </ol> <p>For existing users, before starting nfs-ganesha service do the following :</p> <ol> <li> <p>Copy all the contents of /etc/ganesha directory (including .export_added file) to /var/run/gluster/shared_storage/nfs-ganesha from any of the ganesha nodes</p> </li> <li> <p>Create symlink using /var/run/gluster/shared_storage/nfs-ganesha/ganesha.conf on /etc/ganesha one each node in ganesha-cluster</p> </li> <li> <p>Change path for each export entry in ganesha.conf file</p> </li> </ol> <pre><code>Example: if a volume \"test\" was exported, then ganesha.conf shall have below export entry -\n %include \"/etc/ganesha/exports/export.test.conf\" export entry.\nChange that line to\n %include \"/var/run/gluster/shared_storage/nfs-ganesha/exports/export.test.conf\"\n</code></pre> <p>In addition, following changes have been made -</p> <ul> <li>The entity \"HA_VOL_SERVER= \" in ganesha-ha.conf is no longer required.</li> <li>A new resource-agent called portblock (available in &gt;= resource-agents-3.9.5 package) is added to the cluster configuration to speed up the nfs-client connections post IP failover or failback. This may be noticed while looking at the cluster configuration status using the command pcs status.</li> </ul>"},{"location":"release-notes/3.9.0/#availability-of-python-bindings-to-libgfapi","title":"Availability of python bindings to libgfapi","text":"<p>The official python bindings for GlusterFS libgfapi C library interface is mostly API complete. The complete API reference and documentation can be found at libgfapi-python.rtfd.io</p> <p>The python bindings have been packaged and has been made available over PyPI.</p>"},{"location":"release-notes/3.9.0/#small-file-improvements-in-gluster-with-md-cache-experimental","title":"Small file improvements in Gluster with md-cache (Experimental)","text":"<p>Notes for users: With this release, metadata cache on the client side is integrated with the cache-invalidation feature so that the clients can cache longer without compromising on consistency. By enabling, the metadata cache and cache invalidation feature and extending the cache timeout to 600s, we have seen performance improvements in metadata operation like creates, ls/stat, chmod, rename, delete. The perf improvements is significant in SMB access of gluster volume, but as a cascading effect the improvements is also seen on FUSE/Native access and NFS access.</p> <p>Use the below options in the order mentioned, to enable the features:</p> <pre><code>  # gluster volume set &lt;volname&gt; features.cache-invalidation on\n  # gluster volume set &lt;volname&gt; features.cache-invalidation-timeout 600\n  # gluster volume set &lt;volname&gt; performance.stat-prefetch on\n  # gluster volume set &lt;volname&gt; performance.cache-invalidation on\n  # gluster volume set &lt;volname&gt; performance.cache-samba-metadata on     # Only for SMB access\n  # gluster volume set &lt;volname&gt; performance.md-cache-timeout 600\n</code></pre>"},{"location":"release-notes/3.9.0/#real-time-cluster-notifications-using-events-apis","title":"Real time Cluster notifications using Events APIs","text":"<p>Let us imagine we have a Gluster monitoring system which displays list of volumes and its state, to show the realtime status, monitoring app need to query the Gluster in regular interval to check volume status, new volumes etc. Assume if the polling interval is 5 seconds then monitoring app has to run gluster volume info command ~17000 times a day!</p> <p>With Gluster 3.9 release, Gluster provides close to realtime notification and alerts for the Gluster cluster state changes and alerts. Webhooks can be registered to listen to Events emitted by Gluster. More details about this new feature is available here.</p> <p>http://docs.gluster.org/en/latest/Administrator%20Guide/Events%20APIs</p>"},{"location":"release-notes/3.9.0/#geo-replication-improvements","title":"Geo-replication improvements","text":""},{"location":"release-notes/3.9.0/#documentation-improvements","title":"Documentation improvements:","text":"<p>Upstream documentation is rewritten to reflect the latest version of Geo-replication. Removed the stale/duplicate documentation. We are still working on to add Troubleshooting, Cluster expand/shrink notes to it. Latest version of documentation is available here http://docs.gluster.org/en/latest/Administrator%20Guide/Geo%20Replication</p>"},{"location":"release-notes/3.9.0/#geo-replication-events-are-available-for-events-api-consumers","title":"Geo-replication Events are available for Events API consumers:","text":"<p>Events APIs is the new Gluster feature available with 3.9 release, most of the events from Geo-replication are added to eventsapi.</p> <p>Read more about the Events APIs and Geo-replication events here http://docs.gluster.org/en/latest/Administrator%20Guide/Events%20APIs</p>"},{"location":"release-notes/3.9.0/#new-simplified-command-to-setup-non-root-geo-replication","title":"New simplified command to setup Non root Geo-replication","text":"<p>Non root Geo-replication setup was not easy with multiple manual steps. Non root Geo-replication steps are simplified. Read more about the new steps in Admin guide.</p> <p>http://docs.gluster.org/en/latest/Administrator%20Guide/Geo%20Replication/#slave-user-setup</p>"},{"location":"release-notes/3.9.0/#new-command-to-generate-ssh-keysalternative-command-to-gsec_create","title":"New command to generate SSH keys(Alternative command to <code>gsec_create</code>)","text":"<p><code>gluster system:: execute gsec_create</code> command generates ssh keys in every Master cluster nodes and copies to initiated node. This command silently ignores error if any node is down in cluster. It will not collect SSH keys from that node. When Geo-rep create push-pem command is issued it will copy public keys from those nodes which were up during gsec_create. This causes Geo-rep to go to Faulty when that master node tries to make the connection to slave nodes. With the new command, output shows if any Master node was down while generating ssh keys. Read more about `gluster-georep-sshkey</p> <p>http://docs.gluster.org/en/latest/Administrator%20Guide/Geo%20Replication/#setting-up-the-environment-for-geo-replication</p>"},{"location":"release-notes/3.9.0/#logging-improvements","title":"Logging improvements","text":"<p>New logs are added, now from the log we can clearly understand what is going on. Note: This feature may change logging format of existing log messages, Please update your parsers if used to parse Geo-rep logs.</p> <p>Patch: http://review.gluster.org/15710</p>"},{"location":"release-notes/3.9.0/#new-configuration-options-available-changelog-log-level","title":"New Configuration options available: changelog-log-level","text":"<p>All the changelog related log messages are logged in <code>/var/log/glusterfs/geo-replication/&lt;SESSION&gt;/*.changes.log</code> in Master nodes. Log level was hard coded as <code>TRACE</code> for Changelog logs. New configuration option provided to modify the changelog log level and defaulted to <code>INFO</code></p>"},{"location":"release-notes/3.9.0/#behavior-changes","title":"Behavior changes","text":"<ul> <li>#1221623: Earlier the ports GlusterD   used to allocate for the daemons like brick processes, quotad, shd et all   were persistent through the volume's life cycle, so every restart of the   process(es) or a node reboot will try to use the same ports which were   allocated for the first time. With release-3.9 onwards, GlusterD will try to   allocate a fresh port once a daemon is restarted or the node is rebooted.</li> <li>#1348944: with 3.9 release the default   log file for glusterd has been renamed to glusterd.log from   etc-glusterfs-glusterd.vol.log</li> </ul>"},{"location":"release-notes/3.9.0/#known-issues","title":"Known Issues","text":"<ul> <li>#1387878:add-brick on a vm-store   configuration which has sharding enabled is leading to vm corruption. To work   around this issue, one can scale up by creating more volumes until this issue   is fixed.</li> </ul>"},{"location":"release-notes/3.9.0/#bugs-addressed","title":"Bugs addressed","text":"<p>A total of 571 patches has been sent, addressing 422 bugs:</p> <ul> <li>#762184: Support mandatory locking in glusterfs</li> <li>#789278: Issues reported by Coverity static analysis tool</li> <li>#1005257: [PATCH] Small typo fixes</li> <li>#1175711: posix: Set correct d_type for readdirp() calls</li> <li>#1193929: GlusterFS can be improved</li> <li>#1198849: Minor improvements and cleanup for the build system</li> <li>#1200914: pathinfo is wrong for striped replicated volumes</li> <li>#1202274: Minor improvements and code cleanup for libgfapi</li> <li>#1207604: [rfe] glusterfs snapshot cli commands should provide xml output.</li> <li>#1211863: RFE: Support in md-cache to use upcall notifications to invalidate its cache</li> <li>#1221623: glusterd: add brick command should re-use the port for listening which is freed by remove-brick.</li> <li>#1222915: usage text is wrong for use-readdirp mount default</li> <li>#1223937: Outdated autotools helper config.* files</li> <li>#1225718: [FEAT] DHT - rebalance - rebalance status o/p should be different for 'fix-layout' option, it should not show 'Rebalanced-files' , 'Size', 'Scanned' etc as it is not migrating any files.</li> <li>#1227667: Minor improvements and code cleanup for protocol server/client</li> <li>#1228142: clang-analyzer: adding clang static analysis support</li> <li>#1231224: Misleading error messages on brick logs while creating directory (mkdir) on fuse mount</li> <li>#1236009: do an explicit lookup on the inodes linked in readdirp</li> <li>#1254067: remove unused variables</li> <li>#1266876: cluster/afr: AFR2 returns empty readdir results to clients if brick is added back into cluster after re-imaging/formatting</li> <li>#1278325: DHT: Once remove brick start failed in between Remove brick commit should not be allowed</li> <li>#1285152: store afr pending xattrs as a volume option</li> <li>#1292020: quota: client gets IO error instead of disk quota exceed when the limit is exceeded</li> <li>#1294813: [geo-rep]: Multiple geo-rep session to the same slave is allowed for different users</li> <li>#1296043: Wrong usage of dict functions</li> <li>#1302277: Wrong XML output for Volume Options</li> <li>#1302948: tar complains: : file changed as we read it <li>#1303668: packaging: rpmlint warning and errors - Documentation URL 404</li> <li>#1305031: AFR winds a few reads of a file in metadata split-brain.</li> <li>#1306398: Tiering and AFR may result in data loss</li> <li>#1311002: NFS+attach tier:IOs hang while attach tier is issued</li> <li>#1311926: [georep]: If a georep session is recreated the existing files which are deleted from slave doesn't get sync again from master</li> <li>#1315666: Data Tiering:tier volume status shows as in-progress on all nodes of a cluster even if the node is not part of volume</li> <li>#1316178: changelog/rpc: Memory leak- rpc_clnt_t object is never freed</li> <li>#1316389: georep: tests for logrotate, create+rename and hard-link rename</li> <li>#1318204: Input / Output when chmoding files on NFS mount point</li> <li>#1318289: [RFE] Add arbiter brick hotplug</li> <li>#1318591: Glusterd not operational due to snapshot conflicting with nfs-ganesha export file in \"/var/lib/glusterd/snaps\"</li> <li>#1319992: RFE: Lease support for gluster</li> <li>#1320388: [GSS]-gluster v heal volname info does not work with enabled ssl/tls</li> <li>#1321836: gluster volume info --xml returns 0 for nonexistent volume</li> <li>#1322214: [HC] Add disk in a Hyper-converged environment fails when glusterfs is running in directIO mode</li> <li>#1322805: [scale] Brick process does not start after node reboot</li> <li>#1322825: IO-stats, client profile is overwritten when it is on the same node as bricks</li> <li>#1324439: SAMBA+TIER : Wrong message display.On detach tier success the message reflects Tier command failed.</li> <li>#1325831: gluster snap status xml output shows incorrect details when the snapshots are in deactivated state</li> <li>#1326410: /var/lib/glusterd/$few-directories not owned by any package, causing it to remain after glusterfs-server is uninstalled</li> <li>#1327171: Disperse: Provide description of disperse.eager-lock option.</li> <li>#1328224: RFE : Feature: Automagic unsplit-brain policies for AFR</li> <li>#1329211: values for Number of Scrubbed files, Number of Unsigned files, Last completed scrub time and Duration of last scrub are shown as zeros in bit rot scrub status</li> <li>#1330032: rm -rf to a dir gives directory not empty(ENOTEMPTY) error</li> <li>#1330097: ganesha exported volumes doesn't get synced up on shutdown node when it comes up.</li> <li>#1330583: glusterfs-libs postun ldconfig: relative path `1' used to build cache</li> <li>#1331254: Disperse volume fails on high load and logs show some assertion failures</li> <li>#1331287: No xml output on gluster volume heal info command with --xml</li> <li>#1331323: [Granular entry sh] - Implement renaming of indices in index translator</li> <li>#1331423: distaf: Add io_libs to namespace package list</li> <li>#1331720: implement meta-lock/unlock for lock migration</li> <li>#1331721: distaf: Add README and HOWTO to distaflibs as well</li> <li>#1331860: Wrong constant used in length based comparison for XATTR_SECURITY_PREFIX</li> <li>#1331969: Ganesha+Tiering: Continuous \"0-glfs_h_poll_cache_invalidation: invalid argument\" messages getting logged in ganesha-gfapi logs.</li> <li>#1332020: multiple regression failures for tests/basic/quota-ancestry-building.t</li> <li>#1332021: multiple failures for testcase: tests/basic/inode-quota-enforcing.t</li> <li>#1332054: multiple failures of tests/bugs/disperse/bug-1236065.t</li> <li>#1332073: EINVAL errors while aggregating the directory size by quotad</li> <li>#1332134: bitrot: Build generates Compilation Warning.</li> <li>#1332136: Detach tier fire before the background fixlayout is complete may result in failure</li> <li>#1332156: SMB:while running I/O on cifs mount and doing graph switch causes cifs mount to hang.</li> <li>#1332219: tier: avoid pthread_join if pthread_create fails</li> <li>#1332413: Wrong op-version for mandatory-locks volume set option</li> <li>#1332419: geo-rep: address potential leak of memory</li> <li>#1332460: [features/worm] - when disabled, worm xl should simply pass requested fops to its child xl</li> <li>#1332465: glusterd + bitrot : Creating clone of snapshot. error \"xlator.c:148:xlator_volopt_dynload] 0-xlator: /usr/lib64/glusterfs/3.7.9/xlator/features/bitrot.so: cannot open shared object file:</li> <li>#1332473: tests: 'tests/bitrot/br-state-check.t' fails in netbsd</li> <li>#1332501: Mandatory locks are not migrated during lock migration</li> <li>#1332566: [granular entry sh] - Add more tests</li> <li>#1332798: [AFR]: \"volume heal info\" command is failing during in-service upgrade to latest.</li> <li>#1332822: distaf: Add library functions for gluster snapshot operations</li> <li>#1332885: distaf: Add library functions for gluster bitrot operations and generic library utility functions generic to all components</li> <li>#1332952: distaf: Add library functions for gluster quota operations</li> <li>#1332994: Self Heal fails on a replica3 volume with 'disk quota exceeded'</li> <li>#1333023: readdir-ahead does not fetch xattrs that md-cache needs in it's internal calls</li> <li>#1333043: Fix excessive logging due to NULL dict in dht</li> <li>#1333263: [features/worm] Unwind FOPs with op_errno and add gf_worm prefix to functions</li> <li>#1333317: rpc_clnt will sometimes not reconnect when using encryption</li> <li>#1333319: Unexporting a volume sometimes fails with \"Dynamic export addition/deletion failed\".</li> <li>#1333370: [FEAT] jbr-server handle lock/unlock fops</li> <li>#1333738: distaf: Add GlusterBaseClass (gluster_base_class.py) to distaflibs-gluster.</li> <li>#1333912: client ID should logged when SSL connection fails</li> <li>#1333925: libglusterfs: race conditions and illegal mem access in timer</li> <li>#1334044: [RFE] Eventing for Gluster</li> <li>#1334164: Worker dies with [Errno 5] Input/output error upon creation of entries at slave</li> <li>#1334208: distaf: Add library functions for gluster rebalance operations</li> <li>#1334269: GlusterFS 3.8 fails to build in the CentOS Community Build System</li> <li>#1334270: glusterd: glusterd provides stale port information when a volume is recreated with same brick path</li> <li>#1334285: Under high read load, sometimes the message \"XDR decoding failed\" appears in the logs and read fails</li> <li>#1334314: changelog: changelog_rollover breaks when number of fds opened is more than 1024</li> <li>#1334444: SAMBA-VSS : Permission denied issue while restoring the directory from windows client 1 when files are deleted from windows client 2</li> <li>#1334620: stop all gluster processes should also include glusterfs mount process</li> <li>#1334621: set errno in case of inode_link failures</li> <li>#1334721: distaf: Add library functions for gluster tiering operations</li> <li>#1334839: [Tiering]: Files remain in hot tier even after detach tier completes</li> <li>#1335019: Add graph for decompounder xlator</li> <li>#1335091: mount/fuse: Logging improvements</li> <li>#1335231: features/locks: clang compile warning in posix.c</li> <li>#1335232: features/index: clang compile warnings in index.c</li> <li>#1335429: Self heal shows different information for the same volume from each node</li> <li>#1335494: Modifying peer ops library</li> <li>#1335531: Modified volume options are not syncing once glusterd comes up.</li> <li>#1335652: Heal info shows split-brain for .shard directory though only one brick was down</li> <li>#1335717: PREFIX is not honoured during build and install</li> <li>#1335776: rpc: change client insecure port ceiling from 65535 to 49151</li> <li>#1335818: Revert \"features/shard: Make o-direct writes work with sharding: http://review.gluster.org/#/c/13846/\"</li> <li>#1335858: Files present in the .shard folder even after deleting all the vms from the UI</li> <li>#1335973: [Tiering]: The message 'Max cycle time reached..exiting migration' incorrectly displayed as an 'error' in the logs</li> <li>#1336197: failover is not working with latest builds.</li> <li>#1336328: [FEAT] jbr: Improve code modularity</li> <li>#1336354: Provide a way to configure gluster source location in devel-vagrant</li> <li>#1336373: Distaf: Add gluster specific config file</li> <li>#1336381: ENOTCONN error during parallel rmdir</li> <li>#1336508: rpc-transport: compiler warning format string</li> <li>#1336612: one of vm goes to paused state when network goes down and comes up back</li> <li>#1336630: ERROR and Warning message on writing a file from mount point \"null gfid for path (null)\" repeated 3 times between\"</li> <li>#1336642: [RFE] git-branch-diff: wrapper script for git to visualize backports</li> <li>#1336698: DHT : few Files are not accessible and not listed on mount + more than one Directory have same gfid + (sometimes) attributes has ?? in ls output after renaming Directories from multiple client at same time</li> <li>#1336793: assorted typos and spelling mistakes from Debian lintian</li> <li>#1336818: Add ability to set oom_score_adj for glusterfs process</li> <li>#1336853: scripts: bash-isms in scripts</li> <li>#1336945: [NFS-Ganesha] : stonith-enabled option not set with new versions of cman,pacemaker,corosync and pcs</li> <li>#1337160: distaf: Added libraries to setup nfs-ganesha in gluster through distaf</li> <li>#1337227: [tiering]: error message shown during the failure of detach tier commit isn't intuitive</li> <li>#1337405: Some of VMs go to paused state when there is concurrent I/O on vms</li> <li>#1337473: upgrade path when slave volume uuid used in geo-rep session</li> <li>#1337597: Mounting a volume over NFS with a subdir followed by a / returns \"Invalid argument\"</li> <li>#1337650: log flooded with Could not map name=xxxx to a UUID when config'd with long hostnames</li> <li>#1337777: tests/bugs/write-behind/1279730.t fails spuriously</li> <li>#1337791: tests/basic/afr/tarissue.t fails regression</li> <li>#1337899: Misleading error message on rebalance start when one of the glusterd instance is down</li> <li>#1338544: fuse: In fuse_first_lookup(), dict is not un-referenced in case create_frame returns an empty pointer.</li> <li>#1338634: AFR : fuse,nfs mount hangs when directories with same names are created and deleted continuously</li> <li>#1338733: __inode_ctx_put: fix mem leak on failure</li> <li>#1338967: common-ha: ganesha.nfsd not put into NFS-GRACE after fail-back</li> <li>#1338991: DHT2: Tracker bug</li> <li>#1339071: dht/rebalance: mark hardlink migration failure as skipped for rebalance process</li> <li>#1339149: Error and warning messages related to xlator/features/snapview-client.so adding up to the client log on performing IO operations</li> <li>#1339166: distaf: Added timeout value to wait for rebalance to complete and removed older rebalance library file</li> <li>#1339181: Full heal of a sub-directory does not clean up name-indices when granular-entry-heal is enabled.</li> <li>#1339214: gfapi: set mem_acct for the variables created for upcall</li> <li>#1339471: [geo-rep]: Worker died with [Errno 2] No such file or directory</li> <li>#1339472: [geo-rep]: Monitor crashed with [Errno 3] No such process</li> <li>#1339541: Added libraries to setup CTDB in gluster through distaf</li> <li>#1339553: gfapi: in case of handle based APIs, close glfd after successful create</li> <li>#1339689: RFE - capacity info (df -h on a mount) is incorrect for a tiered volume</li> <li>#1340488: copy-export-ganesha.sh does not have a correct shebang</li> <li>#1340623: Directory creation(mkdir) fails when the remove brick is initiated for replicated volumes accessing via nfs-ganesha</li> <li>#1340853: [geo-rep]: If the session is renamed, geo-rep configuration are not retained</li> <li>#1340936: Automount fails because /sbin/mount.glusterfs does not accept the -s option</li> <li>#1341007: gfapi : throwing warning message for unused variable in glfs_h_find_handle()</li> <li>#1341009: Log parameters such as the gfid, fd address, offset and length of the reads upon failure for easier debugging</li> <li>#1341294: build: RHEL7 unpackaged files /var/lib/glusterd/hooks/.../S57glusterfind-delete-post.{pyc,pyo}</li> <li>#1341474: [geo-rep]: Snapshot creation having geo-rep session is broken</li> <li>#1341650: conservative merge happening on a x3 volume for a deleted file</li> <li>#1341768: After setting up ganesha on RHEL 6, nodes remains in stopped state and grace related failures observed in pcs status</li> <li>#1341796: [quota+snapshot]: Directories are inaccessible from activated snapshot, when the snapshot was created during directory creation</li> <li>#1342171: O_DIRECT support for sharding</li> <li>#1342259: [features/worm] - write FOP should pass for the normal files</li> <li>#1342298: reading file with size less than 512 fails with odirect read</li> <li>#1342356: [RFE] Python library for creating Cluster aware CLI tools for Gluster</li> <li>#1342420: [georep]: Stopping volume fails if it has geo-rep session (Even in stopped state)</li> <li>#1342796: self heal deamon killed due to oom kills on a dist-disperse volume using nfs ganesha</li> <li>#1342979: [geo-rep]: Add-Brick use case: create push-pem force on existing geo-rep fails</li> <li>#1343038: IO ERROR when multiple graph switches</li> <li>#1343286: enabling glusternfs with nfs.rpc-auth-allow to many hosts failed</li> <li>#1343333: [RFE] Simplify Non Root Geo-replication Setup</li> <li>#1343374: Gluster fuse client crashed generating core dump</li> <li>#1343838: Implement API to get page aligned iobufs in iobuf.c</li> <li>#1343906: [Stress/Scale] : I/O errors out from gNFS mount points during high load on an erasure coded volume,Logs flooded with Error messages.</li> <li>#1343943: Old documentation link in log during Geo-rep MISCONFIGURATION</li> <li>#1344277: [disperse] mkdir after re balance give Input/Output Error</li> <li>#1344340: Unsafe access to inode-&gt;fd_list</li> <li>#1344396: fd leak in disperse</li> <li>#1344407: fail delete volume operation if one of the glusterd instance is down in cluster</li> <li>#1344686: tiering : Multiple brick processes crashed on tiered volume while taking snapshots</li> <li>#1344714: removal of file from nfs mount crashs ganesha server</li> <li>#1344836: [Disperse volume]: IO hang seen on mount with file ops</li> <li>#1344885: inode leak in brick process</li> <li>#1345727: Bricks are starting when server quorum not met.</li> <li>#1345744: [geo-rep]: Worker crashed with \"KeyError: \"</li> <li>#1345748: SAMBA-DHT : Crash seen while rename operations in cifs mount and windows access of share mount</li> <li>#1345846: quota : rectify quota-deem-statfs default value in gluster v set help command</li> <li>#1345855: Possible crash due to a timer cancellation race</li> <li>#1346138: [RFE] Non root Geo-replication Error logs improvements</li> <li>#1346211: cleanup glusterd-georep code</li> <li>#1346551: wrong understanding of function's parameter</li> <li>#1346719: [Disperse] dd + rm + ls lead to IO hang</li> <li>#1346821: cli core dumped while providing/not wrong values during arbiter replica volume</li> <li>#1347249: libgfapi : variables allocated by glfs_set_volfile_server is not freed</li> <li>#1347354: glusterd: SuSE build system error for incorrect strcat, strncat usage</li> <li>#1347686: IO error seen with Rolling or non-disruptive upgrade of an distribute-disperse(EC) volume from 3.7.5 to 3.7.9</li> <li>#1348897: Add relative path validation for gluster copy file utility</li> <li>#1348904: [geo-rep]: If the data is copied from .snaps directory to the master, it doesn't get sync to slave [First Copy]</li> <li>#1348944: Change the glusterd log file name to glusterd.log</li> <li>#1349270: ganesha.enable remains on in volume info file even after we disable nfs-ganesha on the cluster.</li> <li>#1349273: Geo-rep silently ignores config parser errors</li> <li>#1349276: Buffer overflow when attempting to create filesystem using libgfapi as driver on OpenStack</li> <li>#1349284: [tiering]: Files of size greater than that of high watermark level should not be promoted</li> <li>#1349398: nfs-ganesha disable doesn't delete nfs-ganesha folder from /var/run/gluster/shared_storage</li> <li>#1349657: process glusterd set TCP_USER_TIMEOUT failed</li> <li>#1349709: Polling failure errors getting when volume is started&amp;stopped with SSL enabled setup.</li> <li>#1349723: Added libraries to get server_brick dictionaries</li> <li>#1350017: Change distaf glusterbase class and mount according to the config file changes</li> <li>#1350168: distaf: made changes to create_volume function</li> <li>#1350173: distaf: Adding samba_ops library</li> <li>#1350188: distaf: minor import changes in ganesha.py</li> <li>#1350191: race condition when set ctx-&gt;timer in function gf_timer_registry_init</li> <li>#1350237: Gluster/NFS does not accept dashes in hostnames in exports/netgroups files</li> <li>#1350245: distaf: Add library functions for gluster volume operations</li> <li>#1350248: distaf: Modified get_pathinfo function in lib_utils.py</li> <li>#1350256: Distaf: Modifying the ctdb_libs to get server host from the server dict</li> <li>#1350258: Distaf: add a sample test case to the framework</li> <li>#1350327: Protocol client not mounting volumes running on older versions.</li> <li>#1350371: ganesha/glusterd : remove 'HA_VOL_SERVER' from ganesha-ha.conf</li> <li>#1350383: distaf: Modified distaf gluster config file</li> <li>#1350427: distaf: Modified tier_attach() to get bricks path for attaching tier from the available bricks in server</li> <li>#1350744: GlusterFS 3.9.0 tracker</li> <li>#1350793: build: remove absolute paths from glusterfs spec file</li> <li>#1350867: RFE: FEATURE: Lock revocation for features/locks xlator</li> <li>#1351021: [DHT]: Rebalance info for remove brick operation is not showing after glusterd restart</li> <li>#1351071: [geo-rep] Stopped geo-rep session gets started automatically once all the master nodes are upgraded</li> <li>#1351134: [SSL] : gluster v set help does not show ssl options</li> <li>#1351537: [Bitrot] Need a way to set scrub interval to a minute, for ease of testing</li> <li>#1351880: gluster volume status  client\" isn't showing any information when one of the nodes in a 3-way Distributed-Replicate volume is shut down <li>#1352019: RFE: Move throttling code to libglusterfs from bitrot</li> <li>#1352277: a two node glusterfs seems not possible anymore?!</li> <li>#1352279: [scale]: Bricks not started after node reboot.</li> <li>#1352423: should find_library(\"c\") be used instead of find_library(\"libc\") in geo-replication/syncdaemon/libcxattr.py?</li> <li>#1352634: qemu libgfapi clients hang when doing I/O</li> <li>#1352671: RFE: As a part of xattr invalidation, send the stat info as well</li> <li>#1352854: GlusterFS - Memory Leak - High Memory Utilization</li> <li>#1352871: [Bitrot]: Scrub status- Certain fields continue to show previous run's details, even if the current run is in progress</li> <li>#1353156: [RFE] CLI to get local state representation for a cluster</li> <li>#1354141: several problems found in failure handle logic</li> <li>#1354221: noisy compilation warnning with Wstrict-prototypes</li> <li>#1354372: Fix timing issue in tests/bugs/glusterd/bug-963541.t</li> <li>#1354439: nfs client I/O stuck post IP failover</li> <li>#1354489: service file is executable</li> <li>#1355604: afr coverity fixes</li> <li>#1355628: Upgrade from 3.7.8 to 3.8.1 doesn't regenerate the volfiles</li> <li>#1355706: [Bitrot]: Sticky bit files considered and skipped by the scrubber, instead of getting ignored.</li> <li>#1355956: RFE : move ganesha related configuration into shared storage</li> <li>#1356032: quota: correct spelling mistakes in quota src files</li> <li>#1356068: observing \" Too many levels of symbolic links\" after adding bricks and then issuing a replace brick</li> <li>#1356504: Move gf_log-&gt;gf_msg in index feature</li> <li>#1356508: [RFE] Handle errors during SSH key generation(gsec_create)</li> <li>#1356528: memory leak in glusterd-georeplication</li> <li>#1356851: [Bitrot+Sharding] Scrub status shows incorrect values for 'files scrubbed' and 'files skipped'</li> <li>#1356868: File not found errors during rpmbuild: /var/lib/glusterd/hooks/1/delete/post/S57glusterfind-delete-post.py{c,o}</li> <li>#1356888: Correct code in socket.c to avoid fd leak</li> <li>#1356998: syscalls: readdir_r() is deprecated in newer glibc</li> <li>#1357210: add several fops support in io-threads</li> <li>#1357226: add a basis function to reduce verbose code</li> <li>#1357397: Trash translator fails to create 'internal_op' directory under already existing trash directory</li> <li>#1357463: Error: quota context not set inode (gfid:nnn) [Invalid argument]</li> <li>#1357490: libglusterfs : update correct memory segments in glfs-message-id</li> <li>#1357821: Make install fails second time without uninstall</li> <li>#1358114: tests: ./tests/bitrot/br-stub.t fails intermittently</li> <li>#1358195: Fix spurious failure of tests/bugs/glusterd/bug-1111041.t</li> <li>#1358196: Tiering related core observed with \"uuid_is_null () message\".</li> <li>#1358244: [SNAPSHOT]: The PID for snapd is displayed even after snapd process is killed.</li> <li>#1358594: Enable gfapi test cases in Gluster upstream regression</li> <li>#1358608: Memory leak observed with upcall polling</li> <li>#1358671: Add Events for Volume Set and Reset</li> <li>#1358922: missunderstanding about GF_PROTOCOL_DICT_SERIALIZE</li> <li>#1358936: coverity: iobuf_get_page_aligned calling iobuf_get2 should check the return pointer</li> <li>#1358944: jbr resource leak, forget free \"path\"</li> <li>#1358976: Fix spurious failures in split-brain-favorite-child-policy.t</li> <li>#1359001: Fix spurious failures in ec.t</li> <li>#1359190: Glusterd crashes upon receiving SIGUSR1</li> <li>#1359370: glfs: fix glfs_set_volfile_server doc</li> <li>#1359711: [GSS] Rebalance crashed</li> <li>#1359717: Fix failure of ./tests/bugs/snapshot/bug-1316437.t</li> <li>#1360169: Fix bugs in compound fops framework</li> <li>#1360401: RFE: support multiple bricks within one process</li> <li>#1360402: Clients can starve under heavy load</li> <li>#1360647: gfapi: deprecate the rdma support for management connections</li> <li>#1360670: Add output option <code>--xml</code> to man page of gluster</li> <li>#1360679: Bricks doesn't come online after reboot [ Brick Full ]</li> <li>#1360682: tests: ./tests/bitrot/bug-1244613.t fails intermittently</li> <li>#1360693: [RFE] Add a count of snapshots associated with a volume to the output of the vol info command</li> <li>#1360809: [RFE] Capture events in GlusterD</li> <li>#1361094: Auto generate header files during Make</li> <li>#1361249: posix: leverage FALLOC_FL_ZERO_RANGE in zerofill fop</li> <li>#1361300: Direct io to sharded files fails when on zfs backend</li> <li>#1361678: thread CPU saturation limiting throughput on write workloads</li> <li>#1361983: Move USE_EVENTS in gf_events API</li> <li>#1361999: Remove ganesha xlator code from gluster code base</li> <li>#1362144: Python library to send Events</li> <li>#1362151: [libgfchangelog]: If changelogs are not available for the requested time range, no proper error message</li> <li>#1362397: Mem leak in meta_default_readv in meta xlators</li> <li>#1362520: Per xlator logging not working</li> <li>#1362602: [Open SSL] : Unable to mount an SSL enabled volume via SMB v3/Ganesha v4</li> <li>#1363591: Geo-replication user driven Events</li> <li>#1363721: [HC]: After bringing down and up of the bricks VM's are getting paused</li> <li>#1363948: Spurious failure in tests/bugs/glusterd/bug-1089668.t</li> <li>#1364026: glfs_fini() crashes with SIGSEGV</li> <li>#1364420: [RFE] History Crawl performance improvement</li> <li>#1364449: posix: honour fsync flags in posix_do_zerofill</li> <li>#1364529: api: revert glfs_ipc_xd intended for 4.0</li> <li>#1365455: [AFR]: Files not available in the mount point after converting Distributed volume type to Replicated one.</li> <li>#1365489: glfs_truncate missing</li> <li>#1365506: gfapi: use const qualifier for glfs_*timens()</li> <li>#1366195: [Bitrot - RFE]: On demand scrubbing option to scrub</li> <li>#1366222: \"heal info --xml\" not showing the brick name of offline bricks.</li> <li>#1366226: Move alloca0 definition to common-utils</li> <li>#1366284: fix bug in protocol/client lookup callback</li> <li>#1367258: Log EEXIST errors at DEBUG level</li> <li>#1367478: Second gluster volume is offline after daemon restart or server reboot</li> <li>#1367527: core: use  for makedev(3), major(3), minor(3) <li>#1367665: rotated FUSE mount log is using to populate the information after log rotate.</li> <li>#1367771: Introduce graceful mode in stop-all-gluster-processes.sh</li> <li>#1367774: Support for Client side Events</li> <li>#1367815: [Bitrot - RFE]: Bitrot Events</li> <li>#1368042: make fails if Events APIs are disabled</li> <li>#1368349: tests/bugs/cli/bug-1320388.t: Infrequent failures</li> <li>#1368451: [RFE] Implement multi threaded self-heal for ec volumes</li> <li>#1368842: Applications not calling glfs_h_poll_upcall() have upcall events cached for no use</li> <li>#1368882: log level set in glfs_set_logging() does not work</li> <li>#1368931: [ RFE] Quota Events</li> <li>#1368953: spurious netbsd run failures in tests/basic/glusterd/volfile_server_switch.t</li> <li>#1369124: fix unused variable warnings from out-of-tree builds generate XDR headers and source files i...</li> <li>#1369331: Memory leak with a replica 3 arbiter 1 configuration</li> <li>#1369401: NetBSD hangs at /tests/features/lock_revocation.t</li> <li>#1369430: Track the client that performed readdirp</li> <li>#1369432: IATT cache invalidation should be sent when permission changes on file</li> <li>#1369524: segment fault while join thread reaper_thr in fini()</li> <li>#1369530: protocol/server: readlink rsp xdr failed while readlink got an error</li> <li>#1369638: DHT stale layout issue will be seen often with md-cache prolonged cache of lookups</li> <li>#1369721: EventApis will not work if compiled using ./configure --disable-glupy</li> <li>#1370053: fix EXPECT_WITHIN</li> <li>#1370074: Fix mistakes in self-heald.t</li> <li>#1370406: build: eventtypes.h is missing</li> <li>#1370445: Geo-replication server side events</li> <li>#1370862: dht: fix the broken build</li> <li>#1371541: Spurious regressions in ./tests/bugs/gfapi/bug-1093594.t</li> <li>#1371543: Add cache invalidation stat in profile info</li> <li>#1371775: <code>gluster system:: uuid get</code> hangs</li> <li>#1372278: [RFE] Provide snapshot events for the new eventing framework</li> <li>#1372586: Fix the test case http://review.gluster.org/#/c/15385/</li> <li>#1372686: [RFE]Reducing number of network round trips</li> <li>#1373529: Node remains in stopped state in pcs status with \"/usr/lib/ocf/resource.d/heartbeat/ganesha_mon: line 137: [: too many arguments ]\" messages in logs.</li> <li>#1373735: Event pushed even if Answer is No in the Volume Stop and Delete prompt</li> <li>#1373740: [RFE]: events from protocol server</li> <li>#1373743: [RFE]: AFR events</li> <li>#1374153: [RFE] History Crawl performance improvement</li> <li>#1374167: disperse: Integrate important events with events framework</li> <li>#1374278: rpc/xdr: generated files are filtered with a sed extended regex</li> <li>#1374298: \"gluster vol status all clients --xml\" doesn't generate xml if there is a failure in between</li> <li>#1374324: [RFE] Tier Events</li> <li>#1374567: [Bitrot]: Recovery fails of a corrupted hardlink (and the corresponding parent file) in a disperse volume</li> <li>#1374581: Geo-rep worker Faulty with OSError: [Errno 21] Is a directory</li> <li>#1374597: [geo-rep]: AttributeError: 'Popen' object has no attribute 'elines'</li> <li>#1374608: geo-replication *changes.log does not respect the log-level configured</li> <li>#1374626: Worker crashes with EINVAL errors</li> <li>#1374630: [geo-replication]: geo-rep Status is not showing bricks from one of the nodes</li> <li>#1374639: glusterfs: create a directory with 0464 mode return EIO error</li> <li>#1374649: Support for rc.d and init for Service management</li> <li>#1374841: Implement SIMD support on EC</li> <li>#1375042: bug-963541.t spurious failure</li> <li>#1375537: gf_event python fails with ImportError</li> <li>#1375543: [geo-rep]: defunct tar process while using tar+ssh sync</li> <li>#1375570: Detach tier commit is allowed when detach tier start goes into failed state</li> <li>#1375914: posix: Integrate important events with events framework</li> <li>#1376331: Rpm installation fails with conflicts error for eventsconfig.json file</li> <li>#1376396: /var/tmp/rpm-tmp.KPCugR: line 2: /bin/systemctl: No such file or directory</li> <li>#1376477: [RFE] DHT Events</li> <li>#1376874: RFE : move ganesha related configuration into shared storage</li> <li>#1377288: The GlusterFS Callback RPC-calls always use RPC/XID 42</li> <li>#1377386: glusterd experiencing repeated connect/disconnect messages when shd is down</li> <li>#1377570: EC: Set/unset dirty flag for all the update operations</li> <li>#1378814: Files not being opened with o_direct flag during random read operation (Glusterfs 3.8.2)</li> <li>#1378948: removal of file from nfs mount crashes ganesha server</li> <li>#1379028: Modifications to AFR Events</li> <li>#1379287: warning messages seen in glusterd logs for each 'gluster volume status' command</li> <li>#1379528: Poor smallfile read performance on Arbiter volume compared to Replica 3 volume</li> <li>#1379707: gfapi: Fix fd ref leaks</li> <li>#1379996: Volume restart couldn't re-export the volume exported via ganesha.</li> <li>#1380252: glusterd fails to start without installing glusterfs-events package</li> <li>#1383591: glfs_realpath() should not return malloc()'d allocated memory</li> <li>#1383692: GlusterFS fails to build on old Linux distros with linux/oom.h missing</li> <li>#1383913: spurious heal info as pending heal entries never end on an EC volume while IOs are going on</li> <li>#1385224: arbiter volume write performance is bad with sharding</li> <li>#1385236: invalid argument warning messages seen in fuse client logs 2016-09-30 06:34:58.938667] W [dict.c:418ict_set] (--&gt;/usr/lib64/glusterfs/3.8.4/xlator/cluster/replicate.so(+0x58722) 0-dict: !this || !value for key=link-count [Invalid argument]</li> <li>#1385451: \"nfs.disable: on\" is not showing in Vol info by default for the 3.7.x volumes after updating to 3.9.0</li> <li>#1386072: Spurious permission denied problems observed</li> <li>#1386178: eventsapi/georep: Events are not available for Checkpoint and Status Change</li> <li>#1386338: pmap_signin event fails to update brickinfo-&gt;signed_in flag</li> <li>#1387099: Boolean attributes are published as string</li> <li>#1387492: Error and warning message getting while removing glusterfs-events package</li> <li>#1387502: Incorrect volume type in the \"glusterd_state\" file generated using CLI \"gluster get-state\"</li> <li>#1387564: [Eventing]: UUID is showing zeros in the event message for the peer probe operation.</li> <li>#1387894: Regression caused by enabling client-io-threads by default</li> <li>#1387960: Sequential volume start&amp;stop is failing with SSL enabled setup.</li> <li>#1387964: [Eventing]: 'gluster vol bitrot  scrub ondemand' does not produce an event <li>#1387975: Continuous warning messages getting when one of the cluster node is down on SSL setup.</li> <li>#1387981: [Eventing]: 'gluster volume tier  start force' does not generate a TIER_START event <li>#1387984: Add a test script for compound fops changes in AFR</li> <li>#1387990: [RFE] Geo-replication Logging Improvements</li> <li>#1388150: geo-replica slave node goes faulty for non-root user session due to fail to locate gluster binary</li> <li>#1388323: fuse mount point not accessible</li> <li>#1388350: Memory Leaks in snapshot code path</li> <li>#1388470: throw warning to show that older tier commands are depricated and will be removed.</li> <li>#1388563: [Eventing]: 'VOLUME_REBALANCE' event messages have an incorrect volume name</li> <li>#1388579: crypt: changes needed for openssl-1.1 (coming in Fedora 26)</li> <li>#1388731: [GSS]glusterfind pre session hangs indefinitely in RHGS 3.1.3</li> <li>#1388912: glusterfs can't self heal character dev file for invalid dev_t parameters</li> <li>#1389675: Experimental translators and 4.0 features need to be disabled for release-3.9</li> <li>#1389742: build: incorrect Requires: for portblock resource agent</li> <li>#1390837: write-behind: flush stuck by former failed write</li> <li>#1391448: md-cache: Invalidate cache entry in case of OPEN with O_TRUNC</li> <li>#1392286: gfapi clients crash while using async calls due to double fd_unref</li> <li>#1392718: Quota version not changing in the quota.conf after upgrading to 3.7.1 from 3.6.1</li> <li>#1392844: Hosted Engine VM paused post replace-brick operation</li> <li>#1392869: The FUSE client log is filling up with posix_acl_default and posix_acl_access messages</li>"},{"location":"release-notes/4.0.0/","title":"Release notes for Gluster 4.0.0","text":"<p>The Gluster community celebrates 13 years of development with this latest release, Gluster 4.0. This release enables improved integration with containers, an enhanced user experience, and a next-generation management framework. The 4.0 release helps cloud-native app developers choose Gluster as the default scale-out distributed file system.</p> <p>A selection of the important features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Major changes and features</li> <li>Major issues</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/4.0.0/#announcements","title":"Announcements","text":"<ol> <li>As 3.13 was a short term maintenance release, features which have been    included in that release are available with 4.0.0 as well.These features may be of    interest to users upgrading to 4.0.0 from older than 3.13 releases. The 3.13    release notes captures the list of features that were introduced with 3.13.</li> </ol> <p>NOTE: As 3.13 was a short term maintenance release, it will reach end of life (EOL) with the release of 4.0.0. (reference)</p> <ol> <li> <p>Releases that receive maintenance updates post 4.0 release are, 3.10, 3.12,    4.0 (reference)</p> </li> <li> <p>With this release, the CentOS storage SIG will not build server packages for    CentOS6. Server packages will be available for CentOS7 only. For ease of    migrations, client packages on CentOS6 will be published and maintained.</p> </li> </ol> <p>NOTE: This change was announced here</p>"},{"location":"release-notes/4.0.0/#major-changes-and-features","title":"Major changes and features","text":"<p>Features are categorized into the following sections,</p> <ul> <li>Management</li> <li>Monitoring</li> <li>Performance</li> <li>Geo-replication</li> <li>Standalone</li> <li>Developer related</li> </ul>"},{"location":"release-notes/4.0.0/#management","title":"Management","text":"<p>GlusterD2 (GD2) is new management daemon for Gluster-4.0. It is a complete rewrite, with all new internal core frameworks, that make it more scalable, easier to integrate with and has lower maintenance requirements.</p> <p>A quick start guide is available to get started with GD2.</p> <p>GD2 in Gluster-4.0 is a technical preview release. It is not recommended for production use. For the current release glusterd is the preferred management daemon. More information is available in the Limitations section.</p> <p>GD2 brings many new changes and improvements, that affect both users and developers.</p>"},{"location":"release-notes/4.0.0/#features","title":"Features","text":"<p>The most significant new features brought by GD2 are below.</p>"},{"location":"release-notes/4.0.0/#native-rest-apis","title":"Native REST APIs","text":"<p>GD2 exposes all of its management functionality via ReST APIs. The ReST APIs accept and return data encoded in JSON. This enables external projects such as Heketi to be better integrated with GD2.</p>"},{"location":"release-notes/4.0.0/#cli","title":"CLI","text":"<p>GD2 provides a new CLI, <code>glustercli</code>, built on top of the ReST API. The CLI retains much of the syntax of the old <code>gluster</code> command. In addition we have,</p> <ul> <li>Improved CLI help messages</li> <li>Auto completion for sub commands</li> <li>Improved CLI error messages on failure</li> <li>Framework to run <code>glustercli</code> from outside the Cluster.</li> </ul> <p>In this release, the following CLI commands are available,</p> <ul> <li>Peer management</li> <li>Peer Probe/Attach</li> <li>Peer Detach</li> <li>Peer Status</li> <li>Volume Management</li> <li>Create/Start/Stop/Delete</li> <li>Expand</li> <li>Options Set/Get</li> <li>Bitrot</li> <li>Enable/Disable</li> <li>Configure</li> <li>Status</li> <li>Geo-replication</li> <li>Create/Start/Pause/Resume/Stop/Delete</li> <li>Configure</li> <li>Status</li> </ul>"},{"location":"release-notes/4.0.0/#configuration-store","title":"Configuration store","text":"<p>GD2 uses etcd to store the Gluster pool configuration, which solves the config synchronize issues reported against the Gluster management daemon.</p> <p>GD2 embeds etcd, and automatically creates and manages an etcd cluster when forming the trusted storage pool. If required, GD2 can also connect to an already existing etcd cluster.</p>"},{"location":"release-notes/4.0.0/#transaction-framework","title":"Transaction Framework","text":"<p>GD2 brings a newer more flexible distributed framework, to help it perform actions across the storage pool. The transaction framework provides better control for choosing peers for a Gluster operation and it also provides a mechanism to roll back the changes when something goes bad.</p>"},{"location":"release-notes/4.0.0/#volume-options","title":"Volume Options","text":"<p>GD2 intelligently fetches and builds the list of volume options by directly reading <code>xlators</code> <code>*.so</code> files. It does required validations during volume set without maintaining duplicate list of options. This avoids lot of issues which can happen due to mismatch in the information between Glusterd and xlator shared libraries.</p> <p>Volume options listing is also improved, to clearly distinguish configured options and default options. Work is still in progress to categorize these options and tune the list for better understanding and ease of use.</p>"},{"location":"release-notes/4.0.0/#volfiles-generation-and-management","title":"Volfiles generation and management","text":"<p>GD2 has a newer and better structured way for developers to define volfile structure. The new method reduces the effort required to extend graphs or add new graphs.</p> <p>Also, volfiles are generated in single peer and stored in <code>etcd</code> store. This is very important for scalability since Volfiles are not stored in every node.</p>"},{"location":"release-notes/4.0.0/#security","title":"Security","text":"<p>GD2 supports TLS for ReST and internal communication, and authentication for the ReST API.If enabled, ReST APIs are currently limited to CLI, or the users who have access to the Token file present in <code>$GLUSTERD2_WORKDIR/auth</code> file.</p>"},{"location":"release-notes/4.0.0/#features-integration-self-heal","title":"Features integration - Self Heal","text":"<p>Self Heal feature integrated for the new Volumes created using Glusterd2.</p>"},{"location":"release-notes/4.0.0/#geo-replication","title":"Geo-replication","text":"<p>With GD2 integration Geo-replication setup becomes very easy. If Master and Remote volume are available and running, Geo-replication can be setup with just a single command.</p> <pre><code>glustercli geo-replication create &lt;mastervol&gt; &lt;remotehost&gt;::&lt;remotevol&gt;\n</code></pre> <p>Geo-replication status is improved, Status clearly distinguishes the multiple session details in status output.</p> <p>Order of status rows was not predictable in earlier releases. It was very difficult to correlate the Geo-replication status with Bricks. With this release, Master worker status rows will always match with Bricks list in Volume info.</p> <p>Status can be checked using,</p> <pre><code>glustercli geo-replication status\nglustercli geo-replication status &lt;mastervol&gt; &lt;remotehost&gt;::&lt;remotevol&gt;\n</code></pre> <p>All the other commands are available as usual.</p> <p>Limitations:</p> <ul> <li>On Remote nodes, Geo-replication is not yet creates the log directories. As   a workaround, create the required log directories in Remote Volume nodes.</li> </ul>"},{"location":"release-notes/4.0.0/#events-apis","title":"Events APIs","text":"<p>Events API feature is integrated with GD2. Webhooks can be registered to listen for GlusterFS events. Work is in progress for exposing an REST API to view all the events happened in last 15 minutes.</p>"},{"location":"release-notes/4.0.0/#limitations","title":"Limitations","text":""},{"location":"release-notes/4.0.0/#backward-compatibility","title":"Backward compatibility","text":"<p>GD2 is not backwards compatible with the older GlusterD. Heterogeneous clusters running both GD2 and GlusterD are not possible.</p> <p>GD2 retains compatibility with Gluster-3.x clients. Old clients will still be able to mount and use volumes exported using GD2.</p>"},{"location":"release-notes/4.0.0/#upgrade-and-migration","title":"Upgrade and migration","text":"<p>GD2 does not support upgrade from Gluster-3.x releases, in Gluster-4.0. Gluster-4.0 will be shipping with both GD2 and the existing GlusterD. Users will be able to upgrade to Gluster-4.0 while continuing to use GlusterD.</p> <p>In Gluster-4.1, users will be able to migrate from GlusterD to GD2. Further, upgrades from Gluster-4.1 running GD2 to higher Gluster versions would be supported from release 4.1 onwards.</p> <p>Post Gluster-4.1, GlusterD would be maintained for a couple of releases, post which the only option to manage the cluster would be GD2.</p>"},{"location":"release-notes/4.0.0/#missing-and-partial-commands","title":"Missing and partial commands","text":"<p>Not all commands from GlusterD, have been implemented for GD2. Some have been only partially implemented. This means not all GlusterFS features are available in GD2. We aim to bring most of the commands back in Gluster-4.1.</p>"},{"location":"release-notes/4.0.0/#recovery-from-full-shutdown","title":"Recovery from full shutdown","text":"<p>With GD2, the process of recovery from a situation of a full cluster shutdown requires reading the document available as well as some expertise.</p>"},{"location":"release-notes/4.0.0/#known-issues","title":"Known Issues","text":""},{"location":"release-notes/4.0.0/#2-node-clusters","title":"2-node clusters","text":"<p>GD2 does not work well in 2-node clusters. Two main issues exist in this regard.</p> <ul> <li>Restarting GD2 fails in 2-node clusters #352</li> <li>Detach fails in 2-node clusters #332</li> </ul> <p>So it is recommended right now to run GD2 only in clusters of 3 or larger.</p>"},{"location":"release-notes/4.0.0/#other-issues","title":"Other issues","text":"<p>Other known issues are tracked on github issues right now. Please file any other issue you find on github issues.</p>"},{"location":"release-notes/4.0.0/#monitoring","title":"Monitoring","text":"<p>Till date, the absence of support for live monitoring on GlusterFS created constrained user experience for both users and developers. Statedump is useful for debugging, but is heavy for live monitoring.</p> <p>Further, the existence of <code>debug/io-stats</code> translator was not known to many and <code>gluster volume profile</code> was not recommended as it impacted performance.</p> <p>In this release, GlusterFS enables a lightweight method to access internal information and avoids the performance penalty and complexities of previous approaches.</p>"},{"location":"release-notes/4.0.0/#1-metrics-collection-across-every-fop-in-every-xlator","title":"1. Metrics collection across every FOP in every xlator","text":"<p>Notes for users: Now, Gluster now has in-built latency measures in the xlator abstraction, thus enabling capture of metrics and usage patterns across workloads.</p> <p>These measures are currently enabled by default.</p> <p>Limitations: This feature is auto-enabled and cannot be disabled.</p>"},{"location":"release-notes/4.0.0/#2-monitoring-support","title":"2. Monitoring support","text":"<p>Notes for users: Currently, the only project which consumes metrics and provides basic monitoring is glustermetrics, which provides a good idea on how to utilize the metrics dumped from the processes.</p> <p>Users can send SIGUSR2 signal to the process to dump the metrics, in <code>/var/run/gluster/metrics/</code> directory.</p> <p>Limitations: Currently core gluster stack and memory management systems provide metrics. A framework to generate more metrics is present for other translators and core components. However, additional metrics are not added in this release.</p>"},{"location":"release-notes/4.0.0/#performance","title":"Performance","text":""},{"location":"release-notes/4.0.0/#1-ec-make-metadata-fgetxattr-operations-faster","title":"1. EC: Make metadata [F]GETXATTR operations faster","text":"<p>Notes for users: Disperse translator has made performance improvements to the [F]GETXATTR operation. Workloads involving heavy use of extended attributes on files and directories, will gain from the improvements made.</p>"},{"location":"release-notes/4.0.0/#2-allow-md-cache-to-serve-nameless-lookup-from-cache","title":"2. Allow md-cache to serve nameless lookup from cache","text":"<p>Notes for users: The md-cache translator is enhanced to cache nameless lookups (typically seen with NFS workloads). This helps speed up overall operations on the volume reducing the number of lookups done over the network. Typical workloads that will benefit from this enhancement are,</p> <ul> <li>NFS based access</li> <li>Directory listing with FUSE, when ACLs are enabled</li> </ul>"},{"location":"release-notes/4.0.0/#3-md-cache-allow-runtime-addition-of-xattrs-to-the-list-of-xattrs-that-md-cache-caches","title":"3. md-cache: Allow runtime addition of xattrs to the list of xattrs that md-cache caches","text":"<p>Notes for users: md-cache was enhanced to cache extended attributes of a file or directory, for gluster specific attributes. This has now been enhanced to cache user provided attributes (xattrs) as well.</p> <p>To add specific xattrs to the cache list, use the following command:</p> <pre><code># gluster volume set &lt;volname&gt; xattr-cache-list \"&lt;xattr-name&gt;,&lt;xattr-name&gt;,...\"\n</code></pre> <p>Existing options, such as \"cache-samba-metadata\" \"cache-swift-metadata\" continue to function. The new option \"xattr-cache-list\" appends to the list generated by the existing options.</p> <p>Limitations: Setting this option overwrites the previous value set for this option. The append to the existing list of xattr is not supported with this release.</p>"},{"location":"release-notes/4.0.0/#4-cache-last-stripe-of-an-ec-volume-while-write-is-going-on","title":"4. Cache last stripe of an EC volume while write is going on","text":"<p>Notes for users: Disperse translator now has the option to retain a write-through cache of the last write stripe. This helps in improved small append sequential IO patterns by reducing the need to read a partial stripe for appending operations.</p> <p>To enable this use,</p> <pre><code># gluster volume set &lt;volname&gt; disperse.stripe-cache &lt;N&gt;\n</code></pre> <p>Where,  is the number of stripes to cache."},{"location":"release-notes/4.0.0/#5-tie-breaker-logic-for-blocking-inodelksentrylk-in-shd","title":"5. tie-breaker logic for blocking inodelks/entrylk in SHD","text":"<p>Notes for users: Self-heal deamon locking has been enhanced to identify situations where an selfheal deamon is actively working on an inode. This enables other selfheal daemons to proceed with other entries in the queue, than waiting on a particular entry, thus preventing starvation among selfheal threads.</p>"},{"location":"release-notes/4.0.0/#6-independent-eager-lock-options-for-file-and-directory-accesses","title":"6. Independent eager-lock options for file and directory accesses","text":"<p>Notes for users: A new option named 'disperse.other-eager-lock' has been added to make it possible to have different settings for regular file accesses and accesses to other types of files (like directories).</p> <p>By default this option is enabled to ensure the same behavior as the previous versions. If you have multiple clients creating, renaming or removing files from the same directory, you can disable this option to improve the performance for these users while still keeping best performance for file accesses.</p>"},{"location":"release-notes/4.0.0/#7-md-cache-added-an-option-to-cache-statfs-data","title":"7. md-cache: Added an option to cache statfs data","text":"<p>Notes for users: This can be controlled with option performance.md-cache-statfs</p> <pre><code>gluster volume set &lt;volname&gt; performance.md-cache-statfs &lt;on|off&gt;\n</code></pre>"},{"location":"release-notes/4.0.0/#8-improved-disperse-performance-due-to-parallel-xattrop-updates","title":"8. Improved disperse performance due to parallel xattrop updates","text":"<p>Notes for users: Disperse translator has been optimized to perform xattrop update operation in parallel on the bricks during self-heal to improve performance.</p>"},{"location":"release-notes/4.0.0/#geo-replication_1","title":"Geo-replication","text":""},{"location":"release-notes/4.0.0/#1-geo-replication-improve-gverifysh-logs","title":"1. Geo-replication: Improve gverify.sh logs","text":"<p>Notes for users: gverify.sh is the script which runs during geo-rep session creation which validates pre-requisites. The logs have been improved and locations are changed as follows,</p> <ol> <li>Slave mount log file is changed from <code>&lt;logdir&gt;/geo-replication-slaves/slave.log</code>    to, <code>&lt;logdir&gt;/geo-replication/gverify-slavemnt.log</code></li> <li>Master mount log file is separated from the slave log file under,    <code>&lt;logdir&gt;/geo-replication/gverify-mastermnt.log</code></li> </ol>"},{"location":"release-notes/4.0.0/#2-geo-rep-cleanup-stale-unusable-xsync-changelogs","title":"2. Geo-rep: Cleanup stale (unusable) XSYNC changelogs.","text":"<p>Notes for users: Stale xsync logs were not cleaned up, causing accumulation of these on the system. This change cleans up the stale xsync logs, if geo-replication has to restart from a faulty state.</p>"},{"location":"release-notes/4.0.0/#standalone","title":"Standalone","text":""},{"location":"release-notes/4.0.0/#1-ability-to-force-permissions-while-creating-filesdirectories-on-a-volume","title":"1. Ability to force permissions while creating files/directories on a volume","text":"<p>Notes for users: Options have been added to the posix translator, to override default umask values with which files and directories are created. This is particularly useful when sharing content by applications based on GID. As the default mode bits prevent such useful sharing, and supersede ACLs in this regard, these options are provided to control this behavior.</p> <p>Command usage is as follows:</p> <pre><code># gluster volume set &lt;volume name&gt; storage.&lt;option-name&gt; &lt;value&gt;\n</code></pre> <p>The valid <code>&lt;value&gt;</code> ranges from 0000 to 0777</p> <p><code>&lt;option-name&gt;</code> are:</p> <ul> <li>create-mask</li> <li>create-directory-mask</li> <li>force-create-mode</li> <li>force-create-directory</li> </ul> <p>Options \"create-mask\" and \"create-directory-mask\" are added to remove the mode bits set on a file or directory when its created. Default value of these options is 0777. Options \"force-create-mode\" and \"force-create-directory\" sets the default permission for a file or directory irrespective of the clients umask. Default value of these options is 0000.</p>"},{"location":"release-notes/4.0.0/#2-replace-md5-usage-to-enable-fips-support","title":"2. Replace MD5 usage to enable FIPS support","text":"<p>Notes for users: Previously, if Gluster was run on a FIPS enabled system, it used to crash because MD5 is not FIPS compliant and Gluster consumes MD5 checksum in various places like self-heal and geo-replication. By replacing MD5 with a FIPS complaint SHA256, Gluster no longer crashes on a FIPS enabled system.</p> <p>However, in order for AFR self-heal to work correctly during rolling upgrade to 4.0, we have tied this to a volume option called <code>fips-mode-rchecksum</code>.</p> <p><code>gluster volume set &lt;VOLNAME&gt; fips-mode-rchecksum on</code> has to be performed post upgrade to change the defaults from MD5 to SHA256. Post this gluster processes will run clean on a FIPS enabled system.</p> <p>NOTE: Once glusterfs 3.x is EOL'ed, the usage of the option to control this change will be removed.</p> <p>Limitations Snapshot feature in Gluster still uses md5 checksums, hence running in FIPS compliant systems requires that the snapshot feature is not used.</p>"},{"location":"release-notes/4.0.0/#3-dentry-fop-serializer-xlator-on-brick-stack","title":"3. Dentry fop serializer xlator on brick stack","text":"<p>Notes for users: This feature strengthens consistency of the file system, trading it for some performance and is strongly suggested for workloads where consistency is required.</p> <p>In previous releases the meta-data about the files and directories shared across the clients were not always consistent when the use-cases/workloads involved a large number of renames, frequent creations and deletions. They do eventually become consistent, but a large proportion of applications are not built to handle eventual consistency.</p> <p>This feature can be enabled as follows,</p> <pre><code># gluster volume set &lt;volname&gt; features.sdfs enable\n</code></pre> <p>Limitations: This feature is released as a technical preview, as performance implications are not known completely.</p>"},{"location":"release-notes/4.0.0/#4-add-option-to-disable-nftw-based-deletes-when-purging-the-landfill-directory","title":"4. Add option to disable nftw() based deletes when purging the landfill directory","text":"<p>Notes for users: The gluster brick processes use an optimized manner of deleting entire sub-trees using the nftw call. With this release, an option is being added to toggle this behavior in cases where this optimization is not desired.</p> <p>This is not an exposed option, and needs to be controlled using the volume graph. Adding the disable-landfill-purge option to the storage/posix translator helps toggle this feature.</p> <p>The default is always enabled, as in the older releases.</p>"},{"location":"release-notes/4.0.0/#5-add-option-in-posix-to-limit-hardlinks-per-inode","title":"5. Add option in POSIX to limit hardlinks per inode","text":"<p>Notes for users: Added an option to POSIX that limits the number of hard links that can be created against an inode (file). This helps when there needs to be a different hardlink limit than what the local FS provides for the bricks.</p> <p>The option to control this behavior is,</p> <pre><code># gluster volume set &lt;volname&gt; storage.max-hardlinks &lt;N&gt;\n</code></pre> <p>Where, <code>&lt;N&gt;</code> is 0-0xFFFFFFFF. If the local file system that the brick is using has a lower limit than this setting, that would be honored.</p> <p>Default is set to 100, setting this to 0 turns it off and leaves it to the local file system defaults. Setting it to 1 turns off hard links.</p>"},{"location":"release-notes/4.0.0/#6-enhancements-for-directory-listing-in-readdirp","title":"6. Enhancements for directory listing in readdirp","text":"<p>Notes for users: Prior to this release, rebalance performed a fix-layout on a directory before healing its subdirectories. If there were a lot of subdirs, it could take a while before all subdirs were created on the newly added bricks. This led to some missed directory listings.</p> <p>This is changed with this release to process children directories before the parents, thereby changing the way rebalance acts (files within sub directories are migrated first) and also resolving the directory listing issue.</p>"},{"location":"release-notes/4.0.0/#7-rebalance-skips-migration-of-file-if-it-detects-writes-from-application","title":"7. Rebalance skips migration of file if it detects writes from application","text":"<p>Notes for users: Rebalance process skips migration of file if it detects writes from application. To force migration even in the presence of writes from application to file, \"cluster.force-migration\" has to be turned on, which is off by default.</p> <p>The option to control this behavior is,</p> <pre><code># gluster volume set &lt;volname&gt; cluster.force-migration &lt;on/off&gt;\n</code></pre> <p>Limitations: It is suggested to run remove-brick with cluster.force-migration turned off. This results in files which have writes from clients being skipped during rebalance. It is suggested to copy these files manually to a Gluster mount post remove brick commit is performed.</p> <p>Rebalancing files with active write IO to them has a chance of data corruption.</p>"},{"location":"release-notes/4.0.0/#developer-related","title":"Developer related","text":""},{"location":"release-notes/4.0.0/#1-xlators-should-not-provide-init-fini-and-others-directly-but-have-class_methods","title":"1. xlators should not provide init(), fini() and others directly, but have class_methods","text":"<p>Notes for developers: This release brings in a new unified manner of defining xlator methods. Which avoids certain unwanted side-effects of the older method (like having to have certain symbols being defined always), and helps a cleaner single point registration mechanism for all xlator methods.</p> <p>The new method, needs just a single symbol in the translator code to be exposed, which is named xlator_api.</p> <p>The elements of this structure is defined here and an example usage of the same can be seen here.</p> <p>The older mechanism is still supported, but not preferred.</p>"},{"location":"release-notes/4.0.0/#2-framework-for-distributed-testing","title":"2. Framework for distributed testing","text":"<p>Notes for developers: A new framework for running the regression tests for Gluster is added. The README has details on how to use the same.</p>"},{"location":"release-notes/4.0.0/#3-new-api-for-acquiring-mandatory-locks","title":"3. New API for acquiring mandatory locks","text":"<p>Notes for developers: The current API for byte-range locks glfs_posix_lock doesn't allow applications to specify whether it is advisory or mandatory type lock. This particular change is to introduce an extended byte-range lock API with an additional argument for including the byte-range lock mode to be one among advisory(default) or mandatory.</p> <p>Refer to the header for details on how to use this API.</p> <p>A sample test program can be found here that also helps in understanding the usage of this API.</p>"},{"location":"release-notes/4.0.0/#4-new-on-wire-protocol-xdr-needed-to-support-iattx-and-cleaner-dictionary-structure","title":"4. New on-wire protocol (XDR) needed to support iattx and cleaner dictionary structure","text":"<p>Notes for developers: With changes in the code to adapt to a newer iatt structure, and stricter data format enforcement within dictionaries passed across the wire, and also as a part of reducing technical debt around the RPC layer, this release introduces a new RPC Gluster protocol version (4.0.0).</p> <p>Typically this does not impact any development, other than to ensure that newer RPCs that are added would need to be on the 4.0.0 version of the protocol and dictionaries on the wire need to be better encoded.</p> <p>The newer iatt structure can be viewed here.</p> <p>An example of better encoding dictionary values for wire transfers can be seen here.</p> <p>Here is some additional information on Gluster RPC programs for the inquisitive.</p>"},{"location":"release-notes/4.0.0/#5-the-protocol-xlators-should-prevent-sending-binary-values-in-a-dict-over-the-networks","title":"5. The protocol xlators should prevent sending binary values in a dict over the networks","text":"<p>Notes for developers: Dict data over the wire in Gluster was sent in binary. This has been changed with this release, as the on-wire protocol wire is also new, to send XDR encoded dict values across. In the future, any new dict type needs to also handle the required XDR encoding of the same.</p>"},{"location":"release-notes/4.0.0/#6-translator-to-handle-global-options","title":"6. Translator to handle 'global' options","text":"<p>Notes for developers: GlusterFS process has around 50 command line arguments to itself. While many of the options are initial settings, many others can change its value in volume lifetime. Prior to this release there was no way to change a setting, other than restarting the process for many of these options.</p> <p>With the introduction of global option translator, it is now possible to handle these options without restarts.</p> <p>If contributing code that adds to the process options, strongly consider adding the same to the global option translator. An example is provided here.</p>"},{"location":"release-notes/4.0.0/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.0.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-3.13.0 are listed below.</p> <ul> <li>#827334: gfid is not there in the fsetattr and rchecksum requests being sent from protocol client</li> <li>#1336889: Gluster's XDR does not conform to RFC spec</li> <li>#1369028: rpc: Change the way client uuid is built</li> <li>#1370116: Tests : Adding a test to check for inode leak</li> <li>#1428060: write-behind: Allow trickling-writes to be configurable, fix usage of page_size and window_size</li> <li>#1430305: Fix memory leak in rebalance</li> <li>#1431955: [Disperse] Implement open fd heal for disperse volume</li> <li>#1440659: Add events to notify disk getting fill</li> <li>#1443145: Free runtime allocated resources upon graph switch or glfs_fini()</li> <li>#1446381: detach start does not kill the tierd</li> <li>#1467250: Accessing a file when source brick is down results in that FOP being hung</li> <li>#1467614: Gluster read/write performance improvements on NVMe backend</li> <li>#1469487: sys_xxx() functions should guard against bad return values from fs</li> <li>#1471031: dht_(f)xattrop does not implement migration checks</li> <li>#1471753: [disperse] Keep stripe in in-memory cache for the non aligned write</li> <li>#1474768: The output of the \"gluster help\" command is difficult to read</li> <li>#1479528: Rebalance estimate(ETA) shows wrong details(as intial message of 10min wait reappears) when still in progress</li> <li>#1480491: tests: Enable geo-rep test cases</li> <li>#1482064: Bringing down data bricks in cyclic order results in arbiter brick becoming the source for heal.</li> <li>#1488103: Rebalance fails on NetBSD because fallocate is not implemented</li> <li>#1492625: Directory listings on fuse mount are very slow due to small number of getdents() entries</li> <li>#1496335: Extreme Load from self-heal</li> <li>#1498966: Test case ./tests/bugs/bug-1371806_1.t is failing</li> <li>#1499566: [Geo-rep]: Directory renames are not synced in hybrid crawl</li> <li>#1501054: Structured logging support for Gluster logs</li> <li>#1501132: posix health check should validate time taken between write timestamp and read timestamp cycle</li> <li>#1502610: disperse eager-lock degrades performance for file create workloads</li> <li>#1503227: [RFE] Changelog option in a gluster volume disables with no warning if geo-rep is configured</li> <li>#1505660: [QUOTA] man page of gluster should be updated to list quota commands</li> <li>#1506104: gluster volume splitbrain info needs to display output of each brick in a stream fashion instead of buffering and dumping at the end</li> <li>#1506140: Add quorum checks in post-op</li> <li>#1506197: [Parallel-Readdir]Warning messages in client log saying 'parallel-readdir' is not recognized.</li> <li>#1508898: Add new configuration option to manage deletion of Worm files</li> <li>#1508947: glusterfs: Include path in pkgconfig file is wrong</li> <li>#1509189: timer: Possible race condition between gftimer* routines</li> <li>#1509254: snapshot remove does not cleans lvm for deactivated snaps</li> <li>#1509340: glusterd does not write pidfile correctly when forking</li> <li>#1509412: Change default versions of certain features to 3.13 from 4.0</li> <li>#1509644: rpc: make actor search parallel</li> <li>#1509647: rpc: optimize fop program lookup</li> <li>#1509845: In distribute volume after glusterd restart, brick goes offline</li> <li>#1510324: Master branch is broken because of the conflicts</li> <li>#1510397: Compiler atomic built-ins are not correctly detected</li> <li>#1510401: fstat returns ENOENT/ESTALE</li> <li>#1510415: spurious failure of tests/bugs/glusterd/bug-1345727-bricks-stop-on-no-quorum-validation.t</li> <li>#1510874: print-backtrace.sh failing with cpio version 2.11 or older</li> <li>#1510940: The number of bytes of the quota specified in version 3.7 or later is incorrect</li> <li>#1511310: Test bug-1483058-replace-brick-quorum-validation.t fails inconsistently</li> <li>#1511339: In Replica volume 2*2 when quorum is set, after glusterd restart nfs server is coming up instead of self-heal daemon</li> <li>#1512437: parallel-readdir = TRUE prevents directories listing</li> <li>#1512451: Not able to create snapshot</li> <li>#1512455: glustereventsd hardcodes working-directory</li> <li>#1512483: Not all files synced using geo-replication</li> <li>#1513692: io-stats appends now instead of overwriting which floods filesystem with logs</li> <li>#1513928: call stack group list leaks</li> <li>#1514329: bug-1247563.t is failing on master</li> <li>#1515161: Memory leak in locks xlator</li> <li>#1515163: centos regression fails for tests/bugs/replicate/bug-1292379.t</li> <li>#1515266: Prevent ec from continue processing heal operations after PARENT_DOWN</li> <li>#1516206: EC DISCARD doesn't punch hole properly</li> <li>#1517068: Unable to change the Slave configurations</li> <li>#1517554: help for volume profile is not in man page</li> <li>#1517633: Geo-rep: access-mount config is not working</li> <li>#1517904: tests/bugs/core/multiplex-limit-issue-151.t fails sometimes in upstream master</li> <li>#1517961: Failure of some regression tests on Centos7 (passes on centos6)</li> <li>#1518508: Change GD_OP_VERSION to 3_13_0 from 3_12_0 for RFE https://bugzilla.redhat.com/show_bug.cgi?id=1464350</li> <li>#1518582: Reduce lock contention on fdtable lookup</li> <li>#1519598: Reduce lock contention on protocol client manipulating fd</li> <li>#1520245: High mem/cpu usage, brick processes not starting and ssl encryption issues while testing scaling with multiplexing (500-800 vols)</li> <li>#1520758: [Disperse] Add stripe in cache even if file/data does not exist</li> <li>#1520974: Compiler warning in dht-common.c because of a switch statement on a boolean</li> <li>#1521013: rfc.sh should allow custom remote names for ORIGIN</li> <li>#1521014: quota_unlink_cbk crashes when loc.inode is null</li> <li>#1521116: Absorb all test fixes from 3.8-fb branch into master</li> <li>#1521213: crash when gifs_set_logging is called concurrently</li> <li>#1522651: rdma transport may access an obsolete item in gf_rdma_device_t-&gt;all_mr, and causes glusterfsd/glusterfs process crash.</li> <li>#1522662: Store allocated objects in the mem_acct</li> <li>#1522775: glusterd consuming high memory</li> <li>#1522847: gNFS Bug Fixes</li> <li>#1522950: io-threads is unnecessarily calling accurate time calls on every FOP</li> <li>#1522968: glusterd bug fixes</li> <li>#1523295: md-cache should have an option to cache STATFS calls</li> <li>#1523353: io-stats bugs and features</li> <li>#1524252: quick-read: Discard cache for fallocate, zerofill and discard ops</li> <li>#1524365: feature/bitrot: remove internal xattrs from lookup cbk</li> <li>#1524816: heketi was not removing the LVs associated with Bricks removed when Gluster Volumes were deleted</li> <li>#1526402: glusterd crashes when 'gluster volume set help' is executed</li> <li>#1526780: ./run-tests-in-vagrant.sh fails because of disabled Gluster/NFS</li> <li>#1528558: /usr/sbin/glusterfs crashing on Red Hat OpenShift Container Platform node</li> <li>#1528975: Fedora 28 (Rawhide) renamed the pyxattr package to python2-pyxattr</li> <li>#1529440: Files are not rebalanced if destination brick(available size) is of smaller size than source brick(available size)</li> <li>#1529463: JWT support without external dependency</li> <li>#1529480: Improve geo-replication logging</li> <li>#1529488: entries not getting cleared post healing of softlinks (stale entries showing up in heal info)</li> <li>#1529515: AFR: 3-way-replication: gluster volume set cluster.quorum-count should validate max no. of brick count to accept</li> <li>#1529883: glusterfind is extremely slow if there are lots of changes</li> <li>#1530281: glustershd fails to start on a volume force start after a brick is down</li> <li>#1530910: Use after free in cli_cmd_volume_create_cbk</li> <li>#1531149: memory leak: get-state leaking memory in small amounts</li> <li>#1531987: increment of a boolean expression warning</li> <li>#1532238: Failed to access volume via Samba with undefined symbol from socket.so</li> <li>#1532591: Tests: Geo-rep tests are failing in few regression machines</li> <li>#1533594: EC test fails when brick mux is enabled</li> <li>#1533736: posix_statfs returns incorrect f_bfree values if brick is full.</li> <li>#1533804: readdir-ahead: change of cache-size should be atomic</li> <li>#1533815: Mark ./tests/basic/ec/heal-info.t as bad</li> <li>#1534602: FUSE reverse notificatons are not written to fuse dump</li> <li>#1535438: Take full lock on files in 3 way replication</li> <li>#1535772: Random GlusterFSD process dies during rebalance</li> <li>#1536913: tests/bugs/cli/bug-822830.t fails on Centos 7 and locally</li> <li>#1538723: build: glibc has removed legacy rpc headers and rpcgen in Fedora28, use libtirpc</li> <li>#1539657: Georeplication tests intermittently fail</li> <li>#1539701: gsyncd is running gluster command to get config file path is not required</li> <li>#1539842: GlusterFS 4.0.0 tracker</li> <li>#1540438: Remove lock recovery logic from client and server protocol translators</li> <li>#1540554: Optimize glusterd_import_friend_volume code path</li> <li>#1540882: Do lock conflict check correctly for wait-list</li> <li>#1541117: sdfs: crashes if the features is enabled</li> <li>#1541277: dht_layout_t leak in dht_populate_inode_for_dentry</li> <li>#1541880: Volume wrong size</li> <li>#1541928: A down brick is incorrectly considered to be online and makes the volume to be started without any brick available</li> <li>#1542380: Changes to self-heal logic w.r.t. detecting of split-brains</li> <li>#1542382: Add quorum checks in post-op</li> <li>#1542829: Too many log messages about dictionary and options</li> <li>#1543487: dht_lookup_unlink_of_false_linkto_cbk fails with \"Permission denied\"</li> <li>#1543706: glusterd fails to attach brick during restart of the node</li> <li>#1543711: glustershd/glusterd is not using right port when connecting to glusterfsd process</li> <li>#1544366: Rolling upgrade to 4.0 is broken</li> <li>#1544638: 3.8 -&gt; 3.10 rolling upgrade fails (same for 3.12 or 3.13) on Ubuntu 14</li> <li>#1545724: libgfrpc does not export IPv6 RPC methods even with --with-ipv6-default</li> <li>#1547635: add option to bulld rpm without server</li> <li>#1547842: Typo error in __dht_check_free_space function log message</li> <li>#1548264: [Rebalance] \"Migrate file failed: : failed to get xattr [No data available]\" warnings in rebalance logs <li>#1548271: DHT calls dht_lookup_everywhere for 1xn volumes</li> <li>#1550808: memory leak in pre-op in replicate volumes for every write</li> <li>#1551112: Rolling upgrade to 4.0 is broken</li> <li>#1551640: GD2 fails to dlopen server xlator</li> <li>#1554077: 4.0 clients may fail to convert iatt in dict when recieving the same from older (&lt; 4.0) servers</li>"},{"location":"release-notes/4.0.1/","title":"Release notes for Gluster 4.0.1","text":"<p>This is a bugfix release. The release notes for 4.0.0, contain a listing of all the new features that were added and bugs fixed in the GlusterFS 4.0 release.</p>"},{"location":"release-notes/4.0.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>No Major changes</p>"},{"location":"release-notes/4.0.1/#major-issues","title":"Major issues","text":"<p>No Major issues</p>"},{"location":"release-notes/4.0.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.0.0 are listed below.</p> <ul> <li>#1550946: [brick-mux] performance bottleneck introduced while solving ping timer expiry</li> <li>#1552404: [CIOT] : Gluster CLI says \"io-threads : enabled\" on existing volumes post upgrade.</li> <li>#1554235: Memory corruption is causing crashes, hangs and invalid answers</li> <li>#1555198: After a replace brick command, self-heal takes some time to start healing files on disperse volumes</li> <li>#1555309: core: libtirpc, backport XDR macro refactor</li> <li>#1557906: [EC] Read performance of EC volume exported over gNFS is significantly lower than write performance</li> </ul>"},{"location":"release-notes/4.0.2/","title":"Release notes for Gluster 4.0.2","text":"<p>This is a bugfix release. The release notes for 4.0.0, and 4.0.1 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 4.0 release.</p>"},{"location":"release-notes/4.0.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains a fix for a security vulerability in Gluster as follows,</p> <ul> <li>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1088</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-1088</li> </ul> <p>Installing the updated packages and restarting gluster services, will update the Gluster shared storage volume volfiles, that are more secure than the defaults currently in place.</p> <p>Further, for increased security, the Gluster shared storage volume can be TLS enabled, and access to the same restricted using the <code>auth.ssl-allow</code> option. See, this guide for more details.</p>"},{"location":"release-notes/4.0.2/#major-issues","title":"Major issues","text":"<p>No Major issues</p>"},{"location":"release-notes/4.0.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.0.1 are listed below.</p> <ul> <li>#1558959: [brick-mux] incorrect event-thread scaling in server_reconfigure()</li> <li>#1559079: test ./tests/bugs/ec/bug-1236065.t is generating crash on build</li> <li>#1559244: enable ownthread feature for glusterfs4_0_fop_prog</li> <li>#1561721: Rebalance failures on a dispersed volume with lookup-optimize enabled</li> <li>#1562728: SHD is not healing entries in halo replication</li> <li>#1564461: gfapi: fix a couple of minor issues</li> <li>#1565654: /var/log/glusterfs/bricks/export_vdb.log flooded with this error message \"Not able to add to index [Too many links]\"</li> <li>#1566822: [Remove-brick] Many files were not migrated from the decommissioned bricks; commit results in data loss</li> <li>#1569403: EIO errors on some operations when volume has mixed brick versions on a disperse volume</li> <li>#1570432: CVE-2018-1088 glusterfs: Privilege escalation via gluster_shared_storage when snapshot scheduling is enabled [fedora-all]</li> </ul>"},{"location":"release-notes/4.1.0/","title":"Release notes for Gluster 4.1.0","text":"<p>This is a major release that includes a range of features enhancing management, performance, monitoring, and providing newer functionality like thin arbiters, cloud archival, time consistency. It also contains several bug fixes.</p> <p>A selection of the important features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Major changes and features</li> <li>Major issues</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/4.1.0/#announcements","title":"Announcements","text":"<ol> <li>As 4.0 was a short term maintenance release, features which have been    included in that release are available with 4.1.0 as well. These features may    be of interest to users upgrading to 4.1.0 from older than 4.0 releases. The 4.0    release notes captures the list of features that were introduced with 4.0.</li> </ol> <p>NOTE: As 4.0 was a short term maintenance release, it will reach end of life (EOL) with the release of 4.1.0. (reference)</p> <ol> <li>Releases that receive maintenance updates post 4.1 release are, 3.12, and    4.1 (reference)</li> </ol> <p>NOTE: 3.10 long term maintenance release, will reach end of life (EOL) with the release of 4.1.0. (reference)</p> <ol> <li>Continuing with this release, the CentOS storage SIG will not build server    packages for CentOS6. Server packages will be available for CentOS7 only. For    ease of migrations, client packages on CentOS6 will be published and maintained.</li> </ol> <p>NOTE: This change was announced here</p>"},{"location":"release-notes/4.1.0/#major-changes-and-features","title":"Major changes and features","text":"<p>Features are categorized into the following sections,</p> <ul> <li>Management</li> <li>Monitoring</li> <li>Performance</li> <li>Standalone</li> <li>Developer related</li> </ul>"},{"location":"release-notes/4.1.0/#management","title":"Management","text":""},{"location":"release-notes/4.1.0/#glusterd2","title":"GlusterD2","text":"<p>IMP: GlusterD2 in Gluster-4.1.0 is still considered a preview and is experimental. It should not be considered for production use. Users should still expect breaking changes to be possible, though efforts will be taken to avoid such changes. As GD2 is still under heavy development, new features can be expected throughout the 4.1 release.</p> <p>GD2 brings initial support for rebalance, snapshots, intelligent volume provisioning and a lot of other bug fixes and internal changes.</p>"},{"location":"release-notes/4.1.0/#rebalance-786","title":"Rebalance #786","text":"<p>GD2 supports running rebalance on volumes. Supported rebalance operations include,</p> <ul> <li>rebalance start</li> <li>rebalance start with fix-layout</li> <li>rebalance stop</li> <li>rebalance status</li> </ul> <p>Support only exists in the ReST API right now. CLI support will be introduced in subsequent releases.</p>"},{"location":"release-notes/4.1.0/#snapshot-533","title":"Snapshot #533","text":"<p>Initial support for volume snapshot has been introduced. At the moment, snapshots are supported only on Thin-LVM bricks.</p> <p>Support snapshot operations include,</p> <ul> <li>create</li> <li>activate/deactivate</li> <li>list</li> <li>info</li> </ul>"},{"location":"release-notes/4.1.0/#intelligent-volume-provisioning-ivp-661","title":"Intelligent volume provisioning (IVP) #661","text":"<p>GD2 brings very early preview for intelligent volume creation, similar to Heketi.</p> <p>IMP: This is considered experimental, and the API and implementation is not final. It is very possible that both the API and the implementation will change.</p> <p>IVP enables users to create volumes by just providing the expected volume type and a size, without providing the bricks layout. IVP is supported in CLI in the normal <code>volume create</code> command.</p> <p>More information on IVP can be found in the pull-request.</p> <p>To support IVP, support for adding and managing block devices, and basic support for zones is available. #783 #785</p>"},{"location":"release-notes/4.1.0/#other-changes","title":"Other changes","text":"<p>Other notable changes include,</p> <ul> <li>Support for volume option levels (experimental, advanced, deprecated) #591</li> <li>Support for resetting volume options #545</li> <li>Option hooks for volume set #708</li> <li>Support for setting quota options #583</li> <li>Changes to transaction locking #808</li> <li>Support for setting metadata on peers and volume #600 #689 #704</li> <li>Thin arbiter support #673 #702</li> </ul> <p>In addition to the above, a lot of smaller bug-fixes and enhancements to internal frameworks and tests have also been done.</p>"},{"location":"release-notes/4.1.0/#known-issues","title":"Known issues","text":"<p>GD2 is still under heavy development and has lots of known bugs. For filing new bugs or tracking known bugs, please use the GD2 github issue tracker.</p>"},{"location":"release-notes/4.1.0/#2-changes-to-gluster-based-smbconf-share-management","title":"2. Changes to gluster based smb.conf share management","text":"<p>Previously Gluster used to delete the entire volume share section from smb.conf either after volume is stopped or while disabling user.cifs/user.smb volume set options. With this release those volume share sections, that were added by samba hook scripts inside smb.conf, will not get removed post a volume stop or on disabling user.cifs/user.smb volume set options. Instead we add the following share specific smb.conf parameter to the end of corresponding volume share section to make it unavailable for client access:</p> <pre><code>available = no\n</code></pre> <p>This will make sure that the additional smb.conf parameters configured externally are retained. For more details on the above parameter search under \"available (S)\" at smb.conf(5) manual page.</p>"},{"location":"release-notes/4.1.0/#monitoring","title":"Monitoring","text":"<p>Various xlators are enhanced to provide additional metrics, that help in determining the effectiveness of the xlator in various workloads.</p> <p>These metrics can be dumped and visualized as detailed here.</p>"},{"location":"release-notes/4.1.0/#1-additional-metrics-added-to-negative-lookup-cache-xlator","title":"1. Additional metrics added to negative lookup cache xlator","text":"<p>Metrics added are:</p> <ul> <li>negative_lookup_hit_count</li> <li>negative_lookup_miss_count</li> <li>get_real_filename_hit_count</li> <li>get_real_filename_miss_count</li> <li>nameless_lookup_count</li> <li>inodes_with_positive_dentry_cache</li> <li>inodes_with_negative_dentry_cache</li> <li>dentry_invalidations_recieved</li> <li>cache_limit</li> <li>consumed_cache_size</li> <li>inode_limit</li> <li>consumed_inodes</li> </ul>"},{"location":"release-notes/4.1.0/#2-additional-metrics-added-to-md-cache-xlator","title":"2. Additional metrics added to md-cache xlator","text":"<p>Metrics added are:</p> <ul> <li>stat_cache_hit_count</li> <li>stat_cache_miss_count</li> <li>xattr_cache_hit_count</li> <li>xattr_cache_miss_count</li> <li>nameless_lookup_count</li> <li>negative_lookup_count</li> <li>stat_cache_invalidations_received</li> <li>xattr_cache_invalidations_received</li> </ul>"},{"location":"release-notes/4.1.0/#3-additional-metrics-added-to-quick-read-xlator","title":"3. Additional metrics added to quick-read xlator","text":"<p>Metrics added are:</p> <ul> <li>total_files_cached</li> <li>total_cache_used</li> <li>cache-hit</li> <li>cache-miss</li> <li>cache-invalidations</li> </ul>"},{"location":"release-notes/4.1.0/#performance","title":"Performance","text":""},{"location":"release-notes/4.1.0/#1-support-for-fuse-writeback-cache","title":"1. Support for fuse writeback cache","text":"<p>Gluster FUSE mounts support FUSE extension to leverage the kernel \"writeback cache\".</p> <p>For usage help see <code>man 8 glusterfs</code> and <code>man 8 mount.glusterfs</code>, specifically the options <code>-kernel-writeback-cache</code> and <code>-attr-times-granularity</code>.</p>"},{"location":"release-notes/4.1.0/#2-extended-eager-lock-to-metadata-transactions-in-replicate-xlator","title":"2. Extended eager-lock to metadata transactions in replicate xlator","text":"<p>Eager lock feature in replicate xlator is extended to support metadata transactions in addition to data transactions. This helps in improving the performance when there are frequent metadata updates in the workload. This is typically seen with sharded volumes by default, and in other workloads that incur a higher rate of metadata modifications to the same set of files.</p> <p>As a part of this feature, compounded FOPs feature in AFR is deprecated, volumes that are configured to leverage compounding will start disregarding the option <code>use-compound-fops</code>.</p> <p>NOTE: This is an internal change in AFR xlator and is not user controlled or configurable.</p>"},{"location":"release-notes/4.1.0/#3-support-for-multi-threaded-fuse-readers","title":"3. Support for multi-threaded fuse readers","text":"<p>FUSE based mounts can specify number of FUSE request processing threads during a mount. For workloads that have high concurrency on a single client, this helps in processing FUSE requests in parallel, than the existing single reader model.</p> <p>This is provided as a mount time option named <code>reader-thread-count</code> and can be used as follows,</p> <pre><code># mount -t glusterfs -o reader-thread-count=&lt;n&gt; &lt;server&gt;:&lt;volname&gt; &lt;mntpoint&gt;\n</code></pre>"},{"location":"release-notes/4.1.0/#4-configurable-aggregate-size-for-write-behind-xlator","title":"4. Configurable aggregate size for write-behind xlator","text":"<p>Write-behind xlator provides the option <code>performance.aggregate-size</code> to enable configurable aggregate write sizes. This option enables write-behind xlator to aggregate writes till the specified value before the writes are sent to the bricks.</p> <p>Existing behaviour set this size to a maximum of 128KB per file. The configurable option provides the ability to tune this up or down based on the workload to improve performance of writes.</p> <p>Usage:</p> <pre><code># gluster volume set &lt;volname&gt; performance.aggregate-size &lt;size&gt;\n</code></pre>"},{"location":"release-notes/4.1.0/#5-adaptive-read-replica-selection-based-on-queue-length","title":"5. Adaptive read replica selection based on queue length","text":"<p>AFR xlator is enhanced with a newer value for the option <code>read-hash-mode</code>. Providing this option with a value of <code>3</code> will distribute reads across AFR subvolumes based on the subvol having the least outstanding read requests.</p> <p>This helps in better distributing and hence improving workload performance on reads, in replicate based volumes.</p>"},{"location":"release-notes/4.1.0/#standalone","title":"Standalone","text":""},{"location":"release-notes/4.1.0/#1-thin-arbiter-quorum-for-2-way-replication","title":"1. Thin arbiter quorum for 2-way replication","text":"<p>NOTE: This feature is available only with GlusterD2</p> <p>Documentation for the feature is provided here.</p>"},{"location":"release-notes/4.1.0/#2-automatically-configure-backup-volfile-servers-in-clients","title":"2. Automatically configure backup volfile servers in clients","text":"<p>NOTE: This feature is available only with GlusterD2</p> <p>Clients connecting and mounting a Gluster volume, will automatically fetch and configure backup volfile servers, for future volfile updates and fetches, when the initial server used to fetch the volfile and mount is down.</p> <p>When using glusterd, this is achieved using the FUSE mount option <code>backup-volfile-servers</code>, and when using GlusterD2 this is done automatically.</p>"},{"location":"release-notes/4.1.0/#3-cmtime-equivalence-across-replicate-and-disperse-subvolumes","title":"3. (c/m)time equivalence across replicate and disperse subvolumes","text":"<p>Enabling the utime feature, enables Gluster to maintain consistent change and modification time stamps on files and directories across bricks.</p> <p>This feature is useful when applications are sensitive to time deltas between operations (for example tar may report \"file changed as we read it\"), to maintain and report equal time stamps on the file across the subvolumes.</p> <p>To enable the feature use,</p> <pre><code># gluster volume set &lt;volname&gt; features.utime\n</code></pre> <p>Limitations:</p> <ul> <li>Mounting gluster volume with time attribute options (noatime, realatime...)   is not supported with this feature</li> <li>Certain entry operations (with differing creation flags) would reflect an   eventual consistency w.r.t the time attributes</li> <li>This feature does not guarantee consistent time for directories if hashed   sub-volume for the directory is down</li> <li>readdirp (or directory listing) is not supported with this feature</li> </ul>"},{"location":"release-notes/4.1.0/#developer-related","title":"Developer related","text":""},{"location":"release-notes/4.1.0/#1-new-api-for-acquiring-leases-and-acting-on-lease-recalls","title":"1. New API for acquiring leases and acting on lease recalls","text":"<p>A new API to acquire a lease on an open file and also to receive callbacks when the lease is recalled, is provided with gfapi.</p> <p>Refer to the header for details on how to use this API.</p>"},{"location":"release-notes/4.1.0/#2-extended-language-bindings-for-gfapi-to-include-perl","title":"2. Extended language bindings for gfapi to include perl","text":"<p>See, libgfapi-perl - Libgfapi bindings for Perl using FFI</p>"},{"location":"release-notes/4.1.0/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.0.0 are listed below.</p> <ul> <li>#1074947: add option to build rpm without server</li> <li>#1234873: glusterfs-resource-agents - volume - voldir is not properly set</li> <li>#1272030: Remove lock recovery logic from client and server protocol translators</li> <li>#1304962: Intermittent file creation fail,while doing concurrent writes on distributed volume has more than 40 bricks</li> <li>#1312830: tests fail because bug-924726.t depends on netstat</li> <li>#1319992: RFE: Lease support for gluster</li> <li>#1450546: Paths to some tools are hardcoded to /sbin or /usr/sbin</li> <li>#1450593: Gluster Python scripts do not check return value of find_library</li> <li>#1468483: Sharding sends all application sent fsyncs to the main shard file</li> <li>#1495153: xlator_t structure's 'client_latency' variable is not used</li> <li>#1500649: Shellcheck errors in hook scripts</li> <li>#1505355: quota: directories doesn't get heal on newly added bricks when quota is full on sub-directory</li> <li>#1506140: Add quorum checks in post-op</li> <li>#1507230: Man pages badly formatted</li> <li>#1512691: PostgreSQL DB Restore: unexpected data beyond EOF</li> <li>#1517260: Volume wrong size</li> <li>#1521030: rpc: unregister programs before registering them again</li> <li>#1523122: fix serval bugs found on testing protocol/client</li> <li>#1523219: fuse xlator uses block size and fragment size 128KB leading to rounding off in df output</li> <li>#1530905: Reducing regression time of glusterd test cases</li> <li>#1533342: Syntactical errors in hook scripts for managing SELinux context on bricks</li> <li>#1536024: Rebalance process is behaving differently for AFR and EC volume.</li> <li>#1536186: build: glibc has removed legacy rpc headers and rpcgen in Fedora28, use libtirpc</li> <li>#1537362: glustershd/glusterd is not using right port when connecting to glusterfsd process</li> <li>#1537364: [RFE] - get-state option should mark profiling enabled flag at volume level</li> <li>#1537457: DHT log messages: Found anomalies in (null) (gfid = 00000000-0000-0000-0000-000000000000). Holes=1 overlaps=0</li> <li>#1537602: Georeplication tests intermittently fail</li> <li>#1538258: build: python-ctypes only in RHEL &lt;= 7</li> <li>#1538427: Seeing timer errors in the rebalance logs</li> <li>#1539023: Add ability to control verbosity settings while compiling</li> <li>#1539166: [bitrot] scrub ondemand reports it's start as success without additional detail</li> <li>#1539358: Changes to self-heal logic w.r.t. detecting of split-brains</li> <li>#1539510: Optimize glusterd_import_friend_volume code path</li> <li>#1539545: gsyncd is running gluster command to get config file path is not required</li> <li>#1539603: Glusterfs crash when doing statedump with memory accounting is disabled</li> <li>#1540338: Change op-version of master to 4.1.0 for future options that maybe added</li> <li>#1540607: glusterd fails to attach brick during restart of the node</li> <li>#1540669: Do lock conflict check correctly for wait-list</li> <li>#1541038: A down brick is incorrectly considered to be online and makes the volume to be started without any brick available</li> <li>#1541264: dht_layout_t leak in dht_populate_inode_for_dentry</li> <li>#1541916: The used space in the volume increases when the volume is expanded</li> <li>#1542318: dht_lookup_unlink_of_false_linkto_cbk fails with \"Permission denied\"</li> <li>#1542829: Too many log messages about dictionary and options</li> <li>#1543279: Moving multiple temporary files to the same destination concurrently causes ESTALE error</li> <li>#1544090: possible memleak in glusterfsd process with brick multiplexing on</li> <li>#1544600: 3.8 -&gt; 3.10 rolling upgrade fails (same for 3.12 or 3.13) on Ubuntu 14</li> <li>#1544699: Rolling upgrade to 4.0 is broken</li> <li>#1544961: libgfrpc does not export IPv6 RPC methods even with --with-ipv6-default</li> <li>#1545048: [brick-mux] process termination race while killing glusterfsd on last brick detach</li> <li>#1545056: [CIOT] : Gluster CLI says \"io-threads : enabled\" on existing volumes post upgrade.</li> <li>#1545891: Provide a automated way to update bugzilla status with patch merge.</li> <li>#1546129: Geo-rep: glibc fix breaks geo-replication</li> <li>#1546620: DHT calls dht_lookup_everywhere for 1xn volumes</li> <li>#1546954: [Rebalance] \"Migrate file failed: : failed to get xattr [No data available]\" warnings in rebalance logs <li>#1547068: Bricks getting assigned to different pids depending on whether brick path is IP or hostname based</li> <li>#1547128: Typo error in __dht_check_free_space function log message</li> <li>#1547662: After a replace brick command, self-heal takes some time to start healing files on disperse volumes</li> <li>#1547888: [brick-mux] incorrect event-thread scaling in server_reconfigure()</li> <li>#1548361: Make afr_fsync a transaction</li> <li>#1549000: line-coverage tests not capturing details properly.</li> <li>#1549606: Eager lock should be present for both metadata and data transactions</li> <li>#1549915: [Fuse Sub-dir] After performing add-brick on volume,doing rm -rf * on subdir mount point fails with \"Transport endpoint is not connected\"</li> <li>#1550078: memory leak in pre-op in replicate volumes for every write</li> <li>#1550339: glusterd leaks memory when vol status is issued</li> <li>#1550895: GD2 fails to dlopen server xlator</li> <li>#1550936: Pause/Resume of geo-replication with wrong user specified returns success</li> <li>#1553129: Memory corruption is causing crashes, hangs and invalid answers</li> <li>#1553598: [Rebalance] ENOSPC errors on few files in rebalance logs</li> <li>#1553926: configure --without-ipv6-default has odd behaviour</li> <li>#1553938: configure summary TIRPC result is misleading</li> <li>#1554053: 4.0 clients may fail to convert iatt in dict when recieving the same from older (&lt; 4.0) servers</li> <li>#1554743: [EC] Read performance of EC volume exported over gNFS is significantly lower than write performance</li> <li>#1555154: glusterd: TLS verification fails when using intermediate CA instead of self-signed certificates</li> <li>#1555167: namespace test failure</li> <li>#1557435: Enable lookup-optimize by default</li> <li>#1557876: Fuse mount crashed with only one VM running with its image on that volume</li> <li>#1557932: Shard replicate volumes don't use eager-lock affectively</li> <li>#1558016: test ./tests/bugs/ec/bug-1236065.t is generating crash on build</li> <li>#1558074: [disperse] Add tests for in-memory stripe cache for the non aligned write</li> <li>#1558380: Modify glfsheal binary to accept socket file path as an optional argument.</li> <li>#1559004: /var/log/glusterfs/bricks/export_vdb.log flooded with this error message \"Not able to add to index [Too many links]\"</li> <li>#1559075: enable ownthread feature for glusterfs4_0_fop_prog</li> <li>#1559126: Incorrect error message in /features/changelog/lib/src/gf-history-changelog.c</li> <li>#1559130: ssh stderr in glusterfind gets swallowed</li> <li>#1559235: Increase the inode table size on server when upcall enabled</li> <li>#1560319: NFS client gets \"Invalid argument\" when writing file through nfs-ganesha with quota</li> <li>#1560393: Fix regresssion failure for ./tests/basic/md-cache/bug-1418249.t</li> <li>#1560411: fallocate created data set is crossing storage reserve space limits resulting 100% brick full</li> <li>#1560441: volume stop in mgmt v3</li> <li>#1560589: nl-cache.t fails</li> <li>#1560957: After performing remove-brick followed by add-brick operation, brick went offline state</li> <li>#1561129: When storage reserve limit is reached, appending data to an existing file throws EROFS error</li> <li>#1561406: Rebalance failures on a dispersed volume with lookup-optimize enabled</li> <li>#1562052: build: revert configure --without-ipv6-default behaviour</li> <li>#1562717: SHD is not healing entries in halo replication</li> <li>#1562907: set mgmt_v3_timer-&gt;timer to NULL after mgmt_v3_timer is deleted</li> <li>#1563273: mark brick as online only when portmap registration is completed</li> <li>#1563334: Honour cluster.localtime-logging option for all the daemons</li> <li>#1563511: Redundant synchronization in rename codepath for a single subvolume DHT</li> <li>#1563945: [EC] Turn ON the stripe-cache option by default for ec volume</li> <li>#1564198: [Remove-brick] Many files were not migrated from the decommissioned bricks; commit results in data loss</li> <li>#1564235: gfapi: fix a couple of minor issues</li> <li>#1564600: Client can create denial of service (DOS) conditions on server</li> <li>#1566067: Volume status inode is broken with brickmux</li> <li>#1566207: Linux kernel untar failed with \"xz: (stdin): Read error: Invalid argument\" immediate after add-brick</li> <li>#1566303: Removing directories from multiple clients throws ESTALE errors</li> <li>#1566386: Disable choose-local in groups virt and gluster-block</li> <li>#1566732: EIO errors on some operations when volume has mixed brick versions on a disperse volume</li> <li>#1567209: Geo-rep: faulty session due to OSError: [Errno 95] Operation not supported</li> <li>#1567880: Grant Deepshikha access to all CI-related infrastructure</li> <li>#1567881: Halo replication I/O path is not working</li> <li>#1568348: Rebalance on few nodes doesn't seem to complete - stuck at FUTEX_WAIT</li> <li>#1568521: shard files present even after deleting vm from ovirt UI</li> <li>#1568820: Add generated HMAC token in header for webhook calls</li> <li>#1568844: [snapshot-scheduler]Prevent access of shared storage volume from the outside client</li> <li>#1569198: bitrot scrub status does not show the brick where the object (file) is corrupted</li> <li>#1569489: Need heal-timeout to be configured as low as 5 seconds</li> <li>#1570011: test case is failing ./tests/bugs/glusterd/add-brick-and-validate-replicated-volume-options.t while brick mux is enabled</li> <li>#1570538: linux untar errors out at completion during disperse volume inservice upgrade</li> <li>#1570962: print the path of the corrupted object in scrub status</li> <li>#1571069: [geo-rep]: Lot of changelogs retries and \"dict is null\" errors in geo-rep logs</li> <li>#1572076: Dictionary response is not captured in syncop_(f)xattrop</li> <li>#1572581: Remove-brick failed on Distributed volume while rm -rf is in-progress</li> <li>#1572586: dht: do not allow migration if file is open</li> <li>#1573066: growing glusterd memory usage with connected RHGSWA</li> <li>#1573119: Amends in volume profile option 'gluster-block'</li> <li>#1573220: Memory leak in volume tier status command</li> <li>#1574259: Errors unintentionally reported for snapshot status</li> <li>#1574305: rm command hangs in fuse_request_send</li> <li>#1574606: the regression test \"tests/bugs/posix/bug-990028.t\" fails</li> <li>#1575294: lease recall callback should be avoided on closed</li> <li>#1575386: GlusterFS 4.1.0 tracker</li> <li>#1575707: Gluster volume smb share options are getting overwritten after restating the gluster volume</li> <li>#1576814: GlusterFS can be improved</li> <li>#1577162: gfapi: broken symbol versions</li> <li>#1579674: Remove EIO from the dht_inode_missing macro</li> <li>#1579736: Additional log messages in dht_readdir(p)_cbk</li> <li>#1579757: DHT Log flooding in mount log \"key=trusted.glusterfs.dht.mds [Invalid argument]\"</li> <li>#1580215: [geo-rep]: Lot of changelogs retries and \"dict is null\" errors in geo-rep logs</li> <li>#1580540: make getfattr return proper response for \"glusterfs.gfidtopath\" xattr for files created when gfid2path was off</li> <li>#1581548: writes succeed when only good brick is down in 1x3 volume</li> <li>#1581745: bug-1309462.t is failing reliably due to changes in security.capability changes in the kernel</li> <li>#1582056: Input/Output errors on a disperse volume with concurrent reads and writes</li> <li>#1582063: rpc: The gluster auth version is always AUTH_GLUSTERFS_v2</li> <li>#1582068: ctime: Rename and unlink does not update ctime</li> <li>#1582072: posix/ctime: Access time is not updated for file with a hardlink</li> <li>#1582080: posix/ctime: The first lookup on file is not healing the gfid</li> <li>#1582199: posix unwinds readdirp calls with readdir signature</li> <li>#1582286: Brick-mux regressions failing on 4.1 branch</li> <li>#1582531: posix/ctime: Mtime is not updated on setting it to older date</li> <li>#1582549: api: missing __THROW on pub function decls</li> <li>#1583016: libgfapi: glfs init fails on afr volume with ctime feature enabled</li> <li>#1583734: rpc_transport_unref() called for an unregistered socket fd</li> <li>#1583769: Fix incorrect rebalance log message</li> <li>#1584633: Brick process crashed after upgrade from RHGS-3.3.1 async(7.4) to RHGS-3.4(7.5)</li> <li>#1585894: posix/ctime: EC self heal of directory is blocked with ctime feature enabled</li> <li>#1587908: Fix deadlock in failure codepath of shard fsync</li> <li>#1590128: xdata is leaking in server3_3_seek</li>"},{"location":"release-notes/4.1.1/","title":"Release notes for Gluster 4.1.1","text":"<p>This is a bugfix release. The release notes for 4.1.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p>"},{"location":"release-notes/4.1.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains a fix for a security vulerability in Gluster as follows,</p> <ul> <li>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10841</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10841</li> </ul> <p>Installing the updated packages and restarting gluster services on gluster brick hosts, will help prevent the security issue.</p>"},{"location":"release-notes/4.1.1/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.0 are listed below.</p> <ul> <li>#1590195: /usr/sbin/gcron.py aborts with OSError</li> <li>#1591185: Gluster Block PVC fails to mount on Jenkins pod</li> <li>#1593525: CVE-2018-10841 glusterfs: access trusted peer group via remote-host command [glusterfs upstream]</li> </ul>"},{"location":"release-notes/4.1.10/","title":"Release notes for Gluster 4.1.10","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3, 4.1.4, 4.1.5, 4.1.6, 4.1.7, 4.1.8 and 4.1.9 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p>"},{"location":"release-notes/4.1.10/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.10/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.10/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.9 are listed below.</p> <ul> <li>#1721109: Failed to create volume which transport_type is \"tcp,rdma\"</li> <li>#1729221: Upcall: Avoid sending upcalls for invalid Inode</li> <li>#1729223: Ganesha-gfapi logs are flooded with error messages related to \"gf_uuid_is_null(gfid)) [Invalid argument]\" when lookups are running from multiple clients</li> </ul>"},{"location":"release-notes/4.1.2/","title":"Release notes for Gluster 4.1.2","text":"<p>This is a bugfix release. The release notes for 4.1.0 and 4.1.1 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p>"},{"location":"release-notes/4.1.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li>Release 4.1.0 notes incorrectly reported that all python code in    Gluster packages are python3 compliant, this is not the case and the release    note is amended accordingly.</li> </ol>"},{"location":"release-notes/4.1.2/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.1 are listed below.</p> <ul> <li>#1593536: ctime: Self heal of symlink is failing on EC subvolume</li> <li>#1593537: posix/ctime: Mdata value of a directory is different across replica/EC subvolume</li> <li>#1595524: rmdir is leaking softlinks to directories in .glusterfs</li> <li>#1597116: afr: don't update readables if inode refresh failed on all children</li> <li>#1597117: lookup not assigning gfid if file is not present in all bricks of replica</li> <li>#1597229: glustershd crashes when index heal is launched before graph is initialized.</li> <li>#1598193: Stale lock with lk-owner all-zeros is observed in some tests</li> <li>#1599629: Don't execute statements after decrementing call count in afr</li> <li>#1599785: _is_prefix should return false for 0-length strings</li> <li>#1600941: [geo-rep]: geo-replication scheduler is failing due to unsuccessful umount</li> <li>#1603056: When reserve limits are reached, append on an existing file after truncate operation results to hang</li> <li>#1603099: directories are invisible on client side</li> </ul>"},{"location":"release-notes/4.1.3/","title":"Release notes for Gluster 4.1.3","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, and 4.1.2 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 24th September, 2018</p>"},{"location":"release-notes/4.1.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.3/#major-issues","title":"Major issues","text":"<ol> <li>Bug #1601356 titled \"Problem with SSL/TLS encryption\",    is not yet fixed with this release. Patch to fix the same is in progress and    can be tracked here.</li> </ol>"},{"location":"release-notes/4.1.3/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.2 are listed below.</p> <ul> <li>#1425326: gluster bash completion leaks TOP=0 into the environment</li> <li>#1596686: key = trusted.glusterfs.protect.writes [Invalid argument]; key = glusterfs.avoid.overwrite [Invalid argument]</li> <li>#1609550: glusterfs-resource-agents should not be built for el6</li> <li>#1609551: glusterfs-resource-agents should not be built for el6</li> <li>#1611104: [geo-rep]: Upgrade fails, session in FAULTY state</li> <li>#1611106: Glusterd crashed on a few (master) nodes</li> <li>#1611108: [geo-rep]: Geo-rep scheduler fails</li> <li>#1611110: Glusterd memory leaking in gf_gld_mt_linebuf</li> <li>#1611111: [geo-rep]: Geo-replication in FAULTY state - CENTOS 6</li> <li>#1611113: [geo-rep]: Geo-replication not syncing renamed symlink</li> <li>#1611114: [geo-rep]: [Errno 2] No such file or directory</li> <li>#1611115: avoid possible glusterd crash in glusterd_verify_slave</li> <li>#1611116: 'custom extended attributes' set on a directory are not healed after bringing back the down sub-volumes</li> <li>#1618347: [Ganesha] Ganesha crashed in mdcache_alloc_and_check_handle while running bonnie and untars with parallel lookups</li> </ul>"},{"location":"release-notes/4.1.4/","title":"Release notes for Gluster 4.1.4","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2 and 4.1.3 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p>"},{"location":"release-notes/4.1.4/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<ol> <li> <p>This release contains fix for following security vulnerabilities,</p> <ul> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10904</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10907</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10911</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10913</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10914</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10923</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10926</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10927</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10928</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10929</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-10930</li> </ul> </li> <li> <p>To resolve the security vulnerabilities following limitations were made in GlusterFS</p> <ul> <li>open,read,write on special files like char and block are no longer permitted</li> <li>io-stat xlator can dump stat info only to /var/run/gluster directory</li> </ul> </li> </ol> <p>Installing the updated packages and restarting gluster services on gluster brick hosts, will fix the security issues.</p>"},{"location":"release-notes/4.1.4/#major-issues","title":"Major issues","text":"<ol> <li>Bug #1601356 titled \"Problem with SSL/TLS encryption\",    is not yet fixed with this release. Patch to fix the same is in progress and    can be tracked here.</li> </ol>"},{"location":"release-notes/4.1.4/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.3 are listed below.</p> <ul> <li>#1625089: Improper deserialization in dict.c:dict_unserialize() can allow attackers to read arbitrary memory</li> <li>#1625095: Files can be renamed outside volume</li> <li>#1625096: I/O to arbitrary devices on storage server</li> <li>#1625097: Stack-based buffer overflow in server-rpc-fops.c allows remote attackers to execute arbitrary code</li> <li>#1625102: Information Exposure in posix_get_file_contents function in posix-helpers.c</li> <li>#1625106: Unsanitized file names in debug/io-stats translator can allow remote attackers to execute arbitrary code</li> </ul>"},{"location":"release-notes/4.1.5/","title":"Release notes for Gluster 4.1.5","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3 and 4.1.4 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 19th November, 2018</p>"},{"location":"release-notes/4.1.5/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.5/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.5/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.4 are listed below.</p> <ul> <li>#1601356: Problem with SSL/TLS encryption on Gluster 4.0 &amp; 4.1</li> <li>#1625575: Prevent hangs while increasing replica-count/replace-brick for directory hierarchy</li> <li>#1629548: Excessive logging in posix_set_parent_ctime()</li> <li>#1630140: geo-rep: geo-rep config set fails to set rsync-options</li> <li>#1630141: libgfchangelog: History API fails</li> <li>#1630144: Geo-rep: Geo-rep regression times out occasionally</li> <li>#1630145: Geo-rep: Few workers fails to start with out any failure</li> </ul>"},{"location":"release-notes/4.1.6/","title":"Release notes for Gluster 4.1.6","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3, 4.1.4 and 4.1.5 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th January, 2019</p>"},{"location":"release-notes/4.1.6/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains fixes for several security vulnerabilities in Gluster as follows,</p> <ul> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14651</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14652</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14653</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14654</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14659</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14660</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14661</li> </ul>"},{"location":"release-notes/4.1.6/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.6/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.5 are listed below.</p> <ul> <li>#1632013: georep: hard-coded paths in gsyncd.conf.in</li> <li>#1633479: 'df' shows half as much space on volume after upgrade to RHGS 3.4</li> <li>#1633634: split-brain observed on parent dir</li> <li>#1635979: Writes taking very long time leading to system hogging</li> <li>#1635980: Low Random write IOPS in VM workloads</li> <li>#1636218: [SNAPSHOT]: with brick multiplexing, snapshot restore will make glusterd send wrong volfile</li> <li>#1637953: data-self-heal in arbiter volume results in stale locks.</li> <li>#1641761: Spurious failures in bug-1637802-arbiter-stale-data-heal-lock.t</li> <li>#1643052: Seeing defunt translator and discrepancy in volume info when issued from node which doesn't host bricks in that volume</li> <li>#1643075: tests/bugs/glusterd/optimized-basic-testcases-in-cluster.t failing</li> <li>#1643929: geo-rep: gluster-mountbroker status crashes</li> <li>#1644163: geo-rep: geo-replication gets stuck after file rename and gfid conflict</li> <li>#1644474: afr/lease: Read child nodes from lease structure</li> <li>#1644516: geo-rep: gluster-mountbroker status crashes</li> <li>#1644518: [Geo-Replication] Geo-rep faulty sesion because of the directories are not synced to slave.</li> <li>#1644524: Excessive logging in posix_update_utime_in_mdata</li> <li>#1645363: CVE-2018-14652 glusterfs: Buffer overflow in \"features/locks\" translator allows for denial of service [fedora-all]</li> <li>#1646200: CVE-2018-14654 glusterfs: \"features/index\" translator can create arbitrary, empty files [fedora-all]</li> <li>#1646806: [Geo-rep]: Faulty geo-rep sessions due to link ownership on slave volume</li> <li>#1647667: CVE-2018-14651 glusterfs: glusterfs server exploitable via symlinks to relative paths [fedora-all]</li> <li>#1647668: CVE-2018-14661 glusterfs: features/locks translator passes an user-controlled string to snprintf without a proper format string resulting in a denial of service [fedora-all]</li> <li>#1647669: CVE-2018-14659 glusterfs: Unlimited file creation via \"GF_XATTR_IOSTATS_DUMP_KEY\" xattr allows for denial of service [fedora-all]</li> <li>#1647670: CVE-2018-14653 glusterfs: Heap-based buffer overflow via \"gf_getspec_req\" RPC message [fedora-all]</li> <li>#1647972: CVE-2018-14660 glusterfs: Repeat use of \"GF_META_LOCK_KEY\" xattr allows for memory exhaustion [fedora-all]</li> <li>#1648367: crash seen while running regression, intermittently.</li> <li>#1648938: gfapi: fix bad dict setting of lease-id</li> <li>#1648982: packaging: don't include bd.so in rpm when --without bd</li> </ul>"},{"location":"release-notes/4.1.7/","title":"Release notes for Gluster 4.1.7","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3, 4.1.4, 4.1.5 and 4.1.6 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th March, 2019</p>"},{"location":"release-notes/4.1.7/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.7/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.7/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.6 are listed below.</p> <ul> <li>#1654118: [geo-rep]: Failover / Failback shows fault status in a non-root setup</li> <li>#1654229: Provide an option to silence glfsheal logs</li> <li>#1655527: Incorrect usage of local-&gt;fd in afr_open_ftruncate_cbk</li> <li>#1655532: Tracker bug for all leases related issues</li> <li>#1655561: gfid heal does not happen when there is no source brick</li> <li>#1662635: Fix tests/bugs/shard/zero-flag.t</li> <li>#1663132: [Ganesha] Ganesha failed on one node while exporting volumes in loop</li> </ul>"},{"location":"release-notes/4.1.8/","title":"Release notes for Gluster 4.1.8","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3, 4.1.4, 4.1.5, 4.1.6 and 4.1.7 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th May, 2019</p>"},{"location":"release-notes/4.1.8/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.8/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.8/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.7 are listed below.</p> <ul> <li>#1670303: api: bad GFAPI_4.1.6 block</li> <li>#1672249: quorum count value not updated in nfs-server vol file</li> <li>#1673265: Fix timeouts so the tests pass on AWS</li> <li>#1687746: [geo-rep]: Checksum mismatch when 2x2 vols are converted to arbiter</li> <li>#1691292: glusterfs FUSE client crashing every few days with 'Failed to dispatch handler'</li> <li>#1693057: dht_revalidate may not heal attrs on the brick root</li> <li>#1693201: core: move \"dict is NULL\" logs to DEBUG log level</li> </ul>"},{"location":"release-notes/4.1.9/","title":"Release notes for Gluster 4.1.9","text":"<p>This is a bugfix release. The release notes for 4.1.0, 4.1.1, 4.1.2, 4.1.3, 4.1.4, 4.1.5, 4.1.6, 4.1.7 and 4.1.8 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 4.1 stable release.</p>"},{"location":"release-notes/4.1.9/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/4.1.9/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/4.1.9/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.8 are listed below.</p> <ul> <li>#1660225: geo-rep does not replicate mv or rename of file</li> <li>#1684404: Multiple shd processes are running on brick_mux environmet</li> <li>#1694563: gfapi: do not block epoll thread for upcall notifications</li> <li>#1696513: Multiple shd processes are running on brick_mux environmet</li> <li>#1707200: VM stuck in a shutdown because of a pending fuse request</li> </ul>"},{"location":"release-notes/5.0/","title":"Release notes for Gluster 5.0","text":"<p>This is a major release that includes a range of code improvements and stability fixes among a few features as noted below.</p> <p>A selection of the key features and changes are documented on this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Major changes and features</li> <li>Major issues</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/5.0/#announcements","title":"Announcements","text":"<ol> <li>Releases that receive maintenance updates post release 5 are, 4.1    (reference)</li> </ol> <p>NOTE: 3.12 long term maintenance release, will reach end of life (EOL) with the release of 5.0. (reference)</p> <ol> <li>Release 5 will receive maintenance updates around the 10th of every month    for the first 3 months post release (i.e Nov'18, Dec'18, Jan'18). Post the    initial 3 months, it will receive maintenance updates every 2 months till EOL.    (reference)</li> </ol>"},{"location":"release-notes/5.0/#major-changes-and-features","title":"Major changes and features","text":"<p>Features are categorized into the following sections,</p> <ul> <li>Management</li> <li>Standalone</li> </ul>"},{"location":"release-notes/5.0/#management","title":"Management","text":""},{"location":"release-notes/5.0/#glusterd2","title":"GlusterD2","text":"<p>IMP: GlusterD2 in Gluster-5 is still considered a preview and is experimental. It should not be considered ready for production use. Users should still expect some breaking changes even though all efforts would be taken to ensure that these can be avoided. As GD2 is still under heavy development, new features can be expected throughout the Gluster 5 release.</p> <p>The following major changes have been committed to GlusterD2 since v4.1.0.</p> <ol> <li> <p>Volume snapshots : Most snapshot operations are available including create,    delete, activate, deactivate, clone and restore.</p> </li> <li> <p>Volume heal: Support for full heal and index heal for replicate volumes has    been implemented.</p> </li> <li> <p>Tracing with Opencensus: Support for tracing distributed operations has been    implemented in GD2, using the Opencensus API. Tracing instrumentation has been    done for volume create, list and delete operations. Other operations will    follow subsequently.</p> </li> <li> <p>Portmap refactoring: Portmap in GlisterD2 no longer selects a port for the    bricks to listen on, instead leaving the choice upto the bricks. Portmap only    saves port information provided by brick during signin.</p> </li> <li> <p>Smartvol API merged with volume create API: The smart volume API which allows    user to create a volume by just specifying a size has been merged with the    normal volume create API.</p> </li> <li> <p>Configure GlusterD2 with environment variables: In addition to CLI flags, and    the config file, GD2 configuration options can be set using environment    variables.</p> </li> </ol> <p>In addition to the above, many changes have been merged for minor bug-fixes and to help with testing.</p> <p>Refer to the user documentation section for details on how to get started with GlusterD2.</p>"},{"location":"release-notes/5.0/#standalone","title":"Standalone","text":""},{"location":"release-notes/5.0/#1-entry-creation-and-handling-consistency-is-improved","title":"1. Entry creation and handling, consistency is improved","text":"<p>The dentry serializer feature was introduced in Gluster 4.0, to strengthen the consistency handling of entry operations in the Gluster stack. Entry operations refer to creating, linking, renaming and unlinking of files and directory names into the filesystem space.</p> <p>When this feature was first introduced (in 4.0) it was optional, with this release this feature is enabled by default.</p>"},{"location":"release-notes/5.0/#2-python-code-in-gluster-packages-is-python-3-ready","title":"2. Python code in Gluster packages is Python 3 ready","text":""},{"location":"release-notes/5.0/#3-quota-fsck-script-to-correct-quota-accounting","title":"3. Quota fsck script to correct quota accounting","text":"<p>See usage documentation here</p>"},{"location":"release-notes/5.0/#4-added-noatime-option-in-utime-xlator","title":"4. Added noatime option in utime xlator","text":"<p>Enabling the utime and ctime feature, enables Gluster to maintain consistent change and modification time stamps on files and directories across bricks.</p> <p>The utime xlator is enhanced with a noatime option and is set by default to enabled, when the utime feature is enabled. This helps to ignore atime updates for operations that change may trigger an atime update on the file system objects.</p> <p>To enable the feature use,</p> <pre><code># gluster volume set &lt;volname&gt; features.utime on\n# gluster volume set &lt;volname&gt; features.ctime on\n</code></pre>"},{"location":"release-notes/5.0/#5-added-ctime-invalidation-option-in-quick-read-xlator","title":"5. Added ctime-invalidation option in quick-read xlator","text":"<p>Quick-read xlator by default uses mtime (files last modification time) to identify changes to file data. However, there are applications, like rsync, which explicitly set mtime making it unreliable for the purpose of identifying changes to the file content.</p> <p>Since ctime (files last status change time) also changes when content of a file changes and cannot be set explicitly by applications, it becomes a more reliable source to identify staleness of cached data.</p> <p>The ctime-invalidation option makes quick-read to prefer ctime over mtime to validate staleness of its cache.</p> <p>To enable this option use,</p> <pre><code># gluster volume set &lt;volname&gt; ctime-invalidation on\n</code></pre> <p>NOTE: Using ctime can result in false positives as ctime is updated even on attribute changes, like mode bits, without changes to file data. As a result this option is recommended in situations where mtime is not reliable.</p>"},{"location":"release-notes/5.0/#6-added-shard-deletion-rate-option-in-shard-xlator","title":"6. Added shard-deletion-rate option in shard xlator","text":"<p>The <code>shard-deletion-rate</code> option is introduced, to configure the number of shards to delete in parallel when a file that is sharded is deleted.</p> <p>The default value is set at 100, but can be increased to delete more shards in parallel for faster space reclamation.</p> <p>To change the defaults for this option use,</p> <pre><code># gluster volume set &lt;volname&gt; shard-deletion-rate &lt;n&gt;\n</code></pre> <p>NOTE: The upper limit is unbounded, use it with caution as a very large number will cause lock contention on the bricks. As an example, during testing, an upper limit of 125000 was enough to cause timeouts and hangs in the gluster processes due to lock contention.</p>"},{"location":"release-notes/5.0/#7-removed-last-usage-of-md5-digest-in-code-towards-better-fips-compliance","title":"7. Removed last usage of MD5 digest in code, towards better FIPS compliance","text":"<p>In an effort to ensure that Gluster can be installed and deployed on machines that are compliant with the requirements for FIPS, remaining uses of MD5 digest is removed from the code base.</p> <p>Addressing this feature's requirements was initiated during the 4.0 release, at which point enabling user space snapshots, which still used MD5 for certain needs, broke the FIPS compliance requirements. This limitation is now addressed in this release.</p>"},{"location":"release-notes/5.0/#8-code-improvements","title":"8. Code improvements","text":"<p>Over the course of this release, the contributors have been active in addressing various Coverity issues, GCC and clang warnings, clang formatting of the code base, micro improvements to GLibC API usage and memory handling around string handling and allocation routines.</p> <p>The above are ongoing efforts, but major strides were made during this release to actively address code quality in these areas.</p>"},{"location":"release-notes/5.0/#major-issues","title":"Major issues","text":"<ol> <li> <p>The following options are removed from the code base and require to be unset    before an upgrade from releases older than release 4.1.0,</p> </li> <li> <p>features.lock-heal</p> </li> <li>features.grace-timeout</li> </ol> <p>To check if these options are set use,</p> <pre><code># gluster volume info\n</code></pre> <p>and ensure that the above options are not part of the <code>Options Reconfigured:</code> section in the output of all volumes in the cluster.</p> <p>If these are set, then unset them using the following commands,</p> <pre><code># gluster volume reset &lt;volname&gt; &lt;option&gt;\n</code></pre> <p>NOTE: Failure to do the above may result in failure during online upgrades, and the reset of these options to their defaults needs to be done prior to upgrading the cluster.</p>"},{"location":"release-notes/5.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-4.1.0 are listed below.</p> <ul> <li>#853601: working-directory should be protected from being a brick</li> <li>#1312832: tests fail because bug-924726.t depends on netstat</li> <li>#1390050: Elasticsearch get CorruptIndexException errors when running with GlusterFS persistent storage</li> <li>#1405147: glusterfs (posix-acl xlator layer) checks for \"write permission\" instead for \"file owner\" during open() when writing to a file</li> <li>#1425325: gluster bash completion leaks TOP=0 into the environment</li> <li>#1437780: don't send lookup in fuse_getattr()</li> <li>#1455872: [Perf]: 25% regression on sequential reads on EC over SMB3</li> <li>#1492847: core (named threads): flood of -Wformat-truncation warnings with gcc-7.</li> <li>#1512691: PostgreSQL DB Restore: unexpected data beyond EOF</li> <li>#1524323: No need to load ctr xlator if user has not configured tiering</li> <li>#1526780: ./run-tests-in-vagrant.sh fails because of disabled Gluster/NFS</li> <li>#1533000: Quota crawl regressed</li> <li>#1537602: Georeplication tests intermittently fail</li> <li>#1543279: Moving multiple temporary files to the same destination concurrently causes ESTALE error</li> <li>#1545048: [brick-mux] process termination race while killing glusterfsd on last brick detach</li> <li>#1546103: run-tests-in-vagrant.sh should return test status</li> <li>#1558574: Coverity: Warning for singlton array..</li> <li>#1558921: Gluster volume smb share options are getting overwritten after restating the gluster volume</li> <li>#1561332: merge ssl infra with epoll infra</li> <li>#1564071: directories are invisible on client side</li> <li>#1564149: Agree upon a coding standard, and automate check for this in smoke</li> <li>#1564419: Client side memory leak in encryption xlator (crypt.c).</li> <li>#1568521: shard files present even after deleting vm from ovirt UI</li> <li>#1569345: Need COMMITMENT from community for GPL Cure.</li> <li>#1569399: glusterfsd should be able to start without any other arguments than a single volfile.</li> <li>#1570538: linux untar errors out at completion during disperse volume inservice upgrade</li> <li>#1570962: print the path of the corrupted object in scrub status</li> <li>#1574421: Provide a way to get the hashed-subvol for a file</li> <li>#1575381: gluster volume heal info prints extra newlines</li> <li>#1575490: [geo-rep]: Upgrade fails, session in FAULTY state</li> <li>#1575587: Leverage MDS subvol for dht_removexattr also</li> <li>#1575716: gfapi: broken symbol versions</li> <li>#1575742: Change op-version of master to 4.2.0 for future options that maybe added</li> <li>#1575858: quota crawler fails w/ TLS enabled</li> <li>#1575864: glusterfsd crashing because of RHGS WA?</li> <li>#1575887: Additional log messages in dht_readdir(p)_cbk</li> <li>#1575910: DHT Log flooding in mount log \"key=trusted.glusterfs.dht.mds [Invalid argument]\"</li> <li>#1576179: [geo-rep]: Geo-rep scheduler fails</li> <li>#1576392: Glusterd crashed on a few (master) nodes</li> <li>#1576418: Warning messages generated for the removal of extended attribute security.ima flodding client logs</li> <li>#1576767: [geo-rep]: Lot of changelogs retries and \"dict is null\" errors in geo-rep logs</li> <li>#1576842: cloudsync: make plugins configurable</li> <li>#1577574: brick crash seen while creating and deleting two volumes in loop</li> <li>#1577627: [Geo-rep]: Status in ACTIVE/Created state</li> <li>#1577672: Brick-mux regressions failing for over 8+ weeks on master</li> <li>#1577731: [Ganesha] \"Gluster nfs-ganesha enable\" commands sometimes gives output as \"failed\" with \"Unlocking failed\" error messages ,even though cluster is up and healthy in backend</li> <li>#1577744: The tool to generate new xlator template code is not upto date</li> <li>#1578325: Input/Output errors on a disperse volume with concurrent reads and writes</li> <li>#1578650: If parallel-readdir is enabled, the readdir-optimize option even when it is set to on it behaves as off</li> <li>#1578721: Statedump prints memory usage statistics twice</li> <li>#1578823: Remove EIO from the dht_inode_missing macro</li> <li>#1579276: rpc: The gluster auth version is always AUTH_GLUSTERFS_v2</li> <li>#1579769: inode status command is broken with distributed replicated volumes</li> <li>#1579786: Thin-arbiter: Provide script to start and run thin arbiter process</li> <li>#1579788: Thin-arbiter: Have the state of volume in memory</li> <li>#1580020: ctime: Rename and unlink does not update ctime</li> <li>#1580238: Fix incorrect rebalance log message</li> <li>#1580269: [Remove-brick+Rename] Failure count shows zero though there are file migration failures</li> <li>#1580352: Glusterd memory leaking in gf_gld_mt_linebuf</li> <li>#1580529: posix/ctime: Access time is not updated for file with a hardlink</li> <li>#1580532: posix/ctime: The first lookup on file is not healing the gfid</li> <li>#1581035: posix/ctime: Mtime is not updated on setting it to older date</li> <li>#1581345: posix unwinds readdirp calls with readdir signature</li> <li>#1581735: bug-1309462.t is failing reliably due to changes in security.capability changes in the kernel</li> <li>#1582051: Fix failure of readdir-ahead/bug-1439640.t in certain cases</li> <li>#1582516: libgfapi: glfs init fails on afr volume with ctime feature enabled</li> <li>#1582704: rpc_transport_unref() called for an unregistered socket fd</li> <li>#1583018: changelog: Changelog is not capturing rename of files</li> <li>#1583565: [distribute]: Excessive 'dict is null' errors in geo-rep logs</li> <li>#1583583: \"connecting\" state in protocol client is useless</li> <li>#1583937: Brick process crashed after upgrade from RHGS-3.3.1 async(7.4) to RHGS-3.4(7.5)</li> <li>#1584098: 'custom extended attributes' set on a directory are not healed after bringing back the down sub-volumes</li> <li>#1584483: afr: don't update readables if inode refresh failed on all children</li> <li>#1584517: Inconsistent access permissions on directories after bringing back the down sub-volumes</li> <li>#1584864: sometime messages</li> <li>#1584981: posix/ctime: EC self heal of directory is blocked with ctime feature enabled</li> <li>#1585391: glusteshd wrong status caused by gluterd big lock</li> <li>#1585585: Cleanup \"connected\" state management of rpc-clnt</li> <li>#1586018: (f)Setxattr and (f)removexattr invalidates the stat cache in md-cache</li> <li>#1586020: [GSS] Pending heals are not getting completed in CNS environment</li> <li>#1586342: Refactor the distributed test code to make it work for ipv4</li> <li>#1586363: Refactor rebalance code</li> <li>#1589253: After creating and starting 601 volumes, self heal daemon went down and seeing continuous warning messages in glusterd log</li> <li>#1589691: xdata is leaking in server3_3_seek</li> <li>#1589782: [geo-rep]: Geo-replication in FAULTY state - CENTOS 6</li> <li>#1589842: [USS] snapview server does not go through the list of all the snapshots for validating a snap</li> <li>#1590193: /usr/sbin/gcron.py aborts with OSError</li> <li>#1590385: Refactor dht lookup code</li> <li>#1590655: Excessive logging in posix_check_internal_writes() due to NULL dict</li> <li>#1590710: Gluster Block PVC fails to mount on Jenkins pod</li> <li>#1591193: lookup not assigning gfid if file is not present in all bricks of replica</li> <li>#1591580: Remove code duplication in protocol/client</li> <li>#1591621: Arequal checksum mismatch on older mount</li> <li>#1592141: Null pointer deref in error paths</li> <li>#1592275: posix/ctime: Mdata value of a directory is different across replica/EC subvolume</li> <li>#1592509: ctime: Self heal of symlink is failing on EC subvolume</li> <li>#1593232: CVE-2018-10841 glusterfs: access trusted peer group via remote-host command [glusterfs upstream]</li> <li>#1593351: mount.glusterfs incorrectly reports \"getfattr not found\"</li> <li>#1593548: Stack overflow in readdirp with parallel-readdir enabled</li> <li>#1593562: Add new peers to Glusto</li> <li>#1593651: gnfs nfs.register-with-portmap issue with ipv6_default</li> <li>#1595174: Found an issue on using lock before init in md-cache</li> <li>#1595190: rmdir is leaking softlinks to directories in .glusterfs</li> <li>#1595320: gluster wrongly reports bricks online, even when brick path is not available</li> <li>#1595492: tests: remove tarissue.t from BAD_TEST</li> <li>#1595726: tests/geo-rep: Add test case for symlink rename</li> <li>#1596020: Introduce database group profile</li> <li>#1596513: glustershd crashes when index heal is launched before graph is initialized.</li> <li>#1596524: 'replica 3 aribiter 1' is not a industry standard way of telling 2-way replicate with arbiter.</li> <li>#1596789: Update mount-shared-storage.sh to automatically include all enabled glusterfs mounts in fstab</li> <li>#1597156: Need a simpler way to find if a replica/ec subvolume is up</li> <li>#1597247: restart all the daemons after all the bricks</li> <li>#1597473: introduce cluster.daemon-log-level option</li> <li>#1597512: Remove contrib/ipaddr-py</li> <li>#1597540: tests/geo-rep: Add test cases for rsnapshot use case</li> <li>#1597563: [geo-rep+tiering]: Hot and Cold tier brick changelogs report rsync failure</li> <li>#1597568: Mark brick online after port registration even for brick-mux cases</li> <li>#1597627: tests/bugs/core/bug-1432542-mpx-restart-crash.t is generated crash</li> <li>#1597662: Stale entries of snapshots need to be removed from /var/run/gluster/snaps</li> <li>#1597776: br-state-check.t crashed while brick multiplex is enabled</li> <li>#1597805: Stale lock with lk-owner all-zeros is observed in some tests</li> <li>#1598325: Replace the BROKEN_TESTS environment variable value</li> <li>#1598345: gluster get-state command is crashing glusterd process when geo-replication is configured</li> <li>#1598390: Remove extras/prot_filter.py</li> <li>#1598548: Disabling iostats diagnostics.stats-dump-interval (set to 0) does not terminate the dump thread</li> <li>#1598663: Don't execute statements after decrementing call count in afr</li> <li>#1598884: [geo-rep]: [Errno 2] No such file or directory</li> <li>#1598926: Misleading error messages on bricks caused by lseek</li> <li>#1598977: [geo-rep]: geo-replication scheduler is failing due to unsuccessful umount</li> <li>#1599219: configure fails complaining absence of libxml2-devel</li> <li>#1599250: bug-1432542-mpx-restart-crash.t takes a lot of time to complete cleanup</li> <li>#1599628: To find a compatible brick ignore diagnostics.brick-log-level option while brick mux is enabled</li> <li>#1599783: _is_prefix should return false for 0-length strings</li> <li>#1600405: [geo-rep]: Geo-replication not syncing renamed symlink</li> <li>#1600451: crash on glusterfs_handle_brick_status of the glusterfsd</li> <li>#1600687: fuse process segfault when use resolve-gids option</li> <li>#1600812: A new volume set option to for GD2 quota integration</li> <li>#1600878: crash seen while running regression, intermittently.</li> <li>#1600963: get the failed test details into gerrit output itself</li> <li>#1601166: performance.read-ahead causes huge increase in unnecessary network traffic</li> <li>#1601390: Distributed testing: Fix build environment</li> <li>#1601423: memory leak in get-state when geo-replication session is configured</li> <li>#1601683: dht: remove useless argument from dht_iatt_merge</li> <li>#1602070: [SNAPSHOT] snapshot daemon crashes if a fd from a deleted snapshot is accessed</li> <li>#1602121: avoid possible glusterd crash in glusterd_verify_slave</li> <li>#1602236: When reserve limits are reached, append on an existing file after truncate operation results to hang</li> <li>#1602866: dht: Crash seen in thread dht_dir_attr_heal</li> <li>#1603063: ./tests/bugs/glusterd/validating-server-quorum.t is generated core</li> <li>#1605056: [RHHi] Mount hung and not accessible</li> <li>#1605077: If a node disconnects during volume delete, it assumes deleted volume as a freshly created volume when it is back online</li> <li>#1607049: Excessive logging in posix_set_parent_ctime()</li> <li>#1607319: Remove uuid from contrib/</li> <li>#1607689: Memory leaks on glfs_fini</li> <li>#1607783: Segmentation fault while using gfapi while getting volume utilization</li> <li>#1608175: Skip hash checks in dht_readdirp_cbk if dht has a single child subvol.</li> <li>#1608564: line coverage tests failing consistently over a week</li> <li>#1608566: line coverage tests: glusterd crash in ./tests/basic/sdfs-sanity.t</li> <li>#1608568: line coverage tests: bug-1432542-mpx-restart-crash.t times out consistently</li> <li>#1608684: Change glusto ownership to reflect current reality</li> <li>#1608991: Remove code duplication in socket</li> <li>#1609126: Fix mem leak and smoke failure for gcc8 in cloudsync</li> <li>#1609207: thin arbiter: set notify-contention option to yes</li> <li>#1609337: Remove argp-standalone from contrib/</li> <li>#1609551: glusterfs-resource-agents should not be built for el6</li> <li>#1610236: [Ganesha] Ganesha crashed in mdcache_alloc_and_check_handle while running bonnie and untars with parallel lookups</li> <li>#1610256: [Ganesha] While performing lookups from two of the clients, \"ls\" command got failed with \"Invalid argument\"</li> <li>#1610405: Geo-rep: Geo-rep regression times out occasionally</li> <li>#1610726: Fuse mount of volume fails when gluster_shared_storage is enabled</li> <li>#1611103: online_brick_count check in volume.rc should ignore bitrot and scrubber daemons</li> <li>#1611566: tests/bitrot: tests/bitrot/bug-1373520.t fails intermittently</li> <li>#1611692: Mount process crashes on a sharded volume during rename when dst doesn't exist</li> <li>#1611834: glusterfsd crashes when SEEK_DATA/HOLE is not supported</li> <li>#1612017: MAINTAINERS: Add Xavier Hernandez as peer for shard xlator</li> <li>#1612037: Entry will be present even if the gfid link creation inside .glusterfs fails</li> <li>#1612054: Test case bug-1586020-mark-dirty-for-entry-txn-on-quorum-failure.t failure</li> <li>#1612418: Brick not coming up on a volume after rebooting the node</li> <li>#1612750: gfapi: Use inode_forget in case of unlink/rename objects</li> <li>#1613098: posix-acl: skip acl_permits check when the owner setting GF_POSIX_ACL_xxxx</li> <li>#1613807: Fix spurious failures in tests/basic/afr/granular-esh/replace-brick.t</li> <li>#1614062: Provide/preserve tarball of retried tests</li> <li>#1614088: kill_brick function needs to wait for brick to be killed</li> <li>#1614124: glusterfsd process crashed in a multiplexed configuration during cleanup of a single brick-graph triggered by volume-stop.</li> <li>#1614142: Fix the grammar error in the rpc log</li> <li>#1614168: [uss]snapshot: posix acl authentication is not working as expected</li> <li>#1614654: Potential fixes for tests/basic/afr/add-brick-self-heal.t failure</li> <li>#1614662: ./tests/bugs/replicate/bug-1448804-check-quorum-type-values.t</li> <li>#1614718: Fix spurious failures in tests/bugs/index/bug-1559004-EMLINK-handling.t</li> <li>#1614730: Test case bug-1433571-undo-pending-only-on-up-bricks.t failure</li> <li>#1614799: Geo-rep: Few workers fails to start with out any failure</li> <li>#1615037: Multiplex tests use a cleanup pattern that results in empty tarballs on failure</li> <li>#1615078: tests/bugs/replicate/bug-1408712.t fails.</li> <li>#1615092: tests/bugs/shard/configure-lru-limit.t spurious failure</li> <li>#1615096: ./tests/bugs/quick-read/bug-846240.t fails spuriously</li> <li>#1615239: Fix ./tests/basic/afr/replace-brick-self-heal.t failure</li> <li>#1615331: gfid-mismatch-resolution-with-fav-child-policy.t is failing</li> <li>#1615474: Rebalance status shows wrong count of \"Rebalanced-files\" if the file has hardlinks</li> <li>#1615582: test: ./tests/basic/stats-dump.t fails spuriously not finding queue_size in stats output for some brick</li> <li>#1615703: [Disperse] Improve log messages for EC volume</li> <li>#1615789: Come up with framework to test thin-arbiter</li> <li>#1618004: [GSS] glusterd not starting after upgrade due to snapshots error in RHEV + RHGS</li> <li>#1619027: geo-rep: Active/Passive status change logging is redundant</li> <li>#1619423: cli: Command <code>gluster volume statedump &lt;volname&gt;</code> dumps core</li> <li>#1619475: NetBSD memory detection issue</li> <li>#1619720: posix_mknod does not update trusted.pgfid.xx xattr correctly</li> <li>#1619843: Snapshot status fails with commit failure</li> <li>#1620544: Brick process NOT ONLINE for heketidb and block-hosting volume</li> <li>#1621981: dht: File rename removes the .glusterfs handle for linkto file</li> <li>#1622076: [geo-rep]: geo-rep reverse sync in FO/FB can accidentally delete the content at original master incase of gfid conflict in 3.4.0 without explicit user rmdir</li> <li>#1622422: glusterd cli is showing brick status N/A even brick is consumed by a brick process</li> <li>#1622549: libgfchangelog: History API fails</li> <li>#1622665: clang-scan report: glusterfs issues</li> <li>#1622821: Prevent hangs while increasing replica-count/replace-brick for directory hierarchy</li> <li>#1623408: rpc: log fuse request ID with gluster transaction ID</li> <li>#1623759: [Disperse] Don't send final version update if non data fop succeeded</li> <li>#1624244: DHT: Rework the virtual xattr to get the hash subvol</li> <li>#1624440: Fail volume stop operation in case brick detach request fails</li> <li>#1625089: CVE-2018-10911 glusterfs: Improper deserialization in dict.c:dict_unserialize() can allow attackers to read arbitrary memory</li> <li>#1625095: CVE-2018-10930 glusterfs: Files can be renamed outside volume</li> <li>#1625096: CVE-2018-10923 glusterfs: I/O to arbitrary devices on storage server</li> <li>#1625097: CVE-2018-10907 glusterfs: Stack-based buffer overflow in server-rpc-fops.c allows remote attackers to execute arbitrary code</li> <li>#1625102: CVE-2018-10913 glusterfs: Information Exposure in posix_get_file_contents function in posix-helpers.c</li> <li>#1625106: CVE-2018-10904 glusterfs: Unsanitized file names in debug/io-stats translator can allow remote attackers to execute arbitrary code</li> <li>#1625643: Use CALLOC in dht_layouts_init</li> <li>#1626319: DH ciphers disabled errors are encountered on basic mount &amp; unmount with ssl enabled setup</li> <li>#1626346: dht: Use snprintf in dht_filter_loc_subvol_key</li> <li>#1626394: dht_create: Create linkto files if required when using dht_filter_loc_subvol_key</li> <li>#1626787: sas workload job getting stuck after sometime</li> <li>#1627044: Converting to replica 2 volume is not throwing warning</li> <li>#1627620: SAS job aborts complaining about file doesn't exist</li> <li>#1628668: Update op-version from 4.2 to 5.0</li> <li>#1629877: GlusterFS can be improved (clone for Gluster-5)</li> <li>#1630673: geo-rep: geo-rep config set fails to set rsync-options</li> <li>#1630804: libgfapi-python: test_listdir_with_stat and test_scandir failure on release 5 branch</li> <li>#1633015: ctime: Access time is different with in same replica/EC volume</li> <li>#1633242: 'df' shows half as much space on volume after upgrade to RHGS 3.4</li> <li>#1633552: glusterd crash in regression build</li> <li>#1635373: ASan (address sanitizer) fixes - Blanket bug</li> <li>#1635972: Low Random write IOPS in VM workloads</li> <li>#1635975: Writes taking very long time leading to system hogging</li> <li>#1636162: [SNAPSHOT]: with brick multiplexing, snapshot restore will make glusterd send wrong volfile</li> <li>#1636842: df shows Volume size as zero if Volume created and mounted using Glusterd2</li> <li>#1638159: data-self-heal in arbiter volume results in stale locks.</li> <li>#1638163: split-brain observed on parent dir</li> <li>#1639688: core: backport uuid fixes</li> <li>#1640392: io-stats: garbage characters in the filenames generated</li> </ul>"},{"location":"release-notes/5.1/","title":"Release notes for Gluster 5.1","text":"<p>This is a bugfix release. The release notes for 5.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th December, 2018</p>"},{"location":"release-notes/5.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>This release contains fixes for several security vulnerabilities in Gluster as follows,</p> <ul> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14651</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14652</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14653</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14654</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14659</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14660</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2018-14661</li> </ul>"},{"location":"release-notes/5.1/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.0 are listed below.</p> <ul> <li>#1641429: Gfid mismatch seen on shards when lookup and mknod are in progress at the same time</li> <li>#1641440: [ovirt-gluster] Mount hung and not accessible</li> <li>#1641872: Spurious failures in bug-1637802-arbiter-stale-data-heal-lock.t</li> <li>#1643078: tests/bugs/glusterd/optimized-basic-testcases-in-cluster.t failing</li> <li>#1643402: [Geo-Replication] Geo-rep faulty sesion because of the directories are not synced to slave.</li> <li>#1644158: geo-rep: geo-replication gets stuck after file rename and gfid conflict</li> <li>#1644161: cliutils: geo-rep cliutils' usage of Popen is not python3 compatible</li> <li>#1644314: build/packaging: el-X (x &gt; 7) isms</li> <li>#1644514: geo-rep: On gluster command failure on slave, worker crashes with python3</li> <li>#1644515: geo-rep: gluster-mountbroker status crashes</li> <li>#1644526: Excessive logging in posix_update_utime_in_mdata</li> <li>#1644622: [Stress] : Mismatching iatt in glustershd logs during MTSH and continous IO from Ganesha mounts</li> <li>#1644645: [AFR] : Start crawling indices and healing only if both data bricks are UP in replica 2 (thin-arbiter)</li> <li>#1646204: CVE-2018-14654 glusterfs: \"features/index\" translator can create arbitrary, empty files [fedora-all]</li> <li>#1646896: [Geo-Replication] Geo-rep faulty sesion because of the directories are not synced to slave.</li> <li>#1647663: CVE-2018-14651 glusterfs: glusterfs server exploitable via symlinks to relative paths [fedora-all]</li> <li>#1647664: CVE-2018-14653 glusterfs: Heap-based buffer overflow via \"gf_getspec_req\" RPC message [fedora-all]</li> <li>#1647665: CVE-2018-14659 glusterfs: Unlimited file creation via \"GF_XATTR_IOSTATS_DUMP_KEY\" xattr allows for denial of service [fedora-all]</li> <li>#1647666: CVE-2018-14661 glusterfs: features/locks translator passes an user-controlled string to snprintf without a proper format string resulting in a denial of service [fedora-all]</li> <li>#1647801: can't enable shared-storage</li> <li>#1647962: CVE-2018-14660 glusterfs: Repeat use of \"GF_META_LOCK_KEY\" xattr allows for memory exhaustion [fedora-all]</li> <li>#1647968: Seeing defunt translator and discrepancy in volume info when issued from node which doesn't host bricks in that volume</li> <li>#1648923: gfapi: fix bad dict setting of lease-id</li> </ul>"},{"location":"release-notes/5.10/","title":"Release notes for Gluster 5.10","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, 5.6, 5.8 and 5.9 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>Next minor release tentative date: Week of 10th December, 2019</p>"},{"location":"release-notes/5.10/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.10/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.10/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.9 are listed below.</p> <ul> <li>#1749352: Failures in remove-brick due to [Input/output error] errors</li> <li>#1750230: [geo-rep]: Non-root - Unable to set up mountbroker root directory and group</li> <li>#1739336: Multiple disconnect events being propagated for the same child</li> </ul>"},{"location":"release-notes/5.11/","title":"Release notes for Gluster 5.11","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, 5.6, 5.8, 5.9, and 5.10 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>Next minor release tentative date: Week of 10th February, 2020</p>"},{"location":"release-notes/5.11/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.11/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.11/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.10 are listed below.</p> <ul> <li>#1718734: Memory leak in glusterfsd process</li> <li>#1760710: glustershd can not decide heald_sinks, and skip repair, so some entries lingering in volume heal info</li> <li>#1767305: READDIRP incorrectly updates posix-acl inode ctx</li> <li>#1779284: Backport GNFS memory leak fix to version 5</li> </ul>"},{"location":"release-notes/5.12/","title":"Release notes for Gluster 5.12","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, 5.6, 5.8, 5.9, 5.10, and 5.11 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>Next minor release tentative date: Week of 10th April, 2020</p>"},{"location":"release-notes/5.12/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.12/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.12/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.11 are listed below.</p> <ul> <li>#1803810: Functionality to enable log rotation for user serviceable snapshot's logs.</li> <li>#1804512: Mounts fails after reboot of 1/3 gluster nodes</li> <li>#1804522: Rebalance is causing glusterfs crash on client node</li> <li>#1805047: I/O error on writes to a disperse volume when replace-brick is executed</li> <li>#1805049: Glusterfsd crashing in ec-inode-write.c, in GF_ASSERT</li> <li>#1805050: [Disperse] : Client side heal is not removing dirty flag for some of the files.</li> <li>#1805051: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1805052: Disperse volume : Ganesha crash with IO in 4+2 config when one glusterfsd restart every 600s</li> <li>#1805053: An Input/Output error happens on a disperse volume when doing unaligned writes to a sparse file</li> <li>#1805054: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1805055: Open fd heal should filter O_APPEND/O_EXCL</li> <li>#1805056: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1805057: [EC] shd crashed while heal failed due to out of memory error.</li> </ul>"},{"location":"release-notes/5.13/","title":"Release notes for Gluster 5.13","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, 5.6, 5.8, 5.9, 5.10, 5.11, and 5.12 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: This is supposed to be last minor release of 5.</p>"},{"location":"release-notes/5.13/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.13/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.13/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.12 are listed below.</p> <ul> <li>#1803810: Functionality to enable log rotation for user serviceable snapshot's logs.</li> <li>#1127: Mount crash during background shard cleanup</li> <li>#1103:afr: prevent spurious entry   heals leading to gfid split-brain</li> <li>#1067:Metadata heal picks different brick each time as source if there are no pending xattrs</li> <li>#1028:Segfault in FUSE process, potential use after free</li> <li>#1390914: Glusterfs create a flock lock by anonymous fd, but can't release it forever.</li> <li>#1806931: Changes to self-heal logic w.r.t. detecting metadata split-brains</li> <li>#1807007: The result (hostname) of getnameinfo for all bricks (ipv6 addresses) are the same, while they are not.</li> <li>#1807431: Setting cluster.heal-timeout requires volume restart</li> <li>#1807748: bug-1402841.t-mt-dir-scan-race.t fails spuriously</li> <li>#1808256: Glusterfs create a flock lock by anonymous fd, but can't release it forever.</li> <li>#1809440: [brickmux]: glustershd crashed when rebooting 1/3 nodes at regular intervals</li> </ul>"},{"location":"release-notes/5.2/","title":"Release notes for Gluster 5.2","text":"<p>This is a bugfix release. The release notes for 5.0 and 5.1 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th January, 2019</p>"},{"location":"release-notes/5.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.2/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.1 are listed below.</p> <ul> <li>#1651525: Issuing a \"heal ... full\" on a disperse volume causes permanent high CPU utilization.</li> <li>#1654115: [Geo-rep]: Faulty geo-rep sessions due to link ownership on slave volume</li> <li>#1654117: [geo-rep]: Failover / Failback shows fault status in a non-root setup</li> <li>#1654236: Provide an option to silence glfsheal logs</li> <li>#1654370: Bitrot: Scrub status say file is corrupted even it was just created AND 'path' in the output is broken</li> <li>#1655545: gfid heal does not happen when there is no source brick</li> </ul>"},{"location":"release-notes/5.3/","title":"Release notes for Gluster 5.3","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1 and 5.2 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th March, 2019</p>"},{"location":"release-notes/5.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.3/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.3/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.2 are listed below.</p> <ul> <li>#1623107: FUSE client's memory leak</li> <li>#1648642: fails to sync non-ascii (utf8) file and directory names, causes permanently faulty geo-replication state</li> <li>#1651323: Tracker bug for all leases related issues</li> <li>#1659563: gluster-blockd segfaults because of a null-dereference in shard.so</li> <li>#1659676: Memory leak: dict_t leak in rda_opendir</li> <li>#1660736: dht_revalidate may not heal attrs on the brick root</li> <li>#1660932: Fix tests/bugs/shard/zero-flag.t</li> <li>#1662200: NL cache: fix typos</li> <li>#1663131: [Ganesha] Ganesha failed on one node while exporting volumes in loop</li> <li>#1665803: [ovirt-gluster] Fuse mount crashed while deleting a 1 TB image file from ovirt</li> </ul>"},{"location":"release-notes/5.5/","title":"Release notes for Gluster 5.5","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2 and 5.3 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th May, 2019</p> <p>NOTE: Release 5.4 was never announced as there was a fix which prevented rolling upgrades from working correctly. Hence this release notes contains a skip from 5.3 till 5.5 in terms of issues addressed and also addresses the issue were rolling upgrades were broken.</p>"},{"location":"release-notes/5.5/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.5/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.5/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.3 are listed below.</p> <ul> <li>#1684385: [ovirt-gluster] Rolling gluster upgrade from 3.12.5 to 5.3 led to shard on-disk xattrs disappearing</li> <li>#1684569: Upgrade from 4.1 and 5 is broken</li> <li>#1687249: Error handling in /usr/sbin/gluster-eventsapi produces IndexError: tuple index out of range</li> <li>#1687687: [geo-rep]: Checksum mismatch when 2x2 vols are converted to arbiter</li> <li>#1649054: glustereventsd does not start on Ubuntu 16.04 LTS</li> <li>#1651246: Failed to dispatch handler</li> <li>#1665145: Writes on Gluster 5 volumes fail with EIO when \"cluster.consistent-metadata\" is set</li> <li>#1669382: [ovirt-gluster] Fuse mount crashed while creating the preallocated image</li> <li>#1670307: api: bad GFAPI_4.1.6 block</li> <li>#1671217: core: move \"dict is NULL\" logs to DEBUG log level</li> <li>#1671556: glusterfs FUSE client crashing every few days with 'Failed to dispatch handler'</li> <li>#1671611: Unable to delete directories that contain linkto files that point to itself.</li> <li>#1672248: quorum count not updated in nfs-server vol file</li> <li>#1672314: thin-arbiter: Check with thin-arbiter file before marking new entry change log</li> <li>#1673268: Fix timeouts so the tests pass on AWS</li> <li>#1678726: Integer Overflow possible in md-cache.c due to data type inconsistency</li> <li>#1679968: Upgrade from glusterfs 3.12 to gluster 4/5 broken</li> </ul>"},{"location":"release-notes/5.6/","title":"Release notes for Gluster 5.6","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3 and 5.5 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th June, 2019</p> <p>NOTE: Release 5.4 was never announced as there was a fix which prevented rolling upgrades from working correctly. Hence this release notes contains a skip from 5.3 till 5.5 in terms of issues addressed and also addresses the issue were rolling upgrades were broken.</p>"},{"location":"release-notes/5.6/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.6/#major-issues","title":"Major issues","text":"<p>Several users had issues around increased network usage after upgrading to 5.x release, this issue was tracked against bug#1673058 and is now addressed as a part of this minor release.</p>"},{"location":"release-notes/5.6/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.5 are listed below.</p> <ul> <li>#1673058: Network throughput usage increased x5</li> <li>#1690952: lots of \"Matching lock not found for unlock xxx\" when using disperse (ec) xlator</li> <li>#1694562: gfapi: do not block epoll thread for upcall notifications</li> <li>#1694612: glusterd leaking memory when issued gluster vol status all tasks continuosly</li> <li>#1695391: GF_LOG_OCCASSIONALLY API doesn't log at first instance</li> <li>#1695403: rm -rf fails with \"Directory not empty\"</li> <li>#1696147: Multiple shd processes are running on brick_mux environmet</li> </ul>"},{"location":"release-notes/5.8/","title":"Release notes for Gluster 5.8","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, and 5.6 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>NOTE: The 5.7 is dead by release due to #1728988 The packages weren't released. Please use 5.8. Next minor release tentative date: Week of 10th August, 2019</p>"},{"location":"release-notes/5.8/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.8/#major-issues","title":"Major issues","text":"<p>A issue that was blocking the build was addressed #1728988</p>"},{"location":"release-notes/5.8/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.6 are listed below.</p> <ul> <li>#1717282: ec ignores lock contention notifications for partially acquired locks</li> <li>#1629877: GlusterFS can be improved (clone for Gluster-5)</li> <li>#1695399: With parallel-readdir enabled, deleting a directory containing stale linkto files fails with \"Directory not empty\"</li> <li>#1699500: fix truncate lock to cover the write in tuncate clean</li> <li>#1699736: Fops hang when inodelk fails on the first fop</li> <li> <p>#1707198: VM stuck in a shutdown because of a pending fuse request</p> </li> <li> <p>#1720634: Upcall: Avoid sending upcalls for invalid Inode</p> </li> <li>#1720636: Ganesha-gfapi logs are flooded with error messages related to \"gf_uuid_is_null(gfid)) [Invalid argument]\" when lookups are running from multiple clients</li> <li>#1721106: Failed to create volume which transport_type is \"tcp,rdma\"</li> <li>#1728988: release-5.7 glupy is not getting built during packaging.</li> </ul>"},{"location":"release-notes/5.9/","title":"Release notes for Gluster 5.9","text":"<p>This is a bugfix release. The release notes for 5.0, 5.1, 5.2, 5.3, 5.5, 5.6 and 5.8 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 5 stable release.</p> <p>Next minor release tentative date: Week of 10th October, 2019</p>"},{"location":"release-notes/5.9/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/5.9/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/5.9/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5.8 are listed below.</p> <ul> <li>#1733881: [geo-rep]: gluster command not found while setting up a non-root session</li> <li>#1736342: potential deadlock while processing callbacks in gfapi</li> <li>#1737716: Unable to create geo-rep session on a non-root setup.</li> </ul>"},{"location":"release-notes/6.0/","title":"Release notes for Gluster 6.0","text":"<p>This is a major release that includes a range of code improvements and stability fixes along with a few features as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Major changes and features</li> <li>Major issues</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/6.0/#announcements","title":"Announcements","text":"<ol> <li> <p>Releases that receive maintenance updates post release 6 are, 4.1 and 5    (reference)</p> </li> <li> <p>Release 6 will receive maintenance updates around the 10th of every month    for the first 3 months post release (i.e Apr'19, May'19, Jun'19). Post the    initial 3 months, it will receive maintenance updates every 2 months till EOL.    (reference)</p> </li> <li> <p>A series of features/xlators have been deprecated in release 6 as follows,    for upgrade procedures from volumes that use these features to release 6 refer    to the release 6 upgrade guide.</p> </li> </ol> <p>This deprecation was announced at the gluster-users list here.</p> <p>Features deprecated:</p> <ul> <li>Block device (bd) xlator</li> <li>Decompounder feature</li> <li>Crypt xlator</li> <li>Symlink-cache xlator</li> <li>Stripe feature</li> <li>Tiering support (tier xlator and changetimerecorder)</li> </ul>"},{"location":"release-notes/6.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/6.0/#highlights","title":"Highlights","text":"<ul> <li>Several stability fixes addressing,</li> <li>coverity, clang-scan, address sanitizer and valgrind reported issues</li> <li>removal of unused and hence, deprecated code and features</li> <li>Client side inode garbage collection</li> <li>This release addresses one of the major concerns regarding FUSE mount     process memory footprint, by introducing client side inode garbage collection</li> <li>See standalone section for more details</li> <li>Performance Improvements</li> <li><code>--auto-invalidation</code> on FUSE mounts to leverage kernel page cache more     effectively</li> </ul> <p>Features are categorized into the following sections,</p> <ul> <li>Management</li> <li>Standalone</li> <li>Developer</li> </ul>"},{"location":"release-notes/6.0/#management","title":"Management","text":"<p>NOTE: There have been several stability improvements around the brick multiplexing feature</p>"},{"location":"release-notes/6.0/#glusterd2","title":"GlusterD2","text":"<p>GlusterD2 (or GD2, in short) was planned as the next generation management service for Gluster project.</p> <p>Currently, GD2s main focus is not replacing <code>glusterd</code>, but to serve as a thin management layer when using gluster with container orchestration systems.</p> <p>There is no specific update around GD2 provided as a part of this release.</p>"},{"location":"release-notes/6.0/#standalone","title":"Standalone","text":""},{"location":"release-notes/6.0/#1-client-side-inode-garbage-collection-via-lru-list","title":"1. client-side inode garbage collection via LRU list","text":"<p>A FUSE mount's inode cache can now be limited to a maximum number, thus reducing the memory footprint of FUSE mount processes.</p> <p>See the lru-limit option in <code>man 8 mount.glusterfs</code> for details.</p> <p>NOTE: Setting this to a low value (say less than 4000), will evict inodes from FUSE and Gluster caches at a much faster rate, and can cause performance degrades. The setting has to be determined based on the available client memory and required performance.</p>"},{"location":"release-notes/6.0/#2-glusterfind-tool-enhanced-with-a-filter-option","title":"2. Glusterfind tool enhanced with a filter option","text":"<p>glusterfind tool has an added option \"--type\", to be used with the \"--full\" option. The option supports finding and listing files or directories only, and defaults to both if not specified.</p> <p>Example usage with the pre and query commands are given below,</p> <ol> <li> <p>Pre command (reference):</p> </li> <li> <p>Lists both files and directories in OUTFILE:   <code>glusterfind pre SESSION_NAME VOLUME_NAME OUTFILE</code></p> </li> <li> <p>Lists only files in OUTFILE:   <code>glusterfind pre SESSION_NAME VOLUME_NAME OUTFILE --type f</code></p> </li> <li> <p>Lists only directories in OUTFILE:   <code>glusterfind pre SESSION_NAME VOLUME_NAME OUTFILE --type d</code></p> </li> <li> <p>Query command:</p> </li> <li> <p>Lists both files and directories in OUTFILE:   <code>glusterfind query VOLUME_NAME --full OUTFILE</code></p> </li> <li> <p>Lists only files in OUTFILE:   <code>glusterfind query VOLUME_NAME --full --type f OUTFILE</code></p> </li> <li> <p>Lists only directories in OUTFILE:   <code>glusterfind query VOLUME_NAME --full --type d OUTFILE</code></p> </li> </ol>"},{"location":"release-notes/6.0/#3-fuse-mounts-are-enhanced-to-handle-interrupts-to-blocked-lock-requests","title":"3. FUSE mounts are enhanced to handle interrupts to blocked lock requests","text":"<p>FUSE mounts are enhanced to handle interrupts to blocked locks.</p> <p>For example, scripts using the flock (<code>man 1 flock</code>) utility without the -n(nonblock) option against files on a FUSE based gluster mount, can now be interrupted when the lock is not granted in time or using the -w option with the same utility.</p>"},{"location":"release-notes/6.0/#4-optimizedpass-through-distribute-functionality-for-1-way-distributed-volumes","title":"4. Optimized/pass-through distribute functionality for 1-way distributed volumes","text":"<p>NOTE: There are no user controllable changes with this feature</p> <p>The distribute xlator now skips unnecessary checks and operations when the distribute count is one for a volume, resulting in improved performance.</p>"},{"location":"release-notes/6.0/#5-options-introduced-to-disable-invalidations-of-kernel-page-cache","title":"5. Options introduced to disable invalidations of kernel page cache","text":"<p>For workloads, where multiple FUSE client mounts do not concurrently operate on any files in the volume, it is now possible to maintain a longer duration kernel page cache using the following options in conjunction,</p> <ul> <li>Setting <code>--auto-invalidation</code> option to \"no\" on the glusterfs FUSE mount   process</li> <li>Disabling the volume option <code>performance.global-cache-invalidation</code></li> </ul> <p>This enables better performance as the data is served from the kernel page cache where possible.</p>"},{"location":"release-notes/6.0/#6-changes-to-gluster-based-smb-share-management","title":"6. Changes to gluster based SMB share management","text":"<p>Previously all GlusterFS volumes were being exported by default via smb.conf in a Samba-CTDB setup. This includes creating a share section for CTDB lock volume too which is not recommended. Along with few syntactical errors these scripts failed to execute in a non-Samba setup in the absence of necessary configuration and binary files.</p> <p>Hereafter newly created GlusterFS volumes are not exported as SMB share via Samba unless either of 'user.cifs' or 'user.smb' volume set options are enabled on the volume. The existing GlusterFS volume share sections in smb.conf will remain unchanged.</p>"},{"location":"release-notes/6.0/#7-ctime-feature-is-enabled-by-default","title":"7. ctime feature is enabled by default","text":"<p>The ctime feature which maintains (c/m) time consistency across replica and disperse subvolumes is enabled by default.</p> <p>Also, with this release, a single option is provided to enable/disable ctime feature,</p> <pre><code>#gluster vol set &lt;volname&gt; ctime &lt;on/off&gt;\n</code></pre> <p>NOTE: The time information used is from clients, hence it's required that clients are synced with respect to their times, using NTP or other such means.</p> <p>Limitations:</p> <ul> <li>Mounting gluster volume with time attribute options (noatime, realatime...)   is not supported with this feature</li> <li>This feature does not guarantee consistent time for directories if the hashed   sub-volume for the directory is down</li> <li>Directory listing is not supported with this feature, and may report   inconsistent time information</li> <li>Older files created before upgrade, would witness update of ctime upon   accessing after upgrade BUG:1593542</li> </ul>"},{"location":"release-notes/6.0/#developer","title":"Developer","text":""},{"location":"release-notes/6.0/#1-gluster-code-can-be-compiled-and-executed-using-tsan","title":"1. Gluster code can be compiled and executed using TSAN","text":"<p>While configuring the sources for a build use the extra option <code>--enable-tsan</code> to enable thread sanitizer based builds.</p>"},{"location":"release-notes/6.0/#2-gfapi-a-class-of-apis-have-been-enhanced-to-return-prepost-gluster_stat-information","title":"2. gfapi: A class of APIs have been enhanced to return pre/post gluster_stat information","text":"<p>A set of apis have been enhanced to return pre/post gluster_stat information. Applications using gfapi would need to adapt to the newer interfaces to compile against release-6 apis. Pre-compiled applications, or applications using the older API SDK will continue to work as before.</p>"},{"location":"release-notes/6.0/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-5 are listed below.</p> <ul> <li>#1138841: allow the use of the CIDR format with auth.allow</li> <li>#1236272: socket: Use newer system calls that provide better interface/performance on Linux/*BSD when available</li> <li>#1243991: \"gluster volume set  group \" is not in the help text <li>#1285126: RFE: GlusterFS NFS does not implement an all_squash volume setting</li> <li>#1343926: port-map: let brick choose its own port</li> <li>#1364707: Remove deprecated stripe xlator</li> <li>#1427397: script to strace processes consuming high CPU</li> <li>#1467614: Gluster read/write performance improvements on NVMe backend</li> <li>#1486532: need a script to resolve backtraces</li> <li>#1511339: In Replica volume 2*2 when quorum is set, after glusterd restart nfs server is coming up instead of self-heal daemon</li> <li>#1535495: Add option -h and --help to gluster cli</li> <li>#1535528: Gluster cli show no help message in prompt</li> <li>#1560561: systemd service file enhancements</li> <li>#1560969: Garbage collect inactive inodes in fuse-bridge</li> <li>#1564149: Agree upon a coding standard, and automate check for this in smoke</li> <li>#1564890: mount.glusterfs: can't shift that many</li> <li>#1575836: logic in S30samba-start.sh hook script needs tweaking</li> <li>#1579788: Thin-arbiter: Have the state of volume in memory</li> <li>#1582516: libgfapi: glfs init fails on afr volume with ctime feature enabled</li> <li>#1590385: Refactor dht lookup code</li> <li>#1593538: ctime: Access time is different with in same replica/EC volume</li> <li>#1596787: glusterfs rpc-clnt.c: error returned while attempting to connect to host: (null), port 0</li> <li>#1598345: gluster get-state command is crashing glusterd process when geo-replication is configured</li> <li>#1600145: [geo-rep]: Worker still ACTIVE after killing bricks</li> <li>#1605056: [RHHi] Mount hung and not accessible</li> <li>#1605077: If a node disconnects during volume delete, it assumes deleted volume as a freshly created volume when it is back online</li> <li>#1608512: cluster.server-quorum-type help text is missing possible settings</li> <li>#1624006: /var/run/gluster/metrics/ wasn't created automatically</li> <li>#1624332: [Thin-arbiter]: Add tests for thin arbiter feature</li> <li>#1624724: ctime: Enable ctime feature by default and also improve usability by providing single option to enable</li> <li>#1624796: mkdir -p fails with \"No data available\" when root-squash is enabled</li> <li>#1625850: tests: fixes to bug-1015990-rep.t</li> <li>#1625961: Writes taking very long time leading to system hogging</li> <li>#1626313: fix glfs_fini related problems</li> <li>#1626610: [USS]: Change gf_log to gf_msg</li> <li>#1626994: split-brain observed on parent dir</li> <li>#1627610: glusterd crash in regression build</li> <li>#1627620: SAS job aborts complaining about file doesn't exist</li> <li>#1628194: tests/dht: Additional tests for dht operations</li> <li>#1628605: One client hangs when another client loses communication with bricks during intensive write I/O</li> <li>#1628664: Update op-version from 4.2 to 5.0</li> <li>#1629561: geo-rep: geo-rep config set fails to set rsync-options</li> <li>#1630368: Low Random write IOPS in VM workloads</li> <li>#1630798: Add performance options to virt profile</li> <li>#1630804: libgfapi-python: test_listdir_with_stat and test_scandir failure on release 5 branch</li> <li>#1630922: glusterd crashed and core generated at gd_mgmt_v3_unlock_timer_cbk after huge number of volumes were created</li> <li>#1631128: rpc marks brick disconnected from glusterd &amp; volume stop transaction gets timed out</li> <li>#1631357: glusterfsd keeping fd open in index xlator after stop the volume</li> <li>#1631886: Update database profile settings for gluster</li> <li>#1632161: [Disperse] : Set others.eager-lock on for ec-1468261.t test to pass</li> <li>#1632236: Provide indication at the console or in the logs about the progress being made with changelog processing.</li> <li>#1632503: FUSE client segfaults when performance.md-cache-statfs is enabled for a volume</li> <li>#1632717: EC crashes when running on non 64-bit architectures</li> <li>#1632889: 'df' shows half as much space on volume after upgrade to RHGS 3.4</li> <li>#1633926: Script to collect system-stats</li> <li>#1634102: MAINTAINERS: Add sunny kumar as a peer for snapshot component</li> <li>#1634220: md-cache: some problems of cache virtual glusterfs ACLs for ganesha</li> <li>#1635050: [SNAPSHOT]: with brick multiplexing, snapshot restore will make glusterd send wrong volfile</li> <li>#1635145: I/O errors observed on the application side after the creation of a 'linkto' file</li> <li>#1635480: Correction for glusterd memory leak because use \"gluster volume status volume_name --detail\" continuesly (cli)</li> <li>#1635593: glusterd crashed in cleanup_and_exit when glusterd comes up with upgrade mode.</li> <li>#1635688: Keep only the valid (maintained/supported) components in the build</li> <li>#1635820: Seeing defunt translator and discrepancy in volume info when issued from node which doesn't host bricks in that volume</li> <li>#1635863: Gluster peer probe doesn't work for IPv6</li> <li>#1636570: Cores due to SIGILL during multiplex regression tests</li> <li>#1636631: Issuing a \"heal ... full\" on a disperse volume causes permanent high CPU utilization.</li> <li>#1637196: Disperse volume 'df' usage is extremely incorrect after replace-brick.</li> <li>#1637249: gfid heal does not happen when there is no source brick</li> <li>#1637802: data-self-heal in arbiter volume results in stale locks.</li> <li>#1637934: glusterfsd is keeping fd open in index xlator</li> <li>#1638453: Gfid mismatch seen on shards when lookup and mknod are in progress at the same time</li> <li>#1639599: Improve support-ability of glusterfs</li> <li>#1640026: improper checking to avoid identical mounts</li> <li>#1640066: [Stress] : Mismatching iatt in glustershd logs during MTSH and continous IO from Ganesha mounts</li> <li>#1640165: io-stats: garbage characters in the filenames generated</li> <li>#1640489: Invalid memory read after freed in dht_rmdir_readdirp_cbk</li> <li>#1640495: [GSS] Fix log level issue with brick mux</li> <li>#1640581: [AFR] : Start crawling indices and healing only if both data bricks are UP in replica 2 (thin-arbiter)</li> <li>#1641344: Spurious failures in bug-1637802-arbiter-stale-data-heal-lock.t</li> <li>#1642448: EC volume getting created without any redundant brick</li> <li>#1642597: tests/bugs/glusterd/optimized-basic-testcases-in-cluster.t failing</li> <li>#1642800: socket: log voluntary socket close/shutdown and EOF on socket at INFO log-level</li> <li>#1642807: remove 'tier' translator from build and code</li> <li>#1642810: remove glupy from code and build</li> <li>#1642850: glusterd: raise default transport.listen-backlog to 1024</li> <li>#1642865: geo-rep: geo-replication gets stuck after file rename and gfid conflict</li> <li>#1643349: [OpenSSL] : auth.ssl-allow has no option description.</li> <li>#1643402: [Geo-Replication] Geo-rep faulty sesion because of the directories are not synced to slave.</li> <li>#1643519: Provide an option to silence glfsheal logs</li> <li>#1643929: geo-rep: gluster-mountbroker status crashes</li> <li>#1643932: geo-rep: On gluster command failure on slave, worker crashes with python3</li> <li>#1643935: cliutils: geo-rep cliutils' usage of Popen is not python3 compatible</li> <li>#1644129: Excessive logging in posix_update_utime_in_mdata</li> <li>#1644164: Use GF_ATOMIC ops to update inode-&gt;nlookup</li> <li>#1644629: [rpcsvc] Single request Queue for all event threads is a performance bottleneck</li> <li>#1644755: CVE-2018-14651 glusterfs: glusterfs server exploitable via symlinks to relative paths [fedora-all]</li> <li>#1644756: CVE-2018-14653 glusterfs: Heap-based buffer overflow via \"gf_getspec_req\" RPC message [fedora-all]</li> <li>#1644757: CVE-2018-14659 glusterfs: Unlimited file creation via \"GF_XATTR_IOSTATS_DUMP_KEY\" xattr allows for denial of service [fedora-all]</li> <li>#1644758: CVE-2018-14660 glusterfs: Repeat use of \"GF_META_LOCK_KEY\" xattr allows for memory exhaustion [fedora-all]</li> <li>#1644760: CVE-2018-14654 glusterfs: \"features/index\" translator can create arbitrary, empty files [fedora-all]</li> <li>#1644763: CVE-2018-14661 glusterfs: features/locks translator passes an user-controlled string to snprintf without a proper format string resulting in a denial of service [fedora-all]</li> <li>#1645986: tests/bugs/glusterd/optimized-basic-testcases-in-cluster.t failing in distributed regression</li> <li>#1646104: [Geo-rep]: Faulty geo-rep sessions due to link ownership on slave volume</li> <li>#1646728: [snapview-server]:forget glfs handles during inode forget</li> <li>#1646869: gNFS crashed when processing \"gluster v status [vol] nfs clients\"</li> <li>#1646892: Portmap entries showing stale brick entries when bricks are down</li> <li>#1647029: can't enable shared-storage</li> <li>#1647074: when peer detach is issued, throw a warning to remount volumes using other cluster IPs before proceeding</li> <li>#1647651: gfapi: fix bad dict setting of lease-id</li> <li>#1648237: Bumping up of op-version times out on a scaled system with ~1200 volumes</li> <li>#1648298: dht_revalidate may not heal attrs on the brick root</li> <li>#1648687: Incorrect usage of local-&gt;fd in afr_open_ftruncate_cbk</li> <li>#1648768: Tracker bug for all leases related issues</li> <li>#1649709: profile info doesn't work when decompounder xlator is not in graph</li> <li>#1650115: glusterd requests are timing out in a brick multiplex setup</li> <li>#1650389: rpc: log flooding with ENODATA errors</li> <li>#1650403: Memory leaks observed in brick-multiplex scenario on volume start/stop loop</li> <li>#1650893: fails to sync non-ascii (utf8) file and directory names, causes permanently faulty geo-replication state</li> <li>#1651059: [OpenSSL] : Retrieving the value of \"client.ssl\" option,before SSL is set up, fails .</li> <li>#1651165: Race in per-thread mem-pool when a thread is terminated</li> <li>#1651431: Resolve memory leak at the time of graph init</li> <li>#1651439: gluster-NFS crash while expanding volume</li> <li>#1651463: glusterd can't regenerate volfiles in container storage upgrade workflow</li> <li>#1651498: [geo-rep]: Failover / Failback shows fault status in a non-root setup</li> <li>#1651584: [geo-rep]: validate the config checkpoint date and fail if it is not is exact format hh:mm:ss</li> <li>#1652118: default cluster.max-bricks-per-process to 250</li> <li>#1652430: glusterd fails to start, when glusterd is restarted in a loop for every 45 seconds while volume creation is in-progress</li> <li>#1652852: \"gluster volume get\" doesn't show real default value for server.tcp-user-timeout</li> <li>#1652887: Geo-rep help looks to have a typo.</li> <li>#1652911: Add no-verify and ssh-port n options for create command in man page</li> <li>#1653277: bump up default value of server.event-threads</li> <li>#1653359: Self-heal:Improve heal performance</li> <li>#1653565: tests/geo-rep: Add arbiter volume test case</li> <li>#1654138: Optimize for virt store fails with distribute volume type</li> <li>#1654181: glusterd segmentation fault: glusterd_op_ac_brick_op_failed (event=0x7f44e0e63f40, ctx=0x0) at glusterd-op-sm.c:5606</li> <li>#1654187: [geo-rep]: RFE - Make slave volume read-only while setting up geo-rep (by default)</li> <li>#1654270: glusterd crashed with seg fault possibly during node reboot while volume creates and deletes were happening</li> <li>#1654521: io-stats outputs json numbers as strings</li> <li>#1654805: Bitrot: Scrub status say file is corrupted even it was just created AND 'path' in the output is broken</li> <li>#1654917: cleanup resources in server_init in case of failure</li> <li>#1655050: automatic split resolution with size as policy should not work on a directory which is in metadata splitbrain</li> <li>#1655052: Automatic Splitbrain with size as policy must not resolve splitbrains when both the copies are of same size</li> <li>#1655827: [Glusterd]: Glusterd crash while expanding volumes using heketi</li> <li>#1655854: Converting distribute to replica-3/arbiter volume fails</li> <li>#1656100: configure.ac does not enforce automake --foreign</li> <li>#1656264: Fix tests/bugs/shard/zero-flag.t</li> <li>#1656348: Commit c9bde3021202f1d5c5a2d19ac05a510fc1f788ac causes ls slowdown</li> <li>#1656517: [GSS] Gluster client logs filling with 0-glusterfs-socket: invalid port messages</li> <li>#1656682: brick memory consumed by volume is not getting released even after delete</li> <li>#1656771: [Samba-Enhancement] Need for a single group command for setting up volume options for samba</li> <li>#1656951: cluster.max-bricks-per-process 250 not working as expected</li> <li>#1657607: Convert nr_files to gf_atomic in posix_private structure</li> <li>#1657744: quorum count not updated in nfs-server vol file</li> <li>#1657783: Rename of a file leading to stale reads</li> <li>#1658045: Resolve memory leak in mgmt_pmap_signout_cbk</li> <li>#1658116: python2 to python3 compatibilty issues</li> <li>#1659327: 43% regression in small-file sequential read performance</li> <li>#1659432: Memory leak: dict_t leak in rda_opendir</li> <li>#1659708: Optimize by not stopping (restart) selfheal deamon (shd) when a volume is stopped unless it is the last volume</li> <li>#1659857: change max-port value in glusterd vol file to 60999</li> <li>#1659868: glusterd : features.selinux was missing in glusterd-volume-set file</li> <li>#1659869: improvements to io-cache</li> <li>#1659971: Setting slave volume read-only option by default results in failure</li> <li>#1660577: [Ganesha] Ganesha failed on one node while exporting volumes in loop</li> <li>#1660701: Use adaptive mutex in rpcsvc_program_register to improve performance</li> <li>#1661214: Brick is getting OOM for tests/bugs/core/bug-1432542-mpx-restart-crash.t</li> <li>#1662089: NL cache: fix typos</li> <li>#1662264: thin-arbiter: Check with thin-arbiter file before marking new entry change log</li> <li>#1662368: [ovirt-gluster] Fuse mount crashed while deleting a 1 TB image file from ovirt</li> <li>#1662679: Log connection_id in statedump for posix-locks as well for better debugging experience</li> <li>#1662906: Longevity: glusterfsd(brick process) crashed when we do volume creates and deletes</li> <li>#1663077: memory leak in mgmt handshake</li> <li>#1663102: Change default value for client side heal to off for replicate volumes</li> <li>#1663223: profile info command is not displaying information of bricks which are hosted on peers</li> <li>#1663243: rebalance status does not display localhost statistics when op-version is not bumped up</li> <li>#1664122: do not send bit-rot virtual xattrs in lookup response</li> <li>#1664124: Improve information dumped from io-threads in statedump</li> <li>#1664551: Wrong description of localtime-logging in manpages</li> <li>#1664647: dht: Add NULL check for stbuf in dht_rmdir_lookup_cbk</li> <li>#1664934: glusterfs-fuse client not benefiting from page cache on read after write</li> <li>#1665038: glusterd crashed while running \"gluster get-state glusterd odir /get-state\"</li> <li>#1665332: Wrong offset is used in offset for zerofill fop</li> <li>#1665358: allow regression to not run tests with nfs, if nfs is disabled.</li> <li>#1665363: Fix incorrect definition in index-mem-types.h</li> <li>#1665656: testcaes glusterd/add-brick-and-validate-replicated-volume-options.t is crash while brick_mux is enable</li> <li>#1665826: [geo-rep]: Directory renames not synced to slave in Hybrid Crawl</li> <li>#1666143: Several fixes on socket pollin and pollout return value</li> <li>#1666833: move few recurring logs to DEBUG level.</li> <li>#1667779: glusterd leaks about 1GB memory per day on single machine of storage pool</li> <li>#1667804: Unable to delete directories that contain linkto files that point to itself.</li> <li>#1667905: dict_leak in __glusterd_handle_cli_uuid_get function</li> <li>#1668190: Block hosting volume deletion via heketi-cli failed with error \"target is busy\" but deleted from gluster backend</li> <li>#1668268: Unable to mount gluster volume</li> <li>#1669077: [ovirt-gluster] Fuse mount crashed while creating the preallocated image</li> <li>#1669937: Rebalance : While rebalance is in progress , SGID and sticky bit which is set on the files while file migration is in progress is seen on the mount point</li> <li>#1670031: performance regression seen with smallfile workload tests</li> <li>#1670253: Writes on Gluster 5 volumes fail with EIO when \"cluster.consistent-metadata\" is set</li> <li>#1670259: New GFID file recreated in a replica set after a GFID mismatch resolution</li> <li>#1671213: core: move \"dict is NULL\" logs to DEBUG log level</li> <li>#1671637: geo-rep: Issue with configparser import</li> <li>#1672205: 'gluster get-state' command fails if volume brick doesn't exist.</li> <li>#1672818: GlusterFS 6.0 tracker</li> <li>#1673267: Fix timeouts so the tests pass on AWS</li> <li>#1673972: insufficient logging in glusterd_resolve_all_bricks</li> <li>#1674364: glusterfs-fuse client not benefiting from page cache on read after write</li> <li>#1676429: distribute: Perf regression in mkdir path</li> <li>#1677260: rm -rf fails with \"Directory not empty\"</li> <li>#1678570: glusterfs FUSE client crashing every few days with 'Failed to dispatch handler'</li> <li>#1679004: With parallel-readdir enabled, deleting a directory containing stale linkto files fails with \"Directory not empty\"</li> <li>#1679275: dht: fix double extra unref of inode at heal path</li> <li>#1679965: Upgrade from glusterfs 3.12 to gluster 4/5 broken</li> <li>#1679998: GlusterFS can be improved</li> <li>#1680020: Integer Overflow possible in md-cache.c due to data type inconsistency</li> <li>#1680585: remove glupy from code and build</li> <li>#1680586: Building RPM packages with _for_fedora_koji_builds enabled fails on el6</li> <li>#1683008: glustereventsd does not start on Ubuntu 16.04 LTS</li> <li>#1683506: remove experimental xlators informations from glusterd-volume-set.c</li> <li>#1683716: glusterfind: revert shebangs to #!/usr/bin/python3</li> <li>#1683880: Multiple shd processes are running on brick_mux environmet</li> <li>#1683900: Failed to dispatch handler</li> <li>#1684029: upgrade from 3.12, 4.1 and 5 to 6 broken</li> <li>#1684777: gNFS crashed when processing \"gluster v profile [vol] info nfs\"</li> <li>#1685771: glusterd memory usage grows at 98 MB/h while being monitored by RHGSWA</li> <li>#1686364: [ovirt-gluster] Rolling gluster upgrade from 3.12.5 to 5.3 led to shard on-disk xattrs disappearing</li> <li>#1686399: listing a file while writing to it causes deadlock</li> <li>#1686875: packaging: rdma on s390x, unnecessary ldconfig scriptlets</li> <li>#1687248: Error handling in /usr/sbin/gluster-eventsapi produces IndexError: tuple index out of range</li> <li>#1687672: [geo-rep]: Checksum mismatch when 2x2 vols are converted to arbiter</li> <li>#1688218: Brick process has coredumped, when starting glusterd</li>"},{"location":"release-notes/6.1/","title":"Release notes for Gluster 6.1","text":"<p>This is a bugfix release. The release notes for 6.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th May, 2019</p>"},{"location":"release-notes/6.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":""},{"location":"release-notes/6.1/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.0 are listed below.</p> <ul> <li>#1679904: client log flooding with intentional socket shutdown message when a brick is down</li> <li>#1690950: lots of \"Matching lock not found for unlock xxx\" when using disperse (ec) xlator</li> <li>#1691187: fix Coverity CID 1399758</li> <li>#1692101: Network throughput usage increased x5</li> <li>#1692957: rpclib: slow floating point math and libm</li> <li>#1693155: Excessive AFR messages from gluster showing in RHGSWA.</li> <li>#1693223: [Disperse] : Client side heal is not removing dirty flag for some of the files.</li> <li>#1693992: Thin-arbiter minor fixes</li> <li>#1694002: Geo-re: Geo replication failing in \"cannot allocate memory\"</li> <li>#1694561: gfapi: do not block epoll thread for upcall notifications</li> <li>#1694610: glusterd leaking memory when issued gluster vol status all tasks continuosly</li> <li>#1695436: geo-rep session creation fails with IPV6</li> <li>#1695445: ssh-port config set is failing</li> <li>#1697764: [cluster/ec] : Fix handling of heal info cases without locks</li> <li>#1698471: ctime feature breaks old client to connect to new server</li> <li>#1699198: Glusterfs create a flock lock by anonymous fd, but can't release it forever.</li> <li>#1699319: Thin-Arbiter SHD minor fixes</li> <li>#1699499: fix truncate lock to cover the write in tuncate clean</li> <li>#1699703: ctime: Creation of tar file on gluster mount throws warning \"file changed as we read it\"</li> <li>#1699713: glusterfs build is failing on rhel-6</li> <li>#1699714: Brick is not able to detach successfully in brick_mux environment</li> <li>#1699715: Log level changes do not take effect until the process is restarted</li> <li>#1699731: Fops hang when inodelk fails on the first fop</li> </ul>"},{"location":"release-notes/6.10/","title":"Release notes for Gluster 6.10","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8 and 6.9 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: This is last minor release of 6. Users are highly encouraged to upgrade to newer releases of GlusterFS.</p>"},{"location":"release-notes/6.10/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.9 are listed below.</p> <ul> <li>#1740494: Fencing: Added the tcmu-runner ALUA feature support but after one of node is rebooted the glfs_file_lock() get stucked</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1016 [bug:1795609] glusterfsd memory leak observed after enable tls</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1127 Mount crash during background shard cleanup</li> <li>#1179 gnfs split brain when 1 server in 3x1 down (high load)</li> <li>#1220 cluster/ec: return correct error code and log the message in ...</li> <li>#1223 Failure of tests/basic/gfapi/gfapi-copy-file-range.t</li> <li>#1254 Prioritize ENOSPC over other lesser priority errors</li> <li>#1303 Failures in rebalance due to [Input/output error]</li> <li>#1307 Spurious failure of tests/bug-844688.t: test bug-844688.t on ...</li> <li>#1349 Issue for backporting https://review.gluster.org//c/glusterf...</li> <li>#1362 [bug: 1687326]: Revoke access from nodes using Certificate Re...</li> </ul>"},{"location":"release-notes/6.2/","title":"Release notes for Gluster 6.2","text":"<p>This is a bugfix release. The release notes for 6.0 and 6.1 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th June, 2019</p>"},{"location":"release-notes/6.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.2/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.1 are listed below.</p> <ul> <li>#1699917: I/O error on writes to a disperse volume when replace-brick is executed</li> <li>#1701818: Syntactical errors in hook scripts for managing SELinux context on bricks #2 (S10selinux-label-brick.sh + S10selinux-del-fcontext.sh)</li> <li>#1702271: Memory accounting information is not always accurate</li> <li>#1702734: ctime: Logs are flooded with \"posix set mdata failed, No ctime\" error during open</li> <li>#1703759: statedump is not capturing info related to glusterd</li> <li>#1707393: Refactor dht lookup code</li> <li>#1709130: thin-arbiter lock release fixes</li> <li>#1709143: [Thin-arbiter] : send correct error code in case of failure</li> <li>#1709660: Glusterfsd crashing in ec-inode-write.c, in GF_ASSERT</li> <li>#1709685: Geo-rep: Value of pending entry operations in detail status output is going up after each synchronization.</li> <li>#1709734: Geo-rep: Data inconsistency while syncing heavy renames with constant destination name</li> <li>#1709737: geo-rep: Always uses rsync even with use_tarssh set to true</li> <li>#1709738: geo-rep: Sync hangs with tarssh as sync-engine</li> <li>#1712220: tests/geo-rep: arequal checksum comparison always succeeds</li> <li>#1712223: geo-rep: With heavy rename workload geo-rep log if flooded</li> </ul>"},{"location":"release-notes/6.3/","title":"Release notes for Gluster 6.3","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1 and 6.2 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th July, 2019</p>"},{"location":"release-notes/6.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.3/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.3/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.2 are listed below.</p> <ul> <li>#1714172: ec ignores lock contention notifications for partially acquired locks</li> <li>#1715012: Failure when glusterd is configured to bind specific IPv6 address. If bind-address is IPv6, *addr_len will be non-zero and it goes to ret = -1 branch, which will cause listen failure eventually</li> </ul>"},{"location":"release-notes/6.4/","title":"Release notes for Gluster 6.4","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2 and 6.3 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 10th August, 2019</p>"},{"location":"release-notes/6.4/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.4/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.4/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.3 are listed below.</p> <ul> <li>#1679998: GlusterFS can be improved</li> <li>#1683815: Memory leak when peer detach fails</li> <li>#1716812: Failed to create volume which transport_type is \"tcp,rdma\"</li> <li>#1716871: Image size as reported from the fuse mount is incorrect</li> <li>#1718227: SELinux context labels are missing for newly added bricks using add-brick command</li> <li>#1720633: Upcall: Avoid sending upcalls for invalid Inode</li> <li>#1720635: Ganesha-gfapi logs are flooded with error messages related to \"gf_uuid_is_null(gfid)) [Invalid argument]\" when lookups are running from multiple clients</li> <li>#1720993: tests/features/subdir-mount.t is failing for brick_mux regrssion</li> <li>#1721105: Failed to create volume which transport_type is \"tcp,rdma\"</li> <li>#1721783: ctime changes: tar still complains file changed as we read it if uss is enabled</li> <li>#1722805: Healing not proceeding during in-service upgrade on a disperse volume</li> <li>#1723658: [In-service] Post upgrade glusterd is crashing with a backtrace on the upgraded node while issuing gluster volume status from non-upgraded nodes</li> <li>#1723659: ESTALE change in fuse breaks get_real_filename implementation</li> <li>#1724210: Incorrect power of two calculation in mem_pool_get_fn</li> <li>#1724558: [Ganesha]: truncate operation not updating the ctime</li> <li>#1726294: DHT: severe memory leak in dht rename</li> <li>#1726327: tests/features/subdir-mount.t is failing for brick_mux regrssion</li> <li>#1727984: User serviceable snapshots (USS) are not accessible after changing transport.socket.bind-address of glusterd</li> <li>#1728126: [In-service] Post upgrade glusterd is crashing with a backtrace on the upgraded node while issuing gluster volume status from non-upgraded nodes</li> <li>#1729952: Deadlock when generating statedumps</li> </ul>"},{"location":"release-notes/6.5/","title":"Release notes for Gluster 6.5","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3 and 6.4 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 30th October, 2019</p>"},{"location":"release-notes/6.5/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.5/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.5/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.4 are listed below.</p> <ul> <li>#1716848: DHT: directory permissions are wiped out</li> <li>#1730545: gluster v geo-rep status command timing out</li> <li>#1731509: snapd crashes sometimes</li> <li>#1736341: potential deadlock while processing callbacks in gfapi- #1733880: [geo-rep]: gluster command not found while setting up a non-root session</li> <li>#1733885: ctime: Upgrade/Enabling ctime feature wrongly updates older files with latest {a|m|c}time</li> <li>#1737712: Unable to create geo-rep session on a non-root setup.</li> <li>#1737745: ctime: When healing ctime xattr for legacy files, if multiple clients access and modify the same file, the ctime might be updated incorrectly.</li> <li>#1737746: ctime: nfs client gets bad ctime for copied file which is on glusterfs disperse volume with ctime on</li> </ul>"},{"location":"release-notes/6.6/","title":"Release notes for Gluster 6.6","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3, 6.4 and 6.5 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 30th December, 2019</p>"},{"location":"release-notes/6.6/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.6/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.6/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.5 are listed below.</p> <ul> <li>#1726175: CentOs 6 GlusterFS client creates files with time 01/01/1970</li> <li>#1737141: read() returns more than file size when using direct I/O</li> <li>#1739320: The result (hostname) of getnameinfo for all bricks (ipv6 addresses) are the same, while they are not.</li> <li>#1739335: Multiple disconnect events being propagated for the same child</li> <li>#1739451: An Input/Output error happens on a disperse volume when doing unaligned writes to a sparse file</li> <li>#1740525: event: rename eventXXX with gf prefixed to avoid crash when apps linked libevent at the same time</li> <li>#1741044: atime/mtime is not restored after healing for entry self heals</li> <li>#1741402: READDIRP incorrectly updates posix-acl inode ctx</li> <li>#1743219: glusterd start is failed and throwing an error Address already in use</li> <li>#1743782: Windows client fails to copy large file to GlusterFS volume share with fruit and streams_xattr VFS modules via Samba</li> <li>#1743988: Setting cluster.heal-timeout requires volume restart</li> <li>#1745421: ./tests/bugs/glusterd/bug-1595320.t is failing</li> <li>#1746118: capture stat failure error while setting the gfid</li> <li>#1746138: ctime: If atime is updated via utimensat syscall ctime is not getting updated</li> <li>#1749157: bug-1402841.t-mt-dir-scan-race.t fails spuriously</li> <li>#1749307: Failures in remove-brick due to [Input/output error] errors</li> <li>#1750228: [geo-rep]: Non-root - Unable to set up mountbroker root directory and group</li> <li>#1751557: syncop: Bail out if frame creation fails</li> <li>#1752413: ctime: Cannot see the \"trusted.glusterfs.mdata\" xattr for directory on a new brick after rebalance</li> <li>#1753561: Custom xattrs are not healed on newly added brick</li> <li>#1753571: interrupts leak memory</li> <li>#1755679: Segmentation fault occurs while truncate file</li> <li>#1755785: git clone fails on gluster volumes exported via nfs-ganesha</li> <li>#1760361: packaging: remove leftover bd cruft in rpm .spec.in</li> <li>#1760706: glustershd can not decide heald_sinks, and skip repair, so some entries lingering in volume heal info</li> <li>#1760792: afr: support split-brain CLI for replica 3</li> <li>#1761907: Rebalance causing IO Error - File descriptor in bad state</li> <li>#1763028: [geo-rep] sync_method showing rsync instead of tarssh post in-service upgrade</li> <li>#1764171: [Upgrade] Config files are not upgraded to new version</li> <li>#1764172: geo-replication sessions going faulty</li> <li>#1764174: geo-rep syncing significantly behind and also only one of the directories are synced with tracebacks seen</li> <li>#1764176: geo-rep: Changelog archive file format is incorrect</li> <li>#1764178: tests/geo-rep: Add test case to validate non-root geo-replication setup</li> <li>#1764183: [GSS] geo-rep entering into faulty state with OSError: [Errno 13] Permission denied</li> <li>#1765433: test: fix non-root geo-rep test case</li> </ul>"},{"location":"release-notes/6.7/","title":"Release notes for Gluster 6.7","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3, 6.4, 6.5 and 6.6 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Tentative date for next minor release: Week of 29th February, 2020</p>"},{"location":"release-notes/6.7/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.7/#major-issues","title":"Major issues","text":"<p>We have come across a issue where the client undergoing IO crashes when a rebalance is running.</p> <p>https://bugzilla.redhat.com/show_bug.cgi?id=1786983</p> <p>Workaround: We can avoid this issue by stopping the IOs while running rebalance.</p> <p>Fix: The fix is ready and will be a part of the next release 6.8 which is supposed to be out around 29th of February. https://review.gluster.org/#/c/glusterfs/+/23938/</p>"},{"location":"release-notes/6.7/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.6 are listed below.</p> <ul> <li>#1739446: [Disperse] : Client side heal is not removing dirty flag for some of the files.</li> <li>#1739449: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1739450: Open fd heal should filter O_APPEND/O_EXCL</li> <li>#1749625: [GlusterFS 6.1] GlusterFS brick process crash</li> <li>#1766425: cgroup control-cpu-load.sh script not working</li> <li>#1768726: Memory leak in glusterfsd process</li> <li>#1770100: [geo-rep]: Geo-rep goes FAULTY with OSError</li> <li>#1771842: [CENTOS 6] Geo-replication session not starting after creation</li> <li>#1778182: glusterfsd crashed with \"'MemoryError' Cannot access memory at address\"</li> <li>#1782495: GlusterFS brick process crash</li> <li>#1784796: tests/00-geo-rep/00-georep-verify-non-root-setup.t fail on freshly installed builder</li> </ul>"},{"location":"release-notes/6.8/","title":"Release notes for Gluster 6.8","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.7, and 6.8 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Tentative date for next minor release: Week of 30th April, 2020</p>"},{"location":"release-notes/6.8/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.8/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.8/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.7 are listed below.</p> <ul> <li>#1786754: Functionality to enable log rotation for user serviceable snapshot's logs.</li> <li>#1786983: Rebalance is causing glusterfs crash on client node</li> <li>#1789337: glusterfs process memory leak in ior test</li> <li>#1790445: glusterfind pre output file is empty</li> <li>#1790449: S57glusterfind-delete-post.py not python3 ready (does not decode bytestring)</li> <li>#1790850: Remove extra argument</li> <li>#1792857: Memory corruption when sending events to an IPv6 host</li> <li>#1793096: gf_event doesn't work for glfsheal process</li> <li>#1794020: Mounts fails after reboot of 1/3 gluster nodes</li> <li>#1797985: Brick logs inundated with [2019-04-27 22:14:53.378047] I [dict.c:541:dict_get] (--&gt;/usr/lib64/glusterfs/6.0/xlator/features/worm.so(+0x7241) [0x7fe857bb3241] --&gt;/usr/lib64/glusterfs/6.0/xlator/features/locks.so(+0x1c219) [0x7fe857dda219] [Invalid argumen</li> <li>#1804546: [Thin-arbiter] : Wait for connection with TA node before sending lookup/create of ta-replica id file</li> <li>#1804594: Heal pending on volume, even after all the bricks are up</li> <li>#1805097: Changes to self-heal logic w.r.t. detecting metadata split-brains</li> <li>#1805671: Memory corruption when glfs_init() is called after glfs_fini()</li> <li>#1806836: [EC] shd crashed while heal failed due to out of memory error.</li> <li>#1806838: Disperse volume : Ganesha crash with IO in 4+2 config when one glusterfsd restart every 600s</li> <li>#1807786: seeing error message in glustershd.log on volume start(or may be as part of shd graph regeneration) inet_pton failed with return code 0 [Invalid argument]</li> <li>#1807793: glusterfs-libs: usage of inet_addr() may impact IPv6</li> </ul>"},{"location":"release-notes/6.9/","title":"Release notes for Gluster 6.9","text":"<p>This is a bugfix release. The release notes for 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.7, 6.8 and 6.9 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 6 stable release.</p> <p>NOTE: Tentative date for next minor release: Week of 30th June, 2020</p>"},{"location":"release-notes/6.9/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/6.9/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/6.9/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6.8 are listed below.</p> <ul> <li>#832: Permission Denied in logs.</li> <li>#1152: Spurious failure of tests/bugs/protocol/bug-1433815-auth-allow.t</li> <li>#1140: getfattr returns ENOATTR for system.posix_acl_access on disperse type volumes</li> <li>#884: [bug:1808688] Data corruption with asynchronous writes (please try to reproduce!)</li> <li>#1134: snap_scheduler.py init failing with \"TypeError: Can't mix strings and bytes in path components\"</li> <li>#1067: [bug:1661889] Metadata heal picks different brick each time as source if there are no pending xattrs.</li> <li>#1028: [bug:1810934] Segfault in FUSE process, potential use after free</li> <li>#1146: gfapi/Upcall: Potential deadlock in synctask threads processing upcall notifications</li> <li>#1808966: Set volume option when one of the node is powered off, After powering the node brick processes are offline</li> <li>#1809439: [brickmux]: glustershd crashed when rebooting 1/3 nodes at regular intervals</li> </ul>"},{"location":"release-notes/7.0/","title":"Release notes for Gluster 7.0","text":"<p>This is a major release that includes a range of code improvements and stability fixes along with a few features as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Announcements</li> <li>Major changes and features</li> <li>Major issues</li> <li>Bugs addressed in the release</li> </ul>"},{"location":"release-notes/7.0/#announcements","title":"Announcements","text":"<ol> <li> <p>Releases that receive maintenance updates post release 7 are, 5, 6 and 7    (reference)</p> </li> <li> <p>Release 7 will receive maintenance updates around the 10th of every month    for the first 3 months post release (i.e Dec'19, Jan'20, Feb'20). Post the    initial 3 months, it will receive maintenance updates every 2 months till EOL.</p> </li> </ol>"},{"location":"release-notes/7.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/7.0/#highlights","title":"Highlights","text":"<ul> <li>Several stability fixes addressing,</li> <li>coverity, clang-scan, address sanitizer and valgrind reported issues</li> <li>removal of unused and hence, deprecated code and features</li> <li>Performance Improvements</li> </ul> <p>Features</p>"},{"location":"release-notes/7.0/#1-rpcbind-not-required-in-glusterdservice-when-gnfs-isnt-built","title":"1. Rpcbind not required in glusterd.service when gnfs isn't built.","text":""},{"location":"release-notes/7.0/#2-latency-based-read-child-to-improve-read-workload-latency-in-a-cluster-especially-in-a-cloud-setup-also-provides-a-load-balancing-with-the-outstanding-pending-request","title":"2. Latency based read child to improve read workload latency in a cluster, especially in a cloud setup. Also provides a load balancing with the outstanding pending request.","text":""},{"location":"release-notes/7.0/#3-glusterfind-integrate-with-gfid2path-to-improve-performance","title":"3. Glusterfind: integrate with gfid2path, to improve performance.","text":""},{"location":"release-notes/7.0/#4-issue-532-work-towards-implementing-global-thread-pooling-has-started","title":"4. Issue #532: Work towards implementing global thread pooling has started","text":""},{"location":"release-notes/7.0/#5-this-release-includes-extra-coverage-for-glfs-public-apis-in-our-regression-tests-so-we-dont-break-anything","title":"5. This release includes extra coverage for glfs public APIs in our regression tests, so we don't break anything.","text":""},{"location":"release-notes/7.0/#6-thin-arbiter-integration-with-gd1","title":"6. Thin-arbiter integration with GD1","text":""},{"location":"release-notes/7.0/#major-issues","title":"Major issues","text":"<ul> <li>#1771308:Unable to build the gluster packages for centos-6</li> </ul>"},{"location":"release-notes/7.0/#note","title":"Note","text":"<p>Any new volumes created with the release will have the <code>fips-mode-rchecksum</code> volume option set to <code>on</code> by default.</p> <p>If a client older than glusterfs-4.x (i.e. 3.x clients) accesses a volume which has the <code>fips-mode-rchecksum</code> volume option enabled, it can cause erroneous checksum computation/ unwanted behaviour during afr self-heal. This option is to be enabled only when all clients are also &gt;=4.x. So if you are using these older clients, please explicitly turn this option <code>off</code>.</p>"},{"location":"release-notes/7.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-6 are listed below.</p> <ul> <li>#789278: Issues reported by Coverity static analysis tool</li> <li>#1098991: Dist-geo-rep: Invalid slave url (::: three or more colons) error out with unclear error message.</li> <li>#1193929: GlusterFS can be improved</li> <li>#1241494: [Backup]: Glusterfind CLI commands need to verify the accepted names for session/volume, before failing with error(s)</li> <li>#1512093: Value of pending entry operations in detail status output is going up after each synchronization.</li> <li>#1535511: Gluster CLI shouldn't stop if log file couldn't be opened</li> <li>#1542072: Syntactical errors in hook scripts for managing SELinux context on bricks #2 (S10selinux-label-brick.sh + S10selinux-del-fcontext.sh)</li> <li>#1573226: eventsapi: ABRT report for package glusterfs has reached 10 occurrences</li> <li>#1580315: gluster volume status inode getting timed out after 30 minutes with no output/error</li> <li>#1590385: Refactor dht lookup code</li> <li>#1593224: [Disperse] : Client side heal is not removing dirty flag for some of the files.</li> <li>#1596787: glusterfs rpc-clnt.c: error returned while attempting to connect to host: (null), port 0</li> <li>#1622665: clang-scan report: glusterfs issues</li> <li>#1624701: error-out {inode,entry}lk fops with all-zero lk-owner</li> <li>#1628194: tests/dht: Additional tests for dht operations</li> <li>#1633930: ASan (address sanitizer) fixes - Blanket bug</li> <li>#1634664: Inconsistent quorum checks during open and fd based operations</li> <li>#1635688: Keep only the valid (maintained/supported) components in the build</li> <li>#1642168: changes to cloudsync xlator</li> <li>#1642810: remove glupy from code and build</li> <li>#1648169: Fuse mount would crash if features.encryption is on in the version from 3.13.0 to 4.1.5</li> <li>#1648768: Tracker bug for all leases related issues</li> <li>#1650095: Regression tests for geo-replication on EC volume is not available. It should be added.</li> <li>#1651246: Failed to dispatch handler</li> <li>#1651439: gluster-NFS crash while expanding volume</li> <li>#1651445: [RFE] storage.reserve option should take size of disk as input instead of percentage</li> <li>#1652887: Geo-rep help looks to have a typo.</li> <li>#1654021: Gluster volume heal causes continuous info logging of \"invalid argument\"</li> <li>#1654270: glusterd crashed with seg fault possibly during node reboot while volume creates and deletes were happening</li> <li>#1659334: FUSE mount seems to be hung and not accessible</li> <li>#1659708: Optimize by not stopping (restart) selfheal deamon (shd) when a volume is stopped unless it is the last volume</li> <li>#1664934: glusterfs-fuse client not benefiting from page cache on read after write</li> <li>#1670031: performance regression seen with smallfile workload tests</li> <li>#1672480: Bugs Test Module tests failing on s390x</li> <li>#1672711: Upgrade from glusterfs 3.12 to gluster 4/5 broken</li> <li>#1672727: Fix timeouts so the tests pass on AWS</li> <li>#1672851: With parallel-readdir enabled, deleting a directory containing stale linkto files fails with \"Directory not empty\"</li> <li>#1674389: [thin arbiter] : rpm - add thin-arbiter package</li> <li>#1674406: glusterfs FUSE client crashing every few days with 'Failed to dispatch handler'</li> <li>#1674412: listing a file while writing to it causes deadlock</li> <li>#1675076: [posix]: log the actual path wherever possible</li> <li>#1676400: rm -rf fails with \"Directory not empty\"</li> <li>#1676430: distribute: Perf regression in mkdir path</li> <li>#1676736: tests: ./tests/bugs/distribute/bug-1161311.t times out</li> <li>#1676797: server xlator doesn't handle dict unserialization failures correctly</li> <li>#1677559: gNFS crashed when processing \"gluster v profile [vol] info nfs\"</li> <li>#1678726: Integer Overflow possible in md-cache.c due to data type inconsistency</li> <li>#1679401: Geo-rep setup creates an incorrectly formatted authorized_keys file</li> <li>#1679406: glustereventsd does not start on Ubuntu 16.04 LTS</li> <li>#1680587: Building RPM packages with _for_fedora_koji_builds enabled fails on el6</li> <li>#1683352: remove experimental xlators informations from glusterd-volume-set.c</li> <li>#1683594: nfs ltp ftest* fstat gets mismatch size as except after turn on md-cache</li> <li>#1683816: Memory leak when peer detach fails</li> <li>#1684385: [ovirt-gluster] Rolling gluster upgrade from 3.12.5 to 5.3 led to shard on-disk xattrs disappearing</li> <li>#1684404: Multiple shd processes are running on brick_mux environmet</li> <li>#1685027: Error handling in /usr/sbin/gluster-eventsapi produces IndexError: tuple index out of range</li> <li>#1685120: upgrade from 3.12, 4.1 and 5 to 6 broken</li> <li>#1685414: glusterd memory usage grows at 98 MB/h while running \"gluster v profile\" in a loop</li> <li>#1685944: WORM-XLator: Maybe integer overflow when computing new atime</li> <li>#1686371: Cleanup nigel access and document it</li> <li>#1686398: Thin-arbiter minor fixes</li> <li>#1686568: [geo-rep]: Checksum mismatch when 2x2 vols are converted to arbiter</li> <li>#1686711: [Thin-arbiter] : send correct error code in case of failure</li> <li>#1687326: [RFE] Revoke access from nodes using Certificate Revoke List in SSL</li> <li>#1687705: Brick process has coredumped, when starting glusterd</li> <li>#1687811: core dump generated while running the test ./tests/00-geo-rep/georep-basic-dr-rsync-arbiter.t</li> <li>#1688068: Proper error message needed for FUSE mount failure when /var is filled.</li> <li>#1688106: Remove implementation of number of files opened in posix xlator</li> <li>#1688116: Spurious failure in test ./tests/bugs/glusterfs/bug-844688.t</li> <li>#1688287: ganesha crash on glusterfs with shard volume</li> <li>#1689097: gfapi: provide an option for changing statedump path in glfs-api.</li> <li>#1689799: [cluster/ec] : Fix handling of heal info cases without locks</li> <li>#1689920: lots of \"Matching lock not found for unlock xxx\" when using disperse (ec) xlator</li> <li>#1690753: Volume stop when quorum not met is successful</li> <li>#1691164: glusterd leaking memory when issued gluster vol status all tasks continuosly</li> <li>#1691616: client log flooding with intentional socket shutdown message when a brick is down</li> <li>#1692093: Network throughput usage increased x5</li> <li>#1692612: Locking issue when restarting bricks</li> <li>#1692666: ssh-port config set is failing</li> <li>#1693575: gfapi: do not block epoll thread for upcall notifications</li> <li>#1693648: Geo-re: Geo replication failing in \"cannot allocate memory\"</li> <li>#1693692: Increase code coverage from regression tests</li> <li>#1694820: Geo-rep: Data inconsistency while syncing heavy renames with constant destination name</li> <li>#1694925: GF_LOG_OCCASSIONALLY API doesn't log at first instance</li> <li>#1695327: regression test fails with brick mux enabled.</li> <li>#1696046: Log level changes do not take effect until the process is restarted</li> <li>#1696077: Add pause and resume test case for geo-rep</li> <li>#1696136: gluster fuse mount crashed, when deleting 2T image file from oVirt Manager UI</li> <li>#1696512: glusterfs build is failing on rhel-6</li> <li>#1696599: Fops hang when inodelk fails on the first fop</li> <li>#1697316: Getting SEEK-2 and SEEK7 errors with [Invalid argument] in the bricks' logs</li> <li>#1697486: bug-1650403.t &amp;&amp; bug-858215.t are throwing error \"No such file\" at the time of access glustershd pidfile</li> <li>#1697866: Provide a way to detach a failed node</li> <li>#1697907: ctime feature breaks old client to connect to new server</li> <li>#1697930: Thin-Arbiter SHD minor fixes</li> <li>#1698078: ctime: Creation of tar file on gluster mount throws warning \"file changed as we read it\"</li> <li>#1698449: thin-arbiter lock release fixes</li> <li>#1699025: Brick is not able to detach successfully in brick_mux environment</li> <li>#1699176: rebalance start command doesn't throw up error message if the command fails</li> <li>#1699189: fix truncate lock to cover the write in tuncate clean</li> <li>#1699339: With 1800+ vol and simultaneous 2 gluster pod restarts, running gluster commands gives issues once all pods are up</li> <li>#1699394: [geo-rep]: Geo-rep goes FAULTY with OSError</li> <li>#1699866: I/O error on writes to a disperse volume when replace-brick is executed</li> <li>#1700078: disablle + reenable of bitrot leads to files marked as bad</li> <li>#1700865: FUSE mount seems to be hung and not accessible</li> <li>#1701337: issues with 'building' glusterfs packages if we do 'git clone --depth 1'</li> <li>#1701457: ctime: Logs are flooded with \"posix set mdata failed, No ctime\" error during open</li> <li>#1702131: The source file is left in EC volume after rename when glusterfsd out of service</li> <li>#1702185: coredump reported by test ./tests/bugs/glusterd/bug-1699339.t</li> <li>#1702299: Custom xattrs are not healed on newly added brick</li> <li>#1702303: Enable enable fips-mode-rchecksum for new volumes by default</li> <li>#1702952: remove tier related information from manual pages</li> <li>#1703020: The cluster.heal-timeout option is unavailable for ec volume</li> <li>#1703629: statedump is not capturing info related to glusterd</li> <li>#1703948: Self-heal daemon resources are not cleaned properly after a ec fini</li> <li>#1704252: Creation of bulkvoldict thread logic is not correct while brick_mux is enabled for single volume</li> <li>#1704888: delete the snapshots and volume at the end of uss.t</li> <li>#1705865: VM stuck in a shutdown because of a pending fuse request</li> <li>#1705884: Image size as reported from the fuse mount is incorrect</li> <li>#1706603: Glusterfsd crashing in ec-inode-write.c, in GF_ASSERT</li> <li>#1707081: Self heal daemon not coming up after upgrade to glusterfs-6.0-2 (intermittently) on a brick mux setup</li> <li>#1707700: maintain consistent values across for options when fetched at cluster level or volume level</li> <li>#1707728: geo-rep: Sync hangs with tarssh as sync-engine</li> <li>#1707742: tests/geo-rep: arequal checksum comparison always succeeds</li> <li>#1707746: AFR-v2 does not log before attempting data self-heal</li> <li>#1708051: Capture memory consumption for gluster process at the time of throwing no memory available message</li> <li>#1708156: ec ignores lock contention notifications for partially acquired locks</li> <li>#1708163: tests: fix bug-1319374.c compile warnings.</li> <li>#1708926: Invalid memory access while executing cleanup_and_exit</li> <li>#1708929: Add more test coverage for shd mux</li> <li>#1709248: [geo-rep]: Non-root - Unable to set up mountbroker root directory and group</li> <li>#1709653: geo-rep: With heavy rename workload geo-rep log if flooded</li> <li>#1710054: Optimize the glustershd manager to send reconfigure</li> <li>#1710159: glusterd: While upgrading (3-node cluster) 'gluster v status' times out on node to be upgraded</li> <li>#1711240: [GNFS] gf_nfs_mt_inode_ctx serious memory leak</li> <li>#1711250: bulkvoldict thread is not handling all volumes while brick multiplex is enabled</li> <li>#1711297: Optimize glusterd code to copy dictionary in handshake code path</li> <li>#1711764: Files inaccessible if one rebalance process is killed in a multinode volume</li> <li>#1711820: Typo in cli return string.</li> <li>#1711827: test case bug-1399598-uss-with-ssl.t is generating crash</li> <li>#1712322: Brick logs inundated with [2019-04-27 22:14:53.378047] I [dict.c:541:dict_get] (--&gt;/usr/lib64/glusterfs/6.0/xlator/features/worm.so(+0x7241) [0x7fe857bb3241] --&gt;/usr/lib64/glusterfs/6.0/xlator/features/locks.so(+0x1c219) [0x7fe857dda219] [Invalid argumen</li> <li>#1712668: Remove-brick shows warning cluster.force-migration enabled where as cluster.force-migration is disabled on the volume</li> <li>#1712741: glusterd_svcs_stop should call individual wrapper function to stop rather than calling the glusterd_svc_stop</li> <li>#1713730: Failure when glusterd is configured to bind specific IPv6 address. If bind-address is IPv6, *addr_len will be non-zero and it goes to ret = -1 branch, which will cause listen failure eventually</li> <li>#1714098: Make debugging hung frames easier</li> <li>#1714415: Script to make it easier to find hung frames</li> <li>#1714973: upgrade after tier code removal results in peer rejection.</li> <li>#1715921: uss.t tests times out with brick-mux regression</li> <li>#1716695: Fix memory leaks that are present even after an xlator fini [client side xlator]</li> <li>#1716766: [Thin-arbiter] TA process is not picking 24007 as port while starting up</li> <li>#1716812: Failed to create volume which transport_type is \"tcp,rdma\"</li> <li>#1716830: DHT: directory permissions are wiped out</li> <li>#1717757: WORM: Segmentation Fault if bitrot stub do signature</li> <li>#1717782: gluster v get  all still showing storage.fips-mode-rchecksum off <li>#1717819: Changes to self-heal logic w.r.t. detecting metadata split-brains</li> <li>#1717953: SELinux context labels are missing for newly added bricks using add-brick command</li> <li>#1718191: Regression: Intermittent test failure for quick-read-with-upcall.t</li> <li>#1718273: markdown formatting errors in files present under /doc directory of the project</li> <li>#1718316: Ganesha-gfapi logs are flooded with error messages related to \"gf_uuid_is_null(gfid)) [Invalid argument]\" when lookups are running from multiple clients</li> <li>#1718338: Upcall: Avoid sending upcalls for invalid Inode</li> <li>#1718848: False positive logging of mount failure</li> <li>#1718998: Fix test case \"tests/basic/afr/split-brain-favorite-child-policy.t\" failure</li> <li>#1720201: Healing not proceeding during in-service upgrade on a disperse volume</li> <li>#1720290: ctime changes: tar still complains file changed as we read it if uss is enabled</li> <li>#1720615: [RHEL-8.1] yum update fails for rhel-8 glusterfs client packages 6.0-5.el8</li> <li>#1720993: tests/features/subdir-mount.t is failing for brick_mux regrssion</li> <li>#1721385: glusterfs-libs: usage of inet_addr() may impact IPv6</li> <li>#1721435: DHT: Internal xattrs visible on the mount</li> <li>#1721441: geo-rep: Fix permissions for GEOREP_DIR in non-root setup</li> <li>#1721601: [SHD] : logs of one volume are going to log file of other volume</li> <li>#1722541: stale shd process files leading to heal timing out and heal deamon not coming up for all volumes</li> <li>#1703322: Need to document about fips-mode-rchecksum in gluster-7 release notes.</li> <li>#1722802: Incorrect power of two calculation in mem_pool_get_fn</li> <li>#1723890: Crash in glusterd when running test script bug-1699339.t</li> <li>#1728770: Failures in remove-brick due to [Input/output error] errors</li> <li>#1736481: capture stat failure error while setting the gfid</li> <li>#1739424: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1739426: Open fd heal should filter O_APPEND/O_EXCL</li> <li>#1739427: An Input/Output error happens on a disperse volume when doing unaligned writes to a sparse file</li> <li>#1741041: atime/mtime is not restored after healing for entry self heals</li> <li>#1743200: ./tests/bugs/glusterd/bug-1595320.t is failing</li> <li>#1744874: interrupts leak memory</li> <li>#1745422: ./tests/bugs/glusterd/bug-1595320.t is failing</li> <li>#1745914: ESTALE change in fuse breaks get_real_filename implementation</li> <li>#1746142: ctime: If atime is updated via utimensat syscall ctime is not getting updated</li> <li>#1746145: CentOs 6 GlusterFS client creates files with time 01/01/1970</li> <li>#1747301: Setting cluster.heal-timeout requires volume restart</li> <li>#1747746: The result (hostname) of getnameinfo for all bricks (ipv6 addresses) are the same, while they are not.</li> <li>#1748448: syncop: Bail out if frame creation fails</li> <li>#1748774: Incorrect power of two calculation in mem_pool_get_fn</li> <li>#1749155: bug-1402841.t-mt-dir-scan-race.t fails spuriously</li> <li>#1749305: Failures in remove-brick due to [Input/output error] errors</li> <li>#1749664: The result (hostname) of getnameinfo for all bricks (ipv6 addresses) are the same, while they are not.</li> <li>#1751556: syncop: Bail out if frame creation fails</li> <li>#1752245: Crash in glusterd when running test script bug-1699339.t</li> <li>#1752429: Ctime: Cannot see the \"trusted.glusterfs.mdata\" xattr for directory on a new brick after rebalance</li> <li>#1755212: geo-rep: performance improvement while syncing heavy renames with existing destination</li> <li>#1755213: geo-rep: non-root session going fault due improper sub-command</li> <li>#1755678: Segmentation fault occurs while truncate file</li> <li>#1756002: git clone fails on gluster volumes exported via nfs-ganesha</li>"},{"location":"release-notes/7.1/","title":"Release notes for Gluster 7.1","text":"<p>This is a bugfix release. The release notes for 7.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Jan, 2020</p>"},{"location":"release-notes/7.1/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.1/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.1/#note","title":"Note","text":""},{"location":"release-notes/7.1/#glusterfs-samba","title":"GlusterFS-Samba","text":"<p>Following parameters will be added to GlusterFS volume share section (if not present) in smb.conf when user.smb or user.cifs option is set on a volume:</p> <p>kernel share modes = no</p> <p>Following parameters will NOT be added to GlusterFS volume share section(if not present) in smb.conf when user.smb or user.cifs option is set on a volume:</p> <p>guest ok = yes</p>"},{"location":"release-notes/7.1/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.0 are listed below.</p> <ul> <li>#1760356: packaging: remove leftover bd cruft in rpm .spec.in</li> <li>#1760699: glustershd can not decide heald_sinks, and skip repair, so some entries lingering in volume heal info</li> <li>#1760791: afr: support split-brain CLI for replica 3</li> <li>#1761910: Rebalance causing IO Error - File descriptor in bad state</li> <li>#1764003: [Upgrade] Config files are not upgraded to new version</li> <li>#1764007: geo-replication sessions going faulty</li> <li>#1764015: geo-rep syncing significantly behind and also only one of the directories are synced with tracebacks seen</li> <li>#1764023: geo-rep: Changelog archive file format is incorrect</li> <li>#1764026: tests/geo-rep: Add test case to validate non-root geo-replication setup</li> <li>#1764028: [geo-rep] sync_method showing rsync instead of tarssh post in-service upgrade</li> <li>#1764030: [GSS] geo-rep entering into faulty state with OSError: [Errno 13] Permission denied</li> <li>#1765431: test: fix non-root geo-rep test case</li> <li>#1766424: cgroup control-cpu-load.sh script not working</li> <li>#1768742: Memory leak in glusterfsd process</li> <li>#1768760: tests/bugs/shard/unlinks-and-renames.t fails on RHEL8</li> <li>#1769315: Rebalance is causing glusterfs crash on client node</li> <li>#1769320: Spurious failure tests/bugs/replicate/bug-1734370-entry-heal-restore-time.t</li> <li>#1771840: [CENTOS 6] Geo-replication session not starting after creation</li> <li>#1775495: [GNFS] showmout -a  cause gnfs crash <li>#1777769: auth-allow of IPv4 address doesn't take netmask into consideration</li> <li>#1778175: glusterfsd crashed with \"'MemoryError' Cannot access memory at address\"</li> <li>#1781483: Remove guest access by default for GlusterFS volume SMB shares added by hook scripts</li> <li>#1781486: gluster-smb:glusto-test access gluster by cifs test write report Device or resource busy</li> <li>#1782826: event_slot_alloc not able to return index after reach slot_used count to 1024</li> <li>#1783227: GlusterFS brick process crash</li> <li>#1783858: Heal Info is hung when I/O is in progress on a gluster block volume</li> <li>#1784790: tests/00-geo-rep/00-georep-verify-non-root-setup.t fail on freshly installed builder</li> <li>#1785228: Windows client fails to copy large file to GlusterFS volume share with fruit and streams_xattr VFS modules via Samba</li> <li>#1785493: READDIRP incorrectly updates posix-acl inode ctx</li>"},{"location":"release-notes/7.2/","title":"Release notes for Gluster 7.2","text":"<p>This is a bugfix release. The release notes for 7.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Feb, 2020</p>"},{"location":"release-notes/7.2/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.2/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.2/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.1 are listed below.</p> <ul> <li>#1767264: glusterfs client process coredump</li> <li>#1786753: Functionality to enable log rotation for user serviceable snapshot's logs.</li> <li>#1788785: Unable to set/modify optimistic-change-log for replicate volumes</li> <li>#1789336: glusterfs process memory leak in ior test</li> <li>#1790423: Glusterfind pre command fails</li> <li>#1790428: glusterfind pre output file is empty</li> <li>#1790438: S57glusterfind-delete-post.py not python3 ready (does not decode bytestring)</li> <li>#1790846: Remove extra argument</li> </ul>"},{"location":"release-notes/7.3/","title":"Release notes for Gluster 7.3","text":"<p>This is a bugfix release. The release notes for 7.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Mar, 2020</p>"},{"location":"release-notes/7.3/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>Features</p> <p>Make thin-arbiter name unique in 'pending-xattr' option. By making this unique, we can host single thin-arbiter node for multiple clusters.</p>"},{"location":"release-notes/7.3/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.3/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.2 are listed below.</p> <ul> <li>#1768407: glusterfsd memory leak observed after enable tls</li> <li>#1791154: xlators/features/quota/src/quota.c:quota_log_usage</li> <li>#1793085: gf_event doesn't work for glfsheal process</li> <li>#1793412: config ssh-port can accept negative and outside allowed port range value</li> <li>#1793492: cli: duplicate defns of cli_default_conn_timeout and cli_ten_minutes_timeout</li> <li>#1794019: Mounts fails after reboot of 1/3 gluster nodes</li> <li>#1795540: mem leak while using gluster tools</li> <li>#1802449: spurious self-heald.t failure</li> </ul>"},{"location":"release-notes/7.4/","title":"Release notes for Gluster 7.4","text":"<p>This is a bugfix release. The release notes for 7.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Apr, 2020</p>"},{"location":"release-notes/7.4/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.4/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.4/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.3 are listed below.</p> <ul> <li>#1785323: glusterfsd crashes after a few seconds</li> <li>#1804591: Heal pending on volume, even after all the bricks are up</li> <li>#1805668: Memory corruption when glfs_init() is called after glfs_fini()</li> <li>#1806843: Disperse volume : Ganesha crash with IO in 4+2 config when one glusterfsd restarts every 600s</li> <li>#1807785: seeing error message in glustershd.log on volume start(or may be as part of shd graph regeneration) inet_pton failed with return code 0 [Invalid argument]</li> <li>#1808964: Set volume option when one of the nodes is powered off, After powering the node brick processes are offline</li> <li>#1809438: [brickmux]: glustershd crashed when rebooting 1/3 nodes at regular intervals</li> <li>#1812849: Setting volume option when one of the glusterds is stopped in the cluster, post glusterd restart seeing couldn't find vol info in glusterd logs and shd, brick process offline</li> <li>#1061: [EC] shd crashed while heal failed due to out of memory error.</li> <li>#1030: Memory corruption when sending events to an IPv6 host</li> </ul>"},{"location":"release-notes/7.5/","title":"Release notes for Gluster 7.5","text":"<p>This is a bugfix release. The release notes for 7.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th May, 2020</p>"},{"location":"release-notes/7.5/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.5/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.5/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.4 are listed below.</p> <ul> <li>#832 Permission Denied in logs</li> <li>#884 [bug:1808688] Data corruption with asynchronous writes</li> <li>#1067 [bug:1661889] Metadata heal picks different brick each time as source if there are no pending xattrs.</li> <li>#1127 Mount crash during background shard cleanup</li> <li>#1134 snap_scheduler.py init failing with \"TypeError: Can't mix strings and bytes in path components\"</li> <li>#1152 Spurious failure of tests/bugs/protocol/bug-1433815-auth-allow.t</li> <li>#1168 glusterfsd crash due to health-check failed, going down ,system call errorno not return</li> </ul>"},{"location":"release-notes/7.6/","title":"Release notes for Gluster 7.6","text":"<p>This is a bugfix release. The release notes for 7.0, 7.1, 7.2, 7.3, 7.4 and 7.5 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Jul, 2020</p>"},{"location":"release-notes/7.6/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.6/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.6/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.5 are listed below.</p> <ul> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1140 getfattr returns ENOATTR for system.posix_acl_access on dispe...</li> <li>#1146 gfapi/Upcall: Potential deadlock in synctask threads processi...</li> <li>#1179 gnfs split brain when 1 server in 3x1 down (high load)</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> </ul>"},{"location":"release-notes/7.7/","title":"Release notes for Gluster 7.7","text":"<p>This is a bugfix release. The release notes for 7.0, 7.1, 7.2, 7.3, 7.4 7.5 and 7.6 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Sep, 2020</p>"},{"location":"release-notes/7.7/#major-changes-features-and-limitations-addressed-in-this-release","title":"Major changes, features and limitations addressed in this release","text":"<p>None</p>"},{"location":"release-notes/7.7/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/7.7/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7.6 are listed below.</p> <ul> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1220 cluster/ec: return correct error code and log the message in ...</li> <li>#1223 Failure of tests/basic/gfapi/gfapi-copy-file-range.t</li> <li>#1225 fuse causes glusterd to dump core</li> <li>#1243 Modify and return iatt (especially size and block-count) in s...</li> <li>#1254 Prioritize ENOSPC over other lesser priority errors</li> <li>#1296 Implement seek in open-behind</li> <li>#1303 Failures in rebalance due to [Input/output error]</li> <li>#1348 Fuse mount crashes in shard translator when truncating a *real...</li> </ul>"},{"location":"release-notes/7.8/","title":"Release notes for Gluster 7.8","text":"<p>This is a bugfix release. The release notes for 7.0, 7.1, 7.2, 7.3, 7.4 7.5, 7.6 and 7.7 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE:</p> <ol> <li>Next minor release tentative date: Week of 30th Nov, 2020.</li> <li>Next minor release would be the last release of release-7.x series.</li> </ol>"},{"location":"release-notes/7.8/#highlights-of-release","title":"Highlights of Release","text":"<p>This release contains majorly the bug fixes as described in the issues section.</p>"},{"location":"release-notes/7.8/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/7/7.8/</p>"},{"location":"release-notes/7.8/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#763 thin-arbiter: Testing report</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1002 [bug:1679998] GlusterFS can be improved</li> <li>#1250 geo-rep: Fix corner case in rename on mkdir during hybrid crawl</li> <li>#1253 On Ovirt setup glusterfs performs poorly</li> <li>#1332 Unable to Upgrade to Gluster 7 from Earlier Version</li> <li>#1351 issue with gf_fill_iatt_for_dirent()</li> <li>#1354 High CPU utilization by self-heal on disperse volumes with no ...</li> <li>#1385 High CPU utilization by self-heal on disperse volumes when an ...</li> <li>#1407 glusterd keep crashing when upgrading from 6.5 to 7.7</li> <li>#1438 syncdaemon/syncdutils.py: SyntaxWarning: \"is\" with a literal. ...</li> <li>#1440 glusterfs 7.7 fuse client memory leak</li> <li>#1472 Readdir-ahead leads to inconsistent ls results</li> </ul>"},{"location":"release-notes/7.9/","title":"Release notes for Gluster 7.9","text":"<p>This is a bugfix release. The release notes for 7.0, 7.1, 7.2, 7.3, 7.4 7.5, 7.6, 7.7 and 7.8 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 7 stable release.</p> <p>NOTE:</p> <p>This release would be the last release of release-7.x series. Users are highly encouraged to upgrade to newer releases of GlusterFS.</p>"},{"location":"release-notes/7.9/#highlights-of-release","title":"Highlights of Release","text":"<p>This release contains majorly the bug fixes as described in the issues section.</p>"},{"location":"release-notes/7.9/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/7/7.9/</p>"},{"location":"release-notes/7.9/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#1852 glusterd: Can't run rebalance due to long unix socket</li> <li>#1836 posix: Update ret value in posix_get_gfid2path if GF_MALLOC fails</li> <li>#1738 [cli] Improper error message on command timeout</li> <li>#1699 One brick offline with signal received: 11</li> <li>#1604 rfc.sh on release-7 needs to move to github flow</li> <li>#1499 why not use JumpConsistentHash to replace SuperFastHash to cho...</li> <li>#1221 features/bit-rot: invalid snprintf() buffer size</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> </ul>"},{"location":"release-notes/8.0/","title":"Release notes for Gluster 8.0","text":"<p>Release date: 09-July-2020</p> <p>This is a major release that includes a range of features, code improvements and stability fixes as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Release notes for Gluster 8.0</li> <li>Announcements</li> <li>Major changes and features<ul> <li>Highlights</li> <li>Features</li> </ul> </li> <li>Major issues</li> <li>Bugs addressed</li> </ul>"},{"location":"release-notes/8.0/#announcements","title":"Announcements","text":"<ol> <li> <p>Releases that receive maintenance updates post release 8 are, 7 and 8    (reference)</p> </li> <li> <p>Release 8 will receive maintenance updates around the 10th of every month    for the first 3 months post release (i.e Aug'20, Sep'20, Oct'20). Post the    initial 3 months, it will receive maintenance updates every 2 months till EOL.</p> </li> </ol>"},{"location":"release-notes/8.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/8.0/#highlights","title":"Highlights","text":"<ul> <li>Several stability fixes addressing</li> <li>coverity, clang-scan, address sanitizer and valgrind reported issues</li> <li>removal of unused and hence, deprecated code and features</li> <li>Performance Improvements</li> <li>CentOS 8 and RHEL 8 is supported</li> </ul>"},{"location":"release-notes/8.0/#features","title":"Features","text":"<ul> <li>Implemented seek file operation for open-behind</li> <li>Now storage.reserve option will take size of disk as input instead of percentage</li> <li>Added Functionality to enable log rotation for user serviceable snapshot's logs</li> <li>Mandatory locks enhancements in replicate subvolumes</li> <li>To validate other memory allocation implementations instead of libc's malloc added an option to build with tcmalloc library</li> <li>Integrated Thin-arbiter with GD1</li> <li>Client Handling of Elastic Clusters</li> <li>The package <code>glusterfs-libs</code> is replaced by <code>libgfchangelog0</code>, <code>libgfrpc0</code>, <code>libgfxdr0</code>, and <code>libglusterfs0</code>; and additional libraries in <code>libgfapi0</code>, <code>libglusterd0</code></li> </ul>"},{"location":"release-notes/8.0/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/8.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-7 are listed below.</p> <ul> <li>#789278: Issues reported by Coverity static analysis tool</li> <li>#1158130: Not possible to disable fopen-keeo-cache when mounting</li> <li>#1183054: rpmlint throws couple of errors for RPM spec file</li> <li>#1193929: GlusterFS can be improved</li> <li>#1387404: geo-rep: gsync-sync-gfid binary installed in /usr/share/...</li> <li>#1410439: glusterfind pre output file is empty</li> <li>#1423442: group files to set volume options should have comments</li> <li>#1430623: pthread mutexes and condition variables are not destroyed</li> <li>#1489610: glusterfind saves var data under $prefix instead of localstatedir</li> <li>#1507896: glfs_init returns incorrect errno on faliure</li> <li>#1514683: Removal of bricks in volume isn't prevented if remaining brick doesn't contain all the files</li> <li>#1538900: Found a missing unref in rpc_clnt_reconnect</li> <li>#1554286: Xattr not updated if increasing the retention of a WORM/Retained file</li> <li>#1593542: ctime: Upgrade/Enabling ctime feature wrongly updates older files with latest {a|m|c}time</li> <li>#1620580: Deleted a volume and created a new volume with similar but not the same name. The kubernetes pod still keeps on running and doesn't crash. Still possible to write to gluster mount</li> <li>#1622665: clang-scan report: glusterfs issues</li> <li>#1626543: dht/tests: Create a .t to test all possible combinations for file rename</li> <li>#1635688: Keep only the valid (maintained/supported) components in the build</li> <li>#1636297: Make it easy to build / host a project which just builds glusterfs translator</li> <li>#1644322: flooding log with \"glusterfs-fuse: read from /dev/fuse returned -1 (Operation not permitted)\"</li> <li>#1651445: [RFE] storage.reserve option should take size of disk as input instead of percentage</li> <li>#1664335: [geo-rep]: Transport endpoint not connected with arbiter volumes</li> <li>#1665358: allow regression to not run tests with nfs, if nfs is disabled.</li> <li>#1668239: [man page] Gluster(8) - Missing disperse-data parameter Gluster Console Manager man page</li> <li>#1668286: READDIRP incorrectly updates posix-acl inode ctx</li> <li>#1676479: read-ahead and io-cache degrading performance on sequential read</li> <li>#1688115: Data heal not checking for locks on source &amp; sink(s) before healing</li> <li>#1689097: gfapi: provide an option for changing statedump path in glfs-api.</li> <li>#1690454: mount-shared-storage.sh does not implement mount options</li> <li>#1693692: Increase code coverage from regression tests</li> <li>#1694920: Inconsistent locking in presence of disconnects</li> <li>#1697293: DHT: print hash and layout values in hexadecimal format in the logs</li> <li>#1698042: quick-read cache invalidation feature has the same key of md-cache</li> <li>#1707731: [Upgrade] Config files are not upgraded to new version</li> <li>#1708603: [geo-rep]: Note section in document is required for ignore_deletes true config option where it might delete a file</li> <li>#1708929: Add more test coverage for shd mux</li> <li>#1716695: Fix memory leaks that are present even after an xlator fini [client side xlator]</li> <li>#1716979: Multiple disconnect events being propagated for the same child</li> <li>#1717754: Enable features.locks-notify-contention by default</li> <li>#1717824: Fencing: Added the tcmu-runner ALUA feature support but after one of node is rebooted the glfs_file_lock() get stucked</li> <li>#1717827: tests/geo-rep: Add test case to validate non-root geo-replication setup</li> <li>#1719290: Glusterfs mount helper script not working with IPv6 because of regular expression or man is wrong</li> <li>#1720463: [Thin-arbiter] : Wait for connection with TA node before sending lookup/create of ta-replica id file</li> <li>#1720566: Can't rebalance GlusterFS volume because unix socket's path name is too long</li> <li>#1721590: tests/bugs/posix/bug-1040275-brick-uid-reset-on-volume-restart.t is failing</li> <li>#1721686: Remove usage of obsolete function usleep()</li> <li>#1722507: Incorrect reporting of type/gfid mismatch</li> <li>#1722541: stale shd process files leading to heal timing out and heal deamon not coming up for all volumes</li> <li>#1722546: do not assert in inode_unref if the inode table cleanup has started</li> <li>#1722598: dump the min and max latency of each xlator in statedump</li> <li>#1722698: DHT: severe memory leak in dht rename</li> <li>#1722740: [GSS] geo-replication sessions going faulty</li> <li>#1722802: Incorrect power of two calculation in mem_pool_get_fn</li> <li>#1722977: ESTALE change in fuse breaks get_real_filename implementation</li> <li>#1723280: windows cannot access mountpoint exportd from a disperse volume</li> <li>#1723402: Brick multiplexing is not working.</li> <li>#1723455: volume set  group  description missing space leading to words being merged in help output <li>#1723658: [In-service] Post upgrade glusterd is crashing with a backtrace on the upgraded node while issuing gluster volume status from non-upgraded nodes</li> <li>#1723761: [Ganesha]: truncate operation not updating the ctime</li> <li>#1723890: Crash in glusterd when running test script bug-1699339.t</li> <li>#1724024: use more secure mode for mkdir operations</li> <li>#1724184: Thin-arbiter: SHD takes lock and inspects the state on TA during every index crawl</li> <li>#1725034: gluster volume help showing multiple commands for top instead of one.</li> <li>#1725211: User serviceable snapshots (USS) are not accessible after changing transport.socket.bind-address of glusterd</li> <li>#1726205: Windows client fails to copy large file to GlusterFS volume share with fruit and streams_xattr VFS modules via Samba</li> <li>#1726783: snapd crashes sometimes</li> <li>#1726906: get-state does not show correct brick status</li> <li>#1727068: Deadlock when generating statedumps</li> <li>#1727081: Disperse volume : data corruption with ftruncate data in 4+2 config</li> <li>#1727107: geo-replication/setup.py missing license details in setup()</li> <li>#1727248: [GNFS] showmout -a  cause gnfs crash <li>#1727256: Directory pending heal in heal info output</li> <li>#1727329: glustershd dumped core with seg fault at afr_has_quorum</li> <li>#1727852: gluster-block: improvements to volume group profile options list</li> <li>#1728047: interrupts leak memory</li> <li>#1728417: Cleanup references to Hadoop in code base</li> <li>#1728554: Spelling errors</li> <li>#1728683: [geo-rep] gluster-mountbroker missing a brief description of what the argument does in # gluster-mountbroker (add|remove|setup) --help</li> <li>#1728766: Volume start failed when shd is down in one of the node in cluster</li> <li>#1728770: Failures in remove-brick due to [Input/output error] errors</li> <li>#1729085: [EC] shd crashed while heal failed due to out of memory error.</li> <li>#1729107: Memory leak in glusterfsd process</li> <li>#1729463: gluster v geo-rep status command timing out</li> <li>#1729772: Disperse volume : Ganesha crash with IO in 4+2 config when one glusterfsd restart every 600s</li> <li>#1729847: Fix spurious failure of tests/bugs/replicate/bug-1717819-metadata-split-brain-detection.t</li> <li>#1730175: Seeing failure due to \"getxattr err for dir [No data available]\" in rebalance</li> <li>#1730409: core file generated - when EC volume stop and start is executed for 10 loops on a EC+Brickmux setup</li> <li>#1730715: An Input/Output error happens on a disperse volume when doing unaligned writes to a sparse file</li> <li>#1730953: mount generates errors after umount</li> <li>#1731920: [geo-rep]: gluster command not found while setting up a non-root session</li> <li>#1732496: [Coverity] RETURN_LOCAL in __nlc_inode_ctx_get()</li> <li>#1732717: fuse: Limit the number of inode invalidation requests in the queue</li> <li>#1733042: cluster.rc Create separate logdirs for each host instance</li> <li>#1733166: potential deadlock while processing callbacks in gfapi</li> <li>#1733425: Setting volume option when one of the glusterd is stopped in the cluster, post glusterd restart seeing couldn't find vol info in glusterd logs and shd, brick process offline</li> <li>#1733935: Open fd heal should filter O_APPEND/O_EXCL</li> <li>#1734026: Cannot see the \"trusted.glusterfs.mdata\" xattr for directory on a new brick after rebalance</li> <li>#1734252: Heal not completing after geo-rep session is stopped on EC volumes.</li> <li>#1734299: ctime: When healing ctime xattr for legacy files, if multiple clients access and modify the same file, the ctime might be updated incorrectly.</li> <li>#1734370: atime/mtime is not restored after healing for entry self heals</li> <li>#1734738: Unable to create geo-rep session on a non-root setup.</li> <li>#1736482: capture stat failure error while setting the gfid</li> <li>#1737288: nfs client gets bad ctime for copied file which is on glusterfs disperse volume with ctime on</li> <li>#1737291: features/locks: avoid use after freed of frame for blocked lock</li> <li>#1737484: geo-rep syncing significantly behind and also only one of the directories are synced with tracebacks seen</li> <li>#1737676: Upgrading a Gluster node fails when user edited glusterd.vol file exists</li> <li>#1737778: ocf resource agent for volumes don't work in non-standard environment</li> <li>#1738419: read() returns more than file size when using direct I/O</li> <li>#1738763: [EC] : fix coverity issue</li> <li>#1738786: ctime: If atime is updated via utimensat syscall ctime is not getting updated</li> <li>#1739360: [GNFS] gluster crash with nfs.nlm off</li> <li>#1740017: tests/bugs/replicate/bug-880898.t created a core file.</li> <li>#1741734: gluster-smb:glusto-test access gluster by cifs test write report Device or resource busy</li> <li>#1741779: Fix spelling errors</li> <li>#1741890: geo-rep: Changelog archive file format is incorrect</li> <li>#1743020: glusterd start is failed and throwing an error Address already in use</li> <li>#1743069: bug-1482023-snpashot-issue-with-other-processes-accessing-mounted-path.t fails in brick mux regression spuriously</li> <li>#1743094: glusterfs build fails on centos7</li> <li>#1743200: ./tests/bugs/glusterd/bug-1595320.t is failing</li> <li>#1743573: fuse client hung when issued a lookup \"ls\" on an ec volume</li> <li>#1743652: CentOs 6 GlusterFS client creates files with time 01/01/1970</li> <li>#1744519: log aio_error return codes in posix_fs_health_check</li> <li>#1744548: Setting cluster.heal-timeout requires volume restart</li> <li>#1745965: glusterd fails to start due to SIGABRT dumping core</li> <li>#1745967: File size was not truncated for all files when tried with rebalance in progress.</li> <li>#1746228: systemctl start glusterd is getting timed out on the scaled setup with 2000 volumes</li> <li>#1746320: SHORT-WRITE error leads to crash</li> <li>#1746810: markdown files containing 404 links</li> <li>#1747746: The result (hostname) of getnameinfo for all bricks (ipv6 addresses) are the same, while they are not.</li> <li>#1748448: syncop: Bail out if frame creation fails</li> <li>#1748744: bug-1402841.t-mt-dir-scan-race.t fails spuriously</li> <li>#1748836: Application should know when update size/version went bad</li> <li>#1749322: glustershd can not decide heald_sinks, and skip repair, so some entries lingering in volume heal info</li> <li>#1750387: Deprecated log rotate command still present in \"# gluster v help\"</li> <li>#1750618: Cleanup of executable in tests/bugs/gfapi/bug-1447266/bug-1447266.t not done</li> <li>#1751134: Spurious failure tests/bugs/replicate/bug-1734370-entry-heal-restore-time.t</li> <li>#1751907: bricks gone down unexpectedly</li> <li>#1752330: seeing error message in glustershd.log on volume start(or may be as part of shd graph regeneration) inet_pton failed with return code 0 [Invalid argument]</li> <li>#1752331: Test tests/basic/volume-scale-shd-mux.t is failing on upstream CI</li> <li>#1753569: git clone fails on gluster volumes exported via nfs-ganesha</li> <li>#1753592: Segmentation fault occurs while truncate file</li> <li>#1753843: [Disperse volume]: Regression in IO performance seen in sequential read for large file</li> <li>#1753857: geo-rep: performance improvement while syncing heavy renames with existing destination</li> <li>#1753859: Typos in glusterd log messages</li> <li>#1753880: Set the default lru-limit in fuse to a smaller number</li> <li>#1753928: geo-rep: non-root session going fault due improper sub-command</li> <li>#1754448: Re-alignment of Structure attributes</li> <li>#1754477: Thin-arbiter: Raise error in CLI if replica-count is not 2</li> <li>#1755344: glustershd.log getting flooded with \"W [inode.c:1017:inode_find] (--&gt;/usr/lib64/glusterfs/6.0/xlator/cluster/disperse.so(+0xe3f9) [0x7fd09b0543f9] --&gt;/usr/lib64/glusterfs/6.0/xlator/cluster/disperse.so(+0xe19c) [0x7fd09b05419 TABLE NOT FOUND\"</li> <li>#1755900: heketidbstorage bricks go down during PVC creation</li> <li>#1756211: tests/bugs/shard/bug-1272986.t fails</li> <li>#1756900: tests are failing in RHEL8 regression</li> <li>#1756938: afr: support split-brain CLI for replica 3</li> <li>#1757399: Rebalance is causing glusterfs crash on client node</li> <li>#1758579: Rebalance causing IO Error - File descriptor in bad state</li> <li>#1758878: # gluster v info --xml is always returning 3 for all Nx3 volumes</li> <li>#1758984: Enable direct-io options in group virt</li> <li>#1759002: Spurious failure tests/bugs/replicate/bug-1744548-heal-timeout.t</li> <li>#1759081: Spurious failure of /tests/bugs/replicate/bug-1134691-afr-lookup-metadata-heal.t</li> <li>#1760187: Implement seek fop</li> <li>#1760189: Use replica aware seek fop</li> <li>#1760467: rebalance start is succeeding when quorum is not met</li> <li>#1761759: Failure in ./tests/basic/posix/shared-statfs.t</li> <li>#1761769: On some distros bug-1272986.t takes more than 2 minutes to run</li> <li>#1762220: [geo-rep] sync_method showing rsync instead of tarssh post in-service upgrade</li> <li>#1762438: DHT- gluster rebalance status shows wrong data size after rebalance is completed successfully</li> <li>#1763036: glusterfsd crashed with \"'MemoryError' Cannot access memory at address\"</li> <li>#1763439: [GSS] geo-rep entering into faulty state with OSError: [Errno 13] Permission denied</li> <li>#1764110: tests/bugs/shard/unlinks-and-renames.t fails on RHEL8</li> <li>#1764119: gluster rebalance status doesn't show detailed information when a node is rebooted</li> <li>#1764129: quota_fsck script KeyError: 'contri_size'</li> <li>#1764208: cgroup control-cpu-load.sh script not working</li> <li>#1764418: Add Mohit &amp; Sanju as glusterd/cli maintainers</li> <li>#1765017: gf_event doesn't work for glfsheal process</li> <li>#1765155: replication shouldn't modify xattr-req coming from parent</li> <li>#1765186: Problematic coding practices at logger</li> <li>#1765421: DHT: Add comments to the code</li> <li>#1765426: test: fix non-root geo-rep test case</li> <li>#1765542: Add Sunny Kumar as co-maintainer of Geo-replication component</li> <li>#1768407: glusterfsd memory leak observed after enable tls</li> <li>#1768896: Long method in glusterfsd - set_fuse_mount_options(...)</li> <li>#1769712: check if grapj is ready beforce process cli command</li> <li>#1769754: dht_readdirp_cbk: Do not strip out entries with invalid stats</li> <li>#1771365: libglusterfs/dict.c : memory leaks</li> <li>#1771577: [RHEL 6] Geo-replication session not starting after creation</li> <li>#1771895: geo-rep: Improve debugging in log_raise_exception</li> <li>#1772006: NULL dict messages flooding fuse mount log</li> <li>#1773530: ctime value is different from atime/mtime on a create of file</li> <li>#1773856: Set volume option when one of the node is powered off, After powering the node brick processes are offline</li> <li>#1774011: Heal Info is hung when I/O is in progress on a gluster block volume</li> <li>#1774866: man page update needed for gluster volume top command</li> <li>#1775612: Remove guest access by default for GlusterFS volume SMB shares added by hook scripts</li> <li>#1776264: RFE: systemd should restart glusterd on crash</li> <li>#1776757: DHT - Reduce methods scope</li> <li>#1776784: glfsheal crash on unexpected volume name</li> <li>#1776801: Bricks are not available when volume create fails</li> <li>#1776892: [patch] .dirstamp should be in ignored</li> <li>#1778457: Missing error logs(afr/self-heald )</li> <li>#1779055: glusterfs process memory leak in ior test</li> <li>#1779089: glusterfsd do not release posix lock when multiple glusterfs client do flock -xo to the same file paralleled</li> <li>#1779742: tests/00-geo-rep/00-georep-verify-non-root-setup.t fail on freshly installed builder</li> <li>#1779760: Improve logging in EC, client and lock xlator</li> <li>#1780190: glfsheal should be installed and invoked as architecture-dependent binary helper</li> <li>#1780260: v7 fails to build on Debian 9 [patch?]</li> <li>#1781440: event_slot_alloc not able to return index after reach slot_used count to 1024</li> <li>#1782200: glusterd restart failing to start.</li> <li>#1782495: GlusterFS brick process crash</li> <li>#1784375: 'gluster volume set  disable.nfs' accidentally killed unexpected process, and forced a data brick offline. <li>#1785143: Multiple glusterfsd process spawn when glusterd restart during a volume start.</li> <li>#1785208: glusterfs client process coredump</li> <li>#1785611: glusterfsd cashes after a few seconds</li> <li>#1785998: change the error message for heal statistics to reflect its supportability for disperse volume</li> <li>#1786276: [geo-rep] Help for positional argument SLAVE in schedule_georep.py.in isn't clear.</li> <li>#1786459: unable to enable brick-multiplex feature</li> <li>#1786478: default option is disappeared in volume info after volume reset</li> <li>#1786679: Duplicate entries in 'ls' output after a volume expansion</li> <li>#1786722: Functionality to enable log rotation for user serviceable snapshot's logs.</li> <li>#1787122: glusterd allowing to set server.statedump-path to file, non-existent file and non-existent paths</li> <li>#1787274: heal not actually healing metadata of a regular file when only time stamps are changed(data heal not required)</li> <li>#1787554: Unable to set/modify optimistic-change-log for replicate volumes</li> <li>#1789439: Glusterfind pre command fails</li> <li>#1789478: S57glusterfind-delete-post.py not python3 ready (does not decode bytestring)</li> <li>#1790748: Remove extra argument</li> <li>#1790870: Memory corruption when sending events to an IPv6 host</li> <li>#1791682: fail to build on recent Fedora</li> <li>#1792276: config ssh-port can accept negative and outside allowed port range value</li> <li>#1792707: xlators/features/quota/src/quota.c:quota_log_usage</li> <li>#1793378: dht_hash_compute() crashes when it receives a zero length name</li> <li>#1793852: Mounts fails after reboot of 1/3 gluster nodes</li> <li>#1793995: gluster crash when built without gNFS support</li> <li>#1797869: bitrot: Number of signing process threads should be configurable.</li> <li>#1797882: Segmentation fault occurs while truncate file</li> <li>#1797934: Client should propagate ping event from brick</li> <li>#1800583: Halo replication is not working</li> <li>#1800956: Rebalance : Status lists failures on stopping rebalance while it is in progress</li> <li>#1801623: spurious self-heald.t failure</li> <li>#1801624: Heal pending on volume, even after all the bricks are up</li> <li>#1801684: Memory corruption when glfs_init() is called after glfs_fini()</li> <li>#1804786: mount.glusterfs strips off \"/\" from subdir-mounts</li> <li>#1808421: WORM: If autocommit-period 0 file will be WORMed with 0 Byte during initial write</li> <li>#1808875: [brickmux]: glustershd crashed when rebooting 1/3 nodes at regular intervals</li> <li>#1810042: Changes to gluster peer probe in nightly build breaks ansible:gluster_volume call</li> <li>#1810842: frequent heal observed when file opened during one brick is down</li> <li>#1810934: Segfault in FUSE process, potential use after free</li> <li>#1811631: brick crashed when creating and deleting volumes over time (with brick mux enabled only)</li> <li>#1812144: Add a warning message during volume expansion or resize on volume with snapshots</li> <li>#1812353: create-export-ganesha script: mention labelled nfs parameter</li> <li>#154 Optimized CHANGELOG</li> <li>#237 Validate other memory allocation implementations instead of l...</li> <li>#475 Reduce the number or threads used in the brick process</li> <li>#613 Mandatory locks enhancements in replicate subvolumes</li> <li>#657 Structured logging format support</li> <li>#663 Add Ganesha HA bits back to glusterfs code repo</li> <li>#687 Thin-arbiter integration with GD1</li> <li>#699 executable program will crash if linked libgfapi together wit...</li> <li>#703 provide mechanism to test individual xlators</li> <li>#721 Introduce quorum-count option in disperse volumes as well</li> <li>#723 Provide scripts to reset xattrs of the entries which could be...</li> <li>#725 Disperse: A way to read from specific bricks</li> <li>#741 Client Handling of Elastic Clusters</li> <li>#745 storage.reserve enhancement for posix_write</li> <li>#748 Improve MAKE_HANDLE_GFID_PATH macro and posix_handle_gfid_path()</li> <li>#753 Remove fetching items in gf_cli_replace_brick(), gf_cli_reset...</li> <li>#755 [RFE] Geo-replication code improvements</li> <li>#761 Improve MAKE_HANDLE_PATH macro</li> <li>#763 thin-arbiter: Testing report</li> <li>#765 nfs.rpc-auth-allow gluster7 + gnfs</li> <li>#788 run-with-valgrind option causes gnfs and quota to fail to start</li> <li>#824 Migrate bugzilla workflow to github issues workflow</li> <li>#832 Permission Denied in logs</li> <li>#884 [bug:1808688] Data corruption with asynchronous writes (pleas...</li> <li>#891 [bug:1802451] Optimize posix code to improve file creation</li> <li>#977 [bug:1811631] brick crashed when creating and deleting volume...</li> <li>#999 [bug:1791285] Changing permissions on root directory(director...</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1038 [bug:1787138] Crash on rpcsvc_drc_client_unref() - fails on G...</li> <li>#1042 [bug:1806499] afr-lock-heal-basic.t and /afr-lock-heal-advanc...</li> <li>#1044 [bug:1790730] Add a basic test file to glusterfind</li> <li>#1052 [bug:1693692] Increase code coverage from regression tests</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1067 [bug:1661889] Metadata heal picks different brick each time a...</li> <li>#1097 [bug:1635688] Keep only the valid (maintained/supported) comp...</li> <li>#1102 dht: gf_defrag_process_dir is called even if gf_defrag_fix_la...</li> <li>#1104 geo-replication: descriptive message when worker crashes due ...</li> <li>#1105 [bug:1794263] Multiple imports from the same library in the ....</li> <li>#1127 Mount crash during background shard cleanup</li> <li>#1134 snap_scheduler.py init failing with \"TypeError: Can't mix str...</li> <li>#1140 getfattr returns ENOATTR for system.posix_acl_access on dispe...</li> <li>#1141 Make SSL connection messages useful</li> <li>#1142 log the ENOENT error in posix_pstat</li> <li>#1144 [Disperse] Add test for reset-brick for disperse volume</li> <li>#1146 gfapi/Upcall: Potential deadlock in synctask threads processi...</li> <li>#1149 Add error logs to debug failures in ./tests/bugs/protocol/bug...</li> <li>#1150 Avoid dict_del logs in posix_is_layout_stale while key is NULL</li> <li>#1152 Spurious failure of tests/bugs/protocol/bug-1433815-auth-allow.t</li> <li>#1153 Spurious failure of ./tests/bugs/snapshot/bug-1111041.t</li> <li>#1154 failing test cases</li> <li>#1156 Spurious failure of tests/features/worm.t</li> <li>#1158 spurious failure of tests/bugs/glusterd/serialize-shd-manager...</li> <li>#1160 sys_stat should be used instead of stat</li> <li>#1161 tests: file offsets and sizes shouldn't be truncated to 32-bi...</li> <li>#1162 spurious failure of test case tests/bugs/glusterd/removing-mu...</li> <li>#1169 common-ha: cluster status shows \"FAILOVER\" even when all node...</li> <li>#1180 (glusterfs-8.0) - GlusterFS 8.0 tracker</li> <li>#1179 gnfs split brain when 1 server in 3x1 down (high load)</li> <li>#1220 cluster/ec: return correct error code and log the message in case of BADFD</li> <li>#1223 Failure of tests/basic/gfapi/gfapi-copy-file-range.t</li> <li>#1116 [bug:1790736] gluster volume list returning wrong volume list / volume list time out</li> <li>#990 [bug:1578405] EIO errors when updating and deleting entries co...</li> <li>#1126 packaging: overhaul glusterfs.spec(.in) to align with SUSE and...</li> <li>#1225 fuse causes glusterd to dump core</li> <li>#1243 Modify and return iatt (especially size and block-count) in sh...</li> <li>#1254 Prioritize ENOSPC over other lesser priority errors</li> <li>#1303 Failures in rebalance due to [Input/output error]</li>"},{"location":"release-notes/8.1/","title":"Release notes for Gluster 8.1","text":"<p>Release date: 27-Aug-2020</p> <p>This is a Improvements and bugfix release. The release notes for 8.0 contains a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Sep, 2020</p>"},{"location":"release-notes/8.1/#improvements-and-highlights","title":"Improvements and Highlights","text":"<p>Below improvements have been added to this minor release.</p> <ul> <li>Performance improvement over the creation of large files - VM disks in oVirt by bringing down trivial lookups of non-existent shards. Issue (#1425)</li> <li>Fsync in the replication module uses eager-lock functionality which improves the performance of VM workloads with an improvement of more than 50% in small-block of approximately 4kb with write heavy workloads. Issue (#1253)</li> </ul>"},{"location":"release-notes/8.1/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.1/</p>"},{"location":"release-notes/8.1/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#763 thin-arbiter: Testing report</li> <li>#1217 Modify group \"virt\" to add rpc/network related changes</li> <li>#1250 geo-rep: Fix corner case in rename on mkdir during hybrid crawl</li> <li>#1281 Unlinking the file with open fd, returns ENOENT or stale file ...</li> <li>#1348 Fuse mount crashes in shard translator when truncating a *real...</li> <li>#1351 issue with gf_fill_iatt_for_dirent()</li> <li>#1352 api: libgfapi symbol versions break LTO in Fedora rawhide/f33</li> <li>#1354 High CPU utilization by self-heal on disperse volumes with no ...</li> <li>#1385 High CPU utilization by self-heal on disperse volumes when an ...</li> <li>#1396 [bug-1851989] smallfile performance drops after commit the pat...</li> <li>#1407 glusterd keep crashing when upgrading from 6.5 to 7.7</li> <li>#1418 GlusterFS 8.0: Intermittent error:1408F10B:SSL routines:SSL3_G...</li> <li>#1440 glusterfs 7.7 fuse client memory leak</li> </ul>"},{"location":"release-notes/8.2/","title":"Release notes for Gluster 8.2","text":"<p>Release date: 23-Sept-2020</p> <p>This is a Improvements and bugfix release. The release notes for 8.0, 8.1 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE: Next minor release tentative date: Week of 20th Oct, 2020</p>"},{"location":"release-notes/8.2/#improvements-and-highlights","title":"Improvements and Highlights","text":"<p>Below improvements have been added to this minor release.</p> <ul> <li>Glustereventsd will accept IPv6 packets too. Issue (#1377)</li> </ul>"},{"location":"release-notes/8.2/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.2/</p>"},{"location":"release-notes/8.2/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1332 Unable to Upgrade to Gluster 7 from Earlier Version</li> <li>#1440 glusterfs 7.7 fuse client memory leak</li> <li>#1472 Readdir-ahead leads to inconsistent ls results</li> </ul>"},{"location":"release-notes/8.3/","title":"Release notes for Gluster 8.3","text":"<p>Release date: 23-Dec-2020</p> <p>This is a bugfix release. The release notes for 8.0, 8.1 and 8.2 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 20th Feb, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/8.3/#highlights-of-release","title":"Highlights of Release","text":"<p>This release contains majorly the bug fixes as described in the issues section.</p>"},{"location":"release-notes/8.3/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.3/</p>"},{"location":"release-notes/8.3/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#1836 posix: Update ret value in posix_get_gfid2path if GF_MALLOC fails</li> <li>#1796 afr: call afr_is_lock_mode_mandatory only while xdata is valid</li> <li>#1778 volume set: failed: ganesha.enable is already 'off'.</li> <li>#1738 [cli] Improper error message on command timeout</li> <li>#1699 One brick offline with signal received: 11</li> <li>#1663 test case ./tests/bugs/core/bug-1650403.t is getting timed out</li> <li>#1601 rfc.sh on release-8 needs to move to github flow</li> <li>#1499 why not use JumpConsistentHash to replace SuperFastHash to cho...</li> <li>#1438 syncdaemon/syncdutils.py: SyntaxWarning: \"is\" with a literal. ...</li> <li>#1221 features/bit-rot: invalid snprintf() buffer size</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1002 [bug:1679998] GlusterFS can be improved</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> </ul>"},{"location":"release-notes/8.4/","title":"Release notes for Gluster 8.4","text":"<p>Release date: 01-Mar-2021</p> <p>This is a bugfix release. The release notes for 8.0, 8.1, 8.2 and 8.3 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 20th Apr, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/8.4/#highlights-of-release","title":"Highlights of Release","text":"<ul> <li>Healing data in 1MB chunks instead of 128KB for improving healing performance #2067</li> </ul>"},{"location":"release-notes/8.4/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.4/</p>"},{"location":"release-notes/8.4/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#2154 \"Operation not supported\" doing a chmod on a symlink</li> <li>#2107 mount crashes when setfattr -n distribute.fix.layout -v \"yes\"...</li> <li>#1991 mdcache: bug causes getxattr() to report ENODATA when fetchin...</li> <li>#1925 dht_pt_getxattr does not seem to handle virtual xattrs.</li> <li>#1539 fuse mount crashes on graph-switch when reader-thread-count i...</li> <li>#1529 Fix regression in on demand migration feature</li> <li>#1406 shared storage volume fails to mount in ipv6 environment</li> </ul>"},{"location":"release-notes/8.5/","title":"Release notes for Gluster 8.5","text":"<p>Release date: 17-May-2021</p> <p>This is a bugfix release. The release notes for 8.0, 8.1, 8.2, 8.3 and 8.4 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 30th Jun, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/8.5/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Slow write on ZFS bricks after healing millions of files due to adding arbiter brick #1764</li> <li>4+1 arbiter setup is broken #2192</li> </ul>"},{"location":"release-notes/8.5/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.5/</p>"},{"location":"release-notes/8.5/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#1214 Running tests/basic/afr/inodelk.t on my VM crashes in dht</li> <li>#1324 Inconsistent custom xattr on backend directories after bringing bac</li> <li>#1764 Slow write on ZFS bricks after healing millions of files due to add</li> <li>#2161 Crash caused by memory corruption</li> <li>#2192 4+1 arbiter setup is broken</li> <li>#2198 There are blocked inodelks for a long time</li> <li>#2210 glusterfsd memory leak observed when constantly running volume heal</li> <li>#2234 Segmentation fault in directory quota daemon for replicated volume</li> <li>#2253 Disable lookup-optimize by default in the virt group</li> <li>#2313 Long setting names mess up the columns and break parsing</li> </ul>"},{"location":"release-notes/8.6/","title":"Release notes for Gluster 8.6","text":"<p>Release date: 30-Aug-2021</p> <p>This is a bugfix release. The release notes for 8.0, 8.1, 8.2, 8.3, 8.4 and 8.5 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 8 stable release.</p> <p>NOTE:</p> <ul> <li>This is the last release of Gluster 8 series</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/8.6/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Improvement in handling of gfid mismatches of geo-rep: Geo-replication gets delayed when there are many renames on primary volume(https://github.com/gluster/glusterfs/issues/2388)</li> <li>Resolve core dumps on Gluster 9 - 3 replicas: Initialize list head to prevent NULL de-reference(https://github.com/gluster/glusterfs/issues/2443)</li> </ul>"},{"location":"release-notes/8.6/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/8/8.6/</p>"},{"location":"release-notes/8.6/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#2388 Geo-replication gets delayed when there are many renames on primary volume</li> <li>#2689 glusterd: reset mgmt_v3_lock_timeout after it be used</li> <li>#1000 GlusterFS can be improved: fix getcwd usage warning</li> <li>#2394 Spurious failure in tests/basic/fencing/afr-lock-heal-basic.t</li> <li>#2691 georep-upgrade.t find failures</li> <li>#154 Optimized CHANGELOG: upgrade script for geo-rep</li> <li>#2443 Core dumps on Gluster 9 - 3 replicas: Initialize list head to prevent NULL de-reference</li> <li>#2404 Spurious failure of tests/bugs/ec/bug-1236065.t</li> </ul>"},{"location":"release-notes/9.0/","title":"Release notes for Gluster 9.0","text":"<p>Release date: 05-Feb-2021</p> <p>This is a major release that includes a range of features, code improvements and stability fixes as noted below.</p> <p>A selection of the key features and changes are documented in this page. A full list of bugs that have been addressed is included further below.</p> <ul> <li>Release notes for Gluster 9.0</li> <li>Announcements</li> <li>Major changes and features<ul> <li>Highlights</li> <li>Features</li> </ul> </li> <li>Major issues</li> <li>Bugs addressed</li> </ul>"},{"location":"release-notes/9.0/#announcements","title":"Announcements","text":"<ol> <li> <p>Releases that receive maintenance updates post release 9 is 8    (reference)</p> </li> <li> <p>Release 9 will receive maintenance updates around the 30th of every month    for the first 3 months post release (i.e Mar'21, Apr'21, May'21). Post the    initial 3 months, it will receive maintenance updates every 2 months till EOL.</p> </li> </ol>"},{"location":"release-notes/9.0/#major-changes-and-features","title":"Major changes and features","text":""},{"location":"release-notes/9.0/#highlights","title":"Highlights","text":"<p>Added support for:</p> <ul> <li>io_uring in Gluster (io_uring support in kernel required along with the presence of liburing library and headers)</li> <li>support running with up to 5000 volumes (Testing done on: 5k volumes on 3 nodes, brick_mux was enabled with default configuration)</li> </ul>"},{"location":"release-notes/9.0/#features","title":"Features","text":"<ul> <li>Added io_uring support for Gluster #1398</li> <li>Added Support for 5K volumes #1613</li> <li>Enabled granular-entry-heal by default #1483</li> <li>Optimizations for rename dir heal #1211</li> <li>Added support for monitoring the epoll/rpc layer #1466</li> <li>Brick mux: Added support to spawn a thread per process basis instead of spawning a per brick #1482</li> <li>Improve rebalance of sparse files #1222</li> <li>LTO/GCC10 - Gluster is now compiled with LTO enabled by default #1772</li> </ul>"},{"location":"release-notes/9.0/#major-issues","title":"Major issues","text":"<p>None</p>"},{"location":"release-notes/9.0/#bugs-addressed","title":"Bugs addressed","text":"<p>Bugs addressed since release-8 are listed below.</p> <ul> <li>#718 _store_global_opts(), _storeslaves() , _storeopts() should no...</li> <li>#280 Use internal error codes instead of UNIX errnos</li> <li>#1855 Makefile: failed to compile without git repository</li> <li>#1849 geo-rep: The newly setup geo-rep session goes faulty with syn...</li> <li>#1836 posix: Update ret value in posix_get_gfid2path if GF_MALLOC f...</li> <li>#1810 Implement option to generate core dump at will without killin...</li> <li>#1796 afr: call afr_is_lock_mode_mandatory only while xdata is valid</li> <li>#1794 posix: A brick process is getting crashed at the time of grap...</li> <li>#1782 Rebalance is reporting status twice upon stopping, resulting ...</li> <li>#1778 volume set: failed: ganesha.enable is already 'off'.</li> <li>#1775 core: lru_size showing -1 with zero inodes in the list in the...</li> <li>#1772 build: add LTO as a configure option</li> <li>#1743 Modify format to contain more information while raising glust...</li> <li>#1739 test case ./tests/basic/afr/entry-self-heal-anon-dir-off.t is...</li> <li>#1738 [cli] Improper error message on command timeout</li> <li>#1733 api: conscious language changes</li> <li>#1713 Conscious language changes in various xlators</li> <li>#1699 One brick offline with signal received: 11</li> <li>#1692 Test tests/basic/0symbol-check.t should exclude more contrib/...</li> <li>#1663 test case ./tests/bugs/core/bug-1650403.t is getting timed out</li> <li>#1661 test case ./tests/bugs/bug-1064147.t is continuously failing</li> <li>#1659 wrong comparison in glusterd_brick_start() function</li> <li>#1654 Rebalance/migration per directory/file</li> <li>#1653 io-cache xlators lock/unlock are always accompanied by gf_msg...</li> <li>#1627 Stopping rebalance results in a failure</li> <li>#1613 glusterd[brick_mux]: Optimize friend handshake code to avoid ...</li> <li>#1594 ./tests/00-geo-rep/00-georep-verify-non-root-setup.t fails on...</li> <li>#1587 geo-rep: Enable rsync verbose logging to help debug rsync errors</li> <li>#1584 MAINTAINERS file needs to be revisited and updated</li> <li>#1582 ./rfc.sh doesn't pick upstream correctly</li> <li>#1577 cli-rpc: Call to global quota rpc init even though operation ...</li> <li>#1569 Introduce a compile time --enable-brickmux option to run bric...</li> <li>#1565 Implement pass-through option for write-behind</li> <li>#1550 MAINTAINERS list of DHT needs to be updated</li> <li>#154 Optimized CHANGELOG</li> <li>#1546 Wrong permissions syned to remote brick when using halo repli...</li> <li>#1545 fuse_invalidate_entry() - too many repetitive calls to uuid_u...</li> <li>#1544 file tree memory layout optimization</li> <li>#1543 trash: Create inode_table only while feature is enabled</li> <li>#1542 io-stats: Configure ios_sample_buf_size based on sample_inter...</li> <li>#1541 Geo-rep: some files(hardlinks) are missing in slave after mas...</li> <li>#1540 [RFE] Rebalance: suppurt migration to files with hardlinks (n...</li> <li>#1539 fuse mount crashes on graph-switch when reader-thread-count i...</li> <li>#1538 Need to configure optimum inode table hash_size for shd</li> <li>#1529 Fix regression in on demand migration feature</li> <li>#1526 Brick status is 'stopped' if socket file is absent but brick ...</li> <li>#1518 glusterfs: write operations fail when the size is equal or gr...</li> <li>#1516 Use of strchr glusterd_replace_slash_with_hyphen</li> <li>#1511 Crash due to memory allocation</li> <li>#1508 Add-brick with Increasing replica count fails with bad brick ...</li> <li>#1507 Time-to-completion mechansim in rebalance is broken</li> <li>#1506 tests/000-flaky/bugs_nfs_bug-1116503.t is crashed in in gf_me...</li> <li>#1499 why not use JumpConsistentHash to replace SuperFastHash to ch...</li> <li>#1497 Removing strlen and using the already existing len of data_t</li> <li>#1487 Quota accounting check script fails with UnicodeDecodeError</li> <li>#1483 Enable granular-entry-heal by default</li> <li>#1482 [Brick-mux] Attach several posix threads with glusterfs_ctx</li> <li>#1480 First letter in mount path of bricks are getting truncated fo...</li> <li>#1477 nfs server crashes in acl3svc_init</li> <li>#1476 Changes required at Snaphot as gluster-shared-storage mount p...</li> <li>#1475 gluster_shared_storage failed to automount on node reboot on ...</li> <li>#1472 Readdir-ahead leads to inconsistent ls results</li> <li>#1466 RPC handling latencies should be printed in statedump</li> <li>#1464 Avoid dict OR key (link-count) is NULL [Invalid argument] mes...</li> <li>#1459 gluster_shared_storage failed to automount on node reboot on ...</li> <li>#1453 Disperse shd heal activity should be observable</li> <li>#1442 Remove Glusterfs SELinux module from Distribution's selinux-p...</li> <li>#1440 glusterfs 7.7 fuse client memory leak</li> <li>#1438 syncdaemon/syncdutils.py: SyntaxWarning: \"is\" with a literal....</li> <li>#1434 Inform failures while fop failed in disperse volume due to so...</li> <li>#1428 Redundant check in dict_get_with_refn()</li> <li>#1427 Bricks failed to restart after a power failure</li> <li>#1425 optimization over shard lookup in case of prealloc</li> <li>#1422 Rebalance - new volume option to turn on/off optimization in ...</li> <li>#1418 GlusterFS 8.0: Intermittent error:1408F10B:SSL routines:SSL3_...</li> <li>#1416 Dependencies of performance.parallel-readdir should be automa...</li> <li>#1410 01-georep-glusterd-tests.t times out on centos7 builders</li> <li>#1407 glusterd keep crashing when upgrading from 6.5 to 7.7</li> <li>#1406 shared storage volume fails to mount in ipv6 environment</li> <li>#1404 Client side split-brain resolution using favourite-child-poli...</li> <li>#1403 Tests failure on C8: ./tests/features/ssl-ciphers.t</li> <li>#1401 quota_fsck.py throws TypeError</li> <li>#1400 Annotate synctasks with tsan API if --enable-tsan is requested</li> <li>#1399 Add xlator identifiers in statedumps for mem-pools</li> <li>#1398 io_uring support in glusterfs main branch</li> <li>#1397 glusterd_check_brick_order() is needlessly fetching volname, ...</li> <li>#1396 [bug-1851989] smallfile performance drops after commit the pa...</li> <li>#1395 optimize dict_serialized_length_lk function</li> <li>#1391 allow add-brick from nodes which are not part of auth.allow list</li> <li>#1385 High CPU utilization by self-heal on disperse volumes when an...</li> <li>#1383 Remove contrib/sunrpc/xdr_sizeof.c</li> <li>#1381 Optional FUSE notitications</li> <li>#1379 Fix NULL pointer</li> <li>#1378 Use better terminology and wording in the code</li> <li>#1377 Glustereventsd to accept not only IPv4 but IPv6 packets too.</li> <li>#1376 Runtime &amp; Build Fixes for FreeBSD</li> <li>#1375 cluster: mount.glusterfs is stuck when trying to mount unknow...</li> <li>#1374 fuse interrupt issues identified in code review</li> <li>#1371 [RHEL 8.1] [Input/output error] observed in remove-brick oper...</li> <li>#1366 geo-replication session fails to start with IPV6</li> <li>#1361 Screen .attribute directories on NetBSD</li> <li>#1359 Cleanup --disable-mempool</li> <li>#1357 options should display not only current values but also defau...</li> <li>#1356 cli: type mismatch global_quotad_rpc in cli-quotad-client.c</li> <li>#1355 Heal info desn't show split-brain info if halo is enabled</li> <li>#1354 High CPU utilization by self-heal on disperse volumes with no...</li> <li>#1353 errors seen with gluster v get all all</li> <li>#1352 api: libgfapi symbol versions break LTO in Fedora rawhide/f33</li> <li>#1351 issue with gf_fill_iatt_for_dirent()</li> <li>#1350 Simplify directory scanning</li> <li>#1348 Fuse mount crashes in shard translator when truncating a *rea...</li> <li>#1347 NetBSD build fixes</li> <li>#1339 Rebalance status is not shown correctly after node reboot</li> <li>#1332 Unable to Upgrade to Gluster 7 from Earlier Version</li> <li>#1329 Move platform-dependent filesystem sync to a library function</li> <li>#1328 Linux kernel untar failed with errors immediate after add-brick</li> <li>#1327 Missing directory is not healed in dht</li> <li>#1324 Inconsistent custom xattr on backend directories after bringi...</li> <li>#1320 Unified support for building with sanitizers</li> <li>#1311 Data race when handling connection status</li> <li>#1310 tests/features/flock_interrupt.t leads to error logs</li> <li>#1306 add-brick command is failing</li> <li>#1303 Failures in rebalance due to [Input/output error]</li> <li>#1302 always print errno (and use English locale for strerror() out...</li> <li>#1291 Free volume info lock and mutex</li> <li>#1290 Test case brick-mux-validation-in-cluster.t is failing on RHEL-8</li> <li>#1289 glustereventsd log file isn't reopened after rotation</li> <li>#1285 Use-after-destroy mutex error</li> <li>#1283 Undefined behavior in __builtin_ctz</li> <li>#1282 New file created with xattr \"trusted.glusterfs.dht\"</li> <li>#1281 Unlinking the file with open fd, returns ENOENT or stale file...</li> <li>#1279 Fix several signed integer overflows</li> <li>#1278 Fix memory leak in afr_priv_destroy()</li> <li>#1275 Make glusterfs compile on all recent and supported versions o...</li> <li>#1272 tests/bugs/glusterd/mgmt-handshake-and-volume-sync-post-glust...</li> <li>#1269 common-ha: ganesha-ha.sh bad test for {rhel,centos} for pcs o...</li> <li>#1263 Fix memory leak in glusterd_store_retrieve_bricks()</li> <li>#1260 Implement minimal proper synchronization for gf_attach</li> <li>#1259 Fix memory leak in gf_cli_gsync_status_output()</li> <li>#1258 dht: Add null check</li> <li>#1255 Improve snapshot clone error message</li> <li>#1254 Prioritize ENOSPC over other lesser priority errors</li> <li>#1253 On Ovirt setup glusterfs performs poorly</li> <li>#1250 geo-rep: Fix corner case in rename on mkdir during hybrid crawl</li> <li>#1249 Drop 'const' type qualifier on return type</li> <li>#1248 Fix thread naming and related convention</li> <li>#1245 Spurious failures in ./tests/basic/ec/ec-quorum-count.t</li> <li>#1243 Modify and return iatt (especially size and block-count) in s...</li> <li>#1242 Rebalance - Improve Crawl time in rebalance</li> <li>#1240 tests/basic/afr/gfid-mismatch-resolution-with-fav-child-polic...</li> <li>#1236 glusterfs-geo-replication requires policycoreutils-python-uti...</li> <li>#1234 Fix ./tests/basic/fencing/afr-lock-heal-basic.t failure</li> <li>#1230 core dumped executing tests/line-coverage/errorgen-coverage.t</li> <li>#1228 seek functionalty is broken</li> <li>#1226 Gluster webhook update throws error</li> <li>#1225 fuse causes glusterd to dump core</li> <li>#1223 Failure of tests/basic/gfapi/gfapi-copy-file-range.t</li> <li>#1222 [RFE] Improve rebalance of sparse files</li> <li>#1221 features/bit-rot: invalid snprintf() buffer size</li> <li>#1220 cluster/ec: return correct error code and log the message in ...</li> <li>#1218 dht: Do opendir selectively in gf_defrag_process_dir</li> <li>#1217 Modify group \"virt\" to add rpc/network related changes</li> <li>#1214 Running tests/basic/afr/inodelk.t on my VM crashes in dht</li> <li>#1211 AFR: Rename dir heal shouldn't delete the directory at oldloc...</li> <li>#1209 tests: georep-upgrade.t test failure</li> <li>#1208 warning: initializer overrides prior initialization of this s...</li> <li>#1207 warning: passing an object that undergoes default argument pr...</li> <li>#1204 GD_OP_VERSION needs to be updated</li> <li>#1202 Issues reported by Coverity static analysis tool</li> <li>#1200 Handle setxattr and rm race for directory in rebalance</li> <li>#1197 Geo-replication tests are spuriously failing in CI</li> <li>#1196 glusterfsd is having a leak while only mgmt SSL is enabled</li> <li>#1193 Scheduling of snapshot for a volume is failing to create snap...</li> <li>#1190 spurious failure of tests/basic/quick-read-with-upcall.t</li> <li>#1187 Failures in rebalance due to [No space left on device] error ...</li> <li>#1182 geo-rep requires relevant selinux permission for rsync</li> <li>#1179 gnfs split brain when 1 server in 3x1 down (high load)</li> <li>#1172 core, cli, quota: cleanup malloc debugging and stats</li> <li>#1169 common-ha: cluster status shows \"FAILOVER\" even when all node...</li> <li>#1164 migrate remove-brick operation to mgmt v3 frameowrk</li> <li>#1154 failing test cases</li> <li>#1135 Fix @sysconfdir@ expansion in extras/systemd/glusterd.service...</li> <li>#1126 packaging: overhaul glusterfs.spec(.in) to align with SUSE an...</li> <li>#1116 [bug:1790736] gluster volume list returning wrong volume list...</li> <li>#1101 [bug:1813029] volume brick fails to come online because other...</li> <li>#1097 [bug:1635688] Keep only the valid (maintained/supported) comp...</li> <li>#1096 [bug:1622665] clang-scan report: glusterfs issues</li> <li>#1075 [bug:1299203] resolve-gids is not needed for Linux kernels v3...</li> <li>#1072 [bug:1251614] gf_defrag_fix_layout recursively fails, distrac...</li> <li>#1060 [bug:789278] Issues reported by Coverity static analysis tool</li> <li>#1052 [bug:1693692] Increase code coverage from regression tests</li> <li>#1050 [bug:1787325] TLS/SSL access of GlusterFS mounts is slower th...</li> <li>#1047 [bug:1774379] check for same hostnames(bricks from same host/...</li> <li>#1043 [bug:1793490] snapshot clone volume is not exported via NFS-G...</li> <li>#1009 [bug:1756900] tests are failing in RHEL8 regression</li> <li>#1002 [bug:1679998] GlusterFS can be improved</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#990 [bug:1578405] EIO errors when updating and deleting entries c...</li> <li>#952 [bug:1589705] quick-read: separate performance.cache-size tun...</li> <li>#876 [bug:1797099] After upgrade from gluster 7.0 to 7.2 posix-acl...</li> <li>#874 [bug:1793390] Pre-validation failure does not provide any hin...</li> <li>#837 Indicate timezone offset in formatted timestamps</li> <li>#829 gfapi: Using ssl and glfs_set_volfile together does not work</li> <li>#827 undefined symbol: xlator_api</li> <li>#824 Migrate bugzilla workflow to github issues workflow</li> <li>#816 RFE: Data/MetaData separator Translator</li> <li>#790 infinite loop in common-utils.c - gf_rev_dns_lookup_cache() ?</li> <li>#763 thin-arbiter: Testing report</li> </ul>"},{"location":"release-notes/9.1/","title":"Release notes for Gluster 9.1","text":"<p>Release date: 05-Apr-2021</p> <p>This is a bugfix and improvement release. The release notes for 9.0 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 30th Apr, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/9.1/#highlights-of-release","title":"Highlights of Release","text":"<ul> <li>Provide autoconf option to enable/disable storage.linux-io_uring during compilation #2063</li> <li>Healing data in 1MB chunks instead of 128KB for improving healing performance #2067</li> </ul>"},{"location":"release-notes/9.1/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.1/</p>"},{"location":"release-notes/9.1/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<p>Please find the list of issues added to this release below.</p> <ul> <li>#1406 shared storage volume fails to mount in ipv6 environment</li> <li>#1991 mdcache: bug causes getxattr() to report ENODATA when fetchin...</li> <li>#2063 Provide autoconf option to enable/disable storage.linux-io_ur...</li> <li>#2067 Change self-heal-window-size to 1MB by default</li> <li>#2107 mount crashes when setfattr -n distribute.fix.layout -v \"yes\"...</li> <li>#2154 \"Operation not supported\" doing a chmod on a symlink</li> <li>#2192 4+1 arbiter setup is broken</li> <li>#2198 There are blocked inodelks for a long time</li> <li>#2234 Segmentation fault in directory quota daemon for replicated v...</li> </ul>"},{"location":"release-notes/9.2/","title":"Release notes for Gluster 9.2","text":"<p>Release date: 17-May-2021</p> <p>This is a bugfix and improvement release. The release notes for 9.0, 9.1 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 30th Jun, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/9.2/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>After upgrade on release 9.1 glusterd protocol is broken #2351</li> <li>Disable lookup-optimize by default in the virt group #2253</li> </ul>"},{"location":"release-notes/9.2/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.2/</p>"},{"location":"release-notes/9.2/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#1909 core: Avoid several dict OR key is NULL message in brick logs</li> <li>#2161 Crash caused by memory corruption</li> <li>#2232 \"Invalid argument\" when reading a directory with gfapi</li> <li>#2253 Disable lookup-optimize by default in the virt group</li> <li>#2313 Long setting names mess up the columns and break parsing</li> <li>#2337 memory leak observed in lock fop</li> <li>#2351 After upgrade on release 9.1 glusterd protocol is broken</li> <li>#2353 Permission issue after upgrading to Gluster v9.1</li> </ul>"},{"location":"release-notes/9.3/","title":"Release notes for Gluster 9.3","text":"<p>Release date: 15-Jul-2021</p> <p>This is a bugfix and improvement release. The release notes for 9.0, 9.1, 9.2 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 30th Aug, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/9.3/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Core dumps on Gluster 9 - 3 replicas #2443</li> <li>geo-rep: Improve handling of gfid mismatches #2423</li> <li>auth.allow list is corrupted after add-brick (buffer overflow?) #2524</li> </ul>"},{"location":"release-notes/9.3/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.3/</p>"},{"location":"release-notes/9.3/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#705 gf_backtrace_save inefficiencies</li> <li>#1000 [bug:1193929] GlusterFS can be improved</li> <li>#1384 mount glusterfs volume, files larger than 64Mb only show 64Mb</li> <li>#2388 Geo-replication gets delayed when there are many renames on primary</li> <li>#2394 Spurious failure in tests/basic/fencing/afr-lock-heal-basic.t</li> <li>#2398 Bitrot and scrub process showed like unknown in the gluster volume</li> <li>#2421 rsync should not try to sync internal xattrs.</li> <li>#2440 Geo-replication not working on Ubuntu 21.04</li> <li>#2443 Core dumps on Gluster 9 - 3 replicas</li> <li>#2470 sharding: [inode.c:1255:__inode_unlink] 0-inode: dentry not found</li> <li>#2524 auth.allow list is corrupted after add-brick (buffer overflow?)</li> </ul>"},{"location":"release-notes/9.4/","title":"Release notes for Gluster 9.4","text":"<p>Release date: 14-Oct-2021</p> <p>This is a bugfix and improvement release. The release notes for 9.0, 9.1, 9.2, 9.3 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 30th Dec, 2021</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/9.4/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Fix changelog History Crawl resume failures after stop #2133</li> <li>Fix Stack overflow when parallel-readdir is enabled #2169</li> <li>Fix rebalance crashes in dht #2239</li> </ul>"},{"location":"release-notes/9.4/#builds-are-available-at-","title":"Builds are available at -","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.4/</p>"},{"location":"release-notes/9.4/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#2133 changelog History Crawl resume fails after stop</li> <li>#2169 Stack overflow when parallel-readdir is enabled</li> <li>#2239 rebalance crashes in dht on master</li> <li>#2625 auth.allow value is corrupted after add-brick operation</li> <li>#2649 glustershd failed in bind with error \"Address already in use\"</li> <li>#2659 tests/basic/afr/afr-anon-inode.t crashed</li> <li>#2754 It takes a long time to execute the \u201cgluster volume set volumename</li> <li>#2798 FUSE mount option for localtime-logging is not exposed</li> <li>#2690 glusterd: reset mgmt_v3_lock_timeout after it be used</li> <li>#2691 georep-upgrade.t find failures</li> <li>#1101 volume brick fails to come online because other process is using port 49152</li> </ul>"},{"location":"release-notes/9.5/","title":"Release notes for Gluster 9.5","text":"<p>Release date: 1st-Feb-2022</p> <p>This is a bugfix and improvement release. The release notes for 9.0, 9.1, 9.2, 9.3, 9.4 contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE:</p> <ul> <li>Next minor release tentative date: Week of 20th Aug, 2022   (As published in the Gluster Community Meeting, Release 9 will release updates every 6 months now on)</li> <li>Users are highly encouraged to upgrade to newer releases of GlusterFS.</li> </ul>"},{"location":"release-notes/9.5/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Fix rebalance of sparse files (https://github.com/gluster/glusterfs/issues/2317)</li> <li>Fix anomalous brick offline scenario on non rebooted node by preventing bricks from connecting to a backup volfile (https://github.com/gluster/glusterfs/issues/2480)</li> </ul>"},{"location":"release-notes/9.5/#builds-are-available-at-","title":"Builds are available at -","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.5/</p>"},{"location":"release-notes/9.5/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#2317 Fix rebalance of sparse files</li> <li>#2414 Prefer mallinfo2() to mallinfo() if available</li> <li>#2467 Handle failure in fuse to get gids gracefully</li> <li>#2480 Prevent bricks from connecting to a backup volfile and fix brick offline scenario on non rebooted node</li> <li>#2846 Avoid redundant logs in glusterd at info level</li> <li>#2903 Fix worker disconnect due to AttributeError in geo-replication</li> <li>#2939 Remove the deprecated commands from gluster man page</li> </ul>"},{"location":"release-notes/9.6/","title":"Release notes for Gluster 9.6","text":"<p>This is a bugfix and improvement release. The release notes for 9.0, 9.1, 9.2, 9.3, 9.4, 9.5  contain a listing of all the new features that were added and bugs fixed in the GlusterFS 9 stable release.</p> <p>NOTE: - Next minor release tentative date: Week of 20th Feb, 2023 - Users are highly encouraged to upgrade to newer releases of GlusterFS.</p>"},{"location":"release-notes/9.6/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>Optimize server functionality by enhancing server_process_event_upcall code path during the handling of upcall event</li> <li>Fix all bricks not starting issue on node reboot when brick count is high(&gt;750)</li> </ul>"},{"location":"release-notes/9.6/#builds-are-available-at","title":"Builds are available at","text":"<p>https://download.gluster.org/pub/gluster/glusterfs/9/9.6/</p>"},{"location":"release-notes/9.6/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#2080 Fix inability of glustereventsd from binding to the UDP port because of selinux policies</li> <li>#2962 Fix volume create without disperse count failures with ip addresses</li> <li>#3177 Locks: Optimize the interrupt flow of POSIX locks</li> <li>#3187 Fix Locks xlator leaks fd's when a blocked posix lock is cancelled</li> <li>#3191 Fix double free issue in the cbk function dht_common_mark_mdsxattr_cbk</li> <li>#3321 Optimize server functionality by enhancing server_process_event_upcall code path during the handling of upcall event</li> <li>#3332 Fix garbage value reported by static analyser</li> <li>#3334 Fix errors and timeouts when creating qcow2 file via libgfapi</li> <li>#3375 Fix all bricks not starting issue on node reboot when brick count is high(&gt;750)</li> <li>#3470 Fix spurious crash when \"peer probing\" a non existing host name</li> </ul>"},{"location":"release-notes/geo-rep-in-3.7/","title":"Geo rep in 3.7","text":""},{"location":"release-notes/geo-rep-in-3.7/#improved-node-fail-over-issues-handling-by-using-gluster-meta-volume","title":"Improved Node fail-over issues handling by using Gluster Meta Volume","text":"<p>In replica pairs one Geo-rep worker should be active and all the other replica workers should be passive. When Active worker goes down, Passive worker will become active. In previous releases, this logic was based on node-uuid, but now it is based on Lock file in Meta Volume. Now it is possible to decide Active/Passive more accurately and multiple Active worker scenarios minimized.</p> <p>Geo-rep works without Meta Volume also, this feature is backward compatible. By default config option <code>use_meta_volume</code> is False. This feature can be turned on with geo-rep config <code>use_meta_volume</code> true. Without this feature Geo-rep works as it was working in previous releases.</p> <p>Issues if meta_volume is turned off:</p> <ol> <li> <p>Multiple workers becoming active and participate in    syncing. Duplicate efforts and all the issues related to concurrent    execution exists.</p> </li> <li> <p>Failover only works at node level, if a brick process goes down but    node is alive then fail-back will not happen and delay in syncing.</p> </li> <li> <p>Very difficult documented steps about placements of bricks in case    of replica 3. For example, first brick in each replica should not be    placed in same node. etc.</p> </li> <li> <p>Consuming Changelogs from previously failed node when it comes    back, which may lead to issues like delayed syncing and data    inconsistencies in case of Renames.</p> </li> </ol> <p>Fixes: 1196632, 1217939</p>"},{"location":"release-notes/geo-rep-in-3.7/#improved-historical-changelogs-consumption","title":"Improved Historical Changelogs consumption","text":"<p>Support for consuming Historical Changelogs introduced in previous releases, with this release this is more stable and improved. Use of Filesystem crawl is minimized and limited only during initial sync.In previous release, Node reboot or brick process going down was treated as Changelog Breakage and Geo-rep was fallback to XSync for that duration. With this release, Changelog session will be considered broken only if Changelog is turned off. All the other scenarios considered as safe.</p> <p>This feature is also required by glusterfind.</p> <p>Fixes: 1217944</p>"},{"location":"release-notes/geo-rep-in-3.7/#improved-status-and-checkpoint","title":"Improved Status and Checkpoint","text":"<p>Status got many improvements, Showing accurate details of Session info, User info, Slave node to which master node is connected, Last Synced Time etc. Initializing time is reduced, Status change will happen as soon as geo-rep workers ready.(In previous releases Initializing time was 60 sec)</p> <p>Fixes: 1212410</p>"},{"location":"release-notes/geo-rep-in-3.7/#worker-restart-improvements","title":"Worker Restart improvements","text":"<p>Workers going down and coming back is very common in geo-rep for reasons like network failure, Slave node going down etc. When it comes up it has to reprocess the changelogs again because worker died before updating the last sync time. The batch size is now optimized such that the amount of reprocess is minimized.</p> <p>Fixes: 1210965</p>"},{"location":"release-notes/geo-rep-in-3.7/#improved-rename-handling","title":"Improved RENAME handling","text":"<p>When renamed filename hash falls to other brick, respective brick's changelog records RENAME, but rest of the fops like CREATE, DATA are recorded in first brick. Each Geo-rep worker per brick syncs data to Slave Volume independently, These things go out of order and Master and Slave Volume become inconsistent. With the help of DHT team, RENAMEs are recorded where CREATE and DATA are recorded.</p> <p>Fixes: 1141379</p>"},{"location":"release-notes/geo-rep-in-3.7/#syncing-xattrs-and-acls","title":"Syncing xattrs and acls","text":"<p>Syncing both xattrs and acls to Slave cluster are now supported. These can be disabled setting config options sync-xattrs or sync-acls to false.</p> <p>Fixes: 1187021, 1196690</p>"},{"location":"release-notes/geo-rep-in-3.7/#identifying-entry-failures","title":"Identifying Entry failures","text":"<p>Logging improvements to identify exact reason for Entry failures, GFID conflicts, I/O errors etc. Safe errors are not logged in Mount logs in Slave, Safe errors are post processed and only genuine errors are logged in Master logs.</p> <p>Fixes: 1207115, 1210562</p>"},{"location":"release-notes/geo-rep-in-3.7/#improved-rm-rf-issues-handling","title":"Improved rm -rf issues handling","text":"<p>Successive deletes and creates had issues, Handling these issues minimized. (Not completely fixed since it depends on Open issues of DHT)</p> <p>Fixes: 1211037</p>"},{"location":"release-notes/geo-rep-in-3.7/#non-root-geo-replication-simplified","title":"Non root Geo-replication simplified","text":"<p>Manual editing of Glusterd vol file is simplified by introducing <code>gluster system:: mountbroker</code> command</p> <p>Fixes: 1136312</p>"},{"location":"release-notes/geo-rep-in-3.7/#logging-rsync-performance-on-request-basis","title":"Logging Rsync performance on request basis","text":"<p>Rsync performance can be evaluated by enabling a config option. After this Geo-rep starts recording rsync performance in log file, which can be post processed to get meaningful metrics.</p> <p>Fixes: 764827</p>"},{"location":"release-notes/geo-rep-in-3.7/#initial-sync-issues-due-to-upper-limit-comparison-during-filesystem-crawl","title":"Initial sync issues due to upper limit comparison during Filesystem Crawl","text":"<p>Bug fix, Fixed wrong logic in Xsync Change detection. Upper limit was considered during xsync crawl. Geo-rep XSync was missing many files considering Changelog will take care. But Changelog will not have complete details of the files created before enabling Geo-replication.</p> <p>When rsync/tarssh fails, geo-rep is now capable of identifying safe errors and continue syncing by ignoring those issues. For example, rsync fails to sync a file which is deleted in master during sync. This can be ignored since the file is unlinked and no need to try syncing.</p> <p>Fixes: 1200733</p>"},{"location":"release-notes/geo-rep-in-3.7/#changelog-failures-and-brick-failures-handling","title":"Changelog failures and Brick failures handling","text":"<p>When Brick process goes down, or any Changelog exception Geo-rep worker was failing back to XSync crawl. Which was bad since Xsync fails to identify Deletes and Renames. Now this is prevented, worker goes to Faulty and wait for that Brick process to comeback.</p> <p>Fixes: 1202649</p>"},{"location":"release-notes/geo-rep-in-3.7/#archive-changelogs-in-working-directory-after-processing","title":"Archive Changelogs in working directory after processing","text":"<p>Archive Changelogs after processing not generate empty changelogs when no data is available. This is great improvement in terms of reducing the inode consumption in Brick.</p> <p>Fixes: 1169331</p>"},{"location":"release-notes/geo-rep-in-3.7/#virtual-xattr-to-trigger-sync","title":"Virtual xattr to trigger sync","text":"<p>Since we use Historical Changelogs when Geo-rep worker restarts. Only <code>SETATTR</code> will be recorded when we touch a file. In previous versions, Re triggering a file sync is stop geo-rep, touch files and start geo-replication. Now touch will not help since it records only <code>SETATTR</code>. Virtual Xattr is introduced to retrigger the sync. No Geo-rep restart required.</p> <p>Fixes: 1176934</p>"},{"location":"release-notes/geo-rep-in-3.7/#ssh-keys-overwrite-issues-during-geo-rep-create","title":"SSH Keys overwrite issues during Geo-rep create","text":"<p>Parallel creates or multiple Geo-rep session creation was overwriting the pem keys written by first one. This leads to connectivity issues when Geo-rep is started.</p> <p>Fixes: 1183229</p>"},{"location":"release-notes/geo-rep-in-3.7/#ownership-sync-improvements","title":"Ownership sync improvements","text":"<p>Geo-rep was failing to sync ownership information from master cluster to Slave cluster.</p> <p>Fixes: 1104954</p>"},{"location":"release-notes/geo-rep-in-3.7/#slave-node-failover-handling-improvements","title":"Slave node failover handling improvements","text":"<p>When slave node goes down, Master worker which is connected to that brick will go to faulty. Now it tries to connect to another slave node instead of waiting for that Slave node to come back.</p> <p>Fixes: 1151412</p>"},{"location":"release-notes/geo-rep-in-3.7/#support-of-ssh-keys-custom-location","title":"Support of ssh keys custom location","text":"<p>If ssh <code>authorized_keys</code> are configured in non standard location instead of default <code>$HOME/.ssh/authorized_keys</code>. Geo-rep create was failing, now this is supported.</p> <p>Fixes: 1181117</p>"},{"location":"release-notes/glusterfs-selinux2.0.1/","title":"Release notes for glusterfs-selinux 2.0.1","text":"<p>This is a bugfix and improvement release.</p>"},{"location":"release-notes/glusterfs-selinux2.0.1/#important-fixes-in-this-release","title":"Important fixes in this release","text":"<ul> <li>#rhbz1955415 glusterfs-selinux package should own the files created by it</li> <li>#20 Fixing verification failure for ghost</li> <li>#rhbz1779052 Adds rule to allow glusterd to access RDMA socket</li> </ul>"},{"location":"release-notes/glusterfs-selinux2.0.1/#issues-addressed-in-this-release","title":"Issues addressed in this release","text":"<ul> <li>#rhbz1955415 glusterfs-selinux package should own the files created by it</li> <li>#22 Fixed mixed use of tabs and spaces (rpmlint warning)</li> <li>#20 Fixing verification failure for ghost file</li> <li>#rhbz1779052 Adds rule to allow glusterd to access RDMA socket</li> <li>#15 Modifying the path provided for glustereventsd.py"}]}